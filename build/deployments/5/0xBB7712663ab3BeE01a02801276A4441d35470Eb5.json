{"abi": [{"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "account", "type": "address"}, {"indexed": true, "internalType": "uint16", "name": "currencyId", "type": "uint16"}, {"indexed": false, "internalType": "uint40", "name": "maturity", "type": "uint40"}, {"indexed": false, "internalType": "int256", "name": "netAssetCash", "type": "int256"}, {"indexed": false, "internalType": "int256", "name": "netfCash", "type": "int256"}, {"indexed": false, "internalType": "int256", "name": "netLiquidityTokens", "type": "int256"}], "name": "AddRemoveLiquidity", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "account", "type": "address"}, {"indexed": true, "internalType": "uint16", "name": "currencyId", "type": "uint16"}, {"indexed": false, "internalType": "uint40", "name": "maturity", "type": "uint40"}, {"indexed": false, "internalType": "int256", "name": "netAssetCash", "type": "int256"}, {"indexed": false, "internalType": "int256", "name": "netfCash", "type": "int256"}], "name": "LendBorrowTrade", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "settledAccount", "type": "address"}, {"indexed": true, "internalType": "uint16", "name": "currencyId", "type": "uint16"}, {"indexed": true, "internalType": "address", "name": "settler", "type": "address"}, {"indexed": false, "internalType": "int256", "name": "amountToSettleAsset", "type": "int256"}, {"indexed": false, "internalType": "int256", "name": "fCashAmount", "type": "int256"}], "name": "SettledCashDebt", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "uint16", "name": "currencyId", "type": "uint16"}, {"indexed": true, "internalType": "uint40", "name": "maturity", "type": "uint40"}, {"indexed": true, "internalType": "address", "name": "purchaser", "type": "address"}, {"indexed": false, "internalType": "int256", "name": "fCashAmountToPurchase", "type": "int256"}, {"indexed": false, "internalType": "int256", "name": "netAssetCashNToken", "type": "int256"}], "name": "nTokenResidualPurchase", "type": "event"}], "allSourcePaths": {"0": "/home/jwu/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/contracts/math/SafeMath.sol", "11": "contracts/global/Constants.sol", "12": "contracts/global/Deployments.sol", "13": "contracts/global/LibStorage.sol", "15": "contracts/global/Types.sol", "16": "contracts/internal/AccountContextHandler.sol", "17": "contracts/internal/balances/BalanceHandler.sol", "18": "contracts/internal/balances/Incentives.sol", "19": "contracts/internal/balances/TokenHandler.sol", "2": "/home/jwu/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/contracts/token/ERC20/IERC20.sol", "20": "contracts/internal/balances/protocols/AaveHandler.sol", "21": "contracts/internal/balances/protocols/CompoundHandler.sol", "22": "contracts/internal/balances/protocols/GenericToken.sol", "23": "contracts/internal/markets/AssetRate.sol", "24": "contracts/internal/markets/CashGroup.sol", "25": "contracts/internal/markets/DateTime.sol", "26": "contracts/internal/markets/Market.sol", "28": "contracts/internal/nToken/nTokenHandler.sol", "29": "contracts/internal/nToken/nTokenSupply.sol", "30": "contracts/internal/portfolio/BitmapAssetsHandler.sol", "31": "contracts/internal/portfolio/PortfolioHandler.sol", "32": "contracts/internal/portfolio/TransferAssets.sol", "33": "contracts/internal/settlement/SettleBitmapAssets.sol", "34": "contracts/internal/settlement/SettlePortfolioAssets.sol", "35": "contracts/internal/valuation/AssetHandler.sol", "41": "contracts/math/ABDKMath64x64.sol", "42": "contracts/math/Bitmap.sol", "43": "contracts/math/FloatingPoint56.sol", "44": "contracts/math/SafeInt256.sol", "47": "interfaces/IEIP20NonStandard.sol", "49": "interfaces/aave/ILendingPool.sol", "5": "contracts/external/MigrateIncentives.sol", "53": "interfaces/compound/CErc20Interface.sol", "54": "interfaces/compound/CEtherInterface.sol", "55": "interfaces/compound/CTokenInterface.sol", "56": "interfaces/notional/AssetRateAdapter.sol", "57": "interfaces/notional/IRewarder.sol", "6": "contracts/external/SettleAssetsExternal.sol", "8": "contracts/external/actions/TradingAction.sol"}, "ast": {"absolutePath": "contracts/external/actions/TradingAction.sol", "exportedSymbols": {"ABDKMath64x64": [30312], "AaveHandler": [19763], "AccountBalance": [11250], "AccountContext": [11169], "AccountContextHandler": [24595], "AggregatorInterface": [25425], "AggregatorV2V3Interface": [20063], "AggregatorV3Interface": [25471], "AssetHandler": [31087], "AssetRate": [11943], "AssetRateAdapter": [20107], "AssetRateParameters": [11065], "AssetRateStorage": [11133], "AssetStorageState": [10926], "BalanceAction": [10947], "BalanceActionWithTrades": [10963], "BalanceHandler": [15305], "BalanceState": [11058], "BalanceStorage": [11193], "BatchLend": [10934], "Bitmap": [32274], "BitmapAssetsHandler": [31776], "CErc20Interface": [25371], "CEtherInterface": [25377], "CTokenInterface": [32442], "CashGroup": [16740], "CashGroupParameters": [11074], "CashGroupSettings": [11158], "CompoundHandler": [19954], "Constants": [10894], "Context": [25255], "DateTime": [17379], "Deployments": [19520], "DepositActionType": [10921], "ERC20": [19513], "ETHRate": [11039], "ETHRateStorage": [11128], "ExchangeRate": [17575], "FloatingPoint56": [24860], "FreeCollateral": [26884], "FreeCollateralExternal": [20267], "GenericToken": [15461], "IAToken": [25277], "IATokenFull": [25312], "IEIP20NonStandard": [24930], "IERC20": [12443], "ILendingPool": [20036], "IRewarder": [20054], "IScaledBalanceToken": [25302], "Incentives": [24784], "LendingPoolStorage": [19960], "LibStorage": [10363], "LiquidationFactors": [11017], "Market": [22325], "MarketParameters": [11104], "MarketStorage": [11213], "MigrateIncentives": [31933], "PortfolioAsset": [11087], "PortfolioAssetStorage": [11225], "PortfolioHandler": [23616], "PortfolioState": [11028], "SafeInt256": [12295], "SafeMath": [19010], "SettleAmount": [10968], "SettleAssetsExternal": [20411], "SettleBitmapAssets": [27133], "SettlePortfolioAssets": [27558], "SettlementRateStorage": [11200], "Token": [10979], "TokenHandler": [9266], "TokenStorage": [11115], "TokenType": [10906], "TradeActionType": [10913], "TradingAction": [13902], "TransferAssets": [23847], "VaultAccount": [11370], "VaultAccountSecondaryDebtShareStorage": [11359], "VaultAccountStorage": [11352], "VaultBorrowCapacityStorage": [11278], "VaultConfig": [11312], "VaultConfigStorage": [11273], "VaultSecondaryBorrowStorage": [11285], "VaultSettledAssetsStorage": [11330], "VaultState": [11345], "VaultStateStorage": [11325], "ifCashStorage": [11216], "nTokenCalculations": [33006], "nTokenContext": [11184], "nTokenHandler": [18655], "nTokenPortfolio": [10994], "nTokenSupply": [25232], "nTokenTotalSupplyStorage": [11239], "nTokenTotalSupplyStorage_deprecated": [11232]}, "id": 13903, "license": "GPL-3.0-only", "nodeType": "SourceUnit", "nodes": [{"id": 12445, "literals": ["solidity", "=", "0.7", ".6"], "nodeType": "PragmaDirective", "src": "41:23:8"}, {"id": 12446, "literals": ["abicoder", "v2"], "nodeType": "PragmaDirective", "src": "65:19:8"}, {"absolutePath": "contracts/external/FreeCollateralExternal.sol", "file": "../FreeCollateralExternal.sol", "id": 12447, "nodeType": "ImportDirective", "scope": 13903, "sourceUnit": 20268, "src": "86:39:8", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/external/SettleAssetsExternal.sol", "file": "../SettleAssetsExternal.sol", "id": 12448, "nodeType": "ImportDirective", "scope": 13903, "sourceUnit": 20412, "src": "126:37:8", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/Market.sol", "file": "../../internal/markets/Market.sol", "id": 12449, "nodeType": "ImportDirective", "scope": 13903, "sourceUnit": 22326, "src": "164:43:8", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/CashGroup.sol", "file": "../../internal/markets/CashGroup.sol", "id": 12450, "nodeType": "ImportDirective", "scope": 13903, "sourceUnit": 16741, "src": "208:46:8", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/AssetRate.sol", "file": "../../internal/markets/AssetRate.sol", "id": 12451, "nodeType": "ImportDirective", "scope": 13903, "sourceUnit": 11944, "src": "255:46:8", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/balances/BalanceHandler.sol", "file": "../../internal/balances/BalanceHandler.sol", "id": 12452, "nodeType": "ImportDirective", "scope": 13903, "sourceUnit": 15306, "src": "302:52:8", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/portfolio/PortfolioHandler.sol", "file": "../../internal/portfolio/PortfolioHandler.sol", "id": 12453, "nodeType": "ImportDirective", "scope": 13903, "sourceUnit": 23617, "src": "355:55:8", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/portfolio/TransferAssets.sol", "file": "../../internal/portfolio/TransferAssets.sol", "id": 12454, "nodeType": "ImportDirective", "scope": 13903, "sourceUnit": 23848, "src": "411:53:8", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/math/SafeInt256.sol", "file": "../../math/SafeInt256.sol", "id": 12455, "nodeType": "ImportDirective", "scope": 13903, "sourceUnit": 12296, "src": "465:35:8", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "/home/jwu/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/contracts/math/SafeMath.sol", "file": "@openzeppelin/contracts/math/SafeMath.sol", "id": 12456, "nodeType": "ImportDirective", "scope": 13903, "sourceUnit": 19011, "src": "501:51:8", "symbolAliases": [], "unitAlias": ""}, {"abstract": false, "baseContracts": [], "contractDependencies": [], "contractKind": "library", "fullyImplemented": true, "id": 13902, "linearizedBaseContracts": [13902], "name": "TradingAction", "nodeType": "ContractDefinition", "nodes": [{"id": 12459, "libraryName": {"id": 12457, "name": "PortfolioHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 23616, "src": "588:16:8", "typeDescriptions": {"typeIdentifier": "t_contract$_PortfolioHandler_$23616", "typeString": "library PortfolioHandler"}}, "nodeType": "UsingForDirective", "src": "582:42:8", "typeName": {"id": 12458, "name": "PortfolioState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11028, "src": "609:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$11028_storage_ptr", "typeString": "struct PortfolioState"}}}, {"id": 12462, "libraryName": {"id": 12460, "name": "AccountContextHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 24595, "src": "635:21:8", "typeDescriptions": {"typeIdentifier": "t_contract$_AccountContextHandler_$24595", "typeString": "library AccountContextHandler"}}, "nodeType": "UsingForDirective", "src": "629:47:8", "typeName": {"id": 12461, "name": "AccountContext", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11169, "src": "661:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_storage_ptr", "typeString": "struct AccountContext"}}}, {"id": 12465, "libraryName": {"id": 12463, "name": "Market", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 22325, "src": "687:6:8", "typeDescriptions": {"typeIdentifier": "t_contract$_Market_$22325", "typeString": "library Market"}}, "nodeType": "UsingForDirective", "src": "681:34:8", "typeName": {"id": 12464, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11104, "src": "698:16:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_storage_ptr", "typeString": "struct MarketParameters"}}}, {"id": 12468, "libraryName": {"id": 12466, "name": "CashGroup", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 16740, "src": "726:9:8", "typeDescriptions": {"typeIdentifier": "t_contract$_CashGroup_$16740", "typeString": "library CashGroup"}}, "nodeType": "UsingForDirective", "src": "720:40:8", "typeName": {"id": 12467, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11074, "src": "740:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_storage_ptr", "typeString": "struct CashGroupParameters"}}}, {"id": 12471, "libraryName": {"id": 12469, "name": "AssetRate", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11943, "src": "771:9:8", "typeDescriptions": {"typeIdentifier": "t_contract$_AssetRate_$11943", "typeString": "library AssetRate"}}, "nodeType": "UsingForDirective", "src": "765:40:8", "typeName": {"id": 12470, "name": "AssetRateParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11065, "src": "785:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_AssetRateParameters_$11065_storage_ptr", "typeString": "struct AssetRateParameters"}}}, {"id": 12474, "libraryName": {"id": 12472, "name": "SafeInt256", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 12295, "src": "816:10:8", "typeDescriptions": {"typeIdentifier": "t_contract$_SafeInt256_$12295", "typeString": "library SafeInt256"}}, "nodeType": "UsingForDirective", "src": "810:28:8", "typeName": {"id": 12473, "name": "int256", "nodeType": "ElementaryTypeName", "src": "831:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}}, {"id": 12477, "libraryName": {"id": 12475, "name": "SafeMath", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 19010, "src": "849:8:8", "typeDescriptions": {"typeIdentifier": "t_contract$_SafeMath_$19010", "typeString": "library SafeMath"}}, "nodeType": "UsingForDirective", "src": "843:27:8", "typeName": {"id": 12476, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "862:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}}, {"anonymous": false, "id": 12489, "name": "LendBorrowTrade", "nodeType": "EventDefinition", "parameters": {"id": 12488, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12479, "indexed": true, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 12489, "src": "907:23:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 12478, "name": "address", "nodeType": "ElementaryTypeName", "src": "907:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 12481, "indexed": true, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 12489, "src": "940:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 12480, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "940:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 12483, "indexed": false, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 12489, "src": "975:15:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}, "typeName": {"id": 12482, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "975:6:8", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "visibility": "internal"}, {"constant": false, "id": 12485, "indexed": false, "mutability": "mutable", "name": "netAssetCash", "nodeType": "VariableDeclaration", "scope": 12489, "src": "1000:19:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12484, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1000:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 12487, "indexed": false, "mutability": "mutable", "name": "netfCash", "nodeType": "VariableDeclaration", "scope": 12489, "src": "1029:15:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12486, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1029:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "897:153:8"}, "src": "876:175:8"}, {"anonymous": false, "id": 12503, "name": "AddRemoveLiquidity", "nodeType": "EventDefinition", "parameters": {"id": 12502, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12491, "indexed": true, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 12503, "src": "1091:23:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 12490, "name": "address", "nodeType": "ElementaryTypeName", "src": "1091:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 12493, "indexed": true, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 12503, "src": "1124:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 12492, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "1124:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 12495, "indexed": false, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 12503, "src": "1159:15:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}, "typeName": {"id": 12494, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "1159:6:8", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "visibility": "internal"}, {"constant": false, "id": 12497, "indexed": false, "mutability": "mutable", "name": "netAssetCash", "nodeType": "VariableDeclaration", "scope": 12503, "src": "1184:19:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12496, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1184:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 12499, "indexed": false, "mutability": "mutable", "name": "netfCash", "nodeType": "VariableDeclaration", "scope": 12503, "src": "1213:15:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12498, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1213:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 12501, "indexed": false, "mutability": "mutable", "name": "netLiquidityTokens", "nodeType": "VariableDeclaration", "scope": 12503, "src": "1238:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12500, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1238:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "1081:188:8"}, "src": "1057:213:8"}, {"anonymous": false, "id": 12515, "name": "SettledCashDebt", "nodeType": "EventDefinition", "parameters": {"id": 12514, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12505, "indexed": true, "mutability": "mutable", "name": "settledAccount", "nodeType": "VariableDeclaration", "scope": 12515, "src": "1307:30:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 12504, "name": "address", "nodeType": "ElementaryTypeName", "src": "1307:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 12507, "indexed": true, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 12515, "src": "1347:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 12506, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "1347:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 12509, "indexed": true, "mutability": "mutable", "name": "settler", "nodeType": "VariableDeclaration", "scope": 12515, "src": "1382:23:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 12508, "name": "address", "nodeType": "ElementaryTypeName", "src": "1382:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 12511, "indexed": false, "mutability": "mutable", "name": "amountToSettleAsset", "nodeType": "VariableDeclaration", "scope": 12515, "src": "1415:26:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12510, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1415:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 12513, "indexed": false, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 12515, "src": "1451:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12512, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1451:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "1297:178:8"}, "src": "1276:200:8"}, {"anonymous": false, "id": 12527, "name": "nTokenResidualPurchase", "nodeType": "EventDefinition", "parameters": {"id": 12526, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12517, "indexed": true, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 12527, "src": "1520:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 12516, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "1520:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 12519, "indexed": true, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 12527, "src": "1555:23:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}, "typeName": {"id": 12518, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "1555:6:8", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "visibility": "internal"}, {"constant": false, "id": 12521, "indexed": true, "mutability": "mutable", "name": "purchaser", "nodeType": "VariableDeclaration", "scope": 12527, "src": "1588:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 12520, "name": "address", "nodeType": "ElementaryTypeName", "src": "1588:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 12523, "indexed": false, "mutability": "mutable", "name": "fCashAmountToPurchase", "nodeType": "VariableDeclaration", "scope": 12527, "src": "1623:28:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12522, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1623:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 12525, "indexed": false, "mutability": "mutable", "name": "netAssetCashNToken", "nodeType": "VariableDeclaration", "scope": 12527, "src": "1661:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12524, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1661:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "1510:182:8"}, "src": "1482:211:8"}, {"canonicalName": "TradingAction.TradeContext", "id": 12540, "members": [{"constant": false, "id": 12529, "mutability": "mutable", "name": "cash", "nodeType": "VariableDeclaration", "scope": 12540, "src": "1781:11:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12528, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1781:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 12531, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 12540, "src": "1802:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12530, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1802:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 12533, "mutability": "mutable", "name": "fee", "nodeType": "VariableDeclaration", "scope": 12540, "src": "1830:10:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12532, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1830:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 12535, "mutability": "mutable", "name": "netCash", "nodeType": "VariableDeclaration", "scope": 12540, "src": "1850:14:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12534, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1850:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 12537, "mutability": "mutable", "name": "totalFee", "nodeType": "VariableDeclaration", "scope": 12540, "src": "1874:15:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12536, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1874:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 12539, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 12540, "src": "1899:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12538, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "1899:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "name": "TradeContext", "nodeType": "StructDefinition", "scope": 13902, "src": "1751:172:8", "visibility": "public"}, {"body": {"id": 12587, "nodeType": "Block", "src": "2243:336:8", "statements": [{"assignments": [12551], "declarations": [{"constant": false, "id": 12551, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 12587, "src": "2253:36:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 12550, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11074, "src": "2253:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}], "id": 12556, "initialValue": {"arguments": [{"id": 12554, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12543, "src": "2325:10:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 12552, "name": "CashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 16740, "src": "2292:9:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_CashGroup_$16740_$", "typeString": "type(library CashGroup)"}}, "id": 12553, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "buildCashGroupStateful", "nodeType": "MemberAccess", "referencedDeclaration": 16739, "src": "2292:32:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$returns$_t_struct$_CashGroupParameters_$11074_memory_ptr_$", "typeString": "function (uint16) returns (struct CashGroupParameters memory)"}}, "id": 12555, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2292:44:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "nodeType": "VariableDeclarationStatement", "src": "2253:83:8"}, {"assignments": [12558], "declarations": [{"constant": false, "id": 12558, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 12587, "src": "2346:30:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 12557, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11104, "src": "2346:16:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "id": 12559, "nodeType": "VariableDeclarationStatement", "src": "2346:30:8"}, {"assignments": [12561], "declarations": [{"constant": false, "id": 12561, "mutability": "mutable", "name": "tradeType", "nodeType": "VariableDeclaration", "scope": 12587, "src": "2386:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, "typeName": {"id": 12560, "name": "TradeActionType", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 10913, "src": "2386:15:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "visibility": "internal"}], "id": 12574, "initialValue": {"arguments": [{"arguments": [{"arguments": [{"arguments": [{"id": 12569, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12545, "src": "2451:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 12568, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "2444:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_bytes1_$", "typeString": "type(bytes1)"}, "typeName": {"id": 12567, "name": "bytes1", "nodeType": "ElementaryTypeName", "src": "2444:6:8", "typeDescriptions": {}}}, "id": 12570, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2444:13:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 12566, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "2438:5:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 12565, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "2438:5:8", "typeDescriptions": {}}}, "id": 12571, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2438:20:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 12564, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "2430:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 12563, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2430:7:8", "typeDescriptions": {}}}, "id": 12572, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2430:29:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 12562, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10913, "src": "2414:15:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$10913_$", "typeString": "type(enum TradeActionType)"}}, "id": 12573, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2414:46:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "nodeType": "VariableDeclarationStatement", "src": "2386:74:8"}, {"expression": {"id": 12585, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 12575, "name": "netAssetCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12548, "src": "2472:12:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, null], "id": 12576, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "2471:21:8", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$__$", "typeString": "tuple(int256,)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 12578, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12551, "src": "2519:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 12579, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12558, "src": "2530:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 12580, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12561, "src": "2538:9:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, {"expression": {"id": 12581, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "2549:5:8", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 12582, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "2549:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 12583, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12545, "src": "2566:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 12577, "name": "_executeLendBorrowTrade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13309, "src": "2495:23:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CashGroupParameters_$11074_memory_ptr_$_t_struct$_MarketParameters_$11104_memory_ptr_$_t_enum$_TradeActionType_$10913_$_t_uint256_$_t_bytes32_$returns$_t_int256_$_t_int256_$", "typeString": "function (struct CashGroupParameters memory,struct MarketParameters memory,enum TradeActionType,uint256,bytes32) returns (int256,int256)"}}, "id": 12584, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2495:77:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "src": "2471:101:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12586, "nodeType": "ExpressionStatement", "src": "2471:101:8"}]}, "documentation": {"id": 12541, "nodeType": "StructuredDocumentation", "src": "1929:193:8", "text": "@notice Executes a trade for leveraged vaults (they can only lend or borrow).\n @param currencyId the currency id to lend or borrow\n @param trade the bytes32 encoded trade data"}, "functionSelector": "e50f349e", "id": 12588, "implemented": true, "kind": "function", "modifiers": [], "name": "executeVaultTrade", "nodeType": "FunctionDefinition", "parameters": {"id": 12546, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12543, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 12588, "src": "2154:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 12542, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "2154:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 12545, "mutability": "mutable", "name": "trade", "nodeType": "VariableDeclaration", "scope": 12588, "src": "2173:13:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 12544, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "2173:7:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "2153:34:8"}, "returnParameters": {"id": 12549, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12548, "mutability": "mutable", "name": "netAssetCash", "nodeType": "VariableDeclaration", "scope": 12588, "src": "2222:19:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12547, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2222:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "2221:21:8"}, "scope": 13902, "src": "2127:452:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 12702, "nodeType": "Block", "src": "3277:929:8", "statements": [{"assignments": [12606], "declarations": [{"constant": false, "id": 12606, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 12702, "src": "3287:36:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 12605, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11074, "src": "3287:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}], "id": 12611, "initialValue": {"arguments": [{"id": 12609, "name": "bitmapCurrencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12593, "src": "3359:16:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 12607, "name": "CashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 16740, "src": "3326:9:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_CashGroup_$16740_$", "typeString": "type(library CashGroup)"}}, "id": 12608, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "buildCashGroupStateful", "nodeType": "MemberAccess", "referencedDeclaration": 16739, "src": "3326:32:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$returns$_t_struct$_CashGroupParameters_$11074_memory_ptr_$", "typeString": "function (uint16) returns (struct CashGroupParameters memory)"}}, "id": 12610, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3326:50:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "nodeType": "VariableDeclarationStatement", "src": "3287:89:8"}, {"assignments": [12613], "declarations": [{"constant": false, "id": 12613, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 12702, "src": "3386:30:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 12612, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11104, "src": "3386:16:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "id": 12614, "nodeType": "VariableDeclarationStatement", "src": "3386:30:8"}, {"assignments": [12616], "declarations": [{"constant": false, "id": 12616, "mutability": "mutable", "name": "didIncurDebt", "nodeType": "VariableDeclaration", "scope": 12702, "src": "3426:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 12615, "name": "bool", "nodeType": "ElementaryTypeName", "src": "3426:4:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "id": 12617, "nodeType": "VariableDeclarationStatement", "src": "3426:17:8"}, {"assignments": [12619], "declarations": [{"constant": false, "id": 12619, "mutability": "mutable", "name": "c", "nodeType": "VariableDeclaration", "scope": 12702, "src": "3453:21:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext"}, "typeName": {"id": 12618, "name": "TradeContext", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 12540, "src": "3453:12:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_storage_ptr", "typeString": "struct TradingAction.TradeContext"}}, "visibility": "internal"}], "id": 12620, "nodeType": "VariableDeclarationStatement", "src": "3453:21:8"}, {"expression": {"id": 12626, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 12621, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12619, "src": "3484:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12623, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "blockTime", "nodeType": "MemberAccess", "referencedDeclaration": 12539, "src": "3484:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 12624, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "3498:5:8", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 12625, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "3498:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3484:29:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 12627, "nodeType": "ExpressionStatement", "src": "3484:29:8"}, {"body": {"id": 12695, "nodeType": "Block", "src": "3568:589:8", "statements": [{"assignments": [12640], "declarations": [{"constant": false, "id": 12640, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 12695, "src": "3582:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12639, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3582:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 12641, "nodeType": "VariableDeclarationStatement", "src": "3582:16:8"}, {"expression": {"id": 12658, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 12642, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12640, "src": "3613:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 12643, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12619, "src": "3623:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12644, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cash", "nodeType": "MemberAccess", "referencedDeclaration": 12529, "src": "3623:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"expression": {"id": 12645, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12619, "src": "3631:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12646, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "fCashAmount", "nodeType": "MemberAccess", "referencedDeclaration": 12531, "src": "3631:13:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 12647, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "3612:33:8", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 12649, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12591, "src": "3679:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 12650, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12606, "src": "3704:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 12651, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12613, "src": "3731:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"baseExpression": {"id": 12652, "name": "trades", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12598, "src": "3755:6:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr", "typeString": "bytes32[] calldata"}}, "id": 12654, "indexExpression": {"id": 12653, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12629, "src": "3762:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3755:9:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"expression": {"id": 12655, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12619, "src": "3782:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12656, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "blockTime", "nodeType": "MemberAccess", "referencedDeclaration": 12539, "src": "3782:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 12648, "name": "_executeTrade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12962, "src": "3648:13:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_CashGroupParameters_$11074_memory_ptr_$_t_struct$_MarketParameters_$11104_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "function (address,struct CashGroupParameters memory,struct MarketParameters memory,bytes32,uint256) returns (uint256,int256,int256)"}}, "id": 12657, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3648:159:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "src": "3612:195:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12659, "nodeType": "ExpressionStatement", "src": "3612:195:8"}, {"expression": {"id": 12672, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 12660, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12619, "src": "3822:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12662, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "fCashAmount", "nodeType": "MemberAccess", "referencedDeclaration": 12531, "src": "3822:13:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 12665, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12591, "src": "3890:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 12666, "name": "bitmapCurrencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12593, "src": "3915:16:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 12667, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12640, "src": "3949:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 12668, "name": "nextSettleTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12595, "src": "3975:14:8", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, {"expression": {"id": 12669, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12619, "src": "4007:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12670, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "fCashAmount", "nodeType": "MemberAccess", "referencedDeclaration": 12531, "src": "4007:13:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint40", "typeString": "uint40"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 12663, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31776, "src": "3838:19:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$31776_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 12664, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "addifCashAsset", "nodeType": "MemberAccess", "referencedDeclaration": 31473, "src": "3838:34:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint256,uint256,uint256,int256) returns (int256)"}}, "id": 12671, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3838:196:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "3822:212:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 12673, "nodeType": "ExpressionStatement", "src": "3822:212:8"}, {"expression": {"id": 12682, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 12674, "name": "didIncurDebt", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12616, "src": "4049:12:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 12681, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12675, "name": "didIncurDebt", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12616, "src": "4064:12:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 12679, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 12676, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12619, "src": "4081:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12677, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "fCashAmount", "nodeType": "MemberAccess", "referencedDeclaration": 12531, "src": "4081:13:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "30", "id": 12678, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4097:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "4081:17:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 12680, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "4080:19:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "4064:35:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "4049:50:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 12683, "nodeType": "ExpressionStatement", "src": "4049:50:8"}, {"expression": {"id": 12693, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 12684, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12619, "src": "4113:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12686, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "netCash", "nodeType": "MemberAccess", "referencedDeclaration": 12535, "src": "4113:9:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"id": 12690, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12619, "src": "4139:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12691, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cash", "nodeType": "MemberAccess", "referencedDeclaration": 12529, "src": "4139:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 12687, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12619, "src": "4125:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12688, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "netCash", "nodeType": "MemberAccess", "referencedDeclaration": 12535, "src": "4125:9:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 12689, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 12081, "src": "4125:13:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 12692, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4125:21:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "4113:33:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 12694, "nodeType": "ExpressionStatement", "src": "4113:33:8"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 12635, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12632, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12629, "src": "3544:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 12633, "name": "trades", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12598, "src": "3548:6:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr", "typeString": "bytes32[] calldata"}}, "id": 12634, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "3548:13:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3544:17:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 12696, "initializationExpression": {"assignments": [12629], "declarations": [{"constant": false, "id": 12629, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 12696, "src": "3529:9:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12628, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3529:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 12631, "initialValue": {"hexValue": "30", "id": 12630, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3541:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "3529:13:8"}, "loopExpression": {"expression": {"id": 12637, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "3563:3:8", "subExpression": {"id": 12636, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12629, "src": "3563:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 12638, "nodeType": "ExpressionStatement", "src": "3563:3:8"}, "nodeType": "ForStatement", "src": "3524:633:8"}, {"expression": {"components": [{"expression": {"id": 12697, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12619, "src": "4175:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12698, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "netCash", "nodeType": "MemberAccess", "referencedDeclaration": 12535, "src": "4175:9:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 12699, "name": "didIncurDebt", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12616, "src": "4186:12:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 12700, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "4174:25:8", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_bool_$", "typeString": "tuple(int256,bool)"}}, "functionReturnParameters": 12604, "id": 12701, "nodeType": "Return", "src": "4167:32:8"}]}, "documentation": {"id": 12589, "nodeType": "StructuredDocumentation", "src": "2585:491:8", "text": "@notice Executes trades for a bitmapped portfolio, cannot be called directly\n @param account account to put fCash assets in\n @param bitmapCurrencyId currency id of the bitmap\n @param nextSettleTime used to calculate the relative positions in the bitmap\n @param trades tightly packed array of trades, schema is defined in global/Types.sol\n @return netCash generated by trading\n @return didIncurDebt if the bitmap had an fCash position go negative"}, "functionSelector": "3643f39b", "id": 12703, "implemented": true, "kind": "function", "modifiers": [], "name": "executeTradesBitmapBatch", "nodeType": "FunctionDefinition", "parameters": {"id": 12599, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12591, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 12703, "src": "3124:15:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 12590, "name": "address", "nodeType": "ElementaryTypeName", "src": "3124:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 12593, "mutability": "mutable", "name": "bitmapCurrencyId", "nodeType": "VariableDeclaration", "scope": 12703, "src": "3149:23:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 12592, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "3149:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 12595, "mutability": "mutable", "name": "nextSettleTime", "nodeType": "VariableDeclaration", "scope": 12703, "src": "3182:21:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}, "typeName": {"id": 12594, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "3182:6:8", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "visibility": "internal"}, {"constant": false, "id": 12598, "mutability": "mutable", "name": "trades", "nodeType": "VariableDeclaration", "scope": 12703, "src": "3213:25:8", "stateVariable": false, "storageLocation": "calldata", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr", "typeString": "bytes32[]"}, "typeName": {"baseType": {"id": 12596, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "3213:7:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 12597, "nodeType": "ArrayTypeName", "src": "3213:9:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr", "typeString": "bytes32[]"}}, "visibility": "internal"}], "src": "3114:130:8"}, "returnParameters": {"id": 12604, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12601, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 12703, "src": "3263:6:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12600, "name": "int256", "nodeType": "ElementaryTypeName", "src": "3263:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 12603, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 12703, "src": "3271:4:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 12602, "name": "bool", "nodeType": "ElementaryTypeName", "src": "3271:4:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "3262:14:8"}, "scope": 13902, "src": "3081:1125:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 12834, "nodeType": "Block", "src": "4874:1701:8", "statements": [{"assignments": [12721], "declarations": [{"constant": false, "id": 12721, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 12834, "src": "4884:36:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 12720, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11074, "src": "4884:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}], "id": 12726, "initialValue": {"arguments": [{"id": 12724, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12708, "src": "4956:10:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 12722, "name": "CashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 16740, "src": "4923:9:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_CashGroup_$16740_$", "typeString": "type(library CashGroup)"}}, "id": 12723, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "buildCashGroupStateful", "nodeType": "MemberAccess", "referencedDeclaration": 16739, "src": "4923:32:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$returns$_t_struct$_CashGroupParameters_$11074_memory_ptr_$", "typeString": "function (uint16) returns (struct CashGroupParameters memory)"}}, "id": 12725, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4923:44:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "nodeType": "VariableDeclarationStatement", "src": "4884:83:8"}, {"assignments": [12728], "declarations": [{"constant": false, "id": 12728, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 12834, "src": "4977:30:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 12727, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11104, "src": "4977:16:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "id": 12729, "nodeType": "VariableDeclarationStatement", "src": "4977:30:8"}, {"assignments": [12731], "declarations": [{"constant": false, "id": 12731, "mutability": "mutable", "name": "c", "nodeType": "VariableDeclaration", "scope": 12834, "src": "5017:21:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext"}, "typeName": {"id": 12730, "name": "TradeContext", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 12540, "src": "5017:12:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_storage_ptr", "typeString": "struct TradingAction.TradeContext"}}, "visibility": "internal"}], "id": 12732, "nodeType": "VariableDeclarationStatement", "src": "5017:21:8"}, {"expression": {"id": 12738, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 12733, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12731, "src": "5048:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12735, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "blockTime", "nodeType": "MemberAccess", "referencedDeclaration": 12539, "src": "5048:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 12736, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "5062:5:8", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 12737, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "5062:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5048:29:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 12739, "nodeType": "ExpressionStatement", "src": "5048:29:8"}, {"body": {"id": 12827, "nodeType": "Block", "src": "5132:1392:8", "statements": [{"assignments": [12752], "declarations": [{"constant": false, "id": 12752, "mutability": "mutable", "name": "tradeType", "nodeType": "VariableDeclaration", "scope": 12827, "src": "5146:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, "typeName": {"id": 12751, "name": "TradeActionType", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 10913, "src": "5146:15:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "visibility": "internal"}], "id": 12767, "initialValue": {"arguments": [{"arguments": [{"arguments": [{"arguments": [{"baseExpression": {"id": 12760, "name": "trades", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12713, "src": "5211:6:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr", "typeString": "bytes32[] calldata"}}, "id": 12762, "indexExpression": {"id": 12761, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12741, "src": "5218:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "5211:9:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 12759, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "5204:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_bytes1_$", "typeString": "type(bytes1)"}, "typeName": {"id": 12758, "name": "bytes1", "nodeType": "ElementaryTypeName", "src": "5204:6:8", "typeDescriptions": {}}}, "id": 12763, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5204:17:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 12757, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "5198:5:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 12756, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "5198:5:8", "typeDescriptions": {}}}, "id": 12764, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5198:24:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 12755, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "5190:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 12754, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5190:7:8", "typeDescriptions": {}}}, "id": 12765, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5190:33:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 12753, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10913, "src": "5174:15:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$10913_$", "typeString": "type(enum TradeActionType)"}}, "id": 12766, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5174:50:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "nodeType": "VariableDeclarationStatement", "src": "5146:78:8"}, {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 12776, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, "id": 12771, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12768, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12752, "src": "5260:9:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 12769, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10913, "src": "5273:15:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$10913_$", "typeString": "type(enum TradeActionType)"}}, "id": 12770, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "AddLiquidity", "nodeType": "MemberAccess", "src": "5273:28:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "src": "5260:41:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, "id": 12775, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12772, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12752, "src": "5321:9:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 12773, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10913, "src": "5334:15:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$10913_$", "typeString": "type(enum TradeActionType)"}}, "id": 12774, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "RemoveLiquidity", "nodeType": "MemberAccess", "src": "5334:31:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "src": "5321:44:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "5260:105:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 12814, "nodeType": "Block", "src": "5975:491:8", "statements": [{"assignments": [12783], "declarations": [{"constant": false, "id": 12783, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 12814, "src": "5993:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12782, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5993:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 12784, "nodeType": "VariableDeclarationStatement", "src": "5993:16:8"}, {"expression": {"id": 12801, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 12785, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12783, "src": "6028:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 12786, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12731, "src": "6038:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12787, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cash", "nodeType": "MemberAccess", "referencedDeclaration": 12529, "src": "6038:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"expression": {"id": 12788, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12731, "src": "6046:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12789, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "fCashAmount", "nodeType": "MemberAccess", "referencedDeclaration": 12531, "src": "6046:13:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 12790, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "6027:33:8", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 12792, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12706, "src": "6098:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 12793, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12721, "src": "6127:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 12794, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12728, "src": "6158:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"baseExpression": {"id": 12795, "name": "trades", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12713, "src": "6186:6:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr", "typeString": "bytes32[] calldata"}}, "id": 12797, "indexExpression": {"id": 12796, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12741, "src": "6193:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6186:9:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"expression": {"id": 12798, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12731, "src": "6217:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12799, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "blockTime", "nodeType": "MemberAccess", "referencedDeclaration": 12539, "src": "6217:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 12791, "name": "_executeTrade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12962, "src": "6063:13:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_CashGroupParameters_$11074_memory_ptr_$_t_struct$_MarketParameters_$11104_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "function (address,struct CashGroupParameters memory,struct MarketParameters memory,bytes32,uint256) returns (uint256,int256,int256)"}}, "id": 12800, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6063:183:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "src": "6027:219:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12802, "nodeType": "ExpressionStatement", "src": "6027:219:8"}, {"expression": {"arguments": [{"id": 12806, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12708, "src": "6310:10:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 12807, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12783, "src": "6342:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 12808, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10894, "src": "6372:9:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$10894_$", "typeString": "type(library Constants)"}}, "id": 12809, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "FCASH_ASSET_TYPE", "nodeType": "MemberAccess", "referencedDeclaration": 10824, "src": "6372:26:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, {"expression": {"id": 12810, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12731, "src": "6420:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12811, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "fCashAmount", "nodeType": "MemberAccess", "referencedDeclaration": 12531, "src": "6420:13:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint8", "typeString": "uint8"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 12803, "name": "portfolioState", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12710, "src": "6265:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$11028_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 12805, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "addAsset", "nodeType": "MemberAccess", "referencedDeclaration": 22647, "src": "6265:23:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioState_$11028_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$__$bound_to$_t_struct$_PortfolioState_$11028_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint256,uint256,uint256,int256) pure"}}, "id": 12812, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6265:186:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12813, "nodeType": "ExpressionStatement", "src": "6265:186:8"}]}, "id": 12815, "nodeType": "IfStatement", "src": "5239:1227:8", "trueBody": {"id": 12781, "nodeType": "Block", "src": "5380:589:8", "statements": [{"expression": {"arguments": [{"hexValue": "44697361626c6564", "id": 12778, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "5405:10:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_cc706b0562d4d0480fd55e80d6bbe5abb3f248e31fb8d00e56119227634d3ed3", "typeString": "literal_string \"Disabled\""}, "value": "Disabled"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_stringliteral_cc706b0562d4d0480fd55e80d6bbe5abb3f248e31fb8d00e56119227634d3ed3", "typeString": "literal_string \"Disabled\""}], "id": 12777, "name": "revert", "nodeType": "Identifier", "overloadedDeclarations": [-19, -19], "referencedDeclaration": -19, "src": "5398:6:8", "typeDescriptions": {"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$", "typeString": "function (string memory) pure"}}, "id": 12779, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5398:18:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12780, "nodeType": "ExpressionStatement", "src": "5398:18:8"}]}}, {"expression": {"id": 12825, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 12816, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12731, "src": "6480:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12818, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "netCash", "nodeType": "MemberAccess", "referencedDeclaration": 12535, "src": "6480:9:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"id": 12822, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12731, "src": "6506:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12823, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cash", "nodeType": "MemberAccess", "referencedDeclaration": 12529, "src": "6506:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 12819, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12731, "src": "6492:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12820, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "netCash", "nodeType": "MemberAccess", "referencedDeclaration": 12535, "src": "6492:9:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 12821, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 12081, "src": "6492:13:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 12824, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6492:21:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "6480:33:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 12826, "nodeType": "ExpressionStatement", "src": "6480:33:8"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 12747, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12744, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12741, "src": "5108:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 12745, "name": "trades", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12713, "src": "5112:6:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr", "typeString": "bytes32[] calldata"}}, "id": 12746, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "5112:13:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5108:17:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 12828, "initializationExpression": {"assignments": [12741], "declarations": [{"constant": false, "id": 12741, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 12828, "src": "5093:9:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12740, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5093:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 12743, "initialValue": {"hexValue": "30", "id": 12742, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5105:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "5093:13:8"}, "loopExpression": {"expression": {"id": 12749, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "5127:3:8", "subExpression": {"id": 12748, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12741, "src": "5127:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 12750, "nodeType": "ExpressionStatement", "src": "5127:3:8"}, "nodeType": "ForStatement", "src": "5088:1436:8"}, {"expression": {"components": [{"id": 12829, "name": "portfolioState", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12710, "src": "6542:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$11028_memory_ptr", "typeString": "struct PortfolioState memory"}}, {"expression": {"id": 12830, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12731, "src": "6558:1:8", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$12540_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 12831, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "netCash", "nodeType": "MemberAccess", "referencedDeclaration": 12535, "src": "6558:9:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 12832, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "6541:27:8", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_struct$_PortfolioState_$11028_memory_ptr_$_t_int256_$", "typeString": "tuple(struct PortfolioState memory,int256)"}}, "functionReturnParameters": 12719, "id": 12833, "nodeType": "Return", "src": "6534:34:8"}]}, "documentation": {"id": 12704, "nodeType": "StructuredDocumentation", "src": "4212:436:8", "text": "@notice Executes trades for a bitmapped portfolio, cannot be called directly\n @param account account to put fCash assets in\n @param currencyId currency id to trade\n @param portfolioState used to update the positions in the portfolio\n @param trades tightly packed array of trades, schema is defined in global/Types.sol\n @return resulting portfolio state\n @return netCash generated by trading"}, "functionSelector": "b58f83ed", "id": 12835, "implemented": true, "kind": "function", "modifiers": [], "name": "executeTradesArrayBatch", "nodeType": "FunctionDefinition", "parameters": {"id": 12714, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12706, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 12835, "src": "4695:15:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 12705, "name": "address", "nodeType": "ElementaryTypeName", "src": "4695:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 12708, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 12835, "src": "4720:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 12707, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "4720:6:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 12710, "mutability": "mutable", "name": "portfolioState", "nodeType": "VariableDeclaration", "scope": 12835, "src": "4747:36:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$11028_memory_ptr", "typeString": "struct PortfolioState"}, "typeName": {"id": 12709, "name": "PortfolioState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11028, "src": "4747:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$11028_storage_ptr", "typeString": "struct PortfolioState"}}, "visibility": "internal"}, {"constant": false, "id": 12713, "mutability": "mutable", "name": "trades", "nodeType": "VariableDeclaration", "scope": 12835, "src": "4793:25:8", "stateVariable": false, "storageLocation": "calldata", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr", "typeString": "bytes32[]"}, "typeName": {"baseType": {"id": 12711, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "4793:7:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 12712, "nodeType": "ArrayTypeName", "src": "4793:9:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr", "typeString": "bytes32[]"}}, "visibility": "internal"}], "src": "4685:139:8"}, "returnParameters": {"id": 12719, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12716, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 12835, "src": "4843:21:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$11028_memory_ptr", "typeString": "struct PortfolioState"}, "typeName": {"id": 12715, "name": "PortfolioState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11028, "src": "4843:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$11028_storage_ptr", "typeString": "struct PortfolioState"}}, "visibility": "internal"}, {"constant": false, "id": 12718, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 12835, "src": "4866:6:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12717, "name": "int256", "nodeType": "ElementaryTypeName", "src": "4866:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "4842:31:8"}, "scope": 13902, "src": "4653:1922:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 12961, "nodeType": "Block", "src": "7456:1384:8", "statements": [{"assignments": [12856], "declarations": [{"constant": false, "id": 12856, "mutability": "mutable", "name": "tradeType", "nodeType": "VariableDeclaration", "scope": 12961, "src": "7466:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, "typeName": {"id": 12855, "name": "TradeActionType", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 10913, "src": "7466:15:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "visibility": "internal"}], "id": 12869, "initialValue": {"arguments": [{"arguments": [{"arguments": [{"arguments": [{"id": 12864, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12844, "src": "7531:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 12863, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "7524:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_bytes1_$", "typeString": "type(bytes1)"}, "typeName": {"id": 12862, "name": "bytes1", "nodeType": "ElementaryTypeName", "src": "7524:6:8", "typeDescriptions": {}}}, "id": 12865, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7524:13:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 12861, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "7518:5:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 12860, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "7518:5:8", "typeDescriptions": {}}}, "id": 12866, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7518:20:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 12859, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "7510:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 12858, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7510:7:8", "typeDescriptions": {}}}, "id": 12867, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7510:29:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 12857, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10913, "src": "7494:15:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$10913_$", "typeString": "type(enum TradeActionType)"}}, "id": 12868, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7494:46:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "nodeType": "VariableDeclarationStatement", "src": "7466:74:8"}, {"condition": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, "id": 12873, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12870, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12856, "src": "7554:9:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 12871, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10913, "src": "7567:15:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$10913_$", "typeString": "type(enum TradeActionType)"}}, "id": 12872, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "PurchaseNTokenResidual", "nodeType": "MemberAccess", "src": "7567:38:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "src": "7554:51:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, "id": 12890, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12887, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12856, "src": "7819:9:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 12888, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10913, "src": "7832:15:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$10913_$", "typeString": "type(enum TradeActionType)"}}, "id": 12889, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "SettleCashDebt", "nodeType": "MemberAccess", "src": "7832:30:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "src": "7819:43:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 12912, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, "id": 12907, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12904, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12856, "src": "7990:9:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 12905, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10913, "src": "8003:15:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$10913_$", "typeString": "type(enum TradeActionType)"}}, "id": 12906, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "Lend", "nodeType": "MemberAccess", "src": "8003:20:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "src": "7990:33:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, "id": 12911, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12908, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12856, "src": "8027:9:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 12909, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10913, "src": "8040:15:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$10913_$", "typeString": "type(enum TradeActionType)"}}, "id": 12910, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "Borrow", "nodeType": "MemberAccess", "src": "8040:22:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "src": "8027:35:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "7990:72:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 12957, "nodeType": "Block", "src": "8781:53:8", "statements": [{"expression": {"arguments": [{"hexValue": "496e76616c69642074726164652074797065", "id": 12954, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "8802:20:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_8c2081c7a5c41bdc898663534a06a136ac00f9d6c81c7a4791b3330d35f3a799", "typeString": "literal_string \"Invalid trade type\""}, "value": "Invalid trade type"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_stringliteral_8c2081c7a5c41bdc898663534a06a136ac00f9d6c81c7a4791b3330d35f3a799", "typeString": "literal_string \"Invalid trade type\""}], "id": 12953, "name": "revert", "nodeType": "Identifier", "overloadedDeclarations": [-19, -19], "referencedDeclaration": -19, "src": "8795:6:8", "typeDescriptions": {"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$", "typeString": "function (string memory) pure"}}, "id": 12955, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8795:28:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12956, "nodeType": "ExpressionStatement", "src": "8795:28:8"}]}, "id": 12958, "nodeType": "IfStatement", "src": "7986:848:8", "trueBody": {"id": 12952, "nodeType": "Block", "src": "8064:711:8", "statements": [{"expression": {"id": 12923, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 12913, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12851, "src": "8079:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 12914, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12853, "src": "8091:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 12915, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "8078:25:8", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 12917, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12840, "src": "8147:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 12918, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12842, "src": "8174:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 12919, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12856, "src": "8198:9:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, {"id": 12920, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12846, "src": "8225:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 12921, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12844, "src": "8252:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 12916, "name": "_executeLendBorrowTrade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13309, "src": "8106:23:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CashGroupParameters_$11074_memory_ptr_$_t_struct$_MarketParameters_$11104_memory_ptr_$_t_enum$_TradeActionType_$10913_$_t_uint256_$_t_bytes32_$returns$_t_int256_$_t_int256_$", "typeString": "function (struct CashGroupParameters memory,struct MarketParameters memory,enum TradeActionType,uint256,bytes32) returns (int256,int256)"}}, "id": 12922, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8106:165:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "src": "8078:193:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12924, "nodeType": "ExpressionStatement", "src": "8078:193:8"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 12928, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12926, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12851, "src": "8293:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 12927, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "8307:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "8293:15:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "5472616465206661696c65642c206c6971756964697479", "id": 12929, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "8310:25:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_5c6237db371d8fd66064bbc81499f19b42663dfe04c0da45fccffe96b03144b1", "typeString": "literal_string \"Trade failed, liquidity\""}, "value": "Trade failed, liquidity"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_5c6237db371d8fd66064bbc81499f19b42663dfe04c0da45fccffe96b03144b1", "typeString": "literal_string \"Trade failed, liquidity\""}], "id": 12925, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "8285:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 12930, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8285:51:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12931, "nodeType": "ExpressionStatement", "src": "8285:51:8"}, {"expression": {"id": 12935, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 12932, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12849, "src": "8528:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 12933, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12842, "src": "8539:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 12934, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 11091, "src": "8539:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8528:26:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 12936, "nodeType": "ExpressionStatement", "src": "8528:26:8"}, {"eventCall": {"arguments": [{"id": 12938, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12838, "src": "8606:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"arguments": [{"expression": {"id": 12941, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12840, "src": "8638:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 12942, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 11067, "src": "8638:20:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 12940, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "8631:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint16_$", "typeString": "type(uint16)"}, "typeName": {"id": 12939, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "8631:6:8", "typeDescriptions": {}}}, "id": 12943, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8631:28:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"arguments": [{"id": 12946, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12849, "src": "8684:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 12945, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "8677:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}, "typeName": {"id": 12944, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "8677:6:8", "typeDescriptions": {}}}, "id": 12947, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8677:16:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, {"id": 12948, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12851, "src": "8711:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 12949, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12853, "src": "8739:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint40", "typeString": "uint40"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 12937, "name": "LendBorrowTrade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12489, "src": "8573:15:8", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint16_$_t_uint40_$_t_int256_$_t_int256_$returns$__$", "typeString": "function (address,uint16,uint40,int256,int256)"}}, "id": 12950, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8573:191:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12951, "nodeType": "EmitStatement", "src": "8568:196:8"}]}}, "id": 12959, "nodeType": "IfStatement", "src": "7815:1019:8", "trueBody": {"id": 12903, "nodeType": "Block", "src": "7864:116:8", "statements": [{"expression": {"id": 12901, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 12891, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12849, "src": "7879:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 12892, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12851, "src": "7889:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 12893, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12853, "src": "7901:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 12894, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "7878:35:8", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 12896, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12838, "src": "7932:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 12897, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12840, "src": "7941:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 12898, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12846, "src": "7952:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 12899, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12844, "src": "7963:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 12895, "name": "_settleCashDebt", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13494, "src": "7916:15:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_CashGroupParameters_$11074_memory_ptr_$_t_uint256_$_t_bytes32_$returns$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "function (address,struct CashGroupParameters memory,uint256,bytes32) returns (uint256,int256,int256)"}}, "id": 12900, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7916:53:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "src": "7878:91:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12902, "nodeType": "ExpressionStatement", "src": "7878:91:8"}]}}, "id": 12960, "nodeType": "IfStatement", "src": "7550:1284:8", "trueBody": {"id": 12886, "nodeType": "Block", "src": "7607:202:8", "statements": [{"expression": {"id": 12884, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 12874, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12849, "src": "7622:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 12875, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12851, "src": "7632:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 12876, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12853, "src": "7644:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 12877, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "7621:35:8", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 12879, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12838, "src": "7700:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 12880, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12840, "src": "7725:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 12881, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12846, "src": "7752:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 12882, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12844, "src": "7779:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 12878, "name": "_purchaseNTokenResidual", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13739, "src": "7659:23:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_CashGroupParameters_$11074_memory_ptr_$_t_uint256_$_t_bytes32_$returns$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "function (address,struct CashGroupParameters memory,uint256,bytes32) returns (uint256,int256,int256)"}}, "id": 12883, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7659:139:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "src": "7621:177:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12885, "nodeType": "ExpressionStatement", "src": "7621:177:8"}]}}]}, "documentation": {"id": 12836, "nodeType": "StructuredDocumentation", "src": "6581:540:8", "text": "@notice Executes a non-liquidity token trade\n @param account the initiator of the trade\n @param cashGroup parameters for the trade\n @param market market memory location to use\n @param trade bytes32 encoding of the particular trade\n @param blockTime the current block time\n @return maturity of the asset that was traded\n @return cashAmount - a positive or negative cash amount accrued to the account\n @return fCashAmount - a positive or negative fCash amount accrued to the account"}, "id": 12962, "implemented": true, "kind": "function", "modifiers": [], "name": "_executeTrade", "nodeType": "FunctionDefinition", "parameters": {"id": 12847, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12838, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 12962, "src": "7158:15:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 12837, "name": "address", "nodeType": "ElementaryTypeName", "src": "7158:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 12840, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 12962, "src": "7183:36:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 12839, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11074, "src": "7183:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 12842, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 12962, "src": "7229:30:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 12841, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11104, "src": "7229:16:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 12844, "mutability": "mutable", "name": "trade", "nodeType": "VariableDeclaration", "scope": 12962, "src": "7269:13:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 12843, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "7269:7:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 12846, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 12962, "src": "7292:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12845, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7292:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "7148:167:8"}, "returnParameters": {"id": 12854, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12849, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 12962, "src": "7362:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12848, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7362:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 12851, "mutability": "mutable", "name": "cashAmount", "nodeType": "VariableDeclaration", "scope": 12962, "src": "7392:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12850, "name": "int256", "nodeType": "ElementaryTypeName", "src": "7392:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 12853, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 12962, "src": "7423:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12852, "name": "int256", "nodeType": "ElementaryTypeName", "src": "7423:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "7348:103:8"}, "scope": 13902, "src": "7126:1714:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 13182, "nodeType": "Block", "src": "9827:2494:8", "statements": [{"assignments": [12983], "declarations": [{"constant": false, "id": 12983, "mutability": "mutable", "name": "marketIndex", "nodeType": "VariableDeclaration", "scope": 13182, "src": "9837:19:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12982, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9837:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 12993, "initialValue": {"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "id": 12990, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12988, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12973, "src": "9872:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "BinaryOperation", "operator": "<<", "rightExpression": {"hexValue": "38", "id": 12989, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "9881:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_8_by_1", "typeString": "int_const 8"}, "value": "8"}, "src": "9872:10:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 12987, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "9865:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_bytes1_$", "typeString": "type(bytes1)"}, "typeName": {"id": 12986, "name": "bytes1", "nodeType": "ElementaryTypeName", "src": "9865:6:8", "typeDescriptions": {}}}, "id": 12991, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9865:18:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 12985, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "9859:5:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 12984, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "9859:5:8", "typeDescriptions": {}}}, "id": 12992, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9859:25:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "nodeType": "VariableDeclarationStatement", "src": "9837:47:8"}, {"expression": {"arguments": [{"id": 12997, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12969, "src": "9964:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 12998, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12983, "src": "9972:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"hexValue": "74727565", "id": 12999, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "9985:4:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "true"}, {"expression": {"id": 13000, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "9991:5:8", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 13001, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "9991:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 12994, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12967, "src": "9943:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 12996, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadMarket", "nodeType": "MemberAccess", "referencedDeclaration": 15984, "src": "9943:20:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$11074_memory_ptr_$_t_struct$_MarketParameters_$11104_memory_ptr_$_t_uint256_$_t_bool_$_t_uint256_$returns$__$bound_to$_t_struct$_CashGroupParameters_$11074_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory,struct MarketParameters memory,uint256,bool,uint256) view"}}, "id": 13002, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9943:64:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13003, "nodeType": "ExpressionStatement", "src": "9943:64:8"}, {"assignments": [13005], "declarations": [{"constant": false, "id": 13005, "mutability": "mutable", "name": "cashAmount", "nodeType": "VariableDeclaration", "scope": 13182, "src": "10018:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13004, "name": "int256", "nodeType": "ElementaryTypeName", "src": "10018:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 13006, "nodeType": "VariableDeclarationStatement", "src": "10018:17:8"}, {"assignments": [13008], "declarations": [{"constant": false, "id": 13008, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 13182, "src": "10045:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13007, "name": "int256", "nodeType": "ElementaryTypeName", "src": "10045:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 13009, "nodeType": "VariableDeclarationStatement", "src": "10045:18:8"}, {"assignments": [13011], "declarations": [{"constant": false, "id": 13011, "mutability": "mutable", "name": "tokens", "nodeType": "VariableDeclaration", "scope": 13182, "src": "10073:13:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13010, "name": "int256", "nodeType": "ElementaryTypeName", "src": "10073:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 13012, "nodeType": "VariableDeclarationStatement", "src": "10073:13:8"}, {"condition": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, "id": 13016, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13013, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12971, "src": "10100:9:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 13014, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10913, "src": "10113:15:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$10913_$", "typeString": "type(enum TradeActionType)"}}, "id": 13015, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "AddLiquidity", "nodeType": "MemberAccess", "src": "10113:28:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "src": "10100:41:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 13094, "nodeType": "Block", "src": "10921:239:8", "statements": [{"expression": {"id": 13077, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13060, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13011, "src": "10935:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13075, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13068, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 13065, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12973, "src": "10960:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 13064, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "10952:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 13063, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "10952:7:8", "typeDescriptions": {}}}, "id": 13066, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10952:14:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">>", "rightExpression": {"hexValue": "313532", "id": 13067, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10970:3:8", "typeDescriptions": {"typeIdentifier": "t_rational_152_by_1", "typeString": "int_const 152"}, "value": "152"}, "src": "10952:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 13069, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "10951:23:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "&", "rightExpression": {"expression": {"arguments": [{"id": 13072, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "10982:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint88_$", "typeString": "type(uint88)"}, "typeName": {"id": 13071, "name": "uint88", "nodeType": "ElementaryTypeName", "src": "10982:6:8", "typeDescriptions": {}}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_type$_t_uint88_$", "typeString": "type(uint88)"}], "id": 13070, "name": "type", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -27, "src": "10977:4:8", "typeDescriptions": {"typeIdentifier": "t_function_metatype_pure$__$returns$__$", "typeString": "function () pure"}}, "id": 13073, "isConstant": false, "isLValue": false, "isPure": true, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10977:12:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_magic_meta_type_t_uint88", "typeString": "type(uint88)"}}, "id": 13074, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "max", "nodeType": "MemberAccess", "src": "10977:16:8", "typeDescriptions": {"typeIdentifier": "t_uint88", "typeString": "uint88"}}, "src": "10951:42:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 13062, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "10944:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_int256_$", "typeString": "type(int256)"}, "typeName": {"id": 13061, "name": "int256", "nodeType": "ElementaryTypeName", "src": "10944:6:8", "typeDescriptions": {}}}, "id": 13076, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10944:50:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "10935:59:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13078, "nodeType": "ExpressionStatement", "src": "10935:59:8"}, {"expression": {"id": 13086, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 13079, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13005, "src": "11009:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 13080, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13008, "src": "11021:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 13081, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "11008:25:8", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 13084, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13011, "src": "11059:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 13082, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12969, "src": "11036:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 13083, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "removeLiquidity", "nodeType": "MemberAccess", "referencedDeclaration": 20623, "src": "11036:22:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$11104_memory_ptr_$_t_int256_$returns$_t_int256_$_t_int256_$bound_to$_t_struct$_MarketParameters_$11104_memory_ptr_$", "typeString": "function (struct MarketParameters memory,int256) returns (int256,int256)"}}, "id": 13085, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11036:30:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "src": "11008:58:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13087, "nodeType": "ExpressionStatement", "src": "11008:58:8"}, {"expression": {"id": 13092, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13088, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13011, "src": "11080:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 13089, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13011, "src": "11089:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13090, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 12095, "src": "11089:10:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 13091, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11089:12:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "11080:21:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13093, "nodeType": "ExpressionStatement", "src": "11080:21:8"}]}, "id": 13095, "nodeType": "IfStatement", "src": "10096:1064:8", "trueBody": {"id": 13059, "nodeType": "Block", "src": "10143:772:8", "statements": [{"expression": {"id": 13034, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13017, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13005, "src": "10157:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13032, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13025, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 13022, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12973, "src": "10186:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 13021, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "10178:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 13020, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "10178:7:8", "typeDescriptions": {}}}, "id": 13023, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10178:14:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">>", "rightExpression": {"hexValue": "313532", "id": 13024, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10196:3:8", "typeDescriptions": {"typeIdentifier": "t_rational_152_by_1", "typeString": "int_const 152"}, "value": "152"}, "src": "10178:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 13026, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "10177:23:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "&", "rightExpression": {"expression": {"arguments": [{"id": 13029, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "10208:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint88_$", "typeString": "type(uint88)"}, "typeName": {"id": 13028, "name": "uint88", "nodeType": "ElementaryTypeName", "src": "10208:6:8", "typeDescriptions": {}}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_type$_t_uint88_$", "typeString": "type(uint88)"}], "id": 13027, "name": "type", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -27, "src": "10203:4:8", "typeDescriptions": {"typeIdentifier": "t_function_metatype_pure$__$returns$__$", "typeString": "function () pure"}}, "id": 13030, "isConstant": false, "isLValue": false, "isPure": true, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10203:12:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_magic_meta_type_t_uint88", "typeString": "type(uint88)"}}, "id": 13031, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "max", "nodeType": "MemberAccess", "src": "10203:16:8", "typeDescriptions": {"typeIdentifier": "t_uint88", "typeString": "uint88"}}, "src": "10177:42:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 13019, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "10170:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_int256_$", "typeString": "type(int256)"}, "typeName": {"id": 13018, "name": "int256", "nodeType": "ElementaryTypeName", "src": "10170:6:8", "typeDescriptions": {}}}, "id": 13033, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10170:50:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "10157:63:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13035, "nodeType": "ExpressionStatement", "src": "10157:63:8"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 13038, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13036, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13005, "src": "10644:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 13037, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10658:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "10644:15:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 13043, "nodeType": "IfStatement", "src": "10640:41:8", "trueBody": {"expression": {"id": 13041, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13039, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13005, "src": "10661:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 13040, "name": "netCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12977, "src": "10674:7:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "10661:20:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13042, "nodeType": "ExpressionStatement", "src": "10661:20:8"}}, {"expression": {"id": 13051, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 13044, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13011, "src": "10761:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 13045, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13008, "src": "10769:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 13046, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "10760:21:8", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 13049, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13005, "src": "10804:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 13047, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12969, "src": "10784:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 13048, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "addLiquidity", "nodeType": "MemberAccess", "referencedDeclaration": 20538, "src": "10784:19:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$11104_memory_ptr_$_t_int256_$returns$_t_int256_$_t_int256_$bound_to$_t_struct$_MarketParameters_$11104_memory_ptr_$", "typeString": "function (struct MarketParameters memory,int256) returns (int256,int256)"}}, "id": 13050, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10784:31:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "src": "10760:55:8", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13052, "nodeType": "ExpressionStatement", "src": "10760:55:8"}, {"expression": {"id": 13057, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13053, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13005, "src": "10829:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 13054, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13005, "src": "10842:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13055, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 12095, "src": "10842:14:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 13056, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10842:16:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "10829:29:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13058, "nodeType": "ExpressionStatement", "src": "10829:29:8"}]}}, {"id": 13140, "nodeType": "Block", "src": "11170:430:8", "statements": [{"assignments": [13097], "declarations": [{"constant": false, "id": 13097, "mutability": "mutable", "name": "minImpliedRate", "nodeType": "VariableDeclaration", "scope": 13140, "src": "11184:22:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13096, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "11184:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 13107, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13105, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 13102, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12973, "src": "11224:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 13101, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "11216:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 13100, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "11216:7:8", "typeDescriptions": {}}}, "id": 13103, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11216:14:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">>", "rightExpression": {"hexValue": "313230", "id": 13104, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "11234:3:8", "typeDescriptions": {"typeIdentifier": "t_rational_120_by_1", "typeString": "int_const 120"}, "value": "120"}, "src": "11216:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 13099, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "11209:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint32_$", "typeString": "type(uint32)"}, "typeName": {"id": 13098, "name": "uint32", "nodeType": "ElementaryTypeName", "src": "11209:6:8", "typeDescriptions": {}}}, "id": 13106, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11209:29:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint32", "typeString": "uint32"}}, "nodeType": "VariableDeclarationStatement", "src": "11184:54:8"}, {"assignments": [13109], "declarations": [{"constant": false, "id": 13109, "mutability": "mutable", "name": "maxImpliedRate", "nodeType": "VariableDeclaration", "scope": 13140, "src": "11252:22:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13108, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "11252:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 13119, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13117, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 13114, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12973, "src": "11292:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 13113, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "11284:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 13112, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "11284:7:8", "typeDescriptions": {}}}, "id": 13115, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11284:14:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">>", "rightExpression": {"hexValue": "3838", "id": 13116, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "11302:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_88_by_1", "typeString": "int_const 88"}, "value": "88"}, "src": "11284:20:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 13111, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "11277:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint32_$", "typeString": "type(uint32)"}, "typeName": {"id": 13110, "name": "uint32", "nodeType": "ElementaryTypeName", "src": "11277:6:8", "typeDescriptions": {}}}, "id": 13118, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11277:28:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint32", "typeString": "uint32"}}, "nodeType": "VariableDeclarationStatement", "src": "11252:53:8"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13124, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 13121, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12969, "src": "11392:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 13122, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 11099, "src": "11392:22:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"id": 13123, "name": "minImpliedRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13097, "src": "11418:14:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "11392:40:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "5472616465206661696c65642c20736c697070616765", "id": 13125, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "11434:24:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}, "value": "Trade failed, slippage"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}], "id": 13120, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "11384:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 13126, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11384:75:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13127, "nodeType": "ExpressionStatement", "src": "11384:75:8"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13130, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13128, "name": "maxImpliedRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13109, "src": "11477:14:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 13129, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "11495:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "11477:19:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 13139, "nodeType": "IfStatement", "src": "11473:116:8", "trueBody": {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13135, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 13132, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12969, "src": "11522:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 13133, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 11099, "src": "11522:22:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"id": 13134, "name": "maxImpliedRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13109, "src": "11548:14:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "11522:40:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "5472616465206661696c65642c20736c697070616765", "id": 13136, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "11564:24:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}, "value": "Trade failed, slippage"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}], "id": 13131, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "11514:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 13137, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11514:75:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13138, "nodeType": "ExpressionStatement", "src": "11514:75:8"}}]}, {"expression": {"arguments": [{"expression": {"id": 13144, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12967, "src": "11706:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13145, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 11067, "src": "11706:20:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 13146, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12969, "src": "11740:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 13147, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 11091, "src": "11740:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 13148, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10894, "src": "11769:9:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$10894_$", "typeString": "type(library Constants)"}}, "id": 13149, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "FCASH_ASSET_TYPE", "nodeType": "MemberAccess", "referencedDeclaration": 10824, "src": "11769:26:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, {"id": 13150, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13008, "src": "11809:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint8", "typeString": "uint8"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 13141, "name": "portfolioState", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12975, "src": "11669:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$11028_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 13143, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "addAsset", "nodeType": "MemberAccess", "referencedDeclaration": 22647, "src": "11669:23:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioState_$11028_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$__$bound_to$_t_struct$_PortfolioState_$11028_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint256,uint256,uint256,int256) pure"}}, "id": 13151, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11669:161:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13152, "nodeType": "ExpressionStatement", "src": "11669:161:8"}, {"expression": {"arguments": [{"expression": {"id": 13156, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12967, "src": "11919:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13157, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 11067, "src": "11919:20:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 13158, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12969, "src": "11953:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 13159, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 11091, "src": "11953:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13162, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13160, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12983, "src": "11982:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"hexValue": "31", "id": 13161, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "11996:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "11982:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13163, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13011, "src": "12011:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 13153, "name": "portfolioState", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12975, "src": "11882:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$11028_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 13155, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "addAsset", "nodeType": "MemberAccess", "referencedDeclaration": 22647, "src": "11882:23:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioState_$11028_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$__$bound_to$_t_struct$_PortfolioState_$11028_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint256,uint256,uint256,int256) pure"}}, "id": 13164, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11882:145:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13165, "nodeType": "ExpressionStatement", "src": "11882:145:8"}, {"eventCall": {"arguments": [{"id": 13167, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12965, "src": "12075:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"id": 13168, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12967, "src": "12096:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13169, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 11067, "src": "12096:20:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"arguments": [{"expression": {"id": 13172, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12969, "src": "12191:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 13173, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 11091, "src": "12191:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 13171, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "12184:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}, "typeName": {"id": 13170, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "12184:6:8", "typeDescriptions": {}}}, "id": 13174, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12184:23:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, {"id": 13175, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13005, "src": "12221:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 13176, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13008, "src": "12245:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 13177, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13011, "src": "12270:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint40", "typeString": "uint40"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 13166, "name": "AddRemoveLiquidity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12503, "src": "12043:18:8", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint16_$_t_uint40_$_t_int256_$_t_int256_$_t_int256_$returns$__$", "typeString": "function (address,uint16,uint40,int256,int256,int256)"}}, "id": 13178, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12043:243:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13179, "nodeType": "EmitStatement", "src": "12038:248:8"}, {"expression": {"id": 13180, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13005, "src": "12304:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 12981, "id": 13181, "nodeType": "Return", "src": "12297:17:8"}]}, "documentation": {"id": 12963, "nodeType": "StructuredDocumentation", "src": "9439:81:8", "text": "@return cashAmount: a positive or negative cash amount accrued to the account"}, "id": 13183, "implemented": true, "kind": "function", "modifiers": [], "name": "_executeLiquidityTrade", "nodeType": "FunctionDefinition", "parameters": {"id": 12978, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12965, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 13183, "src": "9566:15:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 12964, "name": "address", "nodeType": "ElementaryTypeName", "src": "9566:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 12967, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 13183, "src": "9591:36:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 12966, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11074, "src": "9591:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 12969, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 13183, "src": "9637:30:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 12968, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11104, "src": "9637:16:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 12971, "mutability": "mutable", "name": "tradeType", "nodeType": "VariableDeclaration", "scope": 13183, "src": "9677:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, "typeName": {"id": 12970, "name": "TradeActionType", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 10913, "src": "9677:15:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "visibility": "internal"}, {"constant": false, "id": 12973, "mutability": "mutable", "name": "trade", "nodeType": "VariableDeclaration", "scope": 13183, "src": "9712:13:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 12972, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "9712:7:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 12975, "mutability": "mutable", "name": "portfolioState", "nodeType": "VariableDeclaration", "scope": 13183, "src": "9735:36:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$11028_memory_ptr", "typeString": "struct PortfolioState"}, "typeName": {"id": 12974, "name": "PortfolioState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11028, "src": "9735:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$11028_storage_ptr", "typeString": "struct PortfolioState"}}, "visibility": "internal"}, {"constant": false, "id": 12977, "mutability": "mutable", "name": "netCash", "nodeType": "VariableDeclaration", "scope": 13183, "src": "9781:14:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12976, "name": "int256", "nodeType": "ElementaryTypeName", "src": "9781:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "9556:245:8"}, "returnParameters": {"id": 12981, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12980, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 13183, "src": "9819:6:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12979, "name": "int256", "nodeType": "ElementaryTypeName", "src": "9819:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "9818:8:8"}, "scope": 13902, "src": "9525:2796:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 13308, "nodeType": "Block", "src": "13149:1049:8", "statements": [{"assignments": [13202], "declarations": [{"constant": false, "id": 13202, "mutability": "mutable", "name": "marketIndex", "nodeType": "VariableDeclaration", "scope": 13308, "src": "13159:19:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13201, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13159:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 13215, "initialValue": {"arguments": [{"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "id": 13211, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13209, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13194, "src": "13202:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "BinaryOperation", "operator": "<<", "rightExpression": {"hexValue": "38", "id": 13210, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13211:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_8_by_1", "typeString": "int_const 8"}, "value": "8"}, "src": "13202:10:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 13208, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13195:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_bytes1_$", "typeString": "type(bytes1)"}, "typeName": {"id": 13207, "name": "bytes1", "nodeType": "ElementaryTypeName", "src": "13195:6:8", "typeDescriptions": {}}}, "id": 13212, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13195:18:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 13206, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13189:5:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 13205, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "13189:5:8", "typeDescriptions": {}}}, "id": 13213, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13189:25:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 13204, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13181:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 13203, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13181:7:8", "typeDescriptions": {}}}, "id": 13214, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13181:34:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "13159:56:8"}, {"expression": {"arguments": [{"id": 13219, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13188, "src": "13297:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 13220, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13202, "src": "13305:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"hexValue": "66616c7365", "id": 13221, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "13318:5:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}, {"id": 13222, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13192, "src": "13325:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13216, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13186, "src": "13276:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13218, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadMarket", "nodeType": "MemberAccess", "referencedDeclaration": 15984, "src": "13276:20:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$11074_memory_ptr_$_t_struct$_MarketParameters_$11104_memory_ptr_$_t_uint256_$_t_bool_$_t_uint256_$returns$__$bound_to$_t_struct$_CashGroupParameters_$11074_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory,struct MarketParameters memory,uint256,bool,uint256) view"}}, "id": 13223, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13276:59:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13224, "nodeType": "ExpressionStatement", "src": "13276:59:8"}, {"expression": {"id": 13238, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13225, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13199, "src": "13346:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "id": 13234, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13232, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13194, "src": "13382:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "BinaryOperation", "operator": "<<", "rightExpression": {"hexValue": "3136", "id": 13233, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13391:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_16_by_1", "typeString": "int_const 16"}, "value": "16"}, "src": "13382:11:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 13231, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13374:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_bytes11_$", "typeString": "type(bytes11)"}, "typeName": {"id": 13230, "name": "bytes11", "nodeType": "ElementaryTypeName", "src": "13374:7:8", "typeDescriptions": {}}}, "id": 13235, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13374:20:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes11", "typeString": "bytes11"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes11", "typeString": "bytes11"}], "id": 13229, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13367:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint88_$", "typeString": "type(uint88)"}, "typeName": {"id": 13228, "name": "uint88", "nodeType": "ElementaryTypeName", "src": "13367:6:8", "typeDescriptions": {}}}, "id": 13236, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13367:28:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint88", "typeString": "uint88"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint88", "typeString": "uint88"}], "id": 13227, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13360:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_int256_$", "typeString": "type(int256)"}, "typeName": {"id": 13226, "name": "int256", "nodeType": "ElementaryTypeName", "src": "13360:6:8", "typeDescriptions": {}}}, "id": 13237, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13360:36:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "13346:50:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13239, "nodeType": "ExpressionStatement", "src": "13346:50:8"}, {"condition": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, "id": 13243, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13240, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13190, "src": "13460:9:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 13241, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10913, "src": "13473:15:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$10913_$", "typeString": "type(enum TradeActionType)"}}, "id": 13242, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "Borrow", "nodeType": "MemberAccess", "src": "13473:22:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "src": "13460:35:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 13250, "nodeType": "IfStatement", "src": "13456:72:8", "trueBody": {"expression": {"id": 13248, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13244, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13199, "src": "13497:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 13245, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13199, "src": "13511:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13246, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 12095, "src": "13511:15:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 13247, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13511:17:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "13497:31:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13249, "nodeType": "ExpressionStatement", "src": "13497:31:8"}}, {"expression": {"id": 13263, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13251, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13197, "src": "13539:10:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 13254, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13186, "src": "13585:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 13255, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13199, "src": "13608:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"arguments": [{"id": 13259, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13192, "src": "13653:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 13256, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13188, "src": "13633:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 13257, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 11091, "src": "13633:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 13258, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 18859, "src": "13633:19:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 13260, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13633:30:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13261, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13202, "src": "13677:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13252, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13188, "src": "13552:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 13253, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "executeTrade", "nodeType": "MemberAccess", "referencedDeclaration": 20682, "src": "13552:19:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$11104_memory_ptr_$_t_struct$_CashGroupParameters_$11074_memory_ptr_$_t_int256_$_t_uint256_$_t_uint256_$returns$_t_int256_$bound_to$_t_struct$_MarketParameters_$11104_memory_ptr_$", "typeString": "function (struct MarketParameters memory,struct CashGroupParameters memory,int256,uint256,uint256) returns (int256)"}}, "id": 13262, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13552:146:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "13539:159:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13264, "nodeType": "ExpressionStatement", "src": "13539:159:8"}, {"assignments": [13266], "declarations": [{"constant": false, "id": 13266, "mutability": "mutable", "name": "rateLimit", "nodeType": "VariableDeclaration", "scope": 13308, "src": "13709:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13265, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13709:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 13279, "initialValue": {"arguments": [{"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "id": 13275, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13273, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13194, "src": "13751:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "BinaryOperation", "operator": "<<", "rightExpression": {"hexValue": "313034", "id": 13274, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13760:3:8", "typeDescriptions": {"typeIdentifier": "t_rational_104_by_1", "typeString": "int_const 104"}, "value": "104"}, "src": "13751:12:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 13272, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13744:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_bytes4_$", "typeString": "type(bytes4)"}, "typeName": {"id": 13271, "name": "bytes4", "nodeType": "ElementaryTypeName", "src": "13744:6:8", "typeDescriptions": {}}}, "id": 13276, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13744:20:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes4", "typeString": "bytes4"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes4", "typeString": "bytes4"}], "id": 13270, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13737:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint32_$", "typeString": "type(uint32)"}, "typeName": {"id": 13269, "name": "uint32", "nodeType": "ElementaryTypeName", "src": "13737:6:8", "typeDescriptions": {}}}, "id": 13277, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13737:28:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint32", "typeString": "uint32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint32", "typeString": "uint32"}], "id": 13268, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13729:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 13267, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13729:7:8", "typeDescriptions": {}}}, "id": 13278, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13729:37:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "13709:57:8"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13282, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13280, "name": "rateLimit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13266, "src": "13780:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 13281, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13793:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "13780:14:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 13307, "nodeType": "IfStatement", "src": "13776:416:8", "trueBody": {"id": 13306, "nodeType": "Block", "src": "13796:396:8", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, "id": 13286, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13283, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13190, "src": "13814:9:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 13284, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10913, "src": "13827:15:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$10913_$", "typeString": "type(enum TradeActionType)"}}, "id": 13285, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "Borrow", "nodeType": "MemberAccess", "src": "13827:22:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "src": "13814:35:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 13304, "nodeType": "Block", "src": "14020:162:8", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13300, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 13297, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13188, "src": "14105:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 13298, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 11099, "src": "14105:22:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"id": 13299, "name": "rateLimit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13266, "src": "14131:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14105:35:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "5472616465206661696c65642c20736c697070616765", "id": 13301, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "14142:24:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}, "value": "Trade failed, slippage"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}], "id": 13296, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "14097:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 13302, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14097:70:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13303, "nodeType": "ExpressionStatement", "src": "14097:70:8"}]}, "id": 13305, "nodeType": "IfStatement", "src": "13810:372:8", "trueBody": {"id": 13295, "nodeType": "Block", "src": "13851:163:8", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13291, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 13288, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13188, "src": "13937:6:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 13289, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 11099, "src": "13937:22:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"id": 13290, "name": "rateLimit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13266, "src": "13963:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13937:35:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "5472616465206661696c65642c20736c697070616765", "id": 13292, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "13974:24:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}, "value": "Trade failed, slippage"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}], "id": 13287, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "13929:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 13293, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13929:70:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13294, "nodeType": "ExpressionStatement", "src": "13929:70:8"}]}}]}}]}, "documentation": {"id": 13184, "nodeType": "StructuredDocumentation", "src": "12327:497:8", "text": "@notice Executes a lend or borrow trade\n @param cashGroup parameters for the trade\n @param market market memory location to use\n @param tradeType whether this is add or remove liquidity\n @param blockTime the current block time\n @param trade bytes32 encoding of the particular trade\n @return cashAmount - a positive or negative cash amount accrued to the account\n @return fCashAmount -  a positive or negative fCash amount accrued to the account"}, "id": 13309, "implemented": true, "kind": "function", "modifiers": [], "name": "_executeLendBorrowTrade", "nodeType": "FunctionDefinition", "parameters": {"id": 13195, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 13186, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 13309, "src": "12871:36:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 13185, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11074, "src": "12871:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 13188, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 13309, "src": "12917:30:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 13187, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11104, "src": "12917:16:8", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$11104_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 13190, "mutability": "mutable", "name": "tradeType", "nodeType": "VariableDeclaration", "scope": 13309, "src": "12957:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}, "typeName": {"id": 13189, "name": "TradeActionType", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 10913, "src": "12957:15:8", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$10913", "typeString": "enum TradeActionType"}}, "visibility": "internal"}, {"constant": false, "id": 13192, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 13309, "src": "12992:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13191, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "12992:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 13194, "mutability": "mutable", "name": "trade", "nodeType": "VariableDeclaration", "scope": 13309, "src": "13019:13:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 13193, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "13019:7:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "12861:177:8"}, "returnParameters": {"id": 13200, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 13197, "mutability": "mutable", "name": "cashAmount", "nodeType": "VariableDeclaration", "scope": 13309, "src": "13085:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13196, "name": "int256", "nodeType": "ElementaryTypeName", "src": "13085:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 13199, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 13309, "src": "13116:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13198, "name": "int256", "nodeType": "ElementaryTypeName", "src": "13116:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "13071:73:8"}, "scope": 13902, "src": "12829:1369:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 13493, "nodeType": "Block", "src": "15159:2871:8", "statements": [{"assignments": [13328], "declarations": [{"constant": false, "id": 13328, "mutability": "mutable", "name": "counterparty", "nodeType": "VariableDeclaration", "scope": 13493, "src": "15169:20:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 13327, "name": "address", "nodeType": "ElementaryTypeName", "src": "15169:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}], "id": 13338, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13336, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 13333, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13318, "src": "15208:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 13332, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "15200:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 13331, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15200:7:8", "typeDescriptions": {}}}, "id": 13334, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15200:14:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">>", "rightExpression": {"hexValue": "3838", "id": 13335, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "15218:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_88_by_1", "typeString": "int_const 88"}, "value": "88"}, "src": "15200:20:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 13330, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "15192:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": {"id": 13329, "name": "address", "nodeType": "ElementaryTypeName", "src": "15192:7:8", "typeDescriptions": {}}}, "id": 13337, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15192:29:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "nodeType": "VariableDeclarationStatement", "src": "15169:52:8"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 13342, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13340, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13312, "src": "15320:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"id": 13341, "name": "counterparty", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13328, "src": "15331:12:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "15320:23:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "43616e6e6f7420736574746c652073656c66", "id": 13343, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "15345:20:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_e8be5400a7d7233af68e4ff643cdcf229406c3de9c658b43e802d6e9a5c590cb", "typeString": "literal_string \"Cannot settle self\""}, "value": "Cannot settle self"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_e8be5400a7d7233af68e4ff643cdcf229406c3de9c658b43e802d6e9a5c590cb", "typeString": "literal_string \"Cannot settle self\""}], "id": 13339, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "15312:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 13344, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15312:54:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13345, "nodeType": "ExpressionStatement", "src": "15312:54:8"}, {"assignments": [13347], "declarations": [{"constant": false, "id": 13347, "mutability": "mutable", "name": "amountToSettleAsset", "nodeType": "VariableDeclaration", "scope": 13493, "src": "15376:26:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13346, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15376:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 13358, "initialValue": {"arguments": [{"arguments": [{"arguments": [{"id": 13354, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13318, "src": "15427:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 13353, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "15419:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 13352, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15419:7:8", "typeDescriptions": {}}}, "id": 13355, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15419:14:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 13351, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "15412:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint88_$", "typeString": "type(uint88)"}, "typeName": {"id": 13350, "name": "uint88", "nodeType": "ElementaryTypeName", "src": "15412:6:8", "typeDescriptions": {}}}, "id": 13356, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15412:22:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint88", "typeString": "uint88"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint88", "typeString": "uint88"}], "id": 13349, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "15405:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_int256_$", "typeString": "type(int256)"}, "typeName": {"id": 13348, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15405:6:8", "typeDescriptions": {}}}, "id": 13357, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15405:30:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "15376:59:8"}, {"assignments": [13360], "declarations": [{"constant": false, "id": 13360, "mutability": "mutable", "name": "counterpartyContext", "nodeType": "VariableDeclaration", "scope": 13493, "src": "15446:41:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext"}, "typeName": {"id": 13359, "name": "AccountContext", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11169, "src": "15446:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_storage_ptr", "typeString": "struct AccountContext"}}, "visibility": "internal"}], "id": 13365, "initialValue": {"arguments": [{"id": 13363, "name": "counterparty", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13328, "src": "15542:12:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "expression": {"id": 13361, "name": "AccountContextHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 24595, "src": "15502:21:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_AccountContextHandler_$24595_$", "typeString": "type(library AccountContextHandler)"}}, "id": 13362, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getAccountContext", "nodeType": "MemberAccess", "referencedDeclaration": 23885, "src": "15502:39:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_struct$_AccountContext_$11169_memory_ptr_$", "typeString": "function (address) view returns (struct AccountContext memory)"}}, "id": 13364, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15502:53:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}}, "nodeType": "VariableDeclarationStatement", "src": "15446:109:8"}, {"condition": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 13366, "name": "counterpartyContext", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13360, "src": "15570:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}}, "id": 13367, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mustSettleAssets", "nodeType": "MemberAccess", "referencedDeclaration": 24050, "src": "15570:36:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_AccountContext_$11169_memory_ptr_$returns$_t_bool_$bound_to$_t_struct$_AccountContext_$11169_memory_ptr_$", "typeString": "function (struct AccountContext memory) view returns (bool)"}}, "id": 13368, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15570:38:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 13378, "nodeType": "IfStatement", "src": "15566:160:8", "trueBody": {"id": 13377, "nodeType": "Block", "src": "15610:116:8", "statements": [{"expression": {"id": 13375, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13369, "name": "counterpartyContext", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13360, "src": "15624:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 13372, "name": "counterparty", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13328, "src": "15681:12:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 13373, "name": "counterpartyContext", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13360, "src": "15695:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}], "expression": {"id": 13370, "name": "SettleAssetsExternal", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20411, "src": "15646:20:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_SettleAssetsExternal_$20411_$", "typeString": "type(library SettleAssetsExternal)"}}, "id": 13371, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "settleAccount", "nodeType": "MemberAccess", "referencedDeclaration": 20410, "src": "15646:34:8", "typeDescriptions": {"typeIdentifier": "t_function_delegatecall_nonpayable$_t_address_$_t_struct$_AccountContext_$11169_memory_ptr_$returns$_t_struct$_AccountContext_$11169_memory_ptr_$", "typeString": "function (address,struct AccountContext memory) returns (struct AccountContext memory)"}}, "id": 13374, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15646:69:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}}, "src": "15624:91:8", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}}, "id": 13376, "nodeType": "ExpressionStatement", "src": "15624:91:8"}]}}, {"expression": {"id": 13387, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13379, "name": "amountToSettleAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13347, "src": "16066:19:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 13382, "name": "counterparty", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13328, "src": "16151:12:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 13383, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13314, "src": "16177:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 13384, "name": "amountToSettleAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13347, "src": "16200:19:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 13385, "name": "counterpartyContext", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13360, "src": "16233:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}], "expression": {"id": 13380, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15305, "src": "16088:14:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$15305_$", "typeString": "type(library BalanceHandler)"}}, "id": 13381, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBalanceStorageForSettleCashDebt", "nodeType": "MemberAccess", "referencedDeclaration": 14592, "src": "16088:49:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_CashGroupParameters_$11074_memory_ptr_$_t_int256_$_t_struct$_AccountContext_$11169_memory_ptr_$returns$_t_int256_$", "typeString": "function (address,struct CashGroupParameters memory,int256,struct AccountContext memory) returns (int256)"}}, "id": 13386, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16088:174:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "16066:196:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13388, "nodeType": "ExpressionStatement", "src": "16066:196:8"}, {"assignments": [13390], "declarations": [{"constant": false, "id": 13390, "mutability": "mutable", "name": "threeMonthMaturity", "nodeType": "VariableDeclaration", "scope": 13493, "src": "16415:26:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13389, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16415:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 13398, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13397, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 13393, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13316, "src": "16470:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13391, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 17379, "src": "16444:8:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$17379_$", "typeString": "type(library DateTime)"}}, "id": 13392, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 16772, "src": "16444:25:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 13394, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16444:36:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"expression": {"id": 13395, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10894, "src": "16483:9:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$10894_$", "typeString": "type(library Constants)"}}, "id": 13396, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 10742, "src": "16483:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "16444:56:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "16415:85:8"}, {"assignments": [13400], "declarations": [{"constant": false, "id": 13400, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 13493, "src": "16510:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13399, "name": "int256", "nodeType": "ElementaryTypeName", "src": "16510:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 13407, "initialValue": {"arguments": [{"id": 13402, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13314, "src": "16565:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 13403, "name": "threeMonthMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13390, "src": "16576:18:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13404, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13316, "src": "16596:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13405, "name": "amountToSettleAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13347, "src": "16607:19:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 13401, "name": "_getfCashSettleAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13542, "src": "16543:21:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$11074_memory_ptr_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (struct CashGroupParameters memory,uint256,uint256,int256) view returns (int256)"}}, "id": 13406, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16543:84:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "16510:117:8"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 13411, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13409, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13400, "src": "16743:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"hexValue": "30", "id": 13410, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "16758:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "16743:16:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 13408, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "16735:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 13412, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16735:25:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13413, "nodeType": "ExpressionStatement", "src": "16735:25:8"}, {"id": 13465, "nodeType": "Block", "src": "17101:590:8", "statements": [{"assignments": [13417], "declarations": [{"constant": false, "id": 13417, "mutability": "mutable", "name": "assets", "nodeType": "VariableDeclaration", "scope": 13465, "src": "17115:30:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$11087_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset[]"}, "typeName": {"baseType": {"id": 13415, "name": "PortfolioAsset", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11087, "src": "17115:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$11087_storage_ptr", "typeString": "struct PortfolioAsset"}}, "id": 13416, "nodeType": "ArrayTypeName", "src": "17115:16:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$11087_storage_$dyn_storage_ptr", "typeString": "struct PortfolioAsset[]"}}, "visibility": "internal"}], "id": 13423, "initialValue": {"arguments": [{"hexValue": "31", "id": 13421, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "17169:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}], "id": 13420, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "17148:20:8", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_PortfolioAsset_$11087_memory_ptr_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (struct PortfolioAsset memory[] memory)"}, "typeName": {"baseType": {"id": 13418, "name": "PortfolioAsset", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11087, "src": "17152:14:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$11087_storage_ptr", "typeString": "struct PortfolioAsset"}}, "id": 13419, "nodeType": "ArrayTypeName", "src": "17152:16:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$11087_storage_$dyn_storage_ptr", "typeString": "struct PortfolioAsset[]"}}}, "id": 13422, "isConstant": false, "isLValue": false, "isPure": true, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17148:23:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$11087_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "17115:56:8"}, {"expression": {"id": 13430, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"baseExpression": {"id": 13424, "name": "assets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13417, "src": "17185:6:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$11087_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 13426, "indexExpression": {"hexValue": "30", "id": 13425, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "17192:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "17185:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$11087_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 13427, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 11076, "src": "17185:20:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 13428, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13314, "src": "17208:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13429, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 11067, "src": "17208:20:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "17185:43:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 13431, "nodeType": "ExpressionStatement", "src": "17185:43:8"}, {"expression": {"id": 13437, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"baseExpression": {"id": 13432, "name": "assets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13417, "src": "17242:6:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$11087_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 13434, "indexExpression": {"hexValue": "30", "id": 13433, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "17249:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "17242:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$11087_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 13435, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 11078, "src": "17242:18:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 13436, "name": "threeMonthMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13390, "src": "17263:18:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17242:39:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 13438, "nodeType": "ExpressionStatement", "src": "17242:39:8"}, {"expression": {"id": 13446, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"baseExpression": {"id": 13439, "name": "assets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13417, "src": "17295:6:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$11087_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 13441, "indexExpression": {"hexValue": "30", "id": 13440, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "17302:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "17295:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$11087_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 13442, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "notional", "nodeType": "MemberAccess", "referencedDeclaration": 11082, "src": "17295:18:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 13443, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13400, "src": "17316:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13444, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 12095, "src": "17316:15:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 13445, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17316:17:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "17295:38:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13447, "nodeType": "ExpressionStatement", "src": "17295:38:8"}, {"expression": {"id": 13454, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"baseExpression": {"id": 13448, "name": "assets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13417, "src": "17398:6:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$11087_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 13450, "indexExpression": {"hexValue": "30", "id": 13449, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "17405:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "17398:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$11087_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 13451, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "assetType", "nodeType": "MemberAccess", "referencedDeclaration": 11080, "src": "17398:19:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 13452, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10894, "src": "17420:9:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$10894_$", "typeString": "type(library Constants)"}}, "id": 13453, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "FCASH_ASSET_TYPE", "nodeType": "MemberAccess", "referencedDeclaration": 10824, "src": "17420:26:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "src": "17398:48:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 13455, "nodeType": "ExpressionStatement", "src": "17398:48:8"}, {"expression": {"id": 13463, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13456, "name": "counterpartyContext", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13360, "src": "17518:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 13459, "name": "counterparty", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13328, "src": "17593:12:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 13460, "name": "counterpartyContext", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13360, "src": "17623:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}}, {"id": 13461, "name": "assets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13417, "src": "17660:6:8", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$11087_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}, {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$11087_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}], "expression": {"id": 13457, "name": "TransferAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 23847, "src": "17540:14:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_TransferAssets_$23847_$", "typeString": "type(library TransferAssets)"}}, "id": 13458, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "placeAssetsInAccount", "nodeType": "MemberAccess", "referencedDeclaration": 23846, "src": "17540:35:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_AccountContext_$11169_memory_ptr_$_t_array$_t_struct$_PortfolioAsset_$11087_memory_ptr_$dyn_memory_ptr_$returns$_t_struct$_AccountContext_$11169_memory_ptr_$", "typeString": "function (address,struct AccountContext memory,struct PortfolioAsset memory[] memory) returns (struct AccountContext memory)"}}, "id": 13462, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17540:140:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}}, "src": "17518:162:8", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}}, "id": 13464, "nodeType": "ExpressionStatement", "src": "17518:162:8"}]}, {"expression": {"arguments": [{"id": 13469, "name": "counterparty", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13328, "src": "17738:12:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "expression": {"id": 13466, "name": "counterpartyContext", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13360, "src": "17700:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$11169_memory_ptr", "typeString": "struct AccountContext memory"}}, "id": 13468, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "setAccountContext", "nodeType": "MemberAccess", "referencedDeclaration": 23912, "src": "17700:37:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AccountContext_$11169_memory_ptr_$_t_address_$returns$__$bound_to$_t_struct$_AccountContext_$11169_memory_ptr_$", "typeString": "function (struct AccountContext memory,address)"}}, "id": 13470, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17700:51:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13471, "nodeType": "ExpressionStatement", "src": "17700:51:8"}, {"eventCall": {"arguments": [{"id": 13473, "name": "counterparty", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13328, "src": "17796:12:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"arguments": [{"expression": {"id": 13476, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13314, "src": "17829:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13477, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 11067, "src": "17829:20:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 13475, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "17822:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint16_$", "typeString": "type(uint16)"}, "typeName": {"id": 13474, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "17822:6:8", "typeDescriptions": {}}}, "id": 13478, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17822:28:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 13479, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13312, "src": "17864:7:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 13480, "name": "amountToSettleAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13347, "src": "17885:19:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 13481, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13400, "src": "17918:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13482, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 12095, "src": "17918:15:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 13483, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17918:17:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 13472, "name": "SettledCashDebt", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12515, "src": "17767:15:8", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint16_$_t_address_$_t_int256_$_t_int256_$returns$__$", "typeString": "function (address,uint16,address,int256,int256)"}}, "id": 13484, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17767:178:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13485, "nodeType": "EmitStatement", "src": "17762:183:8"}, {"expression": {"components": [{"id": 13486, "name": "threeMonthMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13390, "src": "17964:18:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 13487, "name": "amountToSettleAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13347, "src": "17984:19:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13488, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 12095, "src": "17984:23:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 13489, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17984:25:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 13490, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13400, "src": "18011:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 13491, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "17963:60:8", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "functionReturnParameters": 13326, "id": 13492, "nodeType": "Return", "src": "17956:67:8"}]}, "documentation": {"id": 13310, "nodeType": "StructuredDocumentation", "src": "14204:689:8", "text": "@notice If an account has a negative cash balance we allow anyone to lend to to that account at a penalty\n rate to the 3 month market.\n @param account the account initiating the trade, used to check that self settlement is not possible\n @param cashGroup parameters for the trade\n @param blockTime the current block time\n @param trade bytes32 encoding of the particular trade\n @return maturity: the date of the three month maturity where fCash will be exchanged\n @return cashAmount: a negative cash amount that the account must pay to the settled account\n @return fCashAmount: a positive fCash amount that the account will receive"}, "id": 13494, "implemented": true, "kind": "function", "modifiers": [], "name": "_settleCashDebt", "nodeType": "FunctionDefinition", "parameters": {"id": 13319, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 13312, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 13494, "src": "14932:15:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 13311, "name": "address", "nodeType": "ElementaryTypeName", "src": "14932:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 13314, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 13494, "src": "14957:36:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 13313, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11074, "src": "14957:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 13316, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 13494, "src": "15003:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13315, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15003:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 13318, "mutability": "mutable", "name": "trade", "nodeType": "VariableDeclaration", "scope": 13494, "src": "15030:13:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 13317, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "15030:7:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "14922:127:8"}, "returnParameters": {"id": 13326, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 13321, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 13494, "src": "15097:7:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13320, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15097:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 13323, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 13494, "src": "15118:6:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13322, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15118:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 13325, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 13494, "src": "15138:6:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13324, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15138:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "15083:71:8"}, "scope": 13902, "src": "14898:3132:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "internal"}, {"body": {"id": 13541, "nodeType": "Block", "src": "18337:678:8", "statements": [{"assignments": [13509], "declarations": [{"constant": false, "id": 13509, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 13541, "src": "18347:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13508, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "18347:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 13515, "initialValue": {"arguments": [{"id": 13512, "name": "threeMonthMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13499, "src": "18398:18:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13513, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13501, "src": "18418:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13510, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13497, "src": "18368:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13511, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "calculateOracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 16182, "src": "18368:29:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$11074_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_CashGroupParameters_$11074_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory,uint256,uint256) view returns (uint256)"}}, "id": 13514, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18368:60:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "18347:81:8"}, {"assignments": [13517], "declarations": [{"constant": false, "id": 13517, "mutability": "mutable", "name": "exchangeRate", "nodeType": "VariableDeclaration", "scope": 13541, "src": "18439:19:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13516, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18439:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 13531, "initialValue": {"arguments": [{"arguments": [{"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 13522, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13497, "src": "18543:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13523, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "getSettlementPenalty", "nodeType": "MemberAccess", "referencedDeclaration": 15880, "src": "18543:30:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_CashGroupParameters_$11074_memory_ptr_$returns$_t_uint256_$bound_to$_t_struct$_CashGroupParameters_$11074_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory) pure returns (uint256)"}}, "id": 13524, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18543:32:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13520, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13509, "src": "18528:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 13521, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 18837, "src": "18528:14:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 13525, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18528:48:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"arguments": [{"id": 13528, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13501, "src": "18617:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13526, "name": "threeMonthMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13499, "src": "18594:18:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 13527, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 18859, "src": "18594:22:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 13529, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18594:33:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13518, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22325, "src": "18473:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Market_$22325_$", "typeString": "type(library Market)"}}, "id": 13519, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getExchangeRateFromImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 21303, "src": "18473:37:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (uint256,uint256) pure returns (int256)"}}, "id": 13530, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18473:168:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "18439:202:8"}, {"expression": {"arguments": [{"id": 13538, "name": "exchangeRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13517, "src": "18995:12:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"arguments": [{"id": 13535, "name": "amountToSettleAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13503, "src": "18860:19:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 13532, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13497, "src": "18803:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13533, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "assetRate", "nodeType": "MemberAccess", "referencedDeclaration": 11071, "src": "18803:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_AssetRateParameters_$11065_memory_ptr", "typeString": "struct AssetRateParameters memory"}}, "id": 13534, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertToUnderlying", "nodeType": "MemberAccess", "referencedDeclaration": 11420, "src": "18803:56:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_AssetRateParameters_$11065_memory_ptr_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_AssetRateParameters_$11065_memory_ptr_$", "typeString": "function (struct AssetRateParameters memory,int256) pure returns (int256)"}}, "id": 13536, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18803:77:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13537, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mulInRatePrecision", "nodeType": "MemberAccess", "referencedDeclaration": 12178, "src": "18803:191:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 13539, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18803:205:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 13507, "id": 13540, "nodeType": "Return", "src": "18784:224:8"}]}, "documentation": {"id": 13495, "nodeType": "StructuredDocumentation", "src": "18036:84:8", "text": "@dev Helper method to calculate the fCashAmount from the penalty settlement rate"}, "id": 13542, "implemented": true, "kind": "function", "modifiers": [], "name": "_getfCashSettleAmount", "nodeType": "FunctionDefinition", "parameters": {"id": 13504, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 13497, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 13542, "src": "18165:36:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 13496, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11074, "src": "18165:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 13499, "mutability": "mutable", "name": "threeMonthMaturity", "nodeType": "VariableDeclaration", "scope": 13542, "src": "18211:26:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13498, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "18211:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 13501, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 13542, "src": "18247:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13500, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "18247:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 13503, "mutability": "mutable", "name": "amountToSettleAsset", "nodeType": "VariableDeclaration", "scope": 13542, "src": "18274:26:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13502, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18274:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "18155:151:8"}, "returnParameters": {"id": 13507, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 13506, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 13542, "src": "18329:6:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13505, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18329:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "18328:8:8"}, "scope": 13902, "src": "18125:890:8", "stateMutability": "view", "virtual": false, "visibility": "private"}, {"body": {"id": 13738, "nodeType": "Block", "src": "19871:3502:8", "statements": [{"assignments": [13561], "declarations": [{"constant": false, "id": 13561, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 13738, "src": "19881:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13560, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19881:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 13574, "initialValue": {"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13571, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 13568, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13551, "src": "19923:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 13567, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "19915:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 13566, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19915:7:8", "typeDescriptions": {}}}, "id": 13569, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19915:14:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">>", "rightExpression": {"hexValue": "323136", "id": 13570, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "19933:3:8", "typeDescriptions": {"typeIdentifier": "t_rational_216_by_1", "typeString": "int_const 216"}, "value": "216"}, "src": "19915:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 13565, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "19908:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint32_$", "typeString": "type(uint32)"}, "typeName": {"id": 13564, "name": "uint32", "nodeType": "ElementaryTypeName", "src": "19908:6:8", "typeDescriptions": {}}}, "id": 13572, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19908:29:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint32", "typeString": "uint32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint32", "typeString": "uint32"}], "id": 13563, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "19900:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 13562, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19900:7:8", "typeDescriptions": {}}}, "id": 13573, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19900:38:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "19881:57:8"}, {"assignments": [13576], "declarations": [{"constant": false, "id": 13576, "mutability": "mutable", "name": "fCashAmountToPurchase", "nodeType": "VariableDeclaration", "scope": 13738, "src": "19948:28:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13575, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19948:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 13589, "initialValue": {"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13586, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 13583, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13551, "src": "20000:5:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 13582, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "19992:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 13581, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19992:7:8", "typeDescriptions": {}}}, "id": 13584, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19992:14:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">>", "rightExpression": {"hexValue": "313238", "id": 13585, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20010:3:8", "typeDescriptions": {"typeIdentifier": "t_rational_128_by_1", "typeString": "int_const 128"}, "value": "128"}, "src": "19992:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 13580, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "19985:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint88_$", "typeString": "type(uint88)"}, "typeName": {"id": 13579, "name": "uint88", "nodeType": "ElementaryTypeName", "src": "19985:6:8", "typeDescriptions": {}}}, "id": 13587, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19985:29:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint88", "typeString": "uint88"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint88", "typeString": "uint88"}], "id": 13578, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "19979:5:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_int88_$", "typeString": "type(int88)"}, "typeName": {"id": 13577, "name": "int88", "nodeType": "ElementaryTypeName", "src": "19979:5:8", "typeDescriptions": {}}}, "id": 13588, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19979:36:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int88", "typeString": "int88"}}, "nodeType": "VariableDeclarationStatement", "src": "19948:67:8"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13593, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13591, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13561, "src": "20033:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 13592, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13549, "src": "20044:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "20033:20:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "496e76616c6964206d61747572697479", "id": 13594, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "20055:18:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_6ac8fa1ec1f45f2a4a2017eedf59db09ad3fe10b2748a8ca73a4b71f86bef54e", "typeString": "literal_string \"Invalid maturity\""}, "value": "Invalid maturity"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_6ac8fa1ec1f45f2a4a2017eedf59db09ad3fe10b2748a8ca73a4b71f86bef54e", "typeString": "literal_string \"Invalid maturity\""}], "id": 13590, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "20025:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 13595, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20025:49:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13596, "nodeType": "ExpressionStatement", "src": "20025:49:8"}, {"expression": {"arguments": [{"id": 13605, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "!", "prefix": true, "src": "20242:78:8", "subExpression": {"arguments": [{"expression": {"id": 13600, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13547, "src": "20274:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13601, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 11069, "src": "20274:24:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13602, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13561, "src": "20300:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13603, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13549, "src": "20310:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13598, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 17379, "src": "20243:8:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$17379_$", "typeString": "type(library DateTime)"}}, "id": 13599, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "isValidMarketMaturity", "nodeType": "MemberAccess", "referencedDeclaration": 16938, "src": "20243:30:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$", "typeString": "function (uint256,uint256,uint256) pure returns (bool)"}}, "id": 13604, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20243:77:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4e6f6e206964696f73796e637261746963206d61747572697479", "id": 13606, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "20334:28:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_170cbb6ae2d81aeec65922f85f1fdb93aed169edb18ab7dfe13333b8f0ea8715", "typeString": "literal_string \"Non idiosyncratic maturity\""}, "value": "Non idiosyncratic maturity"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_170cbb6ae2d81aeec65922f85f1fdb93aed169edb18ab7dfe13333b8f0ea8715", "typeString": "literal_string \"Non idiosyncratic maturity\""}], "id": 13597, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "20221:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 13607, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20221:151:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13608, "nodeType": "ExpressionStatement", "src": "20221:151:8"}, {"assignments": [13610], "declarations": [{"constant": false, "id": 13610, "mutability": "mutable", "name": "nTokenAddress", "nodeType": "VariableDeclaration", "scope": 13738, "src": "20383:21:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 13609, "name": "address", "nodeType": "ElementaryTypeName", "src": "20383:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}], "id": 13616, "initialValue": {"arguments": [{"expression": {"id": 13613, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13547, "src": "20435:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13614, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 11067, "src": "20435:20:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 13611, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 18655, "src": "20407:13:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$18655_$", "typeString": "type(library nTokenHandler)"}}, "id": 13612, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "nTokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 17724, "src": "20407:27:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$", "typeString": "function (uint256) view returns (address)"}}, "id": 13615, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20407:49:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "VariableDeclarationStatement", "src": "20383:73:8"}, {"assignments": [null, null, 13618, null, 13620], "declarations": [null, null, {"constant": false, "id": 13618, "mutability": "mutable", "name": "lastInitializedTime", "nodeType": "VariableDeclaration", "scope": 13738, "src": "20570:27:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13617, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "20570:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, null, {"constant": false, "id": 13620, "mutability": "mutable", "name": "parameters", "nodeType": "VariableDeclaration", "scope": 13738, "src": "20647:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes5", "typeString": "bytes5"}, "typeName": {"id": 13619, "name": "bytes5", "nodeType": "ElementaryTypeName", "src": "20647:6:8", "typeDescriptions": {"typeIdentifier": "t_bytes5", "typeString": "bytes5"}}, "visibility": "internal"}], "id": 13625, "initialValue": {"arguments": [{"id": 13623, "name": "nTokenAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13610, "src": "20708:13:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "expression": {"id": 13621, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 18655, "src": "20677:13:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$18655_$", "typeString": "type(library nTokenHandler)"}}, "id": 13622, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getNTokenContext", "nodeType": "MemberAccess", "referencedDeclaration": 17703, "src": "20677:30:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint16_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes5_$", "typeString": "function (address) view returns (uint16,uint256,uint256,uint8,bytes5)"}}, "id": 13624, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20677:45:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes5_$", "typeString": "tuple(uint16,uint256,uint256,uint8,bytes5)"}}, "nodeType": "VariableDeclarationStatement", "src": "20493:229:8"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13643, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13627, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13549, "src": "21392:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13641, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"arguments": [{"baseExpression": {"id": 13634, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13620, "src": "21479:10:8", "typeDescriptions": {"typeIdentifier": "t_bytes5", "typeString": "bytes5"}}, "id": 13637, "indexExpression": {"expression": {"id": 13635, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10894, "src": "21490:9:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$10894_$", "typeString": "type(library Constants)"}}, "id": 13636, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RESIDUAL_PURCHASE_TIME_BUFFER", "nodeType": "MemberAccess", "referencedDeclaration": 10869, "src": "21490:39:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "21479:51:8", "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 13633, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "21473:5:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 13632, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "21473:5:8", "typeDescriptions": {}}}, "id": 13638, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21473:58:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 13631, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "21465:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 13630, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "21465:7:8", "typeDescriptions": {}}}, "id": 13639, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21465:67:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"hexValue": "31", "id": 13640, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "21535:7:8", "subdenomination": "hours", "typeDescriptions": {"typeIdentifier": "t_rational_3600_by_1", "typeString": "int_const 3600"}, "value": "1"}, "src": "21465:77:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13628, "name": "lastInitializedTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13618, "src": "21420:19:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 13629, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 18837, "src": "21420:23:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 13642, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21420:140:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "21392:168:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "496e73756666696369656e7420626c6f636b2074696d65", "id": 13644, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "21574:25:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_a342b12b1f68df3836aadf9b184eda8e1c38b67afe19dc75e8fec530927211c1", "typeString": "literal_string \"Insufficient block time\""}, "value": "Insufficient block time"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_a342b12b1f68df3836aadf9b184eda8e1c38b67afe19dc75e8fec530927211c1", "typeString": "literal_string \"Insufficient block time\""}], "id": 13626, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "21371:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 13645, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21371:238:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13646, "nodeType": "ExpressionStatement", "src": "21371:238:8"}, {"assignments": [13648], "declarations": [{"constant": false, "id": 13648, "mutability": "mutable", "name": "notional", "nodeType": "VariableDeclaration", "scope": 13738, "src": "21620:15:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13647, "name": "int256", "nodeType": "ElementaryTypeName", "src": "21620:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 13656, "initialValue": {"arguments": [{"id": 13651, "name": "nTokenAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13610, "src": "21688:13:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"id": 13652, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13547, "src": "21703:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13653, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 11067, "src": "21703:20:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 13654, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13561, "src": "21725:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13649, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31776, "src": "21650:19:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$31776_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 13650, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getifCashNotional", "nodeType": "MemberAccess", "referencedDeclaration": 31211, "src": "21650:37:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (address,uint256,uint256) view returns (int256)"}}, "id": 13655, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21650:84:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "21620:114:8"}, {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 13663, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 13659, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13657, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13648, "src": "21833:8:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "30", "id": 13658, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "21844:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "21833:12:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 13662, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13660, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13576, "src": "21849:21:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "30", "id": 13661, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "21873:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "21849:25:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "21833:41:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 13679, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 13675, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13673, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13648, "src": "22060:8:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 13674, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "22071:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "22060:12:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 13678, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13676, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13576, "src": "22076:21:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 13677, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "22100:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "22076:25:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "22060:41:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 13693, "nodeType": "Block", "src": "22283:121:8", "statements": [{"expression": {"arguments": [{"hexValue": "496e76616c696420616d6f756e74", "id": 13690, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "22376:16:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1", "typeString": "literal_string \"Invalid amount\""}, "value": "Invalid amount"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1", "typeString": "literal_string \"Invalid amount\""}], "id": 13689, "name": "revert", "nodeType": "Identifier", "overloadedDeclarations": [-19, -19], "referencedDeclaration": -19, "src": "22369:6:8", "typeDescriptions": {"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$", "typeString": "function (string memory) pure"}}, "id": 13691, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22369:24:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13692, "nodeType": "ExpressionStatement", "src": "22369:24:8"}]}, "id": 13694, "nodeType": "IfStatement", "src": "22056:348:8", "trueBody": {"id": 13688, "nodeType": "Block", "src": "22103:174:8", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 13682, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13680, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13576, "src": "22200:21:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 13681, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13648, "src": "22224:8:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "22200:32:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 13687, "nodeType": "IfStatement", "src": "22196:70:8", "trueBody": {"expression": {"id": 13685, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13683, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13576, "src": "22234:21:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 13684, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13648, "src": "22258:8:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "22234:32:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13686, "nodeType": "ExpressionStatement", "src": "22234:32:8"}}]}}, "id": 13695, "nodeType": "IfStatement", "src": "21829:575:8", "trueBody": {"id": 13672, "nodeType": "Block", "src": "21876:174:8", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 13666, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13664, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13576, "src": "21973:21:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"id": 13665, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13648, "src": "21997:8:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "21973:32:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 13671, "nodeType": "IfStatement", "src": "21969:70:8", "trueBody": {"expression": {"id": 13669, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13667, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13576, "src": "22007:21:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 13668, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13648, "src": "22031:8:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "22007:32:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13670, "nodeType": "ExpressionStatement", "src": "22007:32:8"}}]}}, {"assignments": [13697], "declarations": [{"constant": false, "id": 13697, "mutability": "mutable", "name": "netAssetCashNToken", "nodeType": "VariableDeclaration", "scope": 13738, "src": "22626:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13696, "name": "int256", "nodeType": "ElementaryTypeName", "src": "22626:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 13705, "initialValue": {"arguments": [{"id": 13699, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13547, "src": "22710:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 13700, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13561, "src": "22737:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13701, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13549, "src": "22763:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13702, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13576, "src": "22790:21:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 13703, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13620, "src": "22829:10:8", "typeDescriptions": {"typeIdentifier": "t_bytes5", "typeString": "bytes5"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_bytes5", "typeString": "bytes5"}], "id": 13698, "name": "_getResidualPriceAssetCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13829, "src": "22666:26:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$11074_memory_ptr_$_t_uint256_$_t_uint256_$_t_int256_$_t_bytes6_$returns$_t_int256_$", "typeString": "function (struct CashGroupParameters memory,uint256,uint256,int256,bytes6) view returns (int256)"}}, "id": 13704, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22666:187:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "22626:227:8"}, {"expression": {"arguments": [{"id": 13707, "name": "nTokenAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13610, "src": "22900:13:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"id": 13708, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13547, "src": "22927:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13709, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 11067, "src": "22927:20:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 13710, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13561, "src": "22961:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13711, "name": "lastInitializedTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13618, "src": "22983:19:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13712, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13576, "src": "23016:21:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 13713, "name": "netAssetCashNToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13697, "src": "23051:18:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 13706, "name": "_updateNTokenPortfolio", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13901, "src": "22864:22:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$_t_int256_$returns$__$", "typeString": "function (address,uint256,uint256,uint256,int256,int256)"}}, "id": 13714, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22864:215:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13715, "nodeType": "ExpressionStatement", "src": "22864:215:8"}, {"eventCall": {"arguments": [{"arguments": [{"expression": {"id": 13719, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13547, "src": "23138:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13720, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 11067, "src": "23138:20:8", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 13718, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "23131:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint16_$", "typeString": "type(uint16)"}, "typeName": {"id": 13717, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "23131:6:8", "typeDescriptions": {}}}, "id": 13721, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23131:28:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"arguments": [{"id": 13724, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13561, "src": "23180:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 13723, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "23173:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}, "typeName": {"id": 13722, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "23173:6:8", "typeDescriptions": {}}}, "id": 13725, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23173:16:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, {"id": 13726, "name": "purchaser", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13545, "src": "23203:9:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 13727, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13576, "src": "23226:21:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 13728, "name": "netAssetCashNToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13697, "src": "23261:18:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint40", "typeString": "uint40"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 13716, "name": "nTokenResidualPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12527, "src": "23095:22:8", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_uint16_$_t_uint40_$_t_address_$_t_int256_$_t_int256_$returns$__$", "typeString": "function (uint16,uint40,address,int256,int256)"}}, "id": 13729, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23095:194:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13730, "nodeType": "EmitStatement", "src": "23090:199:8"}, {"expression": {"components": [{"id": 13731, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13561, "src": "23308:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 13732, "name": "netAssetCashNToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13697, "src": "23318:18:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13733, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 12095, "src": "23318:22:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 13734, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23318:24:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 13735, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13576, "src": "23344:21:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 13736, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "23307:59:8", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "functionReturnParameters": 13559, "id": 13737, "nodeType": "Return", "src": "23300:66:8"}]}, "documentation": {"id": 13543, "nodeType": "StructuredDocumentation", "src": "19021:574:8", "text": "@notice Allows an account to purchase ntoken residuals\n @param purchaser account that is purchasing the residuals\n @param cashGroup parameters for the trade\n @param blockTime the current block time\n @param trade bytes32 encoding of the particular trade\n @return maturity: the date of the idiosyncratic maturity where fCash will be exchanged\n @return cashAmount: a positive or negative cash amount that the account will receive or pay\n @return fCashAmount: a positive or negative fCash amount that the account will receive"}, "id": 13739, "implemented": true, "kind": "function", "modifiers": [], "name": "_purchaseNTokenResidual", "nodeType": "FunctionDefinition", "parameters": {"id": 13552, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 13545, "mutability": "mutable", "name": "purchaser", "nodeType": "VariableDeclaration", "scope": 13739, "src": "19642:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 13544, "name": "address", "nodeType": "ElementaryTypeName", "src": "19642:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 13547, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 13739, "src": "19669:36:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 13546, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11074, "src": "19669:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 13549, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 13739, "src": "19715:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13548, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19715:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 13551, "mutability": "mutable", "name": "trade", "nodeType": "VariableDeclaration", "scope": 13739, "src": "19742:13:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 13550, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "19742:7:8", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "19632:129:8"}, "returnParameters": {"id": 13559, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 13554, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 13739, "src": "19809:7:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13553, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19809:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 13556, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 13739, "src": "19830:6:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13555, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19830:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 13558, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 13739, "src": "19850:6:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13557, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19850:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "19795:71:8"}, "scope": 13902, "src": "19600:3773:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "internal"}, {"body": {"id": 13828, "nodeType": "Block", "src": "23696:1384:8", "statements": [{"assignments": [13756], "declarations": [{"constant": false, "id": 13756, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 13828, "src": "23706:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13755, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23706:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 13762, "initialValue": {"arguments": [{"id": 13759, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13744, "src": "23757:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13760, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13746, "src": "23767:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13757, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13742, "src": "23727:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13758, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "calculateOracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 16182, "src": "23727:29:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$11074_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_CashGroupParameters_$11074_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory,uint256,uint256) view returns (uint256)"}}, "id": 13761, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23727:50:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "23706:71:8"}, {"assignments": [13764], "declarations": [{"constant": false, "id": 13764, "mutability": "mutable", "name": "purchaseIncentive", "nodeType": "VariableDeclaration", "scope": 13828, "src": "23869:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13763, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23869:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 13778, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13777, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"arguments": [{"baseExpression": {"id": 13769, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13750, "src": "23923:10:8", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}}, "id": 13772, "indexExpression": {"expression": {"id": 13770, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10894, "src": "23934:9:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$10894_$", "typeString": "type(library Constants)"}}, "id": 13771, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RESIDUAL_PURCHASE_INCENTIVE", "nodeType": "MemberAccess", "referencedDeclaration": 10875, "src": "23934:37:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "23923:49:8", "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 13768, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "23917:5:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 13767, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "23917:5:8", "typeDescriptions": {}}}, "id": 13773, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23917:56:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 13766, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "23909:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 13765, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23909:7:8", "typeDescriptions": {}}}, "id": 13774, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23909:65:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"expression": {"id": 13775, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10894, "src": "23993:9:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$10894_$", "typeString": "type(library Constants)"}}, "id": 13776, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "TEN_BASIS_POINTS", "nodeType": "MemberAccess", "referencedDeclaration": 10808, "src": "23993:26:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "23909:110:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "23869:150:8"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 13781, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13779, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13748, "src": "24034:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 13780, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "24048:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "24034:15:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 13792, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13790, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13756, "src": "24295:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 13791, "name": "purchaseIncentive", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13764, "src": "24308:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "24295:30:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 13805, "nodeType": "Block", "src": "24587:141:8", "statements": [{"expression": {"id": 13803, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13801, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13756, "src": "24703:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"hexValue": "30", "id": 13802, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "24716:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "24703:14:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 13804, "nodeType": "ExpressionStatement", "src": "24703:14:8"}]}, "id": 13806, "nodeType": "IfStatement", "src": "24291:437:8", "trueBody": {"id": 13800, "nodeType": "Block", "src": "24327:254:8", "statements": [{"expression": {"id": 13798, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13793, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13756, "src": "24524:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 13796, "name": "purchaseIncentive", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13764, "src": "24552:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13794, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13756, "src": "24537:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 13795, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 18859, "src": "24537:14:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 13797, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "24537:33:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "24524:46:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 13799, "nodeType": "ExpressionStatement", "src": "24524:46:8"}]}}, "id": 13807, "nodeType": "IfStatement", "src": "24030:698:8", "trueBody": {"id": 13789, "nodeType": "Block", "src": "24051:234:8", "statements": [{"expression": {"id": 13787, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13782, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13756, "src": "24228:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 13785, "name": "purchaseIncentive", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13764, "src": "24256:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13783, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13756, "src": "24241:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 13784, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 18837, "src": "24241:14:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 13786, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "24241:33:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "24228:46:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 13788, "nodeType": "ExpressionStatement", "src": "24228:46:8"}]}}, {"assignments": [13809], "declarations": [{"constant": false, "id": 13809, "mutability": "mutable", "name": "exchangeRate", "nodeType": "VariableDeclaration", "scope": 13828, "src": "24738:19:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13808, "name": "int256", "nodeType": "ElementaryTypeName", "src": "24738:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 13818, "initialValue": {"arguments": [{"id": 13812, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13756, "src": "24810:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"arguments": [{"id": 13815, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13746, "src": "24835:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13813, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13744, "src": "24822:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 13814, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 18859, "src": "24822:12:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 13816, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "24822:23:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13810, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22325, "src": "24772:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Market_$22325_$", "typeString": "type(library Market)"}}, "id": 13811, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getExchangeRateFromImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 21303, "src": "24772:37:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (uint256,uint256) pure returns (int256)"}}, "id": 13817, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "24772:74:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "24738:108:8"}, {"expression": {"arguments": [{"arguments": [{"id": 13824, "name": "exchangeRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13809, "src": "25059:12:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 13822, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13748, "src": "25028:11:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13823, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "divInRatePrecision", "nodeType": "MemberAccess", "referencedDeclaration": 12158, "src": "25028:30:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 13825, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25028:44:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 13819, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13742, "src": "24986:9:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 13820, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "assetRate", "nodeType": "MemberAccess", "referencedDeclaration": 11071, "src": "24986:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_AssetRateParameters_$11065_memory_ptr", "typeString": "struct AssetRateParameters memory"}}, "id": 13821, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertFromUnderlying", "nodeType": "MemberAccess", "referencedDeclaration": 11448, "src": "24986:41:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_AssetRateParameters_$11065_memory_ptr_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_AssetRateParameters_$11065_memory_ptr_$", "typeString": "function (struct AssetRateParameters memory,int256) pure returns (int256)"}}, "id": 13826, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "24986:87:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 13754, "id": 13827, "nodeType": "Return", "src": "24967:106:8"}]}, "documentation": {"id": 13740, "nodeType": "StructuredDocumentation", "src": "23379:85:8", "text": "@notice Returns the amount of asset cash required to purchase the nToken residual"}, "id": 13829, "implemented": true, "kind": "function", "modifiers": [], "name": "_getResidualPriceAssetCash", "nodeType": "FunctionDefinition", "parameters": {"id": 13751, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 13742, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 13829, "src": "23514:36:8", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 13741, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 11074, "src": "23514:19:8", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$11074_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 13744, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 13829, "src": "23560:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13743, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23560:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 13746, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 13829, "src": "23586:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13745, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23586:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 13748, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 13829, "src": "23613:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13747, "name": "int256", "nodeType": "ElementaryTypeName", "src": "23613:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 13750, "mutability": "mutable", "name": "parameters", "nodeType": "VariableDeclaration", "scope": 13829, "src": "23641:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}, "typeName": {"id": 13749, "name": "bytes6", "nodeType": "ElementaryTypeName", "src": "23641:6:8", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}}, "visibility": "internal"}], "src": "23504:160:8"}, "returnParameters": {"id": 13754, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 13753, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 13829, "src": "23688:6:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13752, "name": "int256", "nodeType": "ElementaryTypeName", "src": "23688:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "23687:8:8"}, "scope": 13902, "src": "23469:1611:8", "stateMutability": "view", "virtual": false, "visibility": "internal"}, {"body": {"id": 13900, "nodeType": "Block", "src": "25327:1001:8", "statements": [{"assignments": [13845], "declarations": [{"constant": false, "id": 13845, "mutability": "mutable", "name": "finalNotional", "nodeType": "VariableDeclaration", "scope": 13900, "src": "25337:20:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13844, "name": "int256", "nodeType": "ElementaryTypeName", "src": "25337:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 13856, "initialValue": {"arguments": [{"id": 13848, "name": "nTokenAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13831, "src": "25408:13:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 13849, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13833, "src": "25435:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13850, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13835, "src": "25459:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13851, "name": "lastInitializedTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13837, "src": "25481:19:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 13852, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13839, "src": "25514:21:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13853, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 12095, "src": "25514:25:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 13854, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25514:27:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 13846, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 31776, "src": "25360:19:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$31776_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 13847, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "addifCashAsset", "nodeType": "MemberAccess", "referencedDeclaration": 31473, "src": "25360:34:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint256,uint256,uint256,int256) returns (int256)"}}, "id": 13855, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25360:236:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "25337:259:8"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 13874, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 13864, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 13860, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13858, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13839, "src": "25703:21:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 13859, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "25727:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "25703:25:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 13863, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13861, "name": "finalNotional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13845, "src": "25732:13:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"hexValue": "30", "id": 13862, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "25749:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "25732:18:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "25703:47:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 13865, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "25702:49:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 13872, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 13868, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13866, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13839, "src": "25768:21:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "30", "id": 13867, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "25792:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "25768:25:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 13871, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 13869, "name": "finalNotional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13845, "src": "25797:13:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"hexValue": "30", "id": 13870, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "25814:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "25797:18:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "25768:47:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 13873, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "25767:49:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "25702:114:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 13857, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "25681:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 13875, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25681:145:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13876, "nodeType": "ExpressionStatement", "src": "25681:145:8"}, {"assignments": [13878, null, null, null], "declarations": [{"constant": false, "id": 13878, "mutability": "mutable", "name": "nTokenCashBalance", "nodeType": "VariableDeclaration", "scope": 13900, "src": "25878:24:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13877, "name": "int256", "nodeType": "ElementaryTypeName", "src": "25878:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, null, null, null], "id": 13884, "initialValue": {"arguments": [{"id": 13881, "name": "nTokenAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13831, "src": "26060:13:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 13882, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13833, "src": "26075:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 13879, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15305, "src": "26027:14:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$15305_$", "typeString": "type(library BalanceHandler)"}}, "id": 13880, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getBalanceStorage", "nodeType": "MemberAccess", "referencedDeclaration": 15166, "src": "26027:32:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_int256_$_t_int256_$_t_uint256_$_t_uint256_$", "typeString": "function (address,uint256) view returns (int256,int256,uint256,uint256)"}}, "id": 13883, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "26027:59:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$_t_uint256_$_t_uint256_$", "typeString": "tuple(int256,int256,uint256,uint256)"}}, "nodeType": "VariableDeclarationStatement", "src": "25864:222:8"}, {"expression": {"id": 13890, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 13885, "name": "nTokenCashBalance", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13878, "src": "26096:17:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 13888, "name": "netAssetCashNToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13841, "src": "26138:18:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 13886, "name": "nTokenCashBalance", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13878, "src": "26116:17:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13887, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 12081, "src": "26116:21:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 13889, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "26116:41:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "26096:61:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 13891, "nodeType": "ExpressionStatement", "src": "26096:61:8"}, {"expression": {"arguments": [{"id": 13895, "name": "nTokenAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13831, "src": "26276:13:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 13896, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13833, "src": "26291:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 13897, "name": "nTokenCashBalance", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 13878, "src": "26303:17:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 13892, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15305, "src": "26234:14:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$15305_$", "typeString": "type(library BalanceHandler)"}}, "id": 13894, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBalanceStorageForNToken", "nodeType": "MemberAccess", "referencedDeclaration": 14818, "src": "26234:41:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_int256_$returns$__$", "typeString": "function (address,uint256,int256)"}}, "id": 13898, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "26234:87:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 13899, "nodeType": "ExpressionStatement", "src": "26234:87:8"}]}, "id": 13901, "implemented": true, "kind": "function", "modifiers": [], "name": "_updateNTokenPortfolio", "nodeType": "FunctionDefinition", "parameters": {"id": 13842, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 13831, "mutability": "mutable", "name": "nTokenAddress", "nodeType": "VariableDeclaration", "scope": 13901, "src": "25127:21:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 13830, "name": "address", "nodeType": "ElementaryTypeName", "src": "25127:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 13833, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 13901, "src": "25158:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13832, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "25158:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 13835, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 13901, "src": "25186:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13834, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "25186:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 13837, "mutability": "mutable", "name": "lastInitializedTime", "nodeType": "VariableDeclaration", "scope": 13901, "src": "25212:27:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 13836, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "25212:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 13839, "mutability": "mutable", "name": "fCashAmountToPurchase", "nodeType": "VariableDeclaration", "scope": 13901, "src": "25249:28:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13838, "name": "int256", "nodeType": "ElementaryTypeName", "src": "25249:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 13841, "mutability": "mutable", "name": "netAssetCashNToken", "nodeType": "VariableDeclaration", "scope": 13901, "src": "25287:25:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 13840, "name": "int256", "nodeType": "ElementaryTypeName", "src": "25287:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "25117:201:8"}, "returnParameters": {"id": 13843, "nodeType": "ParameterList", "parameters": [], "src": "25327:0:8"}, "scope": 13902, "src": "25086:1242:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}], "scope": 13903, "src": "554:25776:8"}], "src": "41:26290:8"}, "bytecode": "6153df610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80633643f39b14610050578063b58f83ed14610087578063e50f349e146100b5575b600080fd5b81801561005c57600080fd5b5061007061006b366004614d12565b6100e2565b60405161007e929190614f40565b60405180910390f35b81801561009357600080fd5b506100a76100a2366004614c16565b6101b9565b60405161007e9291906152c7565b8180156100c157600080fd5b506100d56100d0366004614e28565b6102df565b60405161007e9190614f37565b60008060006100f087610321565b90506100fa61492e565b6000610104614976565b4260a082015260005b878110156101a357600061013a8d87878d8d8781811061012957fe5b905060200201358760a0015161034d565b8560000186602001828152508281525082935050505061016c8d8d61ffff16838e64ffffffffff168760200151610487565b60208401528380610181575060008360200151125b8351606085015191955061019591906105f4565b60608401525060010161010d565b50606001519450925050505b9550959350505050565b6101c16149ac565b6000806101cd87610321565b90506101d761492e565b6101df614976565b4260a082015260005b868110156102ca5760008888838181106101fe57fe5b9050602002013560f81c60ff16600581111561021657fe5b9050600281600581111561022657fe5b148061023d5750600381600581111561023b57fe5b145b156102635760405162461bcd60e51b815260040161025a90615215565b60405180910390fd5b60006102888d87878d8d8881811061027757fe5b905060200201358860a0015161034d565b602087018190529086529091506102ab908c9061ffff8f16908490600190610610565b50825160608401516102bc916105f4565b6060840152506001016101e8565b50606001519699969850959650505050505050565b6000806102eb84610321565b90506102f561492e565b600060f885901c600581111561030757fe5b90506103168383834289610715565b509695505050505050565b6103296149d4565b60006103388361ffff16610803565b9050610344838261084f565b9150505b919050565b600080808060f886901c600581111561036257fe5b9050600481600581111561037257fe5b14156103905761038489898789610892565b9195509350915061047b565b600581600581111561039e57fe5b14156103b05761038489898789610a7c565b60008160058111156103be57fe5b14806103d5575060018160058111156103d357fe5b145b15610463576103e7888883888a610715565b9093509150826104095760405162461bcd60e51b815260040161025a90615070565b86602001519350876000015161ffff16896001600160a01b03167fc53d733b6fdfac3f892b49bf468cd1cae7773ab553e440dc689ed6b09bb646b18686866040516104569392919061531f565b60405180910390a361047b565b60405162461bcd60e51b815260040161025a90615152565b50955095509592505050565b6000806104948787610cf5565b905060006104a0610d2a565b6001600160a01b0389166000908152602082815260408083208b845282528083208a84529091528120919250806104d7888a610d37565b91509150806104e557600080fd5b6104ef8583610e42565b1561057e57825460009061050b908990600f90810b900b6105f4565b905060016001607f1b0319811280159061052c575060016001607f1b038113155b61053557600080fd5b83546001600160801b0319166001600160801b03600f83900b16178455806105665761056386846000610e72565b95505b6105718c8c88610ec0565b95506105eb945050505050565b86156105e25760016001607f1b031987128015906105a3575060016001607f1b038713155b6105ac57600080fd5b82546001600160801b0319166001600160801b03600f89900b161783556105d585836001610e72565b94506105e28b8b87610ec0565b86955050505050505b95945050505050565b8181018281121560008312151461060a57600080fd5b92915050565b845161061f9085858585610f1a565b156106295761070e565b604085015115610656576000610646866020015186868686610f1a565b90508015610654575061070e565b505b61065f8261102b565b1561067257600081121561067257600080fd5b6001600160571b0319811280159061069157506001600160571b038113155b61069a57600080fd5b846020015151856040015114156106be576106b88560200151611041565b60208601525b600085602001518660400151815181106106d457fe5b602090810291909101810151868152908101859052604080820185905260608201849052600060a090920191909152860180516001019052505b5050505050565b60008060ff60f084901c1661072d88888385896110fa565b6001600160581b03609885901c169150600186600581111561074b57fe5b141561075d5761075a82611175565b91505b6107838883610779888b6020015161118390919063ffffffff16565b8a929190856111e0565b925063ffffffff607885901c1680156107f75760018760058111156107a457fe5b14156107d357808860a0015111156107ce5760405162461bcd60e51b815260040161025a906151e5565b6107f7565b808860a0015110156107f75760405162461bcd60e51b815260040161025a906151e5565b50509550959350505050565b61080b614a00565b60008060006108198561123f565b604080516060810182526001600160a01b039093168352602083019390935260ff16600a0a918101919091529350505050919050565b6108576149d4565b60006108668461ffff16611302565b6040805160808101825261ffff96909616865260ff821660208701528501939093525050606082015290565b6000808063ffffffff60d885901c16608085901c600a0b8682116108c85760405162461bcd60e51b815260040161025a906150d0565b6108d78860200151838961131f565b156108f45760405162461bcd60e51b815260040161025a90614f8e565b6000610907896000015161ffff166113c4565b9050600080610915836113ea565b9450509350505061093c81600260ff166005811061092f57fe5b8491610e10911a02611453565b8a1161095a5760405162461bcd60e51b815260040161025a9061517e565b600061096f848d6000015161ffff16886114ad565b90506000811280156109815750600085125b156109975780851215610992578094505b6109d4565b6000811380156109a75750600085135b156109bc5780851315610992578094506109d4565b60405162461bcd60e51b815260040161025a90614fc5565b60006109ed8d888e896001600160d81b031988166114f2565b9050610a05858e6000015161ffff1689878a86611579565b8d6001600160a01b03168764ffffffffff168e6000015161ffff167fe85dd6c9c85c29a2f4d4cb74e31514bfc478c8c5a50da255ea565123d87933528985604051610a51929190614f50565b60405180910390a486610a6382611175565b87995099509950505050505050505b9450945094915050565b60008080605884901c6001600160a01b038881169082161415610ab15760405162461bcd60e51b815260040161025a9061526e565b6001600160581b0385166000610ac6836115fe565b9050610ad18161169f565b15610b62576040516337b5fc2160e11b815273__SettleAssetsExternal__________________90636f6bf84290610b0f9086908590600401614ecb565b60a06040518083038186803b158015610b2757600080fd5b505af4158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f9190614d91565b90505b610b6e838a84846116f3565b915060006276a700610b7f8a611826565b0190506000610b908b838c87611847565b90506000811215610ba057600080fd5b604080516001808252818301909252600091816020015b610bbf614a2a565b815260200190600190039081610bb75790505090508b6000015161ffff1681600081518110610bea57fe5b602002602001015160000181815250508281600081518110610c0857fe5b60200260200101516020018181525050610c2182611175565b81600081518110610c2e57fe5b60200260200101516060018181525050600160ff1681600081518110610c5057fe5b60200260200101516040018181525050610c6b8685836118a7565b9350610c7990508386611928565b8b6001600160a01b03168b6000015161ffff16866001600160a01b03167fc76e4e38ccd25a7b0a39cdaa81a20efa0c2127e74c448b7b05aef1c427d5732b87610cc186611175565b604051610ccf929190614f50565b60405180910390a481610ce185611175565b909d909c50909a5098505050505050505050565b600080610d00611a2c565b6001600160a01b038516600090815260209182526040808220868352909252205491505092915050565b60008061060a600c611a35565b6000806000610d4585611a4e565b905062015180840615610d5f576000809250925050610e3b565b838110610d73576000809250925050610e3b565b6201518081850304605a8111610d9057925060019150610e3b9050565b6101688111610dcf576000620151806207e900840604820160591901905060068104605a0160068281610dbf57fe5b0660001494509450505050610e3b565b6108708111610dff5760006201518062278d00840604820161016719019050601e8104608701601e8281610dbf57fe5b611de28111610e2f576000620151806276a700840604820161086f19019050605a810460c301605a8281610dbf57fe5b61010060009350935050505b9250929050565b600060018210158015610e5757506101008211155b610e6057600080fd5b50600019011b600160ff1b9081161490565b600060018310158015610e8757506101008311155b610e9057600080fd5b8115610ea95750600160ff1b60001983011c8317610eb9565b50600160ff1b60001983011c1983165b9392505050565b6014610ecb82611a6a565b1115610ee95760405162461bcd60e51b815260040161025a906150a7565b6000610ef3611a2c565b6001600160a01b039094166000908152602094855260408082209482529390945250912055565b6000805b865181101561101e576000878281518110610f3557fe5b60200260200101519050848160400151141580610f53575080518714155b80610f62575085816020015114155b15610f6d5750611016565b60028160a001516003811115610f7f57fe5b14158015610f9d575060038160a001516003811115610f9a57fe5b14155b610fa657600080fd5b6060810151600090610fb890866105f4565b9050610fc38661102b565b15610fd6576000811215610fd657600080fd5b6001600160571b03198112801590610ff557506001600160571b038113155b610ffe57600080fd5b6060820152600160a090910181905291506105eb9050565b600101610f1e565b5060009695505050505050565b60006002821080159061060a5750506008101590565b60606000825160001461105857825160020261105b565b60015b905060008167ffffffffffffffff8111801561107657600080fd5b506040519080825280602002602001820160405280156110b057816020015b61109d614a2a565b8152602001906001900390816110955790505b50905060005b84518110156110f2578481815181106110cb57fe5b60200260200101518282815181106110df57fe5b60209081029190910101526001016110b6565b509392505050565b8260011115801561110f575084602001518311155b61112b5760405162461bcd60e51b815260040161025a9061512a565b600061114861113985611b3a565b61114284611826565b90611453565b905061116d866000015161ffff168284866111628b611bde565b8a9493929190611bf2565b505050505050565b600061060a60001983611c1c565b6000828211156111da576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000806111f08787878787611c6a565b9092509050600061120088611d6d565b90506112248189604001518a606001518b60a001518c60c001518d60e00151611d71565b86516112349061ffff1683611e85565b505095945050505050565b600080600080600061125086611f0c565b909250905060006001600160a01b0383166112755750600090506402540be4006112f7565b826001600160a01b0316631ee108336040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156112b057600080fd5b505af11580156112c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e89190614d79565b9050600081136112f757600080fd5b969195509350915050565b60008061130d611f43565b60009384526020525050604090205490565b60008084116113405760405162461bcd60e51b815260040161025a90614fed565b60078411156113615760405162461bcd60e51b815260040161025a906150fa565b6276a70083061561137457506000610eb9565b600061137f83611826565b905060015b8581116113b85761139e61139782611b3a565b8390611453565b8514156113b057600192505050610eb9565b600101611384565b50600095945050505050565b6000806113cf611f50565b6000938452602052505060409020546001600160a01b031690565b6000806000806000806113fb611f5d565b6001600160a01b039097166000908152602097909752505060409094205461ffff81169563ffffffff62010000830481169650600160301b830416945060ff600160501b8304169350600160581b90910460d81b9150565b600082820183811015610eb9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000806114b8610d2a565b6001600160a01b03861660009081526020918252604080822087835283528082208683529092522054600f90810b900b9150509392505050565b600080611500878787611f6a565b9050600483901a620f42400260008513156115265761151f8282611453565b915061153d565b808211156115385761151f8282611183565b600091505b60006115528361154d8a8a611183565b612053565b905061156c61156187836120c4565b60408b0151906120dd565b9998505050505050505050565b60006115908787878761158b88611175565b610487565b90506000831380156115a3575060008112155b806115ba57506000831280156115ba575060008113155b6115c357600080fd5b60006115cf888861211c565b50505090506115e783826105f490919063ffffffff16565b90506115f48888836121c5565b5050505050505050565b611606614a6a565b60006116106121e8565b6001600160a01b039390931660009081526020938452604090819020815160a081018352905464ffffffffff8116825265010000000000810460f81b6001600160f81b03191695820195909552600160301b850460ff1691810191909152600160381b840461ffff166060820152600160481b90930460701b6001600160701b03191660808401525090919050565b6000426116ab836121f5565b156116cc576116b981611a4e565b835164ffffffffff161091506103489050565b825164ffffffffff16158015906116eb5750825164ffffffffff168110155b915050610348565b60008083121561170257600080fd5b60008060008061171a89896000015161ffff1661211c565b9350935093509350600084126117425760405162461bcd60e51b815260040161025a906151b5565b8661175b5761175084611175565b965060009350611790565b61176484611175565b8713156117835760405162461bcd60e51b815260040161025a90615237565b61178d84886105f4565b93505b8315801561179c575082155b156117b95787516117b990879061ffff166000600160fe1b612202565b6117cf89896000015161ffff1686868686612402565b876000015161ffff16896001600160a01b03167f5441e4a5fac93a951d782e6f1cdb82e95c8fc58561a013953d17e395c5e69b4b896040516118119190614f37565b60405180910390a35094979650505050505050565b60006276a70082101561183857600080fd5b6276a700825b06909103919050565b600080611855868686611f6a565b9050600061187961186f61186889612540565b8490611453565b61154d8888611183565b905061189c81611896868a6040015161255590919063ffffffff16565b90612580565b979650505050505050565b6118af614a6a565b6118b88361169f565b156118d55760405162461bcd60e51b815260040161025a90615043565b6118de836121f5565b156118f3576118ee848484612599565b611920565b6000611905858560400151855161265a565b905061191181846126ed565b61191e848683600061274b565b505b509092915050565b60006119326121e8565b6001600160a01b03831660008181526020838152604080832088518154938a0151838b015160608c015160808d015160701c600160481b027affffffffffffffffffffffffffffffffffff0000000000000000001961ffff909216600160381b0268ffff000000000000001960ff94909416600160301b0266ff0000000000001960f89690961c650100000000000265ff00000000001964ffffffffff90981664ffffffffff19909b169a909a1796909616989098179390931693909317169490941716929092179091555192935090917f6bd4b121bca854a191536a2ca891155c42ee2fb23f307fb34e8bc65cfcb5412e9190a2505050565b60008061060a600b5b6000620f424082601a811115611a4757fe5b0192915050565b600062015180821015611a6057600080fd5b620151808261183e565b600181901c7f5555555555555555555555555555555555555555555555555555555555555555908116911601600281901c7f3333333333333333333333333333333333333333333333333333333333333333908116911601600481901c7f07070707070707070707070707070707070707070707070707070707070707079190911601600881901c7e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f908116911601601081901c01602081901c01604081901c01608081901c60ff90811691160190565b60008160011415611b4f57506276a700610348565b8160021415611b62575062ed4e00610348565b8160031415611b7657506301da9c00610348565b8160041415611b8a57506303b53800610348565b8160051415611b9e57506309450c00610348565b8160061415611bb2575063128a1800610348565b8160071415611bc657506325143000610348565b60405162461bcd60e51b815260040161025a9061501c565b6060015161012c60089190911c60ff160290565b60006276a700611c0185611826565b019050611c138787878787878761282d565b50505050505050565b818102600019831415611c4c57811580611c3e575082828281611c3b57fe5b05145b611c4757600080fd5b61060a565b821580611c61575081838281611c5e57fe5b05145b61060a57600080fd5b60008084876040015113611c83575060009050806101af565b6000806000611c948a8a8989612864565b925092509250600080611cae8c604001518587868e612904565b909250905080611cc9576000809650965050505050506101af565b506000806000611cdb8d858e8e6129b0565b9250925092508260001415611cfd5760008098509850505050505050506101af565b60408e0151611d0c908d612aa0565b60408f01819052611d2990611d2188856105f4565b89888f612abc565b60a08f01819052611d475760008098509850505050505050506101af565b611d588e8e60400151858585612b79565b98509850505050505050509550959350505050565b5190565b60008512158015611d8957506001600160501b038513155b611d9257600080fd5b60008412158015611daa57506001600160501b038413155b611db357600080fd5b826000108015611dc7575063ffffffff8311155b611dd057600080fd5b816000108015611de4575063ffffffff8211155b611ded57600080fd5b63ffffffff811115611dfe57600080fd5b855469ffffffffffffffffffff19166001600160501b039586161769ffffffffffffffffffff60501b1916600160501b94909516939093029390931763ffffffff60a01b1916600160a01b63ffffffff928316021763ffffffff60c01b1916600160c01b93821693909302929092176001600160e01b0316600160e01b9190921602179055565b6000811215611e9357600080fd5b6000611ea060008461211c565b5050509050611eb882826105f490919063ffffffff16565b9050611ecb600084836000806000612402565b8261ffff167f85170c297762884f47ec6098b74925c795e6d33686b11019b400e33a9b23b5e983604051611eff9190614f37565b60405180910390a2505050565b6000806000611f19612bce565b600094855260205250506040909120546001600160a01b03811692600160a01b90910460ff169150565b60008061060a6009611a35565b60008061060a6003611a35565b60008061060a6002611a35565b6000806000611f7e86602001518686612bdb565b915091506000611f8d87611bde565b905081611fb0578651611fa69061ffff16878388612c9c565b9350505050610eb9565b6000611fbb86611826565b90506000611fcb61139786611b3a565b90506000611fe38a6000015161ffff1683868b612c9c565b90506000808760011415612008578991506120018c60400151612d3b565b9050612037565b61201e61201760018a03611b3a565b8690611453565b91506120348c6000015161ffff1683888d612c9c565b90505b612044828583868f612dcc565b98505050505050505050610eb9565b6000806120766120716301da9c0061206b8787612e2a565b90612e83565b612eea565b9050600061208a82621dcd6560491b612f08565b9050600061209782612f5b565b905060006120ab82621dcd6560491b612fb0565b90506120b681612fe6565b60070b979650505050505050565b6000610eb96120d784633b9aca00611c1c565b83612fef565b600080612114846020015161210e86604001516121086402540be40088611c1c90919063ffffffff16565b90611c1c565b90612fef565b949350505050565b600080600080600061212c613020565b6001600160a01b0388166000908152602082815260408083208a8452909152902080546001600160501b0381169650600160501b900463ffffffff169450909150831561219557805461218e90600160701b900466ffffffffffffff1661302d565b92506121aa565b8054600160701b900466ffffffffffffff1692505b54600160a81b9004600a90810b900b97939650919450925050565b60008112156121d357600080fd5b6121e38383836000806000612402565b505050565b60008061060a6001611a35565b6060015161ffff16151590565b8260001080156122145750613fff8311155b61221d57600080fd5b818015612231575082846060015161ffff16145b1561223b576123fc565b6080840151600090815b6001600160701b03198216156123b65760f082901c613fff16868114801561226a5750855b156122a257506080870180516001600160f01b0319861660109093029290921c919091176001600160701b0319169052506123fc9050565b86811480156122af575085155b15612304576001600160f01b03198516199290921691600360fe1b83166122e2576010836001600160701b031916901b92505b506001600160701b031991821660109091021c919091171660808501526123fc565b86811180156123105750855b1561236a576080888101516001600160f01b031960f08a901b88178116601086021c9690961795911b161561234457600080fd5b506001600160701b03199182166001919091016010021c919091171660808501526123fc565b8681118015612377575085155b1561238557505050506123fc565b506001600160f01b0319821660108281029190911c93909317929190911b6001600160801b03191690600101612245565b846123c3575050506123fc565b600981106123d057600080fd5b6001600160f01b031960f087901b85171660109091021c919091176001600160701b0319166080860152505b50505050565b600061240c613020565b6001600160a01b0388166000908152602082815260408083208a845290915290209091506001600160571b0319861280159061244f57506001600160571b038613155b61245857600080fd5b6000851215801561247057506001600160501b038513155b61247957600080fd5b836124b95766ffffffffffffff83111561249257600080fd5b805466ffffffffffffff60701b1916600160701b66ffffffffffffff8516021781556124d3565b8054600160501b900463ffffffff1684146124d357600080fd5b8054600a9690960b6001600160581b0316600160a81b026001600160a81b036001600160501b0390961669ffffffffffffffffffff1963ffffffff909616600160501b0263ffffffff60501b19909816979097179490941695909517939093169190911790925550505050565b606001516207a12060309190911c60ff160290565b600080612114846040015161210e6402540be40061210e878960200151611c1c90919063ffffffff16565b6000610eb961258f8484611c1c565b633b9aca00612fef565b6125a2826121f5565b6125ab57600080fd5b606082015161ffff1660005b825181101561070e5760008382815181106125ce57fe5b602002602001015190508060600151600014156125eb5750612652565b805183146125f857600080fd5b604081015160011461260957600080fd5b600061262b87858460200151896000015164ffffffffff168660600151610487565b9050600081121561264f57602086018051600160f81b176001600160f81b03191690525b50505b6001016125b7565b6126626149ac565b61266a6149ac565b60ff8416612679579050610eb9565b612683858561303b565b815260ff841660608201528267ffffffffffffffff811180156126a557600080fd5b506040519080825280602002602001820160405280156126df57816020015b6126cc614a2a565b8152602001906001900390816126c45790505b506020820152949350505050565b60005b81518110156121e357600082828151811061270757fe5b602002602001015190508060600151600014156127245750612743565b612741848260000151836020015184604001518560600151610610565b505b6001016126f0565b600080808061275a8688613064565b64ffffffffff81168c52929650909450925090506127778861169f565b1561278157600080fd5b60ff82166040890152846127a057600760ff831611156127a057600080fd5b83156127c357602088018051600160f81b176001600160f81b03191690526127d2565b602088018051607f60f91b1690525b6127df88608001516132a3565b6001600160701b031916608089015260005b83156128225760f084901c818114612814576128148a826001600160ff1b612202565b60109490941b9390506127f1565b505050505050505050565b61283a878787868561331e565b6128538760e001518860a001518960c0015185886133d8565b60c090970196909652505050505050565b600080808061287487868861346b565b905060006128938960600151896040015161255590919063ffffffff16565b90508860400151600014806128a6575080155b156128bd5760008060009450945094505050610a72565b6000806128d58b604001518c60a0015185878d6134dd565b9092509050806128f357600080600096509650965050505050610a72565b509199909850909650945050505050565b600080806129128885612aa0565b9050600061292a6129238a8a6105f4565b83906120c4565b9050633b023380811315612946576000809350935050506101af565b6000806129528361356d565b915091508061296b5760008095509550505050506101af565b60006129818961297b858d6120c4565b906105f4565b9050633b9aca008112156129a0576000809650965050505050506101af565b9550600194506101af9350505050565b60008080806129c76129c287896120c4565b611175565b905060006129dd6129d78a61360f565b87612053565b90506000871315612a355760006129f489836120c4565b9050633b9aca00811215612a15576000806000955095509550505050610a72565b612a2d612a26633b9aca0084613624565b8490612580565b915050612a57565b612a546129c28261210e612a4d633b9aca0083613624565b8690611c1c565b90505b6000612a71606461210e612a6a8d61363a565b8590611c1c565b9050612a7d8383613624565b612a8e6129c28361297b8787613624565b909b909a509098509650505050505050565b6000612aac8383613624565b9050600081121561060a57600080fd5b6000806000612acf888888886000612904565b9150915080612ae3576000925050506105eb565b6000612aee83613647565b90506000612b0282621dcd6560491b612f08565b90506000612b0f82613673565b90506000612b2b612b2683621dcd6560491b612fb0565b6136ad565b67ffffffffffffffff1690506000612b4b8961206b846301da9c00612e2a565b905063ffffffff811115612b695760009750505050505050506105eb565b9c9b505050505050505050505050565b60008080612b8787866120dd565b6060890151909150612b9990826105f4565b60608901524260e08901526000612bb088866120dd565b90506000612bbe89896120dd565b9a91995090975050505050505050565b60008061060a600f611a35565b60008060008511612bfe5760405162461bcd60e51b815260040161025a90614fed565b6007851115612c1f5760405162461bcd60e51b815260040161025a906150fa565b6000612c2a84611826565b905060015b868111612c7b576000612c4461186883611b3a565b905086811415612c5c5750925060009150612c949050565b86811115612c725750925060019150612c949050565b50600101612c2f565b5060405162461bcd60e51b815260040161025a9061529a565b935093915050565b600080612ca76136c9565b905060006276a700612cb885611826565b6000898152602085815260408083208b84528252808320949093018083529390522080549192509063ffffffff600160a01b8204811691600160c01b8104821691600160e01b9091041681612d1f5760405162461bcd60e51b815260040161025a90614f5e565b612d2c8184848c8c6133d8565b9b9a5050505050505050505050565b80516000906001600160a01b0316612d5557506000610348565b600082600001516001600160a01b031663dd30a6666040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9457600080fd5b505afa158015612da8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb99190614d79565b6000818610612dda57600080fd5b848210612de657600080fd5b838310612e0c57612e058461114288880361206b8388038b8803612e2a565b90506105eb565b612e05612e2387870361206b8688038a8703612e2a565b8590611183565b600082612e395750600061060a565b82820282848281612e4657fe5b0414610eb95760405162461bcd60e51b81526004018080602001828103825260218152602001806153896021913960400191505060405180910390fd5b6000808211612ed9576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612ee257fe5b049392505050565b6000677fffffffffffffff821115612f0157600080fd5b5060401b90565b600081600f0b60001415612f1b57600080fd5b600082600f0b604085600f0b901b81612f3057fe5b05905060016001607f1b03198112801590612f52575060016001607f1b038113155b610eb957600080fd5b6000600160461b82600f0b12612f7057600080fd5b683fffffffffffffffff1982600f0b1215612f8d57506000610348565b61060a608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d6136d6565b6000600f83810b9083900b0260401d60016001607f1b03198112801590612f52575060016001607f1b03811315610eb957600080fd5b600f0b60401d90565b6000816000191480156130055750600160ff1b83145b1561300f57600080fd5b81838161301857fe5b059392505050565b60008061060a6006611a35565b600881901c60ff9091161b90565b606060006130498484614184565b9050600181511161305b57905061060a565b610eb9816142a6565b6000808080808080805b8951518110156130f55760008a60000151828151811061308a57fe5b602002602001015190506003808111156130a057fe5b8160a0015160038111156130b057fe5b14156130bb57600080fd5b60028160a0015160038111156130cd57fe5b141580156130dd57506060810151155b156130ec576130ec8b8361445f565b5060010161306e565b5060005b8951518110156131985760008a60000151828151811061311557fe5b602002602001015190506002600381111561312c57fe5b8160a00151600381111561313c57fe5b14156131505760808101516000905561318f565b60018160a00151600381111561316257fe5b141561317b5760808101518061317883826145af565b50505b613187818686866146d4565b919650945092505b506001016130f9565b50606089015160006131a8614737565b6001600160a01b038b1660009081526020829052604081209192505b8c60200151518110156132725760008d6020015182815181106131e357fe5b60200260200101519050806060015160001415613200575061326a565b60028160a00151600381111561321257fe5b14158015613230575060038160a00151600381111561322d57fe5b14155b61323957600080fd5b613245818989896146d4565b919950975095506132628184876010811061325c57fe5b016145af565b600185019450505b6001016131c4565b5060108311158015613289575064ffffffffff8411155b61329257600080fd5b50939a929950975095509350505050565b6000807f7fff7fff7fff7fff7fff7fff7fff7fff7fff00000000000000000000000000008316815b6001600160701b031982161561331557600160fe1b82811614156132ff576001600160f01b03198216811c92909217916010015b6010826001600160701b031916901b91506132cb565b50909392505050565b60006133286136c9565b6000868152602082815260408083208884528252808320868452825291829020808a5290890187905280546001600160501b03808216938b0193909352600160501b810490921660608a015263ffffffff600160a01b8304811660a08b0152600160c01b8304811660c08b0152600160e01b90920490911660e08901529091508084156133c75760018201546001600160501b031660808901526115f4565b600060808901525050505050505050565b60008083116133e657600080fd5b818611156133f55750836105eb565b60006134018388611183565b90508381111561341457859150506105eb565b60006134288561206b84633b9aca00612e2a565b9050600061343a633b9aca0083611183565b9050600061345d633b9aca0061206b6134538b86612e2a565b6111428d88612e2a565b9a9950505050505050505050565b600082600111158015613482575083602001518311155b61348b57600080fd5b606084015160806008600019860102019060ff90821c16633b9aca000260006134c46134b686614744565b61210e846301da9c00611c1c565b9050600081136134d357600080fd5b9695505050505050565b60008060006134ec8785612053565b9050633b9aca008112156135075760008092509250506101af565b60008061351e6135178b8a6105f4565b8b906120c4565b905060008061352c8361356d565b9150915080613546576000809650965050505050506101af565b61355a613553838b6120c4565b8690613624565b9c60019c509a5050505050505050505050565b600080633b9aca008314156135875750600090508061360a565b60006135a161359a633b9aca0086613624565b85906120c4565b905060006135ae82613647565b9050600081600f0b136135c95760008093509350505061360a565b60006135fd6135f86135ec6135dd85613673565b6814b927f32bffb8333861475e565b621dcd6560491b612fb0565b612fe6565b60070b9450600193505050505b915091565b60600151620186a060109190911c60ff160290565b8082038281131560008312151461060a57600080fd5b6060015160181c60ff1690565b6000677fffffffffffffff19821215801561366a5750677fffffffffffffff8213155b612f0157600080fd5b60008082600f0b1361368457600080fd5b608061368f83614791565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b60008082600f0b12156136bf57600080fd5b50600f0b60401d90565b60008061060a600a611a35565b6000600160461b82600f0b126136eb57600080fd5b683fffffffffffffffff1982600f0b121561370857506000610348565b6001607f1b60006001603f1b8416600f0b13156137365770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315613763577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315613790577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b13156137bd5770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b13156137ea577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b131561381757700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b13156138445770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600083600160381b16600f0b131561386d57700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b13156138995770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b13156138c5577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b13156138f157700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b131561391d577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b131561394957700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156139755770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b13156139a1577001000162e525ee054754457d59952920260260801c5b600083600160301b16600f0b13156139ca5770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b13156139f5577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b1315613a2057700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b1315613a4b5770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b1315613a7657700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b1315613aa15770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315613acc577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b1315613af757700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b1315613b22577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b1315613b4c57700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b1315613b765770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b1315613ba0577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b1315613bca5770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315613bf4577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b1315613c1e57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b1315613c485770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b1315613c7257700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b1315613c9b5770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315613cc4577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b1315613ced57700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315613d16577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b1315613d3f57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b1315613d685770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b1315613d91577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b1315613dba5770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b1315613de2577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b1315613e0a57700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b1315613e325770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b1315613e5a57700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b1315613e825770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315613eaa577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b1315613ed257700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315613efa577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b1315613f2157700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b1315613f485770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b1315613f6f577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b1315613f965770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315613fbd577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b1315613fe457700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b131561400b5770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561403257700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156140585770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b131561407e577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b13156140a457700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b13156140ca577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b13156140f057700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156141165770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b131561413c577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b13156141625770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b0381111561060a57600080fd5b606060108260ff16111561419757600080fd5b60006141a1614737565b6001600160a01b038516600090815260208290526040812091925060ff851667ffffffffffffffff811180156141d657600080fd5b5060405190808252806020026020018201604052801561421057816020015b6141fd614a2a565b8152602001906001900390816141f55790505b50905060005b8560ff1681101561429c57600083826010811061422f57fe5b019050600083838151811061424057fe5b602090810291909101810151835461ffff8116825264ffffffffff620100008204169282019290925260ff600160381b8304166040820152600160401b909104600a90810b900b60608201526080019190915250600101614216565b5095945050505050565b805160008167ffffffffffffffff811180156142c157600080fd5b506040519080825280602002602001820160405280156142eb578160200160208202803683370190505b50905060005b8281101561434857600084828151811061430757fe5b6020026020010151905061432881600001518260200151836040015161486c565b83838151811061433457fe5b6020908102919091010152506001016142f1565b5060015b828110156123fc57805b60008111801561438e575082818151811061436d57fe5b602002602001015183600183038151811061438457fe5b6020026020010151115b156144565782818151811061439f57fe5b60200260200101518360018303815181106143b657fe5b60200260200101518460018403815181106143cd57fe5b602002602001018584815181106143e057fe5b60200260200101828152508281525050508481815181106143fd57fe5b602002602001015185600183038151811061441457fe5b602002602001015186600184038151811061442b57fe5b6020026020010187848151811061443e57fe5b60209081029190910101919091525260001901614356565b5060010161434c565b815151811061446d57600080fd5b600082606001511161447e57600080fd5b60008260000151828151811061449057fe5b60200260200101519050600260038111156144a757fe5b8160a0015160038111156144b757fe5b141580156144d5575060038160a0015160038111156144d257fe5b14155b6144de57600080fd5b606083018051600019019052600080805b8551518110156145515760008660000151828151811061450b57fe5b60200260200101519050828160800151118015614538575060028160a00151600381111561453557fe5b14155b1561454857806080015192508193505b506001016144ef565b508184141561456a575050600260a091909101526145ab565b60008560000151838151811061457c57fe5b602090810291909101015160808581018051918301805190915252600160a09182015260029401939093525050505b5050565b8151158015906145c257508151613fff10155b6145cb57600080fd5b816020015160001080156145e85750602082015164ffffffffff10155b6145f157600080fd5b8160400151600010801561460a57506040820151600810155b61461357600080fd5b60608201516001600160571b03191380159061463a575060608201516001600160571b0312155b61464357600080fd5b8151815460208401516040850151606090950151600a0b6001600160581b0316600160401b0272ffffffffffffffffffffff00000000000000001960ff909616600160381b0267ff000000000000001964ffffffffff909316620100000266ffffffffff00001961ffff90961661ffff19909516949094179490941692909217169190911792909216919091179055565b6000806000806146e3886148c7565b90508415806146f157508085115b156146fa578094505b868061470a575060008860600151125b965061ffff86161561471b57600080fd5b50509451939560109390931c60f09490941b9390931793509150565b60008061060a600d611a35565b60006001600160ff1b0382111561475a57600080fd5b5090565b6000600f82810b9084900b0360016001607f1b03198112801590612f52575060016001607f1b03811315610eb957600080fd5b60008082600f0b136147a257600080fd5b6000600f83900b600160401b81126147bc576040918201911d5b64010000000081126147d0576020918201911d5b6201000081126147e2576010918201911d5b61010081126147f3576008918201911d5b60108112614803576004918201911d5b60048112614813576002918201911d5b60028112614822576001820191505b603f19820160401b600f85900b607f8490031b6001603f1b5b60008113156148615790800260ff81901c8281029390930192607f011c9060011d61483b565b509095945050505050565b6000613fff84111561487d57600080fd5b64ffffffffff83111561488f57600080fd5b600882111561489d57600080fd5b5067ffff000000000000603084901b1665ffffffffff00600884901b161760ff8216179392505050565b60008082604001511180156148e157506040820151600810155b6148ea57600080fd5b604082015160021061490157506020810151610348565b60006149136001846040015103611b3a565b6020840151909150610344906276a700906111429084611183565b60405180610100016040528060008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280606081526020016060815260200160008152602001600081525090565b60408051608081018252600080825260208201529081016149f3614a00565b8152600060209091015290565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160006003811115614a6557fe5b905290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b80356001600160a01b038116811461034857600080fd5b60008083601f840112614ac0578081fd5b50813567ffffffffffffffff811115614ad7578182fd5b6020830191508360208083028501011115610e3b57600080fd5b600082601f830112614b01578081fd5b8135602067ffffffffffffffff80831115614b1857fe5b614b25828385020161533e565b8381528281019086840160c0808702890186018a1015614b43578788fd5b875b87811015614bc45781838c031215614b5b578889fd5b604080518381018181108982111715614b7057fe5b82528435815288850135898201528482013591810191909152606080850135908201526080808501359082015260a090614bab828601614beb565b9181019190915285529386019391810191600101614b45565b50919998505050505050505050565b80516001600160701b03198116811461034857600080fd5b80356004811061034857600080fd5b805161034881615362565b805160ff8116811461034857600080fd5b600080600080600060808688031215614c2d578081fd5b614c3686614a98565b94506020860135614c4681615362565b9350604086013567ffffffffffffffff80821115614c62578283fd5b908701906080828a031215614c75578283fd5b604051608081018181108382111715614c8a57fe5b604052823582811115614c9b578485fd5b614ca78b828601614af1565b825250602083013582811115614cbb578485fd5b614cc78b828601614af1565b60208301525060408381013590820152606092830135838201529450908701359080821115614cf4578283fd5b50614d0188828901614aaf565b969995985093965092949392505050565b600080600080600060808688031215614d29578081fd5b614d3286614a98565b94506020860135614d4281615362565b93506040860135614d5281615375565b9250606086013567ffffffffffffffff811115614d6d578182fd5b614d0188828901614aaf565b600060208284031215614d8a578081fd5b5051919050565b600060a08284031215614da2578081fd5b60405160a0810181811067ffffffffffffffff82111715614dbf57fe5b6040528251614dcd81615375565b815260208301516001600160f81b031981168114614de9578283fd5b6020820152614dfa60408401614c05565b6040820152614e0b60608401614bfa565b6060820152614e1c60808401614bd3565b60808201529392505050565b60008060408385031215614e3a578182fd5b8235614e4581615362565b946020939093013593505050565b6000815180845260208085019450808401835b83811015614ec057815180518852838101518489015260408082015190890152606080820151908901526080808201519089015260a0908101519060048210614eab57fe5b88015260c09096019590820190600101614e66565b509495945050505050565b6001600160a01b03929092168252805164ffffffffff166020808401919091528101516001600160f81b03191660408084019190915281015160ff1660608084019190915281015161ffff1660808084019190915201516001600160701b03191660a082015260c00190565b90815260200190565b9182521515602082015260400190565b918252602082015260400190565b60208082526016908201527513585c9ad95d081b9bdd081a5b9a5d1a585b1a5e995960521b604082015260600190565b6020808252601a908201527f4e6f6e206964696f73796e637261746963206d61747572697479000000000000604082015260600190565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b60208082526015908201527410d1ce881b9bc81b585c9ad95d1cc81b1a5cdd1959605a1b604082015260600190565b6020808252600d908201526c092dcecc2d8d2c840d2dcc8caf609b1b604082015260600190565b6020808252601390820152724163636f756e74206d75737420736574746c6560681b604082015260600190565b60208082526017908201527f5472616465206661696c65642c206c6971756964697479000000000000000000604082015260600190565b6020808252600f908201526e4f766572206d61782061737365747360881b604082015260600190565b60208082526010908201526f496e76616c6964206d6174757269747960801b604082015260600190565b60208082526016908201527510d1ce881b585c9ad95d081a5b99195e08189bdd5b9960521b604082015260600190565b6020808252600e908201526d125b9d985b1a59081b585c9ad95d60921b604082015260600190565b602080825260129082015271496e76616c6964207472616465207479706560701b604082015260600190565b60208082526017908201527f496e73756666696369656e7420626c6f636b2074696d65000000000000000000604082015260600190565b602080825260169082015275496e76616c696420736574746c652062616c616e636560501b604082015260600190565b6020808252601690820152755472616465206661696c65642c20736c69707061676560501b604082015260600190565b602080825260089082015267111a5cd8589b195960c21b604082015260600190565b60208082526018908201527f496e76616c696420616d6f756e7420746f20736574746c650000000000000000604082015260600190565b60208082526012908201527121b0b73737ba1039b2ba3a36329039b2b63360711b604082015260600190565b60208082526013908201527210d1ce881b9bc81b585c9ad95d08199bdd5b99606a1b604082015260600190565b6000604082528351608060408401526152e360c0840182614e53565b90506020850151603f198483030160608501526153008282614e53565b6040870151608086015260609096015160a08501525050506020015290565b64ffffffffff9390931683526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561535a57fe5b604052919050565b61ffff8116811461537257600080fd5b50565b64ffffffffff8116811461537257600080fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122074317aaabefe25b77e4dbf698015c66afdb432f2ffa5bcfe6ea1284b5b1bce7364736f6c63430007060033", "bytecodeSha1": "29406a7fc8e88bc0fb95255aaf210c39a25ddf5c", "compiler": {"evm_version": "istanbul", "optimizer": {"enabled": true, "runs": 200}, "version": "0.7.6+commit.7338295f"}, "contractName": "TradingAction", "coverageMap": {"branches": {"0": {"SafeMath.add": {"818": [2794, 2800, true]}, "SafeMath.div": {"821": [4294, 4299, true]}, "SafeMath.mul": {"819": [3611, 3617, false], "820": [3672, 3682, true]}, "SafeMath.sub": {"817": [3213, 3219, true]}}, "11": {}, "12": {}, "13": {}, "15": {}, "16": {"AccountContextHandler._clearPortfolioActiveFlags": {"655": [9343, 9420, false]}, "AccountContextHandler.mustSettleAssets": {"633": [3173, 3204, false]}, "AccountContextHandler.setActiveCurrency": {"634": [5431, 5445, false], "635": [5449, 5487, true], "636": [5707, 5715, false], "637": [5719, 5764, false], "638": [6877, 6894, false], "639": [6898, 6906, false], "640": [7232, 7249, false], "641": [7254, 7262, false], "642": [7405, 7455, false], "643": [7689, 7705, false], "644": [7709, 7717, false], "645": [8010, 8058, true], "646": [8358, 8374, false], "647": [8379, 8387, false], "648": [8616, 8624, false], "649": [8724, 8734, true]}, "AccountContextHandler.storeAssetsAndUpdateContext": {"650": [10453, 10494, true], "651": [10772, 10785, false], "652": [10809, 10869, true], "653": [11059, 11066, false], "654": [11955, 11981, false]}}, "17": {"BalanceHandler._setBalanceStorage": {"670": [20570, 20600, false], "671": [20604, 20634, true], "672": [20774, 20792, false], "673": [20796, 20829, true], "674": [20884, 20902, false], "675": [21192, 21232, true], "676": [21563, 21608, true]}, "BalanceHandler.getBalanceStorage": {"668": [22482, 22499, false]}, "BalanceHandler.incrementFeeToReserve": {"667": [18917, 18925, true]}, "BalanceHandler.setBalanceStorageForNToken": {"669": [18135, 18151, true]}, "BalanceHandler.setBalanceStorageForSettleCashDebt": {"661": [13236, 13260, true], "662": [13534, 13549, true], "663": [13590, 13614, false], "664": [13850, 13890, true], "665": [14140, 14156, false], "666": [14160, 14178, false]}}, "18": {}, "19": {}, "2": {}, "20": {}, "21": {}, "22": {}, "23": {"AssetRate._getAssetRateStateful": {"658": [4732, 4765, false], "659": [5116, 5124, true]}, "AssetRate.getSupplyRate": {"660": [2477, 2513, false]}}, "24": {"CashGroup.calculateOracleRate": {"697": [9928, 9941, false], "698": [10537, 10553, false]}, "CashGroup.getRateScalar": {"702": [2840, 2856, false], "703": [2860, 2899, true], "704": [3358, 3372, true]}, "CashGroup.interpolateOracleRate": {"699": [8136, 8165, true], "700": [8239, 8267, true], "701": [8503, 8524, false]}, "CashGroup.loadMarket": {"695": [7199, 7215, false], "696": [7219, 7258, true]}}, "25": {"DateTime.getBitNumFromMaturity": {"705": [4283, 4312, false], "706": [4387, 4412, false], "707": [4680, 4718, false], "708": [4780, 4819, false], "709": [5662, 5702, false], "710": [6112, 6154, false]}, "DateTime.getMarketIndex": {"724": [3155, 3173, true], "725": [3217, 3268, true], "726": [3566, 3592, false], "727": [3709, 3734, false]}, "DateTime.getReferenceTime": {"715": [425, 455, true]}, "DateTime.getTimeUTC0": {"716": [668, 689, true]}, "DateTime.getTradedMarket": {"717": [1014, 1024, false], "718": [1064, 1074, false], "719": [1118, 1128, false], "720": [1165, 1175, false], "721": [1216, 1226, false], "722": [1267, 1277, false], "723": [1319, 1329, false]}, "DateTime.isValidMarketMaturity": {"711": [1665, 1683, true], "712": [1727, 1778, true], "713": [1820, 1853, false], "714": [2003, 2052, false]}}, "26": {"Market._getExchangeRate": {"741": [20081, 20125, false], "742": [20234, 20241, false], "743": [20465, 20496, false]}, "Market._getNetCashAmountsUnderlying": {"744": [10123, 10141, false], "745": [10543, 10589, false]}, "Market._getRateAnchor": {"752": [15584, 15626, false], "753": [15960, 15967, false]}, "Market._logProportion": {"754": [21007, 21045, false], "755": [21660, 21679, false]}, "Market._setMarketStorage": {"730": [29244, 29259, false], "731": [29263, 29293, true], "732": [29348, 29367, false], "733": [29371, 29405, true], "734": [29464, 29483, false], "735": [29487, 29522, true], "736": [29582, 29596, false], "737": [29600, 29630, true], "738": [29711, 29748, true]}, "Market._updateRateOracle": {"749": [23300, 23324, true], "750": [23472, 23501, false], "751": [23601, 23632, false]}, "Market.calculateTrade": {"728": [4788, 4823, false], "729": [5990, 6011, false]}, "Market.getExchangeRateFactors": {"739": [8066, 8088, true], "740": [8092, 8116, false]}, "Market.getImpliedRate": {"746": [16780, 16787, false], "747": [17738, 17768, false]}, "Market.getOracleRate": {"748": [25399, 25413, true]}}, "28": {}, "29": {}, "30": {"BitmapAssetsHandler.addMultipleifCashAssets": {"690": [1930, 1962, true], "691": [2179, 2198, false], "692": [2231, 2261, true], "693": [2327, 2372, true], "694": [2692, 2709, false]}, "BitmapAssetsHandler.addifCashAsset": {"682": [3621, 3628, true], "683": [3689, 3718, false], "684": [3879, 3912, false], "685": [3916, 3949, true], "686": [4348, 4361, false], "687": [4483, 4511, false], "688": [4515, 4543, true]}, "BitmapAssetsHandler.setAssetsBitmap": {"689": [1069, 1127, true]}}, "31": {"PortfolioHandler._extendNewAssetArray": {"773": [5552, 5573, true]}, "PortfolioHandler._loadAssetArray": {"787": [16955, 16985, true]}, "PortfolioHandler._mergeAssetIntoArray": {"764": [1530, 1558, true], "765": [1578, 1608, true], "766": [1628, 1654, false], "767": [1853, 1899, false], "768": [1919, 1973, true], "769": [2173, 2213, false], "770": [2241, 2257, true], "771": [2354, 2384, false], "772": [2388, 2418, true]}, "PortfolioHandler._storeAsset": {"795": [11735, 11755, false], "796": [11759, 11803, true], "797": [11864, 11882, false], "798": [11886, 11920, true], "799": [11978, 11997, false], "800": [12001, 12055, true], "801": [12108, 12141, false], "802": [12145, 12178, true]}, "PortfolioHandler._updatePortfolioContext": {"803": [11089, 11108, true], "804": [11112, 11143, false], "805": [11268, 11315, true]}, "PortfolioHandler.addAsset": {"756": [3230, 3416, false], "757": [3448, 3484, false], "758": [3715, 3721, false], "759": [3904, 3944, false], "760": [3968, 3981, true], "761": [4069, 4096, false], "762": [4100, 4127, true], "763": [4242, 4309, false]}, "PortfolioHandler.addMultipleAssets": {"775": [914, 933, false]}, "PortfolioHandler.buildPortfolioState": {"774": [15658, 15679, false]}, "PortfolioHandler.deleteAsset": {"788": [12795, 12837, true], "789": [12885, 12921, true], "790": [13072, 13126, false], "791": [13142, 13204, true], "792": [13680, 13709, false], "793": [13713, 13755, false], "794": [13883, 13910, false]}, "PortfolioHandler.getSortedPortfolio": {"776": [15082, 15100, false]}, "PortfolioHandler.storeAssets": {"777": [7495, 7549, true], "778": [7625, 7671, false], "779": [7675, 7694, false], "780": [8021, 8067, false], "781": [8305, 8351, false], "782": [9569, 9588, false], "783": [9637, 9683, false], "784": [9703, 9757, true], "785": [10311, 10335, false], "786": [10339, 10373, true]}}, "32": {"TransferAssets.encodeAssetId": {"824": [1043, 1081, true], "825": [1100, 1128, true], "826": [1147, 1195, true]}, "TransferAssets.placeAssetsInAccount": {"822": [2322, 2356, true], "823": [2395, 2427, false]}}, "33": {}, "34": {}, "35": {"AssetHandler.getSettlementDate": {"656": [1112, 1131, false], "657": [1135, 1189, true]}}, "41": {"ABDKMath64x64.div": {"545": [6751, 6757, true], "546": [6817, 6836, false], "547": [6840, 6859, true]}, "ABDKMath64x64.exp": {"548": [21409, 21433, true], "549": [21457, 21482, false]}, "ABDKMath64x64.exp_2": {"556": [14708, 14732, true], "557": [14756, 14781, false], "558": [14873, 14899, false], "559": [14977, 15003, false], "560": [15081, 15107, false], "561": [15185, 15211, false], "562": [15289, 15314, false], "563": [15392, 15417, false], "564": [15495, 15520, false], "565": [15598, 15623, false], "566": [15701, 15725, false], "567": [15803, 15827, false], "568": [15905, 15929, false], "569": [16007, 16031, false], "570": [16109, 16132, false], "571": [16210, 16233, false], "572": [16311, 16334, false], "573": [16412, 16435, false], "574": [16513, 16535, false], "575": [16613, 16635, false], "576": [16713, 16735, false], "577": [16813, 16835, false], "578": [16913, 16934, false], "579": [17012, 17033, false], "580": [17111, 17132, false], "581": [17210, 17231, false], "582": [17309, 17329, false], "583": [17407, 17427, false], "584": [17505, 17525, false], "585": [17603, 17623, false], "586": [17701, 17720, false], "587": [17798, 17817, false], "588": [17895, 17914, false], "589": [17992, 18011, false], "590": [18089, 18107, false], "591": [18185, 18203, false], "592": [18281, 18299, false], "593": [18377, 18395, false], "594": [18473, 18490, false], "595": [18568, 18585, false], "596": [18663, 18680, false], "597": [18758, 18775, false], "598": [18853, 18869, false], "599": [18947, 18963, false], "600": [19041, 19057, false], "601": [19135, 19151, false], "602": [19229, 19244, false], "603": [19322, 19337, false], "604": [19415, 19430, false], "605": [19508, 19523, false], "606": [19601, 19615, false], "607": [19693, 19707, false], "608": [19785, 19799, false], "609": [19877, 19891, false], "610": [19969, 19982, false], "611": [20060, 20073, false], "612": [20151, 20164, false], "613": [20242, 20255, false], "614": [20333, 20345, false], "615": [20423, 20435, false], "616": [20513, 20525, false], "617": [20603, 20615, false], "618": [20693, 20704, false], "619": [20782, 20793, false], "620": [20871, 20882, false], "621": [20960, 20971, false], "622": [21096, 21125, true]}, "ABDKMath64x64.fromInt": {"552": [1312, 1336, false], "553": [1340, 1363, true]}, "ABDKMath64x64.fromUInt": {"544": [2004, 2027, true]}, "ABDKMath64x64.ln": {"554": [14352, 14357, true]}, "ABDKMath64x64.log_2": {"625": [13408, 13413, true], "626": [13464, 13489, false], "627": [13525, 13542, false], "628": [13578, 13591, false], "629": [13627, 13638, false], "630": [13672, 13682, false], "631": [13716, 13725, false], "632": [13759, 13768, false]}, "ABDKMath64x64.mul": {"550": [4307, 4326, false], "551": [4330, 4349, true]}, "ABDKMath64x64.sub": {"623": [3883, 3902, false], "624": [3906, 3925, true]}, "ABDKMath64x64.toUInt": {"555": [2373, 2379, true]}}, "42": {"Bitmap.isBitSet": {"677": [828, 838, false], "678": [842, 854, true]}, "Bitmap.setBit": {"679": [455, 465, false], "680": [469, 481, true], "681": [526, 531, false]}}, "43": {}, "44": {"SafeInt256.add": {"806": [1511, 1539, true]}, "SafeInt256.div": {"813": [1108, 1115, false], "814": [1119, 1135, true]}, "SafeInt256.mul": {"807": [497, 504, false], "808": [515, 521, true], "809": [525, 535, true], "810": [560, 566, true], "811": [570, 580, true]}, "SafeInt256.sub": {"815": [1385, 1413, true]}, "SafeInt256.subNoNeg": {"812": [1885, 1891, true]}, "SafeInt256.toInt": {"816": [2596, 2626, true]}}, "47": {}, "49": {}, "5": {}, "53": {}, "54": {}, "55": {}, "56": {}, "57": {}, "6": {}, "8": {"TradingAction._executeLendBorrowTrade": {"521": [13460, 13495, false], "522": [13780, 13794, false], "523": [13814, 13849, false], "524": [13937, 13972, true], "525": [14105, 14140, true]}, "TradingAction._executeTrade": {"516": [7554, 7605, false], "517": [7819, 7862, false], "518": [7990, 8023, true], "519": [8027, 8062, false], "520": [8293, 8308, true]}, "TradingAction._getResidualPriceAssetCash": {"538": [24034, 24049, false], "539": [24295, 24325, false]}, "TradingAction._purchaseNTokenResidual": {"526": [20033, 20053, true], "527": [20242, 20320, true], "528": [21392, 21560, true], "529": [21833, 21845, false], "530": [21849, 21874, false], "531": [21973, 22005, false], "532": [22060, 22072, false], "533": [22076, 22101, false], "534": [22200, 22232, false]}, "TradingAction._settleCashDebt": {"535": [15320, 15343, true], "536": [15570, 15608, false], "537": [16743, 16759, true]}, "TradingAction._updateNTokenPortfolio": {"540": [25703, 25728, false], "541": [25732, 25750, true], "542": [25768, 25793, false], "543": [25797, 25815, true]}, "TradingAction.executeTradesArrayBatch": {"514": [5260, 5301, true], "515": [5321, 5365, false]}}}, "statements": {"0": {"SafeMath.add": {"128": [2786, 2832]}, "SafeMath.div": {"314": [4286, 4330], "315": [4340, 4352]}, "SafeMath.mul": {"312": [3619, 3627], "313": [3664, 3720]}, "SafeMath.sub": {"106": [3205, 3254], "107": [3264, 3276]}}, "11": {}, "12": {}, "13": {"LibStorage._getStorageSlot": {"160": [11692, 11737]}}, "15": {}, "16": {"AccountContextHandler._clearPortfolioActiveFlags": {"344": [9497, 9550], "345": [9568, 9580], "346": [9608, 9629], "347": [9650, 9663]}, "AccountContextHandler.getAccountContext": {"137": [743, 764]}, "AccountContextHandler.isBitmapEnabled": {"223": [1219, 1262]}, "AccountContextHandler.mustSettleAssets": {"138": [3350, 3420], "139": [3649, 3735]}, "AccountContextHandler.setAccountContext": {"158": [1029, 1060], "159": [1070, 1104]}, "AccountContextHandler.setActiveCurrency": {"224": [5423, 5488], "225": [5766, 5773], "226": [6965, 7106], "227": [7124, 7131], "228": [7350, 7383], "229": [7457, 7478], "230": [7496, 7564], "231": [7582, 7589], "232": [8002, 8059], "233": [7737, 7817], "234": [8147, 8221], "235": [8239, 8246], "236": [8389, 8396], "237": [8410, 8470], "238": [8484, 8505], "239": [8519, 8530], "240": [8626, 8633], "241": [8716, 8735], "242": [8777, 8906]}, "AccountContextHandler.storeAssetsAndUpdateContext": {"267": [10389, 10435], "268": [10445, 10495], "269": [10541, 10591], "270": [10801, 10870], "271": [11082, 11156], "272": [11232, 11307], "273": [11426, 11519], "274": [12001, 12083], "275": [12151, 12198], "276": [12111, 12136]}}, "17": {"BalanceHandler._setBalanceStorage": {"243": [20562, 20635], "244": [20766, 20830], "245": [21184, 21233], "246": [21287, 21353], "247": [21555, 21609], "248": [21630, 21682], "249": [21754, 21801], "250": [21692, 21744]}, "BalanceHandler.getBalanceStorage": {"216": [22370, 22414], "217": [22424, 22468], "218": [22674, 22766], "219": [22797, 22855], "220": [22875, 22915]}, "BalanceHandler.incrementFeeToReserve": {"202": [18909, 18926], "203": [19086, 19122], "204": [19132, 19204], "205": [19214, 19261]}, "BalanceHandler.setBalanceStorageForNToken": {"221": [18127, 18152], "222": [18198, 18265]}, "BalanceHandler.setBalanceStorageForSettleCashDebt": {"140": [13228, 13261], "141": [13526, 13576], "142": [13695, 13734], "143": [13748, 13763], "144": [13842, 13919], "145": [13933, 13983], "146": [14194, 14347], "147": [14368, 14564], "148": [14631, 14705], "149": [14716, 14742]}}, "18": {}, "19": {}, "2": {}, "20": {}, "21": {}, "22": {}, "23": {"AssetRate._getAssetRateStateful": {"111": [4993, 5020], "112": [5051, 5094], "113": [5108, 5125], "114": [5176, 5226]}, "AssetRate._getAssetRateStorage": {"206": [3154, 3198], "207": [3208, 3260]}, "AssetRate.buildAssetRateStateful": {"52": [6164, 6413]}, "AssetRate.getSupplyRate": {"307": [2515, 2523]}}, "24": {"CashGroup._buildCashGroup": {"53": [16991, 17199]}, "CashGroup._getCashGroupStorageBytes": {"115": [11458, 11482]}, "CashGroup.buildCashGroupStateful": {"15": [17869, 17914]}, "CashGroup.calculateOracleRate": {"208": [9957, 10039], "209": [10658, 10683], "210": [10701, 10748], "211": [10846, 10922], "212": [10941, 11131], "213": [11160, 11248]}, "CashGroup.getRateOracleTimeWindow": {"179": [5713, 5811]}, "CashGroup.getRateScalar": {"360": [2832, 2900], "361": [3350, 3373], "362": [3413, 3430]}, "CashGroup.getReserveFeeShare": {"372": [4681, 4739]}, "CashGroup.getSettlementPenalty": {"251": [6043, 6153]}, "CashGroup.getTotalFee": {"370": [4373, 4456]}, "CashGroup.interpolateOracleRate": {"308": [8128, 8166], "309": [8231, 8268], "310": [8540, 8784], "311": [9127, 9463]}, "CashGroup.loadMarket": {"103": [7191, 7277], "104": [7408, 7590]}}, "25": {"DateTime.getBitNumFromMaturity": {"76": [4314, 4331], "77": [4414, 4431], "78": [4734, 4759], "79": [5306, 5641], "80": [5922, 6091], "81": [6377, 6552], "82": [6698, 6717]}, "DateTime.getMarketIndex": {"299": [3147, 3199], "300": [3209, 3295], "301": [3594, 3611], "302": [3736, 3752], "303": [3408, 3411], "304": [3773, 3802]}, "DateTime.getReferenceTime": {"150": [417, 456], "151": [466, 516]}, "DateTime.getTimeUTC0": {"161": [660, 690], "162": [700, 736]}, "DateTime.getTradedMarket": {"171": [1026, 1050], "172": [1076, 1104], "173": [1130, 1151], "174": [1177, 1202], "175": [1228, 1253], "176": [1279, 1305], "177": [1331, 1357], "178": [1368, 1391]}, "DateTime.isValidMarketMaturity": {"116": [1657, 1709], "117": [1719, 1805], "118": [1855, 1867], "119": [2054, 2065], "120": [1980, 1983], "121": [2086, 2098]}}, "26": {"Market._getExchangeRate": {"283": [20127, 20144], "284": [20243, 20260], "285": [20512, 20529], "286": [20560, 20579]}, "Market._getNetCashAmountsUnderlying": {"287": [10591, 10607], "288": [11523, 11602], "289": [12533, 12612], "290": [12753, 13050]}, "Market._getRateAnchor": {"363": [15628, 15645], "364": [15969, 15986], "365": [16081, 16158], "366": [16179, 16204]}, "Market._loadMarketStorage": {"348": [26477, 26502], "349": [26512, 26538], "350": [26548, 26592], "351": [26602, 26654], "352": [26664, 26718], "353": [26728, 26772], "354": [26782, 26840], "355": [26885, 26937], "356": [26968, 26993]}, "Market._logProportion": {"367": [21047, 21064], "368": [21681, 21698], "369": [22064, 22085]}, "Market._setMarketStorage": {"192": [29236, 29294], "193": [29340, 29406], "194": [29456, 29523], "195": [29574, 29631], "196": [29677, 29749], "197": [29805, 29850], "198": [29860, 29913], "199": [29923, 29978], "200": [29988, 30033], "201": [30043, 30102]}, "Market._setNewMarketState": {"296": [13725, 13796], "297": [13865, 13907], "298": [14094, 14144]}, "Market._updateRateOracle": {"357": [23292, 23325], "358": [23503, 23525], "359": [23719, 23741]}, "Market.calculateTrade": {"184": [4825, 4838], "185": [5251, 5473], "186": [5501, 5514], "187": [6013, 6026], "188": [6213, 6275], "189": [6289, 6523], "190": [6851, 6864], "191": [6885, 7098]}, "Market.executeTrade": {"108": [3052, 3240], "109": [3331, 3556], "110": [3566, 3647]}, "Market.getExchangeRateFactors": {"279": [8118, 8134], "280": [8347, 8571], "281": [8599, 8615], "282": [8636, 8688]}, "Market.getExchangeRateFromImpliedRate": {"214": [18502, 18545]}, "Market.getImpliedRate": {"293": [16789, 16797], "294": [17770, 17778], "295": [17789, 17807]}, "Market.getOracleRate": {"305": [25391, 25440], "306": [25451, 25662]}, "Market.loadMarket": {"180": [30611, 30828]}, "Market.loadMarketWithSettlementDate": {"277": [31308, 31388], "278": [31399, 31608]}}, "28": {"nTokenHandler.getNTokenContext": {"123": [1193, 1224], "124": [1234, 1299], "125": [1309, 1358], "126": [1368, 1411], "127": [1421, 1458]}, "nTokenHandler.nTokenAddress": {"122": [1729, 1753]}}, "29": {}, "30": {"BitmapAssetsHandler.addMultipleifCashAssets": {"253": [1922, 1963], "254": [2200, 2208], "255": [2223, 2262], "256": [2319, 2373], "257": [2465, 2673], "258": [2727, 2801], "259": [2103, 2106]}, "BitmapAssetsHandler.addifCashAsset": {"23": [3613, 3629], "24": [3871, 3950], "25": [3997, 4039], "26": [4161, 4210], "27": [4239, 4289], "28": [4303, 4323], "29": [4475, 4544], "30": [4591, 4628], "31": [4643, 4691], "32": [4705, 4755], "33": [4776, 4791]}, "BitmapAssetsHandler.getAssetsBitmap": {"75": [882, 915]}, "BitmapAssetsHandler.getifCashNotional": {"129": [1629, 1681]}, "BitmapAssetsHandler.setAssetsBitmap": {"88": [1061, 1147], "89": [1266, 1307]}}, "31": {"PortfolioHandler._extendNewAssetArray": {"100": [5752, 5783], "101": [5733, 5736], "102": [5804, 5824]}, "PortfolioHandler._loadAssetArray": {"446": [16947, 16986], "447": [17584, 17626], "448": [17640, 17678], "449": [17692, 17732], "450": [17746, 17784], "451": [17798, 17822], "452": [17332, 17335], "453": [17843, 17856]}, "PortfolioHandler._mergeAssetIntoArray": {"90": [1669, 1677], "91": [1828, 1987], "92": [2233, 2258], "93": [2346, 2419], "94": [2478, 2506], "95": [2520, 2565], "96": [2580, 2591], "97": [1433, 1436], "98": [2612, 2624]}, "PortfolioHandler._sortInPlace": {"454": [16250, 16338], "455": [16120, 16123], "456": [16565, 16608], "457": [16626, 16681], "458": [16699, 16702], "459": [16730, 16733]}, "PortfolioHandler._storeAsset": {"472": [11727, 11804], "473": [11856, 11921], "474": [11970, 12056], "475": [12100, 12179], "476": [12229, 12279], "477": [12289, 12335], "478": [12345, 12392], "479": [12402, 12447]}, "PortfolioHandler._updatePortfolioContext": {"480": [11159, 11190], "481": [11210, 11249], "482": [11260, 11316], "483": [11371, 11469], "484": [11480, 11539]}, "PortfolioHandler.addAsset": {"35": [3427, 3434], "36": [3723, 3730], "37": [3960, 3982], "38": [4061, 4128], "39": [4325, 4398], "40": [4780, 4812], "41": [4822, 4850], "42": [4860, 4890], "43": [4900, 4928], "44": [4938, 4988], "45": [4998, 5035]}, "PortfolioHandler.addMultipleAssets": {"264": [935, 943], "265": [958, 1143], "266": [838, 841]}, "PortfolioHandler.buildPortfolioState": {"260": [15681, 15693], "261": [15704, 15770], "262": [15780, 15822], "263": [15832, 15885]}, "PortfolioHandler.deleteAsset": {"460": [12787, 12838], "461": [12877, 12922], "462": [13051, 13214], "463": [13253, 13290], "464": [13775, 13804], "465": [13822, 13844], "466": [13587, 13590], "467": [14031, 14084], "468": [14098, 14105], "469": [14421, 14596], "470": [14606, 14657], "471": [14667, 14720]}, "PortfolioHandler.getSortedPortfolio": {"328": [15102, 15115], "329": [15126, 15146]}, "PortfolioHandler.storeAssets": {"330": [7487, 7550], "331": [7714, 7744], "332": [7255, 7258], "333": [8611, 8643], "334": [8820, 9055], "335": [7923, 7926], "336": [9590, 9598], "337": [9612, 9771], "338": [9823, 10038], "339": [10053, 10105], "340": [10119, 10142], "341": [9475, 9478], "342": [10303, 10374], "343": [10424, 10576]}}, "32": {"TransferAssets.encodeAssetId": {"507": [1035, 1082], "508": [1092, 1129], "509": [1139, 1196], "510": [1207, 1430]}, "TransferAssets.placeAssetsInAccount": {"153": [2314, 2380], "154": [2515, 2591], "155": [2876, 2916], "156": [3009, 3083], "157": [3104, 3125]}}, "33": {}, "34": {}, "35": {"AssetHandler.getSettlementDate": {"511": [1104, 1190], "512": [1365, 1386], "513": [1689, 1751]}, "AssetHandler.isLiquidityToken": {"99": [699, 830]}}, "41": {"ABDKMath64x64.div": {"318": [6742, 6758], "319": [6808, 6860]}, "ABDKMath64x64.exp": {"320": [21400, 21434], "321": [21484, 21492], "322": [21512, 21600]}, "ABDKMath64x64.exp_2": {"378": [14699, 14733], "379": [14783, 14791], "380": [14907, 14967], "381": [15011, 15071], "382": [15115, 15175], "383": [15219, 15279], "384": [15322, 15382], "385": [15425, 15485], "386": [15528, 15588], "387": [15631, 15691], "388": [15733, 15793], "389": [15835, 15895], "390": [15937, 15997], "391": [16039, 16099], "392": [16140, 16200], "393": [16241, 16301], "394": [16342, 16402], "395": [16443, 16503], "396": [16543, 16603], "397": [16643, 16703], "398": [16743, 16803], "399": [16843, 16903], "400": [16942, 17002], "401": [17041, 17101], "402": [17140, 17200], "403": [17239, 17299], "404": [17337, 17397], "405": [17435, 17495], "406": [17533, 17593], "407": [17631, 17691], "408": [17728, 17788], "409": [17825, 17885], "410": [17922, 17982], "411": [18019, 18079], "412": [18115, 18175], "413": [18211, 18271], "414": [18307, 18367], "415": [18403, 18463], "416": [18498, 18558], "417": [18593, 18653], "418": [18688, 18748], "419": [18783, 18843], "420": [18877, 18937], "421": [18971, 19031], "422": [19065, 19125], "423": [19159, 19219], "424": [19252, 19312], "425": [19345, 19405], "426": [19438, 19498], "427": [19531, 19591], "428": [19623, 19683], "429": [19715, 19775], "430": [19807, 19867], "431": [19899, 19959], "432": [19990, 20050], "433": [20081, 20141], "434": [20172, 20232], "435": [20263, 20323], "436": [20353, 20413], "437": [20443, 20503], "438": [20533, 20593], "439": [20623, 20683], "440": [20712, 20772], "441": [20801, 20861], "442": [20890, 20950], "443": [20979, 21039], "444": [21046, 21081], "445": [21087, 21126]}, "ABDKMath64x64.fromInt": {"373": [1303, 1364]}, "ABDKMath64x64.fromUInt": {"316": [1995, 2028], "317": [2034, 2057]}, "ABDKMath64x64.ln": {"374": [14343, 14358], "375": [14365, 14453]}, "ABDKMath64x64.log_2": {"488": [13399, 13414], "489": [13493, 13502], "490": [13504, 13513], "491": [13546, 13555], "492": [13557, 13566], "493": [13595, 13604], "494": [13606, 13615], "495": [13642, 13650], "496": [13652, 13660], "497": [13686, 13694], "498": [13696, 13704], "499": [13729, 13737], "500": [13739, 13747], "501": [13770, 13778], "502": [13972, 13980], "503": [14039, 14065], "504": [14017, 14031], "505": [13953, 13962], "506": [14078, 14100]}, "ABDKMath64x64.mul": {"323": [4298, 4350]}, "ABDKMath64x64.sub": {"487": [3874, 3926]}, "ABDKMath64x64.toInt": {"324": [1672, 1694]}, "ABDKMath64x64.toUInt": {"376": [2364, 2380], "377": [2386, 2409]}}, "42": {"Bitmap.isBitSet": {"83": [820, 855], "84": [894, 959]}, "Bitmap.setBit": {"85": [447, 482], "86": [547, 593], "87": [624, 671]}, "Bitmap.totalBitsSet": {"163": [1130, 1286], "164": [1296, 1452], "165": [1462, 1549], "166": [1559, 1715], "167": [1725, 1742], "168": [1752, 1769], "169": [1779, 1797], "170": [1807, 1844]}}, "43": {"FloatingPoint56.unpackFrom56Bits": {"327": [1385, 1418]}}, "44": {"SafeInt256.add": {"34": [1503, 1540]}, "SafeInt256.div": {"325": [1098, 1137], "326": [1245, 1254]}, "SafeInt256.divInRatePrecision": {"215": [2116, 2163]}, "SafeInt256.mul": {"181": [474, 483], "182": [506, 536], "183": [551, 581]}, "SafeInt256.mulInRatePrecision": {"252": [2337, 2384]}, "SafeInt256.neg": {"105": [1619, 1636]}, "SafeInt256.sub": {"371": [1377, 1414]}, "SafeInt256.subNoNeg": {"291": [1854, 1867], "292": [1877, 1892]}, "SafeInt256.toInt": {"485": [2587, 2627], "486": [2660, 2676]}}, "47": {}, "49": {}, "5": {}, "53": {}, "54": {}, "55": {}, "56": {}, "57": {}, "6": {}, "8": {"TradingAction._executeLendBorrowTrade": {"46": [13276, 13335], "47": [13346, 13396], "48": [13497, 13528], "49": [13539, 13698], "50": [13929, 13999], "51": [14097, 14167]}, "TradingAction._executeTrade": {"16": [7621, 7798], "17": [7878, 7969], "18": [8078, 8271], "19": [8285, 8336], "20": [8528, 8554], "21": [8568, 8764], "22": [8795, 8823]}, "TradingAction._getResidualPriceAssetCash": {"130": [24228, 24274], "131": [24524, 24570], "132": [24703, 24717], "133": [24967, 25073]}, "TradingAction._getfCashSettleAmount": {"152": [18784, 19008]}, "TradingAction._purchaseNTokenResidual": {"54": [20025, 20074], "55": [20221, 20372], "56": [21371, 21609], "57": [22007, 22039], "58": [22234, 22266], "59": [22369, 22393], "60": [22864, 23079], "61": [23090, 23289], "62": [23300, 23366]}, "TradingAction._settleCashDebt": {"63": [15312, 15366], "64": [15624, 15715], "65": [16066, 16262], "66": [16735, 16760], "67": [17185, 17228], "68": [17242, 17281], "69": [17295, 17333], "70": [17398, 17446], "71": [17518, 17680], "72": [17700, 17751], "73": [17762, 17945], "74": [17956, 18023]}, "TradingAction._updateNTokenPortfolio": {"134": [25681, 25826], "135": [26096, 26157], "136": [26234, 26321]}, "TradingAction.executeTradesArrayBatch": {"7": [5048, 5077], "8": [5398, 5416], "9": [6027, 6246], "10": [6265, 6451], "11": [6480, 6513], "12": [5127, 5130], "13": [6534, 6568]}, "TradingAction.executeTradesBitmapBatch": {"0": [3484, 3513], "1": [3612, 3807], "2": [3822, 4034], "3": [4049, 4099], "4": [4113, 4146], "5": [3563, 3566], "6": [4167, 4199]}, "TradingAction.executeVaultTrade": {"14": [2471, 2572]}}}}, "dependencies": ["ABDKMath64x64", "AaveHandler", "AccountContextHandler", "AssetHandler", "AssetRate", "AssetRateAdapter", "BalanceHandler", "Bitmap", "BitmapAssetsHandler", "CErc20Interface", "CEtherInterface", "CTokenInterface", "CashGroup", "CompoundHandler", "Constants", "DateTime", "Deployments", "FloatingPoint56", "GenericToken", "IEIP20NonStandard", "OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/IERC20", "IRewarder", "Incentives", "LibStorage", "Market", "MigrateIncentives", "PortfolioHandler", "SafeInt256", "OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/SafeMath", "SettleAssetsExternal", "SettleBitmapAssets", "SettlePortfolioAssets", "TokenHandler", "TransferAssets", "nTokenHandler", "nTokenSupply"], "deployedBytecode": "730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80633643f39b14610050578063b58f83ed14610087578063e50f349e146100b5575b600080fd5b81801561005c57600080fd5b5061007061006b366004614d12565b6100e2565b60405161007e929190614f40565b60405180910390f35b81801561009357600080fd5b506100a76100a2366004614c16565b6101b9565b60405161007e9291906152c7565b8180156100c157600080fd5b506100d56100d0366004614e28565b6102df565b60405161007e9190614f37565b60008060006100f087610321565b90506100fa61492e565b6000610104614976565b4260a082015260005b878110156101a357600061013a8d87878d8d8781811061012957fe5b905060200201358760a0015161034d565b8560000186602001828152508281525082935050505061016c8d8d61ffff16838e64ffffffffff168760200151610487565b60208401528380610181575060008360200151125b8351606085015191955061019591906105f4565b60608401525060010161010d565b50606001519450925050505b9550959350505050565b6101c16149ac565b6000806101cd87610321565b90506101d761492e565b6101df614976565b4260a082015260005b868110156102ca5760008888838181106101fe57fe5b9050602002013560f81c60ff16600581111561021657fe5b9050600281600581111561022657fe5b148061023d5750600381600581111561023b57fe5b145b156102635760405162461bcd60e51b815260040161025a90615215565b60405180910390fd5b60006102888d87878d8d8881811061027757fe5b905060200201358860a0015161034d565b602087018190529086529091506102ab908c9061ffff8f16908490600190610610565b50825160608401516102bc916105f4565b6060840152506001016101e8565b50606001519699969850959650505050505050565b6000806102eb84610321565b90506102f561492e565b600060f885901c600581111561030757fe5b90506103168383834289610715565b509695505050505050565b6103296149d4565b60006103388361ffff16610803565b9050610344838261084f565b9150505b919050565b600080808060f886901c600581111561036257fe5b9050600481600581111561037257fe5b14156103905761038489898789610892565b9195509350915061047b565b600581600581111561039e57fe5b14156103b05761038489898789610a7c565b60008160058111156103be57fe5b14806103d5575060018160058111156103d357fe5b145b15610463576103e7888883888a610715565b9093509150826104095760405162461bcd60e51b815260040161025a90615070565b86602001519350876000015161ffff16896001600160a01b03167fc53d733b6fdfac3f892b49bf468cd1cae7773ab553e440dc689ed6b09bb646b18686866040516104569392919061531f565b60405180910390a361047b565b60405162461bcd60e51b815260040161025a90615152565b50955095509592505050565b6000806104948787610cf5565b905060006104a0610d2a565b6001600160a01b0389166000908152602082815260408083208b845282528083208a84529091528120919250806104d7888a610d37565b91509150806104e557600080fd5b6104ef8583610e42565b1561057e57825460009061050b908990600f90810b900b6105f4565b905060016001607f1b0319811280159061052c575060016001607f1b038113155b61053557600080fd5b83546001600160801b0319166001600160801b03600f83900b16178455806105665761056386846000610e72565b95505b6105718c8c88610ec0565b95506105eb945050505050565b86156105e25760016001607f1b031987128015906105a3575060016001607f1b038713155b6105ac57600080fd5b82546001600160801b0319166001600160801b03600f89900b161783556105d585836001610e72565b94506105e28b8b87610ec0565b86955050505050505b95945050505050565b8181018281121560008312151461060a57600080fd5b92915050565b845161061f9085858585610f1a565b156106295761070e565b604085015115610656576000610646866020015186868686610f1a565b90508015610654575061070e565b505b61065f8261102b565b1561067257600081121561067257600080fd5b6001600160571b0319811280159061069157506001600160571b038113155b61069a57600080fd5b846020015151856040015114156106be576106b88560200151611041565b60208601525b600085602001518660400151815181106106d457fe5b602090810291909101810151868152908101859052604080820185905260608201849052600060a090920191909152860180516001019052505b5050505050565b60008060ff60f084901c1661072d88888385896110fa565b6001600160581b03609885901c169150600186600581111561074b57fe5b141561075d5761075a82611175565b91505b6107838883610779888b6020015161118390919063ffffffff16565b8a929190856111e0565b925063ffffffff607885901c1680156107f75760018760058111156107a457fe5b14156107d357808860a0015111156107ce5760405162461bcd60e51b815260040161025a906151e5565b6107f7565b808860a0015110156107f75760405162461bcd60e51b815260040161025a906151e5565b50509550959350505050565b61080b614a00565b60008060006108198561123f565b604080516060810182526001600160a01b039093168352602083019390935260ff16600a0a918101919091529350505050919050565b6108576149d4565b60006108668461ffff16611302565b6040805160808101825261ffff96909616865260ff821660208701528501939093525050606082015290565b6000808063ffffffff60d885901c16608085901c600a0b8682116108c85760405162461bcd60e51b815260040161025a906150d0565b6108d78860200151838961131f565b156108f45760405162461bcd60e51b815260040161025a90614f8e565b6000610907896000015161ffff166113c4565b9050600080610915836113ea565b9450509350505061093c81600260ff166005811061092f57fe5b8491610e10911a02611453565b8a1161095a5760405162461bcd60e51b815260040161025a9061517e565b600061096f848d6000015161ffff16886114ad565b90506000811280156109815750600085125b156109975780851215610992578094505b6109d4565b6000811380156109a75750600085135b156109bc5780851315610992578094506109d4565b60405162461bcd60e51b815260040161025a90614fc5565b60006109ed8d888e896001600160d81b031988166114f2565b9050610a05858e6000015161ffff1689878a86611579565b8d6001600160a01b03168764ffffffffff168e6000015161ffff167fe85dd6c9c85c29a2f4d4cb74e31514bfc478c8c5a50da255ea565123d87933528985604051610a51929190614f50565b60405180910390a486610a6382611175565b87995099509950505050505050505b9450945094915050565b60008080605884901c6001600160a01b038881169082161415610ab15760405162461bcd60e51b815260040161025a9061526e565b6001600160581b0385166000610ac6836115fe565b9050610ad18161169f565b15610b62576040516337b5fc2160e11b815273__$f6541b0d362a0c7d99a2a29cd3d373d61b$__90636f6bf84290610b0f9086908590600401614ecb565b60a06040518083038186803b158015610b2757600080fd5b505af4158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f9190614d91565b90505b610b6e838a84846116f3565b915060006276a700610b7f8a611826565b0190506000610b908b838c87611847565b90506000811215610ba057600080fd5b604080516001808252818301909252600091816020015b610bbf614a2a565b815260200190600190039081610bb75790505090508b6000015161ffff1681600081518110610bea57fe5b602002602001015160000181815250508281600081518110610c0857fe5b60200260200101516020018181525050610c2182611175565b81600081518110610c2e57fe5b60200260200101516060018181525050600160ff1681600081518110610c5057fe5b60200260200101516040018181525050610c6b8685836118a7565b9350610c7990508386611928565b8b6001600160a01b03168b6000015161ffff16866001600160a01b03167fc76e4e38ccd25a7b0a39cdaa81a20efa0c2127e74c448b7b05aef1c427d5732b87610cc186611175565b604051610ccf929190614f50565b60405180910390a481610ce185611175565b909d909c50909a5098505050505050505050565b600080610d00611a2c565b6001600160a01b038516600090815260209182526040808220868352909252205491505092915050565b60008061060a600c611a35565b6000806000610d4585611a4e565b905062015180840615610d5f576000809250925050610e3b565b838110610d73576000809250925050610e3b565b6201518081850304605a8111610d9057925060019150610e3b9050565b6101688111610dcf576000620151806207e900840604820160591901905060068104605a0160068281610dbf57fe5b0660001494509450505050610e3b565b6108708111610dff5760006201518062278d00840604820161016719019050601e8104608701601e8281610dbf57fe5b611de28111610e2f576000620151806276a700840604820161086f19019050605a810460c301605a8281610dbf57fe5b61010060009350935050505b9250929050565b600060018210158015610e5757506101008211155b610e6057600080fd5b50600019011b600160ff1b9081161490565b600060018310158015610e8757506101008311155b610e9057600080fd5b8115610ea95750600160ff1b60001983011c8317610eb9565b50600160ff1b60001983011c1983165b9392505050565b6014610ecb82611a6a565b1115610ee95760405162461bcd60e51b815260040161025a906150a7565b6000610ef3611a2c565b6001600160a01b039094166000908152602094855260408082209482529390945250912055565b6000805b865181101561101e576000878281518110610f3557fe5b60200260200101519050848160400151141580610f53575080518714155b80610f62575085816020015114155b15610f6d5750611016565b60028160a001516003811115610f7f57fe5b14158015610f9d575060038160a001516003811115610f9a57fe5b14155b610fa657600080fd5b6060810151600090610fb890866105f4565b9050610fc38661102b565b15610fd6576000811215610fd657600080fd5b6001600160571b03198112801590610ff557506001600160571b038113155b610ffe57600080fd5b6060820152600160a090910181905291506105eb9050565b600101610f1e565b5060009695505050505050565b60006002821080159061060a5750506008101590565b60606000825160001461105857825160020261105b565b60015b905060008167ffffffffffffffff8111801561107657600080fd5b506040519080825280602002602001820160405280156110b057816020015b61109d614a2a565b8152602001906001900390816110955790505b50905060005b84518110156110f2578481815181106110cb57fe5b60200260200101518282815181106110df57fe5b60209081029190910101526001016110b6565b509392505050565b8260011115801561110f575084602001518311155b61112b5760405162461bcd60e51b815260040161025a9061512a565b600061114861113985611b3a565b61114284611826565b90611453565b905061116d866000015161ffff168284866111628b611bde565b8a9493929190611bf2565b505050505050565b600061060a60001983611c1c565b6000828211156111da576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000806111f08787878787611c6a565b9092509050600061120088611d6d565b90506112248189604001518a606001518b60a001518c60c001518d60e00151611d71565b86516112349061ffff1683611e85565b505095945050505050565b600080600080600061125086611f0c565b909250905060006001600160a01b0383166112755750600090506402540be4006112f7565b826001600160a01b0316631ee108336040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156112b057600080fd5b505af11580156112c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e89190614d79565b9050600081136112f757600080fd5b969195509350915050565b60008061130d611f43565b60009384526020525050604090205490565b60008084116113405760405162461bcd60e51b815260040161025a90614fed565b60078411156113615760405162461bcd60e51b815260040161025a906150fa565b6276a70083061561137457506000610eb9565b600061137f83611826565b905060015b8581116113b85761139e61139782611b3a565b8390611453565b8514156113b057600192505050610eb9565b600101611384565b50600095945050505050565b6000806113cf611f50565b6000938452602052505060409020546001600160a01b031690565b6000806000806000806113fb611f5d565b6001600160a01b039097166000908152602097909752505060409094205461ffff81169563ffffffff62010000830481169650600160301b830416945060ff600160501b8304169350600160581b90910460d81b9150565b600082820183811015610eb9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000806114b8610d2a565b6001600160a01b03861660009081526020918252604080822087835283528082208683529092522054600f90810b900b9150509392505050565b600080611500878787611f6a565b9050600483901a620f42400260008513156115265761151f8282611453565b915061153d565b808211156115385761151f8282611183565b600091505b60006115528361154d8a8a611183565b612053565b905061156c61156187836120c4565b60408b0151906120dd565b9998505050505050505050565b60006115908787878761158b88611175565b610487565b90506000831380156115a3575060008112155b806115ba57506000831280156115ba575060008113155b6115c357600080fd5b60006115cf888861211c565b50505090506115e783826105f490919063ffffffff16565b90506115f48888836121c5565b5050505050505050565b611606614a6a565b60006116106121e8565b6001600160a01b039390931660009081526020938452604090819020815160a081018352905464ffffffffff8116825265010000000000810460f81b6001600160f81b03191695820195909552600160301b850460ff1691810191909152600160381b840461ffff166060820152600160481b90930460701b6001600160701b03191660808401525090919050565b6000426116ab836121f5565b156116cc576116b981611a4e565b835164ffffffffff161091506103489050565b825164ffffffffff16158015906116eb5750825164ffffffffff168110155b915050610348565b60008083121561170257600080fd5b60008060008061171a89896000015161ffff1661211c565b9350935093509350600084126117425760405162461bcd60e51b815260040161025a906151b5565b8661175b5761175084611175565b965060009350611790565b61176484611175565b8713156117835760405162461bcd60e51b815260040161025a90615237565b61178d84886105f4565b93505b8315801561179c575082155b156117b95787516117b990879061ffff166000600160fe1b612202565b6117cf89896000015161ffff1686868686612402565b876000015161ffff16896001600160a01b03167f5441e4a5fac93a951d782e6f1cdb82e95c8fc58561a013953d17e395c5e69b4b896040516118119190614f37565b60405180910390a35094979650505050505050565b60006276a70082101561183857600080fd5b6276a700825b06909103919050565b600080611855868686611f6a565b9050600061187961186f61186889612540565b8490611453565b61154d8888611183565b905061189c81611896868a6040015161255590919063ffffffff16565b90612580565b979650505050505050565b6118af614a6a565b6118b88361169f565b156118d55760405162461bcd60e51b815260040161025a90615043565b6118de836121f5565b156118f3576118ee848484612599565b611920565b6000611905858560400151855161265a565b905061191181846126ed565b61191e848683600061274b565b505b509092915050565b60006119326121e8565b6001600160a01b03831660008181526020838152604080832088518154938a0151838b015160608c015160808d015160701c600160481b027affffffffffffffffffffffffffffffffffff0000000000000000001961ffff909216600160381b0268ffff000000000000001960ff94909416600160301b0266ff0000000000001960f89690961c650100000000000265ff00000000001964ffffffffff90981664ffffffffff19909b169a909a1796909616989098179390931693909317169490941716929092179091555192935090917f6bd4b121bca854a191536a2ca891155c42ee2fb23f307fb34e8bc65cfcb5412e9190a2505050565b60008061060a600b5b6000620f424082601a811115611a4757fe5b0192915050565b600062015180821015611a6057600080fd5b620151808261183e565b600181901c7f5555555555555555555555555555555555555555555555555555555555555555908116911601600281901c7f3333333333333333333333333333333333333333333333333333333333333333908116911601600481901c7f07070707070707070707070707070707070707070707070707070707070707079190911601600881901c7e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f908116911601601081901c01602081901c01604081901c01608081901c60ff90811691160190565b60008160011415611b4f57506276a700610348565b8160021415611b62575062ed4e00610348565b8160031415611b7657506301da9c00610348565b8160041415611b8a57506303b53800610348565b8160051415611b9e57506309450c00610348565b8160061415611bb2575063128a1800610348565b8160071415611bc657506325143000610348565b60405162461bcd60e51b815260040161025a9061501c565b6060015161012c60089190911c60ff160290565b60006276a700611c0185611826565b019050611c138787878787878761282d565b50505050505050565b818102600019831415611c4c57811580611c3e575082828281611c3b57fe5b05145b611c4757600080fd5b61060a565b821580611c61575081838281611c5e57fe5b05145b61060a57600080fd5b60008084876040015113611c83575060009050806101af565b6000806000611c948a8a8989612864565b925092509250600080611cae8c604001518587868e612904565b909250905080611cc9576000809650965050505050506101af565b506000806000611cdb8d858e8e6129b0565b9250925092508260001415611cfd5760008098509850505050505050506101af565b60408e0151611d0c908d612aa0565b60408f01819052611d2990611d2188856105f4565b89888f612abc565b60a08f01819052611d475760008098509850505050505050506101af565b611d588e8e60400151858585612b79565b98509850505050505050509550959350505050565b5190565b60008512158015611d8957506001600160501b038513155b611d9257600080fd5b60008412158015611daa57506001600160501b038413155b611db357600080fd5b826000108015611dc7575063ffffffff8311155b611dd057600080fd5b816000108015611de4575063ffffffff8211155b611ded57600080fd5b63ffffffff811115611dfe57600080fd5b855469ffffffffffffffffffff19166001600160501b039586161769ffffffffffffffffffff60501b1916600160501b94909516939093029390931763ffffffff60a01b1916600160a01b63ffffffff928316021763ffffffff60c01b1916600160c01b93821693909302929092176001600160e01b0316600160e01b9190921602179055565b6000811215611e9357600080fd5b6000611ea060008461211c565b5050509050611eb882826105f490919063ffffffff16565b9050611ecb600084836000806000612402565b8261ffff167f85170c297762884f47ec6098b74925c795e6d33686b11019b400e33a9b23b5e983604051611eff9190614f37565b60405180910390a2505050565b6000806000611f19612bce565b600094855260205250506040909120546001600160a01b03811692600160a01b90910460ff169150565b60008061060a6009611a35565b60008061060a6003611a35565b60008061060a6002611a35565b6000806000611f7e86602001518686612bdb565b915091506000611f8d87611bde565b905081611fb0578651611fa69061ffff16878388612c9c565b9350505050610eb9565b6000611fbb86611826565b90506000611fcb61139786611b3a565b90506000611fe38a6000015161ffff1683868b612c9c565b90506000808760011415612008578991506120018c60400151612d3b565b9050612037565b61201e61201760018a03611b3a565b8690611453565b91506120348c6000015161ffff1683888d612c9c565b90505b612044828583868f612dcc565b98505050505050505050610eb9565b6000806120766120716301da9c0061206b8787612e2a565b90612e83565b612eea565b9050600061208a82621dcd6560491b612f08565b9050600061209782612f5b565b905060006120ab82621dcd6560491b612fb0565b90506120b681612fe6565b60070b979650505050505050565b6000610eb96120d784633b9aca00611c1c565b83612fef565b600080612114846020015161210e86604001516121086402540be40088611c1c90919063ffffffff16565b90611c1c565b90612fef565b949350505050565b600080600080600061212c613020565b6001600160a01b0388166000908152602082815260408083208a8452909152902080546001600160501b0381169650600160501b900463ffffffff169450909150831561219557805461218e90600160701b900466ffffffffffffff1661302d565b92506121aa565b8054600160701b900466ffffffffffffff1692505b54600160a81b9004600a90810b900b97939650919450925050565b60008112156121d357600080fd5b6121e38383836000806000612402565b505050565b60008061060a6001611a35565b6060015161ffff16151590565b8260001080156122145750613fff8311155b61221d57600080fd5b818015612231575082846060015161ffff16145b1561223b576123fc565b6080840151600090815b6001600160701b03198216156123b65760f082901c613fff16868114801561226a5750855b156122a257506080870180516001600160f01b0319861660109093029290921c919091176001600160701b0319169052506123fc9050565b86811480156122af575085155b15612304576001600160f01b03198516199290921691600360fe1b83166122e2576010836001600160701b031916901b92505b506001600160701b031991821660109091021c919091171660808501526123fc565b86811180156123105750855b1561236a576080888101516001600160f01b031960f08a901b88178116601086021c9690961795911b161561234457600080fd5b506001600160701b03199182166001919091016010021c919091171660808501526123fc565b8681118015612377575085155b1561238557505050506123fc565b506001600160f01b0319821660108281029190911c93909317929190911b6001600160801b03191690600101612245565b846123c3575050506123fc565b600981106123d057600080fd5b6001600160f01b031960f087901b85171660109091021c919091176001600160701b0319166080860152505b50505050565b600061240c613020565b6001600160a01b0388166000908152602082815260408083208a845290915290209091506001600160571b0319861280159061244f57506001600160571b038613155b61245857600080fd5b6000851215801561247057506001600160501b038513155b61247957600080fd5b836124b95766ffffffffffffff83111561249257600080fd5b805466ffffffffffffff60701b1916600160701b66ffffffffffffff8516021781556124d3565b8054600160501b900463ffffffff1684146124d357600080fd5b8054600a9690960b6001600160581b0316600160a81b026001600160a81b036001600160501b0390961669ffffffffffffffffffff1963ffffffff909616600160501b0263ffffffff60501b19909816979097179490941695909517939093169190911790925550505050565b606001516207a12060309190911c60ff160290565b600080612114846040015161210e6402540be40061210e878960200151611c1c90919063ffffffff16565b6000610eb961258f8484611c1c565b633b9aca00612fef565b6125a2826121f5565b6125ab57600080fd5b606082015161ffff1660005b825181101561070e5760008382815181106125ce57fe5b602002602001015190508060600151600014156125eb5750612652565b805183146125f857600080fd5b604081015160011461260957600080fd5b600061262b87858460200151896000015164ffffffffff168660600151610487565b9050600081121561264f57602086018051600160f81b176001600160f81b03191690525b50505b6001016125b7565b6126626149ac565b61266a6149ac565b60ff8416612679579050610eb9565b612683858561303b565b815260ff841660608201528267ffffffffffffffff811180156126a557600080fd5b506040519080825280602002602001820160405280156126df57816020015b6126cc614a2a565b8152602001906001900390816126c45790505b506020820152949350505050565b60005b81518110156121e357600082828151811061270757fe5b602002602001015190508060600151600014156127245750612743565b612741848260000151836020015184604001518560600151610610565b505b6001016126f0565b600080808061275a8688613064565b64ffffffffff81168c52929650909450925090506127778861169f565b1561278157600080fd5b60ff82166040890152846127a057600760ff831611156127a057600080fd5b83156127c357602088018051600160f81b176001600160f81b03191690526127d2565b602088018051607f60f91b1690525b6127df88608001516132a3565b6001600160701b031916608089015260005b83156128225760f084901c818114612814576128148a826001600160ff1b612202565b60109490941b9390506127f1565b505050505050505050565b61283a878787868561331e565b6128538760e001518860a001518960c0015185886133d8565b60c090970196909652505050505050565b600080808061287487868861346b565b905060006128938960600151896040015161255590919063ffffffff16565b90508860400151600014806128a6575080155b156128bd5760008060009450945094505050610a72565b6000806128d58b604001518c60a0015185878d6134dd565b9092509050806128f357600080600096509650965050505050610a72565b509199909850909650945050505050565b600080806129128885612aa0565b9050600061292a6129238a8a6105f4565b83906120c4565b9050633b023380811315612946576000809350935050506101af565b6000806129528361356d565b915091508061296b5760008095509550505050506101af565b60006129818961297b858d6120c4565b906105f4565b9050633b9aca008112156129a0576000809650965050505050506101af565b9550600194506101af9350505050565b60008080806129c76129c287896120c4565b611175565b905060006129dd6129d78a61360f565b87612053565b90506000871315612a355760006129f489836120c4565b9050633b9aca00811215612a15576000806000955095509550505050610a72565b612a2d612a26633b9aca0084613624565b8490612580565b915050612a57565b612a546129c28261210e612a4d633b9aca0083613624565b8690611c1c565b90505b6000612a71606461210e612a6a8d61363a565b8590611c1c565b9050612a7d8383613624565b612a8e6129c28361297b8787613624565b909b909a509098509650505050505050565b6000612aac8383613624565b9050600081121561060a57600080fd5b6000806000612acf888888886000612904565b9150915080612ae3576000925050506105eb565b6000612aee83613647565b90506000612b0282621dcd6560491b612f08565b90506000612b0f82613673565b90506000612b2b612b2683621dcd6560491b612fb0565b6136ad565b67ffffffffffffffff1690506000612b4b8961206b846301da9c00612e2a565b905063ffffffff811115612b695760009750505050505050506105eb565b9c9b505050505050505050505050565b60008080612b8787866120dd565b6060890151909150612b9990826105f4565b60608901524260e08901526000612bb088866120dd565b90506000612bbe89896120dd565b9a91995090975050505050505050565b60008061060a600f611a35565b60008060008511612bfe5760405162461bcd60e51b815260040161025a90614fed565b6007851115612c1f5760405162461bcd60e51b815260040161025a906150fa565b6000612c2a84611826565b905060015b868111612c7b576000612c4461186883611b3a565b905086811415612c5c5750925060009150612c949050565b86811115612c725750925060019150612c949050565b50600101612c2f565b5060405162461bcd60e51b815260040161025a9061529a565b935093915050565b600080612ca76136c9565b905060006276a700612cb885611826565b6000898152602085815260408083208b84528252808320949093018083529390522080549192509063ffffffff600160a01b8204811691600160c01b8104821691600160e01b9091041681612d1f5760405162461bcd60e51b815260040161025a90614f5e565b612d2c8184848c8c6133d8565b9b9a5050505050505050505050565b80516000906001600160a01b0316612d5557506000610348565b600082600001516001600160a01b031663dd30a6666040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9457600080fd5b505afa158015612da8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb99190614d79565b6000818610612dda57600080fd5b848210612de657600080fd5b838310612e0c57612e058461114288880361206b8388038b8803612e2a565b90506105eb565b612e05612e2387870361206b8688038a8703612e2a565b8590611183565b600082612e395750600061060a565b82820282848281612e4657fe5b0414610eb95760405162461bcd60e51b81526004018080602001828103825260218152602001806153896021913960400191505060405180910390fd5b6000808211612ed9576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612ee257fe5b049392505050565b6000677fffffffffffffff821115612f0157600080fd5b5060401b90565b600081600f0b60001415612f1b57600080fd5b600082600f0b604085600f0b901b81612f3057fe5b05905060016001607f1b03198112801590612f52575060016001607f1b038113155b610eb957600080fd5b6000600160461b82600f0b12612f7057600080fd5b683fffffffffffffffff1982600f0b1215612f8d57506000610348565b61060a608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d6136d6565b6000600f83810b9083900b0260401d60016001607f1b03198112801590612f52575060016001607f1b03811315610eb957600080fd5b600f0b60401d90565b6000816000191480156130055750600160ff1b83145b1561300f57600080fd5b81838161301857fe5b059392505050565b60008061060a6006611a35565b600881901c60ff9091161b90565b606060006130498484614184565b9050600181511161305b57905061060a565b610eb9816142a6565b6000808080808080805b8951518110156130f55760008a60000151828151811061308a57fe5b602002602001015190506003808111156130a057fe5b8160a0015160038111156130b057fe5b14156130bb57600080fd5b60028160a0015160038111156130cd57fe5b141580156130dd57506060810151155b156130ec576130ec8b8361445f565b5060010161306e565b5060005b8951518110156131985760008a60000151828151811061311557fe5b602002602001015190506002600381111561312c57fe5b8160a00151600381111561313c57fe5b14156131505760808101516000905561318f565b60018160a00151600381111561316257fe5b141561317b5760808101518061317883826145af565b50505b613187818686866146d4565b919650945092505b506001016130f9565b50606089015160006131a8614737565b6001600160a01b038b1660009081526020829052604081209192505b8c60200151518110156132725760008d6020015182815181106131e357fe5b60200260200101519050806060015160001415613200575061326a565b60028160a00151600381111561321257fe5b14158015613230575060038160a00151600381111561322d57fe5b14155b61323957600080fd5b613245818989896146d4565b919950975095506132628184876010811061325c57fe5b016145af565b600185019450505b6001016131c4565b5060108311158015613289575064ffffffffff8411155b61329257600080fd5b50939a929950975095509350505050565b6000807f7fff7fff7fff7fff7fff7fff7fff7fff7fff00000000000000000000000000008316815b6001600160701b031982161561331557600160fe1b82811614156132ff576001600160f01b03198216811c92909217916010015b6010826001600160701b031916901b91506132cb565b50909392505050565b60006133286136c9565b6000868152602082815260408083208884528252808320868452825291829020808a5290890187905280546001600160501b03808216938b0193909352600160501b810490921660608a015263ffffffff600160a01b8304811660a08b0152600160c01b8304811660c08b0152600160e01b90920490911660e08901529091508084156133c75760018201546001600160501b031660808901526115f4565b600060808901525050505050505050565b60008083116133e657600080fd5b818611156133f55750836105eb565b60006134018388611183565b90508381111561341457859150506105eb565b60006134288561206b84633b9aca00612e2a565b9050600061343a633b9aca0083611183565b9050600061345d633b9aca0061206b6134538b86612e2a565b6111428d88612e2a565b9a9950505050505050505050565b600082600111158015613482575083602001518311155b61348b57600080fd5b606084015160806008600019860102019060ff90821c16633b9aca000260006134c46134b686614744565b61210e846301da9c00611c1c565b9050600081136134d357600080fd5b9695505050505050565b60008060006134ec8785612053565b9050633b9aca008112156135075760008092509250506101af565b60008061351e6135178b8a6105f4565b8b906120c4565b905060008061352c8361356d565b9150915080613546576000809650965050505050506101af565b61355a613553838b6120c4565b8690613624565b9c60019c509a5050505050505050505050565b600080633b9aca008314156135875750600090508061360a565b60006135a161359a633b9aca0086613624565b85906120c4565b905060006135ae82613647565b9050600081600f0b136135c95760008093509350505061360a565b60006135fd6135f86135ec6135dd85613673565b6814b927f32bffb8333861475e565b621dcd6560491b612fb0565b612fe6565b60070b9450600193505050505b915091565b60600151620186a060109190911c60ff160290565b8082038281131560008312151461060a57600080fd5b6060015160181c60ff1690565b6000677fffffffffffffff19821215801561366a5750677fffffffffffffff8213155b612f0157600080fd5b60008082600f0b1361368457600080fd5b608061368f83614791565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b60008082600f0b12156136bf57600080fd5b50600f0b60401d90565b60008061060a600a611a35565b6000600160461b82600f0b126136eb57600080fd5b683fffffffffffffffff1982600f0b121561370857506000610348565b6001607f1b60006001603f1b8416600f0b13156137365770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315613763577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315613790577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b13156137bd5770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b13156137ea577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b131561381757700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b13156138445770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600083600160381b16600f0b131561386d57700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b13156138995770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b13156138c5577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b13156138f157700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b131561391d577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b131561394957700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156139755770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b13156139a1577001000162e525ee054754457d59952920260260801c5b600083600160301b16600f0b13156139ca5770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b13156139f5577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b1315613a2057700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b1315613a4b5770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b1315613a7657700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b1315613aa15770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315613acc577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b1315613af757700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b1315613b22577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b1315613b4c57700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b1315613b765770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b1315613ba0577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b1315613bca5770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315613bf4577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b1315613c1e57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b1315613c485770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b1315613c7257700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b1315613c9b5770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315613cc4577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b1315613ced57700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315613d16577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b1315613d3f57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b1315613d685770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b1315613d91577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b1315613dba5770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b1315613de2577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b1315613e0a57700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b1315613e325770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b1315613e5a57700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b1315613e825770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315613eaa577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b1315613ed257700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315613efa577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b1315613f2157700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b1315613f485770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b1315613f6f577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b1315613f965770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315613fbd577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b1315613fe457700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b131561400b5770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561403257700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156140585770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b131561407e577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b13156140a457700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b13156140ca577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b13156140f057700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156141165770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b131561413c577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b13156141625770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b0381111561060a57600080fd5b606060108260ff16111561419757600080fd5b60006141a1614737565b6001600160a01b038516600090815260208290526040812091925060ff851667ffffffffffffffff811180156141d657600080fd5b5060405190808252806020026020018201604052801561421057816020015b6141fd614a2a565b8152602001906001900390816141f55790505b50905060005b8560ff1681101561429c57600083826010811061422f57fe5b019050600083838151811061424057fe5b602090810291909101810151835461ffff8116825264ffffffffff620100008204169282019290925260ff600160381b8304166040820152600160401b909104600a90810b900b60608201526080019190915250600101614216565b5095945050505050565b805160008167ffffffffffffffff811180156142c157600080fd5b506040519080825280602002602001820160405280156142eb578160200160208202803683370190505b50905060005b8281101561434857600084828151811061430757fe5b6020026020010151905061432881600001518260200151836040015161486c565b83838151811061433457fe5b6020908102919091010152506001016142f1565b5060015b828110156123fc57805b60008111801561438e575082818151811061436d57fe5b602002602001015183600183038151811061438457fe5b6020026020010151115b156144565782818151811061439f57fe5b60200260200101518360018303815181106143b657fe5b60200260200101518460018403815181106143cd57fe5b602002602001018584815181106143e057fe5b60200260200101828152508281525050508481815181106143fd57fe5b602002602001015185600183038151811061441457fe5b602002602001015186600184038151811061442b57fe5b6020026020010187848151811061443e57fe5b60209081029190910101919091525260001901614356565b5060010161434c565b815151811061446d57600080fd5b600082606001511161447e57600080fd5b60008260000151828151811061449057fe5b60200260200101519050600260038111156144a757fe5b8160a0015160038111156144b757fe5b141580156144d5575060038160a0015160038111156144d257fe5b14155b6144de57600080fd5b606083018051600019019052600080805b8551518110156145515760008660000151828151811061450b57fe5b60200260200101519050828160800151118015614538575060028160a00151600381111561453557fe5b14155b1561454857806080015192508193505b506001016144ef565b508184141561456a575050600260a091909101526145ab565b60008560000151838151811061457c57fe5b602090810291909101015160808581018051918301805190915252600160a09182015260029401939093525050505b5050565b8151158015906145c257508151613fff10155b6145cb57600080fd5b816020015160001080156145e85750602082015164ffffffffff10155b6145f157600080fd5b8160400151600010801561460a57506040820151600810155b61461357600080fd5b60608201516001600160571b03191380159061463a575060608201516001600160571b0312155b61464357600080fd5b8151815460208401516040850151606090950151600a0b6001600160581b0316600160401b0272ffffffffffffffffffffff00000000000000001960ff909616600160381b0267ff000000000000001964ffffffffff909316620100000266ffffffffff00001961ffff90961661ffff19909516949094179490941692909217169190911792909216919091179055565b6000806000806146e3886148c7565b90508415806146f157508085115b156146fa578094505b868061470a575060008860600151125b965061ffff86161561471b57600080fd5b50509451939560109390931c60f09490941b9390931793509150565b60008061060a600d611a35565b60006001600160ff1b0382111561475a57600080fd5b5090565b6000600f82810b9084900b0360016001607f1b03198112801590612f52575060016001607f1b03811315610eb957600080fd5b60008082600f0b136147a257600080fd5b6000600f83900b600160401b81126147bc576040918201911d5b64010000000081126147d0576020918201911d5b6201000081126147e2576010918201911d5b61010081126147f3576008918201911d5b60108112614803576004918201911d5b60048112614813576002918201911d5b60028112614822576001820191505b603f19820160401b600f85900b607f8490031b6001603f1b5b60008113156148615790800260ff81901c8281029390930192607f011c9060011d61483b565b509095945050505050565b6000613fff84111561487d57600080fd5b64ffffffffff83111561488f57600080fd5b600882111561489d57600080fd5b5067ffff000000000000603084901b1665ffffffffff00600884901b161760ff8216179392505050565b60008082604001511180156148e157506040820151600810155b6148ea57600080fd5b604082015160021061490157506020810151610348565b60006149136001846040015103611b3a565b6020840151909150610344906276a700906111429084611183565b60405180610100016040528060008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280606081526020016060815260200160008152602001600081525090565b60408051608081018252600080825260208201529081016149f3614a00565b8152600060209091015290565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160006003811115614a6557fe5b905290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b80356001600160a01b038116811461034857600080fd5b60008083601f840112614ac0578081fd5b50813567ffffffffffffffff811115614ad7578182fd5b6020830191508360208083028501011115610e3b57600080fd5b600082601f830112614b01578081fd5b8135602067ffffffffffffffff80831115614b1857fe5b614b25828385020161533e565b8381528281019086840160c0808702890186018a1015614b43578788fd5b875b87811015614bc45781838c031215614b5b578889fd5b604080518381018181108982111715614b7057fe5b82528435815288850135898201528482013591810191909152606080850135908201526080808501359082015260a090614bab828601614beb565b9181019190915285529386019391810191600101614b45565b50919998505050505050505050565b80516001600160701b03198116811461034857600080fd5b80356004811061034857600080fd5b805161034881615362565b805160ff8116811461034857600080fd5b600080600080600060808688031215614c2d578081fd5b614c3686614a98565b94506020860135614c4681615362565b9350604086013567ffffffffffffffff80821115614c62578283fd5b908701906080828a031215614c75578283fd5b604051608081018181108382111715614c8a57fe5b604052823582811115614c9b578485fd5b614ca78b828601614af1565b825250602083013582811115614cbb578485fd5b614cc78b828601614af1565b60208301525060408381013590820152606092830135838201529450908701359080821115614cf4578283fd5b50614d0188828901614aaf565b969995985093965092949392505050565b600080600080600060808688031215614d29578081fd5b614d3286614a98565b94506020860135614d4281615362565b93506040860135614d5281615375565b9250606086013567ffffffffffffffff811115614d6d578182fd5b614d0188828901614aaf565b600060208284031215614d8a578081fd5b5051919050565b600060a08284031215614da2578081fd5b60405160a0810181811067ffffffffffffffff82111715614dbf57fe5b6040528251614dcd81615375565b815260208301516001600160f81b031981168114614de9578283fd5b6020820152614dfa60408401614c05565b6040820152614e0b60608401614bfa565b6060820152614e1c60808401614bd3565b60808201529392505050565b60008060408385031215614e3a578182fd5b8235614e4581615362565b946020939093013593505050565b6000815180845260208085019450808401835b83811015614ec057815180518852838101518489015260408082015190890152606080820151908901526080808201519089015260a0908101519060048210614eab57fe5b88015260c09096019590820190600101614e66565b509495945050505050565b6001600160a01b03929092168252805164ffffffffff166020808401919091528101516001600160f81b03191660408084019190915281015160ff1660608084019190915281015161ffff1660808084019190915201516001600160701b03191660a082015260c00190565b90815260200190565b9182521515602082015260400190565b918252602082015260400190565b60208082526016908201527513585c9ad95d081b9bdd081a5b9a5d1a585b1a5e995960521b604082015260600190565b6020808252601a908201527f4e6f6e206964696f73796e637261746963206d61747572697479000000000000604082015260600190565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b60208082526015908201527410d1ce881b9bc81b585c9ad95d1cc81b1a5cdd1959605a1b604082015260600190565b6020808252600d908201526c092dcecc2d8d2c840d2dcc8caf609b1b604082015260600190565b6020808252601390820152724163636f756e74206d75737420736574746c6560681b604082015260600190565b60208082526017908201527f5472616465206661696c65642c206c6971756964697479000000000000000000604082015260600190565b6020808252600f908201526e4f766572206d61782061737365747360881b604082015260600190565b60208082526010908201526f496e76616c6964206d6174757269747960801b604082015260600190565b60208082526016908201527510d1ce881b585c9ad95d081a5b99195e08189bdd5b9960521b604082015260600190565b6020808252600e908201526d125b9d985b1a59081b585c9ad95d60921b604082015260600190565b602080825260129082015271496e76616c6964207472616465207479706560701b604082015260600190565b60208082526017908201527f496e73756666696369656e7420626c6f636b2074696d65000000000000000000604082015260600190565b602080825260169082015275496e76616c696420736574746c652062616c616e636560501b604082015260600190565b6020808252601690820152755472616465206661696c65642c20736c69707061676560501b604082015260600190565b602080825260089082015267111a5cd8589b195960c21b604082015260600190565b60208082526018908201527f496e76616c696420616d6f756e7420746f20736574746c650000000000000000604082015260600190565b60208082526012908201527121b0b73737ba1039b2ba3a36329039b2b63360711b604082015260600190565b60208082526013908201527210d1ce881b9bc81b585c9ad95d08199bdd5b99606a1b604082015260600190565b6000604082528351608060408401526152e360c0840182614e53565b90506020850151603f198483030160608501526153008282614e53565b6040870151608086015260609096015160a08501525050506020015290565b64ffffffffff9390931683526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561535a57fe5b604052919050565b61ffff8116811461537257600080fd5b50565b64ffffffffff8116811461537257600080fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122074317aaabefe25b77e4dbf698015c66afdb432f2ffa5bcfe6ea1284b5b1bce7364736f6c63430007060033", "deployedSourceMap": "554:25776:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3081:1125;;;;;;;;;;-1:-1:-1;3081:1125:8;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;4653:1922;;;;;;;;;;-1:-1:-1;4653:1922:8;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;2127:452::-;;;;;;;;;;-1:-1:-1;2127:452:8;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3081:1125::-;3263:6;3271:4;3287:36;3326:50;3359:16;3326:32;:50::i;:::-;3287:89;;3386:30;;:::i;:::-;3426:17;3453:21;;:::i;:::-;3498:15;3484:11;;;:29;3529:9;3524:633;3544:17;;;3524:633;;;3582:16;3648:159;3679:7;3704:9;3731:6;3755;;3762:1;3755:9;;;;;;;;;;;;;3782:1;:11;;;3648:13;:159::i;:::-;3623:1;:6;;3631:1;:13;;3612:195;;;;;;;;;;;;;;3838:196;3890:7;3915:16;3838:196;;3949:8;3975:14;3838:196;;4007:1;:13;;;3838:34;:196::i;:::-;3822:13;;;:212;4064:12;;:35;;;4097:1;4081;:13;;;:17;4064:35;4139:6;;4125:9;;;;4049:50;;-1:-1:-1;4125:21:8;;:9;:13;:21::i;:::-;4113:9;;;:33;-1:-1:-1;3563:3:8;;3524:633;;;-1:-1:-1;4175:9:8;;;;-1:-1:-1;4186:12:8;-1:-1:-1;;;3081:1125:8;;;;;;;;;:::o;4653:1922::-;4843:21;;:::i;:::-;4866:6;4884:36;4923:44;4956:10;4923:32;:44::i;:::-;4884:83;;4977:30;;:::i;:::-;5017:21;;:::i;:::-;5062:15;5048:11;;;:29;5093:9;5088:1436;5108:17;;;5088:1436;;;5146:25;5211:6;;5218:1;5211:9;;;;;;;;;;;;;5198:24;;5190:33;;5174:50;;;;;;;;5146:78;-1:-1:-1;5273:28:8;5260:9;:41;;;;;;;;;:105;;;-1:-1:-1;5334:31:8;5321:9;:44;;;;;;;;;5260:105;5239:1227;;;5398:18;;-1:-1:-1;;;5398:18:8;;;;;;;:::i;:::-;;;;;;;;5239:1227;5993:16;6063:183;6098:7;6127:9;6158:6;6186;;6193:1;6186:9;;;;;;;;;;;;;6217:1;:11;;;6063:13;:183::i;:::-;6046:13;;;6027:219;;;;;;;;-1:-1:-1;6265:186:8;;:14;;:186;;;;6027:219;;4701:1:11;;6265:23:8;:186::i;:::-;5239:1227;6506:6;;6492:9;;;;:21;;:13;:21::i;:::-;6480:9;;;:33;-1:-1:-1;5127:3:8;;5088:1436;;;-1:-1:-1;6558:9:8;;;6542:14;;6558:9;;-1:-1:-1;4653:1922:8;;-1:-1:-1;;;;;;;4653:1922:8:o;2127:452::-;2222:19;2253:36;2292:44;2325:10;2292:32;:44::i;:::-;2253:83;;2346:30;;:::i;:::-;2386:25;2438:20;;;;2414:46;;;;;;;;2386:74;;2495:77;2519:9;2530:6;2538:9;2549:15;2566:5;2495:23;:77::i;:::-;-1:-1:-1;2471:101:8;2127:452;-1:-1:-1;;;;;;2127:452:8:o;17649:272:24:-;17734:26;;:::i;:::-;17776:36;17815:44;17848:10;17815:44;;:32;:44::i;:::-;17776:83;;17876:38;17892:10;17904:9;17876:15;:38::i;:::-;17869:45;;;17649:272;;;;:::o;7126:1714:8:-;7362:16;;;;7518:20;;;;7494:46;;;;;;;;7466:74;-1:-1:-1;7567:38:8;7554:9;:51;;;;;;;;;7550:1284;;;7659:139;7700:7;7725:9;7752;7779:5;7659:23;:139::i;:::-;7621:177;;-1:-1:-1;7621:177:8;-1:-1:-1;7621:177:8;-1:-1:-1;7550:1284:8;;;7832:30;7819:9;:43;;;;;;;;;7815:1019;;;7916:53;7932:7;7941:9;7952;7963:5;7916:15;:53::i;7815:1019::-;8003:20;7990:9;:33;;;;;;;;;:72;;;-1:-1:-1;8040:22:8;8027:9;:35;;;;;;;;;7990:72;7986:848;;;8106:165;8147:9;8174:6;8198:9;8225;8252:5;8106:23;:165::i;:::-;8078:193;;-1:-1:-1;8078:193:8;-1:-1:-1;8293:15:8;8285:51;;;;-1:-1:-1;;;8285:51:8;;;;;;;:::i;:::-;8539:6;:15;;;8528:26;;8638:9;:20;;;8573:191;;8606:7;-1:-1:-1;;;;;8573:191:8;;8684:8;8711:10;8739:11;8573:191;;;;;;;;:::i;:::-;;;;;;;;7986:848;;;8795:28;;-1:-1:-1;;;8795:28:8;;;;;;;:::i;7986:848::-;7126:1714;;;;;;;;;;:::o;3016:1782:30:-;3200:6;3218:20;3241:36;3257:7;3266:10;3241:15;:36::i;:::-;3218:59;;3287:99;3389:35;:33;:35::i;:::-;-1:-1:-1;;;;;3468:14:30;;3434:31;3468:14;;;;;;;;;;;:26;;;;;;;;:36;;;;;;;;3287:137;;-1:-1:-1;3434:31:30;3547:56;3578:14;3495:8;3547:30;:56::i;:::-;3514:89;;;;3621:7;3613:16;;;;;;3689:29;:12;3711:6;3689:21;:29::i;:::-;3685:649;;;3838:18;;3802:20;;3825:32;;:8;;3838:18;;;;3825:32;;:12;:32::i;:::-;3802:55;-1:-1:-1;;;;;;;3879:33:30;-1:-1:-1;3879:33:30;;;:70;;-1:-1:-1;;;;;;3916:33:30;;;3879:70;3871:79;;;;;;3997:42;;-1:-1:-1;;;;;;3997:42:30;-1:-1:-1;;;;;3997:42:30;;;;;;;;;4119:106;;4176:34;:12;4196:6;4204:5;4176:19;:34::i;:::-;4161:49;;4119:106;4239:50;4255:7;4264:10;4276:12;4239:15;:50::i;:::-;4310:13;-1:-1:-1;4303:20:30;;-1:-1:-1;;;;;4303:20:30;3685:649;4348:13;;4344:422;;-1:-1:-1;;;;;;4483:28:30;-1:-1:-1;4483:28:30;;;:60;;-1:-1:-1;;;;;;4515:28:30;;;4483:60;4475:69;;;;;;4591:37;;-1:-1:-1;;;;;;4591:37:30;-1:-1:-1;;;;;4591:37:30;;;;;;;;4658:33;:12;4678:6;-1:-1:-1;4658:19:30;:33::i;:::-;4643:48;;4705:50;4721:7;4730:10;4742:12;4705:15;:50::i;:::-;4783:8;4776:15;;;;;;;3016:1782;;;;;;;;:::o;1427:120:44:-;1516:5;;;1511:16;;;;1483:8;1532:6;;;1511:28;1503:37;;;;;;1427:120;;;;:::o;2971:2071:31:-;3268:27;;3230:186;;3313:10;3341:8;3367:9;3394:8;3230:20;:186::i;:::-;3171:263;;;3427:7;;3171:263;3448:32;;;;:36;3444:296;;3500:11;3514:183;3552:14;:24;;;3594:10;3622:8;3648:9;3675:8;3514:20;:183::i;:::-;3500:197;;3715:6;3711:19;;;3723:7;;;3711:19;3444:296;;3904:40;3934:9;3904:29;:40::i;:::-;3900:152;;;3980:1;3968:8;:13;;3960:22;;;;;;-1:-1:-1;;;;;;4069:27:31;;;;;:58;;-1:-1:-1;;;;;;4100:27:31;;;4069:58;4061:67;;;;;;4278:14;:24;;;:31;4242:14;:32;;;:67;4238:171;;;4352:46;4373:14;:24;;;4352:20;:46::i;:::-;4325:24;;;:73;4238:171;4679:30;4712:14;:24;;;4737:14;:32;;;4712:58;;;;;;;;;;;;;;;;;;;4780:32;;;4822:17;;;:28;;;4860:18;;;;:30;;;4900:17;;;:28;;;-1:-1:-1;4938:21:31;;;;:50;;;;4998:32;;:37;;5034:1;4998:37;;;-1:-1:-1;2971:2071:31;;;;;;:::o;12829:1369:8:-;13085:17;;13189:25;;;;;;13276:59;:9;13297:6;13189:25;13085:17;13325:9;13276:20;:59::i;:::-;-1:-1:-1;;;;;13367:28:8;;;;;;-1:-1:-1;13473:22:8;13460:9;:35;;;;;;;;;13456:72;;;13511:17;:11;:15;:17::i;:::-;13497:31;;13456:72;13552:146;13585:9;13608:11;13633:30;13653:9;13633:6;:15;;;:19;;:30;;;;:::i;:::-;13552:6;;:146;;13677:11;13552:19;:146::i;:::-;13539:159;-1:-1:-1;13737:28:8;;;;;;13780:14;;13776:416;;13827:22;13814:9;:35;;;;;;;;;13810:372;;;13963:9;13937:6;:22;;;:35;;13929:70;;;;-1:-1:-1;;;13929:70:8;;;;;;;:::i;:::-;13810:372;;;14131:9;14105:6;:22;;;:35;;14097:70;;;;-1:-1:-1;;;14097:70:8;;;;;;;:::i;:::-;12829:1369;;;;;;;;;;:::o;5904:516:23:-;5990:26;;:::i;:::-;6033:11;6046:27;6075:29;6120:33;6142:10;6120:21;:33::i;:::-;6183:230;;;;;;;;-1:-1:-1;;;;;6183:230:23;;;;;;;;;;;;6370:27;;:2;:27;6183:230;;;;;;;;-1:-1:-1;;;;5904:516:23;;;:::o;16694:512:24:-;16822:26;;:::i;:::-;16864:12;16879:37;16905:10;16879:37;;:25;:37::i;:::-;17010:189;;;;;;;;;;;;;;;16957:22;;;17010:189;;;;;;;;;;-1:-1:-1;;17010:189:24;;;;;16694:512::o;19600:3773:8:-;19809:7;;;19900:38;19933:3;19915:21;;;19900:38;20010:3;19992:21;;;19948:67;;20033:20;;;20025:49;;;;-1:-1:-1;;;20025:49:8;;;;;;;:::i;:::-;20243:77;20274:9;:24;;;20300:8;20310:9;20243:30;:77::i;:::-;20242:78;20221:151;;;;-1:-1:-1;;;20221:151:8;;;;;;;:::i;:::-;20383:21;20407:49;20435:9;:20;;;20407:49;;:27;:49::i;:::-;20383:73;;20570:27;20647:17;20677:45;20708:13;20677:30;:45::i;:::-;20493:229;;;;;;;21420:140;21479:10;5986:1:11;21479:51:8;;;;;;;;;21420:19;;21535:7;21479:51;;21465:77;21420:23;:140::i;:::-;21392:9;:168;21371:238;;;;-1:-1:-1;;;21371:238:8;;;;;;;:::i;:::-;21620:15;21650:84;21688:13;21703:9;:20;;;21650:84;;21725:8;21650:37;:84::i;:::-;21620:114;;21844:1;21833:8;:12;:41;;;;;21873:1;21849:21;:25;21833:41;21829:575;;;21997:8;21973:21;:32;21969:70;;;22031:8;22007:32;;21969:70;21829:575;;;22071:1;22060:8;:12;:41;;;;;22100:1;22076:21;:25;22060:41;22056:348;;;22224:8;22200:21;:32;22196:70;;;22258:8;22234:32;;22056:348;;;22369:24;;-1:-1:-1;;;22369:24:8;;;;;;;:::i;22056:348::-;22626:25;22666:187;22710:9;22737:8;22763:9;22790:21;-1:-1:-1;;;;;;22666:187:8;;:26;:187::i;:::-;22626:227;;22864:215;22900:13;22927:9;:20;;;22864:215;;22961:8;22983:19;23016:21;23051:18;22864:22;:215::i;:::-;23203:9;-1:-1:-1;;;;;23095:194:8;23180:8;23095:194;;23138:9;:20;;;23095:194;;;23226:21;23261:18;23095:194;;;;;;;:::i;:::-;;;;;;;;23308:8;23318:24;:18;:22;:24::i;:::-;23344:21;23300:66;;;;;;;;;;;;;19600:3773;;;;;;;;;:::o;14898:3132::-;15097:7;;;15218:2;15200:20;;;-1:-1:-1;;;;;15320:23:8;;;;;;;;15312:54;;;;-1:-1:-1;;;15312:54:8;;;;;;;:::i;:::-;-1:-1:-1;;;;;15405:30:8;;15376:26;15502:53;15542:12;15502:39;:53::i;:::-;15446:109;;15570:38;:19;:36;:38::i;:::-;15566:160;;;15646:69;;-1:-1:-1;;;15646:69:8;;:20;;:34;;:69;;15681:12;;15695:19;;15646:69;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;15624:91;;15566:160;16088:174;16151:12;16177:9;16200:19;16233;16088:49;:174::i;:::-;16066:196;-1:-1:-1;16415:26:8;2618:9:11;16444:36:8;16470:9;16444:25;:36::i;:::-;:56;16415:85;;16510:18;16543:84;16565:9;16576:18;16596:9;16607:19;16543:21;:84::i;:::-;16510:117;;16758:1;16743:11;:16;;16735:25;;;;;;17148:23;;;17169:1;17148:23;;;;;;;;;17115:30;;17148:23;;;;;;:::i;:::-;;;;;;;;;;;;;;;;17115:56;;17208:9;:20;;;17185:43;;:6;17192:1;17185:9;;;;;;;;;;;;;;:20;;:43;;;;;17263:18;17242:6;17249:1;17242:9;;;;;;;;;;;;;;:18;;:39;;;;;17316:17;:11;:15;:17::i;:::-;17295:6;17302:1;17295:9;;;;;;;;;;;;;;:18;;:38;;;;;4701:1:11;17398:48:8;;:6;17405:1;17398:9;;;;;;;;;;;;;;:19;;:48;;;;;17540:140;17593:12;17623:19;17660:6;17540:35;:140::i;:::-;17518:162;-1:-1:-1;17700:51:8;;-1:-1:-1;17518:162:8;17738:12;17700:37;:51::i;:::-;17864:7;-1:-1:-1;;;;;17767:178:8;17829:9;:20;;;17767:178;;17796:12;-1:-1:-1;;;;;17767:178:8;;17885:19;17918:17;:11;:15;:17::i;:::-;17767:178;;;;;;;:::i;:::-;;;;;;;;17964:18;17984:25;:19;:23;:25::i;:::-;17956:67;;;;-1:-1:-1;18011:11:8;;-1:-1:-1;14898:3132:8;-1:-1:-1;;;;;;;;;14898:3132:8:o;656:266:30:-;741:20;773:61;837:35;:33;:35::i;:::-;-1:-1:-1;;;;;889:14:30;;;;;;;;;;;;;;:26;;;;;;;;;-1:-1:-1;;656:266:30;;;;:::o;5855:269:13:-;5920:87;6023:12;6038:39;6054:22;6038:15;:39::i;4025:2699:25:-;4140:7;4149:4;4169:21;4193:22;4205:9;4193:11;:22::i;:::-;4169:46;-1:-1:-1;2400:5:11;4283:8:25;:24;:29;4279:52;;4322:1;4325:5;4314:17;;;;;;;4279:52;4404:8;4387:13;:25;4383:48;;4422:1;4425:5;4414:17;;;;;;;4383:48;2400:5:11;4556:24:25;;;4555:42;2985:2:11;4680:38:25;;4676:1887;;4742:10;-1:-1:-1;4754:4:25;;-1:-1:-1;4734:25:25;;-1:-1:-1;4734:25:25;4676:1887;3037:3:11;4780:10:25;:39;4776:1787;;5092:20;2400:5:11;2521:7;5212:30:25;;5211:68;5131:148;;-1:-1:-1;;5131:148:25;;-1:-1:-1;2777:1:11;5131:148:25;5528:37;3258:2:11;5500:65:25;2777:1:11;5584:12:25;:37;;;;;;5626:1;5583:44;5306:335;;;;;;;;;4776:1787;3091:4:11;5662:10:25;:40;5658:905;;5718:20;2400:5:11;2568:8;5839:31:25;;5838:69;5757:150;;-1:-1:-1;;5757:150:25;;-1:-1:-1;2826:2:11;5757:150:25;5976:38;3311:3:11;5947:67:25;2826:2:11;6033:12:25;:38;;;;5658:905;3148:4:11;6112:10:25;:42;6108:455;;6170:20;2400:5:11;2618:9;6292:33:25;;6291:71;6209:153;;-1:-1:-1;;6209:153:25;;-1:-1:-1;2878:2:11;6209:153:25;6433:40;3367:3:11;6402:71:25;2878:2:11;6492:12:25;:40;;;;6108:455;6706:3;6711:5;6698:19;;;;;;4025:2699;;;;;;:::o;732:234:42:-;804:4;837:1;828:5;:10;;:26;;;;;851:3;842:5;:12;;828:26;820:35;;;;;;-1:-1:-1;;;914:9:42;903:21;-1:-1:-1;;;902:39:42;;;901:58;;732:234::o;316:372::-;428:7;464:1;455:5;:10;;:26;;;;;478:3;469:5;:12;;455:26;447:35;;;;;;526:5;522:160;;;-1:-1:-1;;;;;;582:9:42;;564:28;554:39;;547:46;;522:160;-1:-1:-1;;;;;;660:9:42;;642:28;640:31;631:40;;522:160;316:372;;;;;:::o;928:386:30:-;2216:2:11;1069:27:30;:12;:25;:27::i;:::-;:58;;1061:86;;;;-1:-1:-1;;;1061:86:30;;;;;;;:::i;:::-;1157:61;1221:35;:33;:35::i;:::-;-1:-1:-1;;;;;1266:14:30;;;;;;;;;;;;;;;:26;;;;;;;-1:-1:-1;1266:26:30;;:41;928:386::o;1166:1465:31:-;1374:4;;1390:1212;1414:10;:17;1410:1;:21;1390:1212;;;1452:27;1482:10;1493:1;1482:13;;;;;;;;;;;;;;1452:43;;1549:9;1530:5;:15;;;:28;;:78;;;-1:-1:-1;1578:16:31;;:30;;;1530:78;:124;;;;1646:8;1628:5;:14;;;:26;;1530:124;1509:168;;;1669:8;;;1509:168;1875:24;1853:5;:18;;;:46;;;;;;;;;;:120;;;;-1:-1:-1;1941:32:31;1919:5;:18;;;:54;;;;;;;;;;1853:120;1828:159;;;;;;2065:14;;;;2044:18;;2065:28;;2084:8;2065:18;:28::i;:::-;2044:49;;2173:40;2203:9;2173:29;:40::i;:::-;2169:163;;;2256:1;2241:11;:16;;2233:25;;;;;;-1:-1:-1;;;;;;2354:30:31;;;;;:64;;-1:-1:-1;;;;;;2388:30:31;;;2354:64;2346:73;;;;;;2478:14;;;:28;2541:24;2520:18;;;;:45;;;2541:24;-1:-1:-1;2580:11:31;;-1:-1:-1;2580:11:31;1390:1212;1433:3;;1390:1212;;;-1:-1:-1;2619:5:31;;1166:1465;-1:-1:-1;;;;;;1166:1465:31:o;615:222:35:-;683:4;4848:1:11;718:48:35;;;;;:112;;-1:-1:-1;;4907:1:11;-1:-1:-1;782:48:35;;615:222::o;5183:648:31:-;5294:23;5532:17;5552:9;:16;5572:1;5552:21;:48;;5580:9;:16;5599:1;5580:20;5552:48;;;5576:1;5552:48;5532:68;;5610:37;5671:9;5650:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;5610:71;;5696:9;5691:103;5715:9;:16;5711:1;:20;5691:103;;;5771:9;5781:1;5771:12;;;;;;;;;;;;;;5752:13;5766:1;5752:16;;;;;;;;;;;;;;;;;:31;5733:3;;5691:103;;;-1:-1:-1;5811:13:31;5183:648;-1:-1:-1;;;5183:648:31:o;6970:627:24:-;7204:11;7199:1;:16;;:59;;;;;7234:9;:24;;;7219:11;:39;;7199:59;7191:86;;;;-1:-1:-1;;;7191:86:24;;;;;;;:::i;:::-;7287:16;7318:79;7359:37;7384:11;7359:24;:37::i;:::-;7318:36;7344:9;7318:25;:36::i;:::-;:40;;:79::i;:::-;7287:110;;7408:182;7439:9;:20;;;7408:182;;7473:8;7495:9;7518:14;7546:34;7570:9;7546:23;:34::i;:::-;7408:6;;:182;;;;:17;:182::i;:::-;6970:627;;;;;;:::o;1553:90:44:-;1599:8;1626:10;-1:-1:-1;;1634:1:44;1626:3;:10::i;3128:155:0:-;3186:7;3218:1;3213;:6;;3205:49;;;;;-1:-1:-1;;;3205:49:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3271:5:0;;;3128:155::o;2759:895:26:-;2983:19;3014:28;3092:148;3120:6;3140:9;3163:14;3191;3219:11;3092:14;:148::i;:::-;3052:188;;-1:-1:-1;3052:188:26;-1:-1:-1;3251:35:26;3289:32;3314:6;3289:24;:32::i;:::-;3251:70;;3331:225;3362:13;3389:6;:17;;;3420:6;:21;;;3455:6;:22;;;3491:6;:17;;;3522:6;:24;;;3331:17;:225::i;:::-;3603:20;;3566:81;;;;3625:21;3566:36;:81::i;:::-;2759:895;;;;;;;;;:::o;4424:809:23:-;4521:6;4541:16;4571:5;4602:27;4631:29;4664:32;4685:10;4664:20;:32::i;:::-;4601:95;;-1:-1:-1;4601:95:23;-1:-1:-1;4707:11:23;-1:-1:-1;;;;;4732:33:23;;4728:438;;-1:-1:-1;5019:1:23;;-1:-1:-1;658:4:23;4728:438;;;5058:10;-1:-1:-1;;;;;5058:34:23;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5051:43;;5123:1;5116:4;:8;5108:17;;;;;;5184:4;5190:10;;-1:-1:-1;5190:10:23;-1:-1:-1;4424:809:23;-1:-1:-1;;4424:809:23:o;11271:218:24:-;11348:12;11372:41;11416:32;:30;:32::i;:::-;11465:17;;;;;;-1:-1:-1;;11465:17:24;;;;;11271:218::o;1496:609:25:-;1641:4;1682:1;1665:14;:18;1657:52;;;;-1:-1:-1;;;1657:52:25;;;;;;;:::i;:::-;2024:1:11;1727:14:25;:51;;1719:86;;;;-1:-1:-1;;;1719:86:25;;;;;;;:::i;:::-;2618:9:11;1820:8:25;:28;:33;1816:51;;-1:-1:-1;1862:5:25;1855:12;;1816:51;1877:12;1892:36;1918:9;1892:25;:36::i;:::-;1877:51;-1:-1:-1;1956:1:25;1939:137;1964:14;1959:1;:19;1939:137;;2015:37;2024:27;2049:1;2024:24;:27::i;:::-;2015:4;;:8;:37::i;:::-;2003:8;:49;1999:66;;;2061:4;2054:11;;;;;;1999:66;1980:3;;1939:137;;;-1:-1:-1;2093:5:25;;1496:609;-1:-1:-1;;;;;1496:609:25:o;1541:219:28:-;1607:20;1639:41;1683:36;:34;:36::i;:::-;1736:17;;;;;;-1:-1:-1;;1736:17:28;;;;-1:-1:-1;;;;;1736:17:28;;1541:219::o;728:737::-;836:17;867:35;916:27;957:22;993:17;1035:47;1085:36;:34;:36::i;:::-;-1:-1:-1;;;;;1163:19:28;;;1131:29;1163:19;;;;;;;;-1:-1:-1;;1163:19:28;;;;1206:18;;;;;1264:35;;;;;;;-1:-1:-1;;;;1331:27:28;;;;-1:-1:-1;1387:24:28;-1:-1:-1;;;1387:24:28;;;;-1:-1:-1;;;;1434:24:28;;;;;;-1:-1:-1;728:737:28:o;2682:175:0:-;2740:7;2771:5;;;2794:6;;;;2786:46;;;;;-1:-1:-1;;;2786:46:0;;;;;;;;;;;;;;;;;;;;;;;;;;;1320:368:30;1455:15;1482:99;1584:35;:33;:35::i;:::-;-1:-1:-1;;;;;1636:14:30;;;;;;;;;;;;;;:26;;;;;;;;:36;;;;;;;:45;;;;;1629:52;;;-1:-1:-1;;1320:368:30;;;;;:::o;23469:1611:8:-;23688:6;;23727:50;:9;23757:8;23767:9;23727:29;:50::i;:::-;23706:71;-1:-1:-1;6102:1:11;23923:49:8;;;4170:16:11;23909:110:8;23869:25;24034:15;;24030:698;;;24241:33;:10;24256:17;24241:14;:33::i;:::-;24228:46;;24030:698;;;24308:17;24295:10;:30;24291:437;;;24537:33;:10;24552:17;24537:14;:33::i;24291:437::-;24716:1;24703:14;;24291:437;24738:19;24772:74;24810:10;24822:23;:8;24835:9;24822:12;:23::i;:::-;24772:37;:74::i;:::-;24738:108;-1:-1:-1;24986:87:8;25028:44;:11;24738:108;25028:30;:44::i;:::-;24986:19;;;;;:41;:87::i;:::-;24967:106;23469:1611;-1:-1:-1;;;;;;;;;23469:1611:8:o;25086:1242::-;25337:20;25360:236;25408:13;25435:10;25459:8;25481:19;25514:27;:21;:25;:27::i;:::-;25360:34;:236::i;:::-;25337:259;;25727:1;25703:21;:25;:47;;;;;25749:1;25732:13;:18;;25703:47;25702:114;;;;25792:1;25768:21;:25;:47;;;;;25814:1;25797:13;:18;;25768:47;25681:145;;;;;;25878:24;26027:59;26060:13;26075:10;26027:32;:59::i;:::-;25864:222;;;;;26116:41;26138:18;26116:17;:21;;:41;;;;:::i;:::-;26096:61;;26234:87;26276:13;26291:10;26303:17;26234:41;:87::i;:::-;25086:1242;;;;;;;;:::o;552:219:16:-;619:21;;:::i;:::-;652:48;703:30;:28;:30::i;:::-;-1:-1:-1;;;;;750:14:16;;;;;;;;;;;;;;;;;743:21;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;743:21:16;;;;;;;;-1:-1:-1;;;743:21:16;;;;;;;;;;;-1:-1:-1;;;743:21:16;;;;;;;;-1:-1:-1;;;743:21:16;;;;;-1:-1:-1;;;;;;743:21:16;;;;;-1:-1:-1;743:21:16;;552:219;-1:-1:-1;552:219:16:o;3020:732::-;3107:4;3143:15;3173:31;3189:14;3173:15;:31::i;:::-;3169:577;;;3389:31;3410:9;3389:20;:31::i;:::-;3357:29;;:63;;;;-1:-1:-1;3350:70:16;;-1:-1:-1;3350:70:16;3169:577;3660:29;;3656:33;;;;;;:79;;-1:-1:-1;3693:29:16;;:42;;;-1:-1:-1;3693:42:16;3656:79;3649:86;;;;;12989:1760:17;13210:6;13259:1;13236:19;:24;;13228:33;;;;;;13306:18;13326:20;13348:21;13371:28;13415:48;13433:7;13442:9;:20;;;13415:48;;:17;:48::i;:::-;13305:158;;;;;;;;13548:1;13534:11;:15;13526:50;;;;-1:-1:-1;;;13526:50:17;;;;;;;:::i;:::-;13590:24;13586:408;;13717:17;:11;:15;:17::i;:::-;13695:39;;13762:1;13748:15;;13586:408;;;13873:17;:11;:15;:17::i;:::-;13850:19;:40;;13842:77;;;;-1:-1:-1;;;13842:77:17;;;;;;;:::i;:::-;13947:36;:11;13963:19;13947:15;:36::i;:::-;13933:50;;13586:408;14140:16;;:38;;;;-1:-1:-1;14160:18:17;;14140:38;14136:222;;;14244:20;;14194:153;;:14;;:153;;14244:20;-1:-1:-1;;;14194:32:17;:153::i;:::-;14368:196;14400:7;14421:9;:20;;;14368:196;;14455:11;14480:13;14507;14534:20;14368:18;:196::i;:::-;14663:9;:20;;;14636:69;;14654:7;-1:-1:-1;;;;;14636:69:17;;14685:19;14636:69;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;14723:19:17;;12989:1760;-1:-1:-1;;;;;;;12989:1760:17:o;330:193:25:-;398:7;2618:9:11;425:30:25;;;417:39;;;;;;2618:9:11;486::25;:29;;473:43;;;;330:193;-1:-1:-1;330:193:25:o;18125:890:8:-;18329:6;;18368:60;:9;18398:18;18418:9;18368:29;:60::i;:::-;18347:81;;18439:19;18473:168;18528:48;18543:32;:9;:30;:32::i;:::-;18528:10;;:14;:48::i;:::-;18594:33;:18;18617:9;18594:22;:33::i;18473:168::-;18439:202;;18803:205;18995:12;18803:77;18860:19;18803:9;:19;;;:56;;:77;;;;:::i;:::-;:191;;:205::i;:::-;18784:224;18125:890;-1:-1:-1;;;;;;;18125:890:8:o;1997:1135:32:-;2162:21;;:::i;:::-;2323:33;:14;:31;:33::i;:::-;2322:34;2314:66;;;;-1:-1:-1;;;2314:66:32;;;;;;;:::i;:::-;2395:32;:14;:30;:32::i;:::-;2391:703;;;2515:76;2559:7;2568:14;2584:6;2515:43;:76::i;:::-;2391:703;;;2622:36;2661:155;2715:7;2740:14;:31;;;2789:6;:13;2661:36;:155::i;:::-;2622:194;-1:-1:-1;2876:40:32;2622:194;2909:6;2876:32;:40::i;:::-;3009:74;:14;3052:7;3061:14;3077:5;3009:42;:74::i;:::-;2391:703;;-1:-1:-1;3111:14:32;;1997:1135;-1:-1:-1;;1997:1135:32:o;837:274:16:-;938:48;989:30;:28;:30::i;:::-;-1:-1:-1;;;;;1029:14:16;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1029:31:16;-1:-1:-1;;1029:31:16;;;;-1:-1:-1;;;1029:31:16;-1:-1:-1;;1029:31:16;;;;;-1:-1:-1;;;1029:31:16;-1:-1:-1;;1029:31:16;;;;;;;-1:-1:-1;;1029:31:16;;;;-1:-1:-1;;1029:31:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1075:29;938:81;;-1:-1:-1;1029:14:16;;1075:29;;1029:14;1075:29;837:274;;;:::o;5505:243:13:-;5570:61;5647:12;5662:39;5678:22;11415:329;11507:12;494:7;11707:9;11699:18;;;;;;;;:38;;11415:329;-1:-1:-1;;11415:329:13:o;583:160:25:-;641:7;2400:5:11;668:4:25;:21;;660:30;;;;;;2400:5:11;715:4:25;:20;;1013:838:42;1215:1;1210:6;;;1219:66;1210:75;;;1135:70;;1134:152;1381:1;1376:6;;;1385:66;1376:75;;;1301:70;;1300:152;1547:1;1542:6;;;1471:66;1467:70;;;;1466:83;1644:1;1639:6;;;1648:66;1639:75;;;1564:70;;1563:152;1739:2;1734:7;;;1729:13;1766:2;1761:7;;;1756:13;1794:2;1789:7;;;1783:14;1833:3;1828:8;;;1839:4;1828:15;;;1815:8;;1814:30;;1013:838::o;928:470:25:-;991:7;1014:5;1023:1;1014:10;1010:40;;;-1:-1:-1;2618:9:11;1026:24:25;;1010:40;1064:5;1073:1;1064:10;1060:44;;;-1:-1:-1;1083:21:25;1076:28;;1060:44;1118:5;1127:1;1118:10;1114:37;;;-1:-1:-1;2666:11:11;1130:21:25;;1114:37;1165:5;1174:1;1165:10;1161:41;;;-1:-1:-1;1184:18:25;1177:25;;1161:41;1216:5;1225:1;1216:10;1212:41;;;-1:-1:-1;1235:18:25;1228:25;;1212:41;1267:5;1276:1;1267:10;1263:42;;;-1:-1:-1;1286:19:25;1279:26;;1263:42;1319:5;1328:1;1319:10;1315:42;;;-1:-1:-1;1338:19:25;1331:26;;1315:42;1368:23;;-1:-1:-1;;;1368:23:25;;;;;;;:::i;5507:311:24:-;5742:14;;;2265:3:11;1611:1:24;5742:41;;;;5720:66;;:91;;5507:311::o;30226:609:26:-;30520:22;2618:9:11;30545:36:26;30571:9;30545:25;:36::i;:::-;:56;30520:81;;30611:217;30653:6;30673:10;30697:8;30719:9;30742:14;30770:20;30804:14;30611:28;:217::i;:::-;30226:609;;;;;;;:::o;398:190:44:-;478:5;;;-1:-1:-1;;497:7:44;;493:88;;;515:6;;;:20;;;534:1;529;525;:5;;;;;;:10;515:20;506:30;;;;;;493:88;;;560:6;;;:20;;;579:1;574;570;:5;;;;;;:10;560:20;551:30;;;;;4274:2831:26;4505:6;4513;4809:14;4788:6;:17;;;:35;4784:54;;-1:-1:-1;4833:1:26;;-1:-1:-1;4833:1:26;4825:13;;4784:54;4907:17;4926:26;4954:17;4987:70;5010:6;5018:9;5029:14;5045:11;4987:22;:70::i;:::-;4906:151;;;;;;5176:25;5225:12;5283:190;5317:6;:17;;;5352:19;5389:10;5417;5445:14;5283:16;:190::i;:::-;5251:222;;-1:-1:-1;5251:222:26;-1:-1:-1;5251:222:26;5487:27;;5509:1;5512;5501:13;;;;;;;;;;;5487:27;4274:2831;5661:23;5686:22;5710:23;5749:169;5795:9;5822:18;5858:14;5890;5749:28;:169::i;:::-;5660:258;;;;;;5990:16;6010:1;5990:21;5986:40;;;6021:1;6024;6013:13;;;;;;;;;;;;;5986:40;6233:17;;;;:42;;6260:14;6233:26;:42::i;:::-;6213:17;;;:62;;;6314:209;;6381:40;:19;6405:15;6381:23;:40::i;:::-;6439:10;6467;6495:14;6314;:209::i;:::-;6289:22;;;:234;;;6818:46;;6859:1;6862;6851:13;;;;;;;;;;;;;6818:46;6904:194;6940:6;6964:9;:19;;;7001:16;7035:15;7068:16;6904:18;:194::i;:::-;6885:213;;;;;;;;;;;4274:2831;;;;;;;;:::o;27016:257::-;27180:18;;27217:50::o;28986:1123::-;29258:1;29244:10;:15;;:49;;;;-1:-1:-1;;;;;;29263:30:26;;;29244:49;29236:58;;;;;;29366:1;29348:14;:19;;:57;;;;-1:-1:-1;;;;;;29371:34:26;;;29348:57;29340:66;;;;;;29468:15;29464:1;:19;:58;;;;-1:-1:-1;29506:16:26;29487:35;;;29464:58;29456:67;;;;;;29586:10;29582:1;:14;:48;;;;-1:-1:-1;29614:16:26;29600:30;;;29582:48;29574:57;;;;;;29732:16;29711:37;;;29677:72;;;;;;29805:45;;-1:-1:-1;;29805:45:26;-1:-1:-1;;;;;29805:45:26;;;;-1:-1:-1;;;;29860:53:26;-1:-1:-1;;;29860:53:26;;;;;;;;;;;;-1:-1:-1;;;;29923:55:26;-1:-1:-1;;;29923:55:26;;;;;;-1:-1:-1;;;;29988:45:26;-1:-1:-1;;;29988:45:26;;;;;;;;;;;-1:-1:-1;;;;;30043:59:26;-1:-1:-1;;;30043:59:26;;;;;;;;28986:1123::o;18827:441:17:-;18924:1;18917:3;:8;;18909:17;;;;;;18984:19;19028:48;1107:1:11;19065:10:17;19028:17;:48::i;:::-;18983:93;;;;;19101:21;19118:3;19101:12;:16;;:21;;;;:::i;:::-;19086:36;;19132:72;1107:1:11;19170:10:17;19182:12;19196:1;19199;19202;19132:18;:72::i;:::-;19244:10;19219:42;;;19257:3;19219:42;;;;;;:::i;:::-;;;;;;;;18827:441;;;:::o;2832:435:23:-;2928:27;2957:29;3002:50;3055:32;:30;:32::i;:::-;3097:27;3127:17;;;;;-1:-1:-1;;3127:17:23;;;;3184:13;-1:-1:-1;;;;;3184:13:23;;;-1:-1:-1;;;3234:26:23;;;;;;-1:-1:-1;2832:435:23:o;4867:217:13:-;4929:41;4986:12;5001:36;5017:19;5001:15;:36::i;2658:225::-;2724:41;2781:12;2796:40;2812:23;2796:15;:40::i;2365:232::-;2431:47;2495:12;2510:40;2526:23;2510:15;:40::i;9545:1720:24:-;9702:7;9722:19;9743:18;9777:70;9801:9;:24;;;9827:8;9837:9;9777:23;:70::i;:::-;9721:126;;;;9857:18;9878:34;9902:9;9878:23;:34::i;:::-;9857:55;;9928:13;9923:1336;;9985:20;;9964:75;;;;10007:8;10017:10;10029:9;9964:20;:75::i;:::-;9957:82;;;;;;;9923:1336;10070:21;10094:36;10120:9;10094:25;:36::i;:::-;10070:60;;10245:20;10268:56;10286:37;10311:11;10286:24;:37::i;10268:56::-;10245:79;;10338:16;10373:79;10394:9;:20;;;10373:79;;10416:12;10430:10;10442:9;10373:20;:79::i;:::-;10338:114;;10467:21;10502:17;10537:11;10552:1;10537:16;10533:613;;;10674:9;10658:25;;10713:35;:9;:19;;;:33;:35::i;:::-;10701:47;;10533:613;;;10862:60;10880:41;10919:1;10905:11;:15;10880:24;:41::i;:::-;10862:13;;:17;:60::i;:::-;10846:76;;10953:178;10995:9;:20;;;10953:178;;11037:13;11072:10;11104:9;10953:20;:178::i;:::-;10941:190;;10533:613;11167:81;11189:13;11204:12;11218:9;11229:8;11239;11167:21;:81::i;:::-;11160:88;;;;;;;;;;;;17939:613:26;18071:6;;18123:118;18163:64;3524:9:11;18163:31:26;:11;18179:14;18163:15;:31::i;:::-;:35;;:64::i;:::-;18123:22;:118::i;:::-;18093:148;;18251:21;18275:59;18293:8;-1:-1:-1;;;18275:17:26;:59::i;:::-;18251:83;;18344:16;18363:33;18381:14;18363:17;:33::i;:::-;18344:52;;18406:22;18431:60;18449:9;-1:-1:-1;;;18431:17:26;:60::i;:::-;18406:85;;18509:36;18529:15;18509:19;:36::i;:::-;18502:43;;;17939:613;-1:-1:-1;;;;;;;17939:613:26:o;2027:143:44:-;2098:6;2123:40;2127:32;2131:1;3651:3:11;2127::44;:32::i;:::-;2161:1;2123:3;:40::i;1613:470:23:-;1748:6;1893:19;1915:131;2038:2;:7;;;1915:105;1998:2;:21;;;1915:65;658:4;1915:17;:34;;:65;;;;:::i;:::-;:82;;:105::i;:::-;:122;;:131::i;:::-;1893:153;1613:470;-1:-1:-1;;;;1613:470:23:o;21904:1018:17:-;22028:18;22060:20;22094:21;22129:28;22182:68;22253:30;:28;:30::i;:::-;-1:-1:-1;;;;;22333:14:17;;22293:37;22333:14;;;;;;;;;;;:26;;;;;;;;22386:28;;-1:-1:-1;;;;;22386:28:17;;;-1:-1:-1;;;;22440:28:17;;;;;-1:-1:-1;22333:14:17;;-1:-1:-1;22482:17:17;;22478:388;;22730:35;;22697:69;;-1:-1:-1;;;22730:35:17;;;;22697:32;:69::i;:::-;22674:92;;22478:388;;;22820:35;;-1:-1:-1;;;22820:35:17;;;;;-1:-1:-1;22478:388:17;22889:26;-1:-1:-1;;;22889:26:17;;;;;;22875:40;;;21904:1018;;-1:-1:-1;21904:1018:17;;-1:-1:-1;21904:1018:17;-1:-1:-1;;21904:1018:17:o;17979:293::-;18150:1;18135:11;:16;;18127:25;;;;;;18198:67;18217:13;18232:10;18244:11;18257:1;18260;18263;18198:18;:67::i;:::-;17979:293;;;:::o;2069:229:13:-;2130:48;2195:12;2210:41;2226:24;2210:15;:41::i;1117:152:16:-;1226:31;;;:36;;;;;1117:152::o;5247:3666::-;5435:10;5431:1;:14;:56;;;;-1:-1:-1;5409:6:11;5449:38:16;;;5431:56;5423:65;;;;;;5707:8;:57;;;;;5754:10;5719:14;:31;;;:45;;;5707:57;5703:70;;;5766:7;;5703:70;5824:31;;;;5783:14;;;6684:1857;-1:-1:-1;;;;;;6691:14:16;;;6684:1857;;6767:22;6743:47;;;5409:6:11;6743:47:16;6877:17;;;:29;;;;;6898:8;6877:29;6873:272;;;-1:-1:-1;7019:31:16;;;;;-1:-1:-1;;;;;;7074:14:16;;7102:2;7093:11;;;7074:31;;;;7019:87;;;;-1:-1:-1;;;;;;6965:141:16;;;-1:-1:-1;7124:7:16;;-1:-1:-1;7124:7:16;6873:272;7239:10;7232:3;:17;:30;;;;;7254:8;7253:9;7232:30;7228:375;;;-1:-1:-1;;;;;;7369:14:16;;7368:15;7359:24;;;;;-1:-1:-1;;;7405:50:16;;7401:77;;7476:2;7466:6;-1:-1:-1;;;;;7466:12:16;;;;7457:21;;7401:77;-1:-1:-1;;;;;;;7540:23:16;;;7560:2;7551:11;;;7540:23;7530:34;;;;7496:68;:31;;;:68;7582:7;;7228:375;7695:10;7689:3;:16;:28;;;;;7709:8;7689:28;7685:575;;;8046:3;8011:31;;;;-1:-1:-1;;;;;;7764:26:16;;;;:34;;7756:43;;7813:2;7804:11;;7756:60;7746:71;;;;;8011:38;;;8010:48;8002:57;;;;;;-1:-1:-1;;;;;;;8191:29:16;;;8212:1;8203:10;;;;8217:2;8202:17;8191:29;8181:40;;;;8147:74;:31;;;:74;8239:7;;7685:575;8364:10;8358:3;:16;:29;;;;;8379:8;8378:9;8358:29;8354:42;;;8389:7;;;;;;8354:42;-1:-1:-1;;;;;;;8429:23:16;;8466:2;8457:11;;;8429:40;;;;8419:51;;;;;8493:12;;;;-1:-1:-1;;;;;;8493:12:16;;8529:1;8519:11;6684:1857;;;8616:8;8611:22;;8626:7;;;;;8611:22;8733:1;8724:6;:10;8716:19;;;;;;-1:-1:-1;;;;;;8853:26:16;;;;:34;;8845:43;8902:2;8893:11;;;8845:60;8823:83;;;;-1:-1:-1;;;;;;8777:129:16;:31;;;:129;-1:-1:-1;5247:3666:16;;;;;:::o;20142:1666:17:-;20374:68;20445:30;:28;:30::i;:::-;-1:-1:-1;;;;;20525:14:17;;20485:37;20525:14;;;;;;;;;;;:26;;;;;;;;20374:101;;-1:-1:-1;;;;;;;20570:30:17;;;;;:64;;-1:-1:-1;;;;;;20604:30:17;;;20570:64;20562:73;;;;;;20791:1;20774:13;:18;;:55;;;;-1:-1:-1;;;;;;20796:33:17;;;20774:55;20766:64;;;;;;20884:18;20880:740;;21216:16;21192:40;;;21184:49;;;;;;21287:66;;-1:-1:-1;;;;21287:66:17;-1:-1:-1;;;21287:66:17;;;;;;;20880:740;;;21580:28;;-1:-1:-1;;;21580:28:17;;;;21563:45;;21555:54;;;;;;21630:52;;:28;21754:47;;;;-1:-1:-1;;;;;21754:47:17;-1:-1:-1;;;21754:47:17;-1:-1:-1;;;;;;;;;;21692:52:17;;;-1:-1:-1;;21630:52:17;;;;-1:-1:-1;;;21630:52:17;-1:-1:-1;;;;21630:52:17;;;;;;;21692;;;;;;;;21754:47;;;;;;;;;;;-1:-1:-1;;;;20142:1666:17:o;5905:255:24:-;6084:14;;;6062:91;1960:33;6084:36;;;;6062:61;;:91;;5905:255::o;882:468:23:-;1010:6;1155:24;1182:126;1286:2;:21;;;1182:86;658:4;1182:38;1207:12;1182:2;:7;;;:24;;:38;;;;:::i;2248:143:44:-;2319:6;2344:40;2348:9;2352:1;2355;2348:3;:9::i;:::-;3651:3:11;2344::44;:40::i;1753:1065:30:-;1930:32;:14;:30;:32::i;:::-;1922:41;;;;;;2026:31;;;;2005:52;;:18;2068:744;2088:6;:13;2084:1;:17;2068:744;;;2122:27;2152:6;2159:1;2152:9;;;;;;;;;;;;;;2122:39;;2179:5;:14;;;2197:1;2179:19;2175:33;;;2200:8;;;2175:33;2231:16;;:30;;2223:39;;;;;;2327:15;;;;4701:1:11;2327:45:30;2319:54;;;;;;2430:20;2481:192;2513:7;2538:10;2566:5;:14;;;2598;:29;;;2481:192;;2645:5;:14;;;2481;:192::i;:::-;2465:208;;2708:1;2692:13;:17;2688:113;;;2752:22;;;;;-1:-1:-1;;;2752:49:30;-1:-1:-1;;;;;;2727:74:30;;;2688:113;2068:744;;;2103:3;;2068:744;;15438:477:31;15584:21;;:::i;:::-;15617:27;;:::i;:::-;15658:21;;;15654:39;;15688:5;-1:-1:-1;15681:12:31;;15654:39;15725:45;15744:7;15753:16;15725:18;:45::i;:::-;15704:66;;15780:42;;;:23;;;:42;15871:13;15850:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;15832:15:31;;;:53;:15;15438:477;-1:-1:-1;;;;15438:477:31:o;658:502::-;804:9;799:355;823:6;:13;819:1;:17;799:355;;;857:27;887:6;894:1;887:9;;;;;;;;;;;;;;857:39;;914:5;:14;;;932:1;914:19;910:33;;;935:8;;;910:33;958:185;984:14;1016:5;:16;;;1050:5;:14;;;1082:5;:15;;;1115:5;:14;;;958:8;:185::i;:::-;799:355;;838:3;;799:355;;9863:2352:16;10240:12;;;;10344:35;:14;10371:7;10344:26;:35::i;:::-;10389:46;;;;;10239:140;;-1:-1:-1;10239:140:16;;-1:-1:-1;10239:140:16;-1:-1:-1;10239:140:16;-1:-1:-1;10453:32:16;10389:14;10453:16;:32::i;:::-;:41;10445:50;;;;;;10541;;;:31;;;:50;10772:13;10767:141;;2024:1:11;10809:60:16;;;;;10801:69;;;;;;11059:7;11055:263;;;11107:22;;;;;-1:-1:-1;;;11107:49:16;-1:-1:-1;;;;;;11082:74:16;;;11055:263;;;11257:22;;;;;-1:-1:-1;;;11232:75:16;;;11055:263;11460:59;11487:14;:31;;;11460:26;:59::i;:::-;-1:-1:-1;;;;;;11426:93:16;:31;;;:93;11530:20;11560:649;11567:24;;11560:649;;11902:35;;;;11955:26;;;11951:147;;12001:82;12019:14;12035:10;12047:4;-1:-1:-1;;;12001:17:16;:82::i;:::-;12196:2;12173:25;;;;;12126:10;-1:-1:-1;11560:649:16;;;9863:2352;;;;;;;;;:::o;31020:595:26:-;31308:80;31327:6;31335:10;31347:8;31357:14;31373;31308:18;:80::i;:::-;31419:189;31450:6;:24;;;31488:6;:22;;;31524:6;:17;;;31555:20;31589:9;31419:17;:189::i;:::-;31399:17;;;;:209;;;;-1:-1:-1;;;;;;31020:595:26:o;7513:1182::-;7758:6;;;;7849:52;:9;7873:11;7886:14;7849:23;:52::i;:::-;7829:72;;7911:26;7940:62;7980:6;:21;;;7940:9;:19;;;:39;;:62;;;;:::i;:::-;7911:91;;8066:6;:17;;;8087:1;8066:22;:50;;;-1:-1:-1;8092:24:26;;8066:50;8062:72;;;8126:1;8129;8132;8118:16;;;;;;;;;;8062:72;8280:17;8321:12;8371:200;8403:6;:17;;;8438:6;:22;;;8478:19;8515:10;8543:14;8371;:200::i;:::-;8347:224;;-1:-1:-1;8347:224:26;-1:-1:-1;8347:224:26;8585:30;;8607:1;8610;8613;8599:16;;;;;;;;;;;;8585:30;-1:-1:-1;8644:10:26;;8656:19;;-1:-1:-1;8644:10:26;;-1:-1:-1;7513:1182:26;-1:-1:-1;;;;;7513:1182:26:o;18946:1650::-;19149:6;;;19192:35;:10;19212:14;19192:19;:35::i;:::-;19173:54;-1:-1:-1;19376:17:26;19408:65;19437:35;:10;19452:19;19437:14;:35::i;:::-;19408:9;;:28;:65::i;:::-;19376:97;-1:-1:-1;4626:25:11;20081:44:26;;20077:67;;;20135:1;20138:5;20127:17;;;;;;;;20077:67;20156:19;20177:12;20193:26;20208:10;20193:14;:26::i;:::-;20155:64;;;;20234:7;20229:31;;20251:1;20254:5;20243:17;;;;;;;;;;20229:31;20321:11;20335:59;20383:10;20335:43;:12;20367:10;20335:31;:43::i;:::-;:47;;:59::i;:::-;20321:73;;3651:3:11;20465:4:26;:31;20461:129;;;20520:1;20523:5;20512:17;;;;;;;;;;;20461:129;20568:4;-1:-1:-1;20574:4:26;;-1:-1:-1;20560:19:26;;-1:-1:-1;;;;20560:19:26;9092:3965;9339:6;;;;9955:59;:53;:14;9989:18;9955:33;:53::i;:::-;:57;:59::i;:::-;9914:100;;10024:10;10037:71;10068:23;:9;:21;:23::i;:::-;10093:14;10037:30;:71::i;:::-;10024:84;;10140:1;10123:14;:18;10119:2504;;;10270:26;10299:42;:18;10337:3;10299:37;:42::i;:::-;10270:71;;3651:3:11;10543:19:26;:46;10539:68;;;10599:1;10602;10605;10591:16;;;;;;;;;;;10539:68;11529:73;11568:33;3651:3:11;11597::26;11568:28;:33::i;:::-;11529:19;;:38;:73::i;:::-;11523:79;;10119:2504;;;;12539:73;:67;12602:3;12539:58;12563:33;3651:3:11;12602::26;12563:28;:33::i;:::-;12539:19;;:23;:58::i;:73::-;12533:79;;10119:2504;12633:20;12668:74;1863:3:11;12668:39:26;12676:30;:9;:28;:30::i;:::-;12668:3;;:7;:39::i;:74::-;12633:109;-1:-1:-1;12838:28:26;:19;12862:3;12838:23;:28::i;:::-;12958:55;12959:47;12992:13;12959:28;:19;12983:3;12959:23;:28::i;12958:55::-;12753:297;;;;-1:-1:-1;13027:13:26;;-1:-1:-1;9092:3965:26;-1:-1:-1;;;;;;;9092:3965:26:o;1773:176:44:-;1834:8;1858:9;1862:1;1865;1858:3;:9::i;:::-;1854:13;;1890:1;1885;:6;;1877:15;;;;;16345:1469:26;16547:7;16640:19;16661:12;16689:76;16706:10;16718:19;16739:10;16751;16763:1;16689:16;:76::i;:::-;16639:126;;;;16780:7;16775:22;;16796:1;16789:8;;;;;;16775:22;16953:11;16967:35;16989:12;16967:21;:35::i;:::-;16953:49;;17062:17;17082:55;17100:4;-1:-1:-1;;;17082:17:26;:55::i;:::-;17062:75;;17291:19;17313:28;17330:10;17313:16;:28::i;:::-;17291:50;;17389:14;17418:85;17439:63;17457:12;-1:-1:-1;;;17439:17:26;:63::i;:::-;17418:20;:85::i;:::-;17389:114;;;-1:-1:-1;17558:19:26;17580:59;17624:14;17580:39;17389:114;3524:9:11;17580:10:26;:39::i;:59::-;17558:81;-1:-1:-1;17752:16:26;17738:30;;17734:44;;;17777:1;17770:8;;;;;;;;;;;17734:44;17796:11;16345:1469;-1:-1:-1;;;;;;;;;;;;16345:1469:26:o;13305:846::-;13545:6;;;13601:48;:9;13633:15;13601:31;:48::i;:::-;13749:21;;;;13571:78;;-1:-1:-1;13749:47:26;;13571:78;13749:25;:47::i;:::-;13725:21;;;:71;13892:15;13865:24;;;:42;-1:-1:-1;13945:49:26;:9;13977:16;13945:31;:49::i;:::-;13917:77;-1:-1:-1;14004:28:26;14035:49;:9;14067:16;14035:31;:49::i;:::-;14004:80;14125:18;;-1:-1:-1;13305:846:26;;-1:-1:-1;;;;;;;;13305:846:26:o;7264:226:13:-;7326:50;7392:12;7407:36;7423:19;7407:15;:36::i;2984:825:25:-;3122:7;3131:4;3172:1;3155:14;:18;3147:52;;;;-1:-1:-1;;;3147:52:25;;;;;;;:::i;:::-;2024:1:11;3217:14:25;:51;;3209:86;;;;-1:-1:-1;;;3209:86:25;;;;;;;:::i;:::-;3305:12;3320:36;3346:9;3320:25;:36::i;:::-;3305:51;-1:-1:-1;3384:1:25;3367:396;3392:14;3387:1;:19;3367:396;;3427:22;3452:37;3461:27;3486:1;3461:24;:27::i;3452:37::-;3427:62;;3584:8;3566:14;:26;3562:49;;;-1:-1:-1;3602:1:25;-1:-1:-1;3605:5:25;;-1:-1:-1;3594:17:25;;-1:-1:-1;3594:17:25;3562:49;3726:8;3709:14;:25;3705:47;;;-1:-1:-1;3744:1:25;-1:-1:-1;3747:4:25;;-1:-1:-1;3736:16:25;;-1:-1:-1;3736:16:25;3705:47;-1:-1:-1;3408:3:25;;3367:396;;;;3773:29;;-1:-1:-1;;;3773:29:25;;;;;;;:::i;2984:825::-;;;;;;;:::o;24295:1374:26:-;24466:7;24485:100;24588:29;:27;:29::i;:::-;24485:132;-1:-1:-1;24627:22:26;2618:9:11;24652:36:26;24678:9;24652:25;:36::i;:::-;24718:35;24756:17;;;;;;;;;;;:27;;;;;;;;24652:56;;;;24756:43;;;;;;;24836:29;;24652:56;;-1:-1:-1;24756:43:26;24836:29;-1:-1:-1;;;24836:29:26;;;;;-1:-1:-1;;;24896:24:26;;;;;-1:-1:-1;;;24958:31:26;;;;25399:14;25391:49;;;;-1:-1:-1;;;25391:49:26;;;;;;;:::i;:::-;25470:192;25505:17;25540:15;25573:10;25601:20;25639:9;25470:17;:192::i;:::-;25451:211;24295:1374;-1:-1:-1;;;;;;;;;;;24295:1374:26:o;2269:557:23:-;2485:13;;2346:7;;-1:-1:-1;;;;;2477:36:23;2473:50;;-1:-1:-1;2522:1:23;2515:8;;2473:50;2534:12;2549:2;:13;;;-1:-1:-1;;;;;2549:37:23;;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7904:1576:24:-;8109:7;8152:13;8136;:29;8128:38;;;;;;8255:12;8239:13;:28;8231:37;;;;;;8515:9;8503:8;:21;8499:975;;8563:221;8774:9;8563:185;8719:28;;;8563:78;8564:20;;;8611:29;;;8563:47;:78::i;:221::-;8540:244;;;;8499:975;9150:313;9248:197;9416:28;;;9248:82;9249:20;;;9300:29;;;9248:51;:82::i;:197::-;9150:9;;:13;:313::i;3530:215:0:-;3588:7;3611:6;3607:20;;-1:-1:-1;3626:1:0;3619:8;;3607:20;3649:5;;;3653:1;3649;:5;:1;3672:5;;;;;:10;3664:56;;;;-1:-1:-1;;;3664:56:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4209:150;4267:7;4298:1;4294;:5;4286:44;;;;;-1:-1:-1;;;4286:44:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;4351:1;4347;:5;;;;;;;4209:150;-1:-1:-1;;;4209:150:0:o;1928:134:41:-;1981:6;2009:18;2004:1;:23;;1995:33;;;;;;-1:-1:-1;2054:2:41;2049:7;;1928:134::o;6671:222::-;6728:6;6751:1;:6;;6756:1;6751:6;;6742:16;;;;;;6764:13;6801:1;6780:22;;6795:2;6789:1;6781:10;;:16;;6780:22;;;;;;;-1:-1:-1;;;;;;;6817:19:41;;;;;:42;;-1:-1:-1;;;;;;6840:19:41;;;6817:42;6808:52;;;;;21339:266;21386:6;-1:-1:-1;;;21409:1:41;:24;;;21400:34;;;;;;-1:-1:-1;;21457:1:41;:25;;;21453:39;;;-1:-1:-1;21491:1:41;21484:8;;21453:39;21519:81;21595:3;21551:1;21543:10;;21556:35;21543:48;:55;;21519:5;:81::i;4186:197::-;4243:6;4273:13;:9;;;:13;;;;;4290:2;4273:19;-1:-1:-1;;;;;;4307:19:41;;;;;:42;;-1:-1:-1;;;;;;4330:19:41;;;4298:52;;;;;1610:89;1686:7;;1691:2;1686:7;;1610:89::o;1022:239:44:-;1078:8;1108:1;-1:-1:-1;;1108:7:44;:27;;;;;-1:-1:-1;;;1119:1:44;:16;1108:27;1106:30;1098:39;;;;;;1253:1;1249;:5;;;;;;;1022:239;-1:-1:-1;;;1022:239:44:o;3828:240:13:-;3888:68;3972:12;3987:34;4003:17;3987:15;:34::i;1180:245:43:-;1403:1;1394:10;;;1354:21;;;;1393:24;;1180:245::o;14791:385:31:-;14907:23;14946:30;14979:42;14995:7;15004:16;14979:15;:42::i;:::-;14946:75;;15099:1;15082:6;:13;:18;15078:37;;15109:6;-1:-1:-1;15102:13:31;;15078:37;15126:20;15139:6;15126:12;:20::i;6460:4123::-;6583:4;;;;;;;;7195:574;7219:27;;:34;7215:38;;7195:574;;;7274:27;7304:14;:27;;;7332:1;7304:30;;;;;;;;;;;;;;7274:60;;7517:32;7495:54;;;;;;;;:5;:18;;;:54;;;;;;;;;;7487:63;;;;;;7647:24;7625:5;:18;;;:46;;;;;;;;;;:69;;;;-1:-1:-1;7675:14:31;;;;:19;7625:69;7621:138;;;7714:30;7726:14;7742:1;7714:11;:30::i;:::-;-1:-1:-1;7255:3:31;;7195:574;;;;7868:9;7863:1217;7887:27;;:34;7883:38;;7863:1217;;;7942:27;7972:14;:27;;;8000:1;7972:30;;;;;;;;;;;;;;7942:60;;8043:24;8021:46;;;;;;;;:5;:18;;;:46;;;;;;;;;8017:1053;;;8154:17;;;;8132:19;8220:25;;8198:65;;;8327:24;8305:5;:18;;;:46;;;;;;;;;8301:361;;;8461:17;;;;;8611:32;8461:5;:17;8611:11;:32::i;:::-;8301:361;;;8875:180;8920:5;8947:7;8976:25;9023:14;8875:23;:180::i;:::-;8820:235;;-1:-1:-1;8820:235:31;-1:-1:-1;8820:235:31;-1:-1:-1;8017:1053:31;-1:-1:-1;7923:3:31;;7863:1217;;;-1:-1:-1;9145:32:31;;;;9116:26;9280:37;:35;:37::i;:::-;-1:-1:-1;;;;;9394:14:31;;9327:64;9394:14;;;;;;;;;;9187:130;;-1:-1:-1;9418:735:31;9442:14;:24;;;:31;9438:1;:35;9418:735;;;9494:27;9524:14;:24;;;9549:1;9524:27;;;;;;;;;;;;;;9494:57;;9569:5;:14;;;9587:1;9569:19;9565:33;;;9590:8;;;9565:33;9659:24;9637:5;:18;;;:46;;;;;;;;;;:120;;;;-1:-1:-1;9725:32:31;9703:5;:18;;;:54;;;;;;;;;;9637:120;9612:159;;;;;;9878:160;9919:5;9942:7;9967:25;10010:14;9878:23;:160::i;:::-;9823:215;;-1:-1:-1;9823:215:31;-1:-1:-1;9823:215:31;-1:-1:-1;10053:52:31;10065:5;10072:12;10085:18;10072:32;;;;;;;;10053:11;:52::i;:::-;10141:1;10119:23;;;;9418:735;;9475:3;;9418:735;;;;10333:2;10311:18;:24;;:62;;;;-1:-1:-1;10357:16:31;10339:34;;;10311:62;10303:71;;;;;;-1:-1:-1;10445:7:31;;10466:25;;-1:-1:-1;10466:25:31;-1:-1:-1;10511:18:31;-1:-1:-1;6460:4123:31;-1:-1:-1;;;;6460:4123:31:o;8919:751:16:-;9004:7;;9150:24;9131:43;;9004:7;9302:338;-1:-1:-1;;;;;;9309:14:16;;;9302:338;;-1:-1:-1;;;9343:45:16;;;:77;9339:256;;;-1:-1:-1;;;;;;9516:23:16;;:33;;9506:44;;;;;9578:2;9568:12;9339:256;9627:2;9617:6;-1:-1:-1;;;;;9617:12:16;;;;9608:21;;9302:338;;;-1:-1:-1;9657:6:16;;8919:751;-1:-1:-1;;;8919:751:16:o;25849:1161:26:-;26153:100;26256:29;:27;:29::i;:::-;26295:35;26333:17;;;;;;;;;;;:27;;;;;;;;:43;;;;;;;;;26477:25;;;26512:15;;;:26;;;26568:24;;-1:-1:-1;;;;;26568:24:26;;;26548:17;;;:44;;;;-1:-1:-1;;;26626:28:26;;;;;26602:21;;;:52;26689:29;-1:-1:-1;;;26689:29:26;;;;26664:22;;;:54;-1:-1:-1;;;26748:24:26;;;;26728:17;;;:44;-1:-1:-1;;;26809:31:26;;;;;;26782:24;;;:58;26153:132;;-1:-1:-1;26333:43:26;26851:153;;;;26909:28;;;;-1:-1:-1;;;;;26909:28:26;26885:21;;;:52;26851:153;;;26992:1;26968:21;;;:25;25849:1161;;;;;;;;:::o;23057:1232::-;23273:7;23323:1;23300:20;:24;23292:33;;;;;;23492:9;23472:17;:29;23468:57;;;-1:-1:-1;23510:15:26;23503:22;;23468:57;23536:16;23555:32;:9;23569:17;23555:13;:32::i;:::-;23536:51;;23612:20;23601:8;:31;23597:155;;;23726:15;23719:22;;;;;23597:155;23811:23;23849:73;23901:20;23849:47;:8;3651:3:11;23849:12:26;:47::i;:73::-;23811:111;-1:-1:-1;23986:20:26;24009:54;3651:3:11;23811:111:26;24009:37;:54::i;:::-;23986:77;-1:-1:-1;24074:21:26;24110:141;3651:3:11;24111:70:26;24152:28;:10;23986:77;24152:14;:28::i;:::-;24111:36;:15;24131;24111:19;:36::i;24110:141::-;24074:177;23057:1232;-1:-1:-1;;;;;;;;;;23057:1232:26:o;2655:782:24:-;2814:6;2845:11;2840:1;:16;;:59;;;;;2875:9;:24;;;2860:11;:39;;2840:59;2832:68;;;;;;3039:14;;;;2333:32;2971:1;-1:-1:-1;;2976:15:24;;2971:21;2957:35;;3018:48;3039:24;;;3018:48;3651:3:11;3018:75:24;2940:14;3135:85;3187:32;3204:14;3187:16;:32::i;:::-;3135:47;:6;3524:9:11;3135:10:24;:47::i;:85::-;3103:117;;3371:1;3358:10;:14;3350:23;;;;;;3420:10;2655:782;-1:-1:-1;;;;;;2655:782:24:o;15185:1026:26:-;15393:6;15401:4;15482:22;15507:63;15538:15;15555:14;15507:30;:63::i;:::-;15482:88;;3651:3:11;15584:15:26;:42;15580:65;;;15636:1;15639:5;15628:17;;;;;;;15580:65;15656:17;;15796:66;15826:35;:10;15841:19;15826:14;:35::i;:::-;15796:10;;:29;:66::i;:::-;15760:102;;15878:19;15899:12;15915:26;15930:10;15915:14;:26::i;:::-;15877:64;;;;15960:7;15955:31;;15977:1;15980:5;15969:17;;;;;;;;;;;15955:31;16094:64;16114:43;:12;16146:10;16114:31;:43::i;:::-;16094:15;;:19;:64::i;:::-;16081:77;16199:4;;-1:-1:-1;15185:1026:26;-1:-1:-1;;;;;;;;;;;15185:1026:26:o;20852:1240::-;20918:6;20926:4;3651:3:11;21007:10:26;:38;21003:61;;;-1:-1:-1;21055:1:26;;-1:-1:-1;21055:1:26;21047:17;;21003:61;21159:13;21175:71;21205:40;3651:3:11;21234:10:26;21205:28;:40::i;:::-;21175:10;;:29;:71::i;:::-;21159:87;;21530:21;21554:29;21576:6;21554:21;:29::i;:::-;21530:53;;21678:1;21660:14;:19;;;21656:42;;21689:1;21692:5;21681:17;;;;;;;;21656:42;21708:13;21736:317;21773:266;21812:157;21855:32;21872:14;21855:16;:32::i;:::-;4456:21:11;21812:17:26;:157::i;:::-;-1:-1:-1;;;21773:17:26;:266::i;:::-;21736:19;:317::i;:::-;21708:345;;;-1:-1:-1;22080:4:26;;-1:-1:-1;;;;20852:1240:26;;;;:::o;4272:191:24:-;4402:14;;;3755:22:11;1655:24:24;4402:27;;;;4380:52;;:76;;4272:191::o;1267:154:44:-;1390:5;;;1385:16;;;;1323:8;1406:6;;;1385:28;1377:37;;;;;4546:200:24;4702:14;;;1730:32;4702:35;4681:58;;;4546:200::o;1238:160:41:-;1289:6;-1:-1:-1;;1312:1:41;:24;;:51;;;;;1345:18;1340:1;:23;;1312:51;1303:61;;;;;14283:175;14329:6;14356:1;14352;:5;;;14343:15;;;;;;14449:3;14398:9;14405:1;14398:5;:9::i;:::-;14389:19;;14411:34;14389:56;:63;;14365:88;;14283:175;;;:::o;2300:114::-;2350:6;2378:1;2373;:6;;;;2364:16;;;;;;-1:-1:-1;2401:7:41;;2406:2;2401:7;;2300:114::o;5172:257:13:-;5231:87;5334:12;5349:33;5365:16;5349:15;:33::i;14636:6524:41:-;14685:6;-1:-1:-1;;;14708:1:41;:24;;;14699:34;;;;;;-1:-1:-1;;14756:1:41;:25;;;14752:39;;;-1:-1:-1;14790:1:41;14783:8;;14752:39;-1:-1:-1;;;14811:14:41;-1:-1:-1;;;14873:22:41;;:26;;;14869:98;;;14925:35;14916:44;14964:3;14916:51;14869:98;15002:1;14977;14981:18;14977:22;:26;;;14973:98;;;15029:35;15020:44;15068:3;15020:51;14973:98;15106:1;15081;15085:18;15081:22;:26;;;15077:98;;;15133:35;15124:44;15172:3;15124:51;15077:98;15210:1;15185;15189:18;15185:22;:26;;;15181:98;;;15237:35;15228:44;15276:3;15228:51;15181:98;15313:1;15289;15293:17;15289:21;:25;;;15285:97;;;15340:35;15331:44;15379:3;15331:51;15285:97;15416:1;15392;15396:17;15392:21;:25;;;15388:97;;;15443:35;15434:44;15482:3;15434:51;15388:97;15519:1;15495;15499:17;15495:21;:25;;;15491:97;;;15546:35;15537:44;15585:3;15537:51;15491:97;15622:1;15598;-1:-1:-1;;;15598:21:41;:25;;;15594:97;;;15649:35;15640:44;15688:3;15640:51;15594:97;15724:1;15701;15705:16;15701:20;:24;;;15697:96;;;15751:35;15742:44;15790:3;15742:51;15697:96;15826:1;15803;15807:16;15803:20;:24;;;15799:96;;;15853:35;15844:44;15892:3;15844:51;15799:96;15928:1;15905;15909:16;15905:20;:24;;;15901:96;;;15955:35;15946:44;15994:3;15946:51;15901:96;16030:1;16007;16011:16;16007:20;:24;;;16003:96;;;16057:35;16048:44;16096:3;16048:51;16003:96;16131:1;16109;16113:15;16109:19;:23;;;16105:95;;;16158:35;16149:44;16197:3;16149:51;16105:95;16232:1;16210;16214:15;16210:19;:23;;;16206:95;;;16259:35;16250:44;16298:3;16250:51;16206:95;16333:1;16311;16315:15;16311:19;:23;;;16307:95;;;16360:35;16351:44;16399:3;16351:51;16307:95;16434:1;16412;-1:-1:-1;;;16412:19:41;:23;;;16408:95;;;16461:35;16452:44;16500:3;16452:51;16408:95;16534:1;16513;16517:14;16513:18;:22;;;16509:94;;;16561:35;16552:44;16600:3;16552:51;16509:94;16634:1;16613;16617:14;16613:18;:22;;;16609:94;;;16661:35;16652:44;16700:3;16652:51;16609:94;16734:1;16713;16717:14;16713:18;:22;;;16709:94;;;16761:35;16752:44;16800:3;16752:51;16709:94;16834:1;16813;16817:14;16813:18;:22;;;16809:94;;;16861:35;16852:44;16900:3;16852:51;16809:94;16933:1;16913;16917:13;16913:17;:21;;;16909:93;;;16960:35;16951:44;16999:3;16951:51;16909:93;17032:1;17012;17016:13;17012:17;:21;;;17008:93;;;17059:35;17050:44;17098:3;17050:51;17008:93;17131:1;17111;17115:13;17111:17;:21;;;17107:93;;;17158:35;17149:44;17197:3;17149:51;17107:93;17230:1;17210;17214:13;17210:17;:21;;;17206:93;;;17257:35;17248:44;17296:3;17248:51;17206:93;17328:1;17309;17313:12;17309:16;:20;;;17305:92;;;17355:35;17346:44;17394:3;17346:51;17305:92;17426:1;17407;17411:12;17407:16;:20;;;17403:92;;;17453:35;17444:44;17492:3;17444:51;17403:92;17524:1;17505;17509:12;17505:16;:20;;;17501:92;;;17551:35;17542:44;17590:3;17542:51;17501:92;17622:1;17603;17607:12;17603:16;:20;;;17599:92;;;17649:35;17640:44;17688:3;17640:51;17599:92;17719:1;17701;17705:11;17701:15;:19;;;17697:91;;;17746:35;17737:44;17785:3;17737:51;17697:91;17816:1;17798;17802:11;17798:15;:19;;;17794:91;;;17843:35;17834:44;17882:3;17834:51;17794:91;17913:1;17895;17899:11;17895:15;:19;;;17891:91;;;17940:35;17931:44;17979:3;17931:51;17891:91;18010:1;17992;17996:11;17992:15;:19;;;17988:91;;;18037:35;18028:44;18076:3;18028:51;17988:91;18106:1;18089;18093:10;18089:14;:18;;;18085:90;;;18133:35;18124:44;18172:3;18124:51;18085:90;18202:1;18185;18189:10;18185:14;:18;;;18181:90;;;18229:35;18220:44;18268:3;18220:51;18181:90;18298:1;18281;18285:10;18281:14;:18;;;18277:90;;;18325:35;18316:44;18364:3;18316:51;18277:90;18394:1;18377;18381:10;18377:14;:18;;;18373:90;;;18421:35;18412:44;18460:3;18412:51;18373:90;18489:1;18473;18477:9;18473:13;:17;;;18469:89;;;18516:35;18507:44;18555:3;18507:51;18469:89;18584:1;18568;18572:9;18568:13;:17;;;18564:89;;;18611:35;18602:44;18650:3;18602:51;18564:89;18679:1;18663;18667:9;18663:13;:17;;;18659:89;;;18706:35;18697:44;18745:3;18697:51;18659:89;18774:1;18758;18762:9;18758:13;:17;;;18754:89;;;18801:35;18792:44;18840:3;18792:51;18754:89;18868:1;18853;18857:8;18853:12;:16;;;18849:88;;;18895:35;18886:44;18934:3;18886:51;18849:88;18962:1;18947;18951:8;18947:12;:16;;;18943:88;;;18989:35;18980:44;19028:3;18980:51;18943:88;19056:1;19041;19045:8;19041:12;:16;;;19037:88;;;19083:35;19074:44;19122:3;19074:51;19037:88;19150:1;19135;19139:8;19135:12;:16;;;19131:88;;;19177:35;19168:44;19216:3;19168:51;19131:88;19243:1;19229;19233:7;19229:11;:15;;;19225:87;;;19270:35;19261:44;19309:3;19261:51;19225:87;19336:1;19322;19326:7;19322:11;:15;;;19318:87;;;19363:35;19354:44;19402:3;19354:51;19318:87;19429:1;19415;19419:7;19415:11;:15;;;19411:87;;;19456:35;19447:44;19495:3;19447:51;19411:87;19522:1;19508;19512:7;19508:11;:15;;;19504:87;;;19549:35;19540:44;19588:3;19540:51;19504:87;19614:1;19601;19605:6;19601:10;:14;;;19597:86;;;19641:35;19632:44;19680:3;19632:51;19597:86;19706:1;19693;19697:6;19693:10;:14;;;19689:86;;;19733:35;19724:44;19772:3;19724:51;19689:86;19798:1;19785;19789:6;19785:10;:14;;;19781:86;;;19825:35;19816:44;19864:3;19816:51;19781:86;19890:1;19877;19881:6;19877:10;:14;;;19873:86;;;19917:35;19908:44;19956:3;19908:51;19873:86;19981:1;19969;19973:5;19969:9;:13;;;19965:85;;;20008:35;19999:44;20047:3;19999:51;19965:85;20072:1;20060;20064:5;20060:9;:13;;;20056:85;;;20099:35;20090:44;20138:3;20090:51;20056:85;20163:1;20151;20155:5;20151:9;:13;;;20147:85;;;20190:35;20181:44;20229:3;20181:51;20147:85;20254:1;20242;20246:5;20242:9;:13;;;20238:85;;;20281:35;20272:44;20320:3;20272:51;20238:85;20344:1;20333;20337:4;20333:8;:12;;;20329:84;;;20371:35;20362:44;20410:3;20362:51;20329:84;20434:1;20423;20427:4;20423:8;:12;;;20419:84;;;20461:35;20452:44;20500:3;20452:51;20419:84;20524:1;20513;20517:4;20513:8;:12;;;20509:84;;;20551:35;20542:44;20590:3;20542:51;20509:84;20614:1;20603;20607:4;20603:8;:12;;;20599:84;;;20641:35;20632:44;20680:3;20632:51;20599:84;20703:1;20693;20697:3;20693:7;:11;;;20689:83;;;20730:35;20721:44;20769:3;20721:51;20689:83;20792:1;20782;20786:3;20782:7;:11;;;20778:83;;;20819:35;20810:44;20858:3;20810:51;20778:83;20881:1;20871;20875:3;20871:7;:11;;;20867:83;;;20908:35;20899:44;20947:3;20899:51;20867:83;20970:1;20960;20964:3;20960:7;:11;;;20956:83;;;20997:35;20988:44;21036:3;20988:51;20956:83;21072:7;;;;21077:2;21072:7;21066:2;:14;21057:24;;21046:35;-1:-1:-1;;;;;21096:29:41;;;21087:39;;;;;16756:1107:31;16858:23;588:2;16955:6;:30;;;;16947:39;;;;;;16997:90;17090:37;:35;:37::i;:::-;-1:-1:-1;;;;;17204:14:31;;17137:64;17204:14;;;;;;;;;;16997:130;;-1:-1:-1;17261:28:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;17228:61;;17305:9;17300:533;17324:6;17320:10;;:1;:10;17300:533;;;17351:42;17396:12;17409:1;17396:15;;;;;;;;17351:60;;17425:27;17455:6;17462:1;17455:9;;;;;;;;;;;;;;;;;;;17603:23;;;;;17584:42;;17657:21;;;;;17640:14;;;:38;;;;17710:22;-1:-1:-1;;;17710:22:31;;;17692:15;;;:40;-1:-1:-1;;;17763:21:31;;;;;;;17746:38;;:14;;;:38;17798:17;;:24;;;;-1:-1:-1;17603:23:31;17332:3;17300:533;;;-1:-1:-1;17850:6:31;16756:1107;-1:-1:-1;;;;;16756:1107:31:o;15921:829::-;16015:13;;15998:14;16015:13;16061:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16061:21:31;;16038:44;;16097:9;16092:257;16112:6;16108:1;:10;16092:257;;;16139:27;16169:6;16176:1;16169:9;;;;;;;;;;;;;;16139:39;;16259:79;16288:5;:16;;;16306:5;:14;;;16322:5;:15;;;16259:28;:79::i;:::-;16250:3;16254:1;16250:6;;;;;;;;;;;;;;;;;:88;-1:-1:-1;16120:3:31;;16092:257;;;-1:-1:-1;16403:1:31;16414:330;16425:6;16421:1;:10;16414:330;;;16459:1;16474:243;16485:1;16481;:5;:28;;;;;16503:3;16507:1;16503:6;;;;;;;;;;;;;;16490:3;16498:1;16494;:5;16490:10;;;;;;;;;;;;;;:19;16481:28;16474:243;;;16589:3;16593:1;16589:6;;;;;;;;;;;;;;16597:3;16605:1;16601;:5;16597:10;;;;;;;;;;;;;;16566:3;16574:1;16570;:5;16566:10;;;;;;;;;;;;;16578:3;16582:1;16578:6;;;;;;;;;;;;;16565:43;;;;;;;;;;16656:6;16663:1;16656:9;;;;;;;;;;;;;;16667:6;16678:1;16674;:5;16667:13;;;;;;;;;;;;;;16627:6;16638:1;16634;:5;16627:13;;;;;;;;;;;;;16642:6;16649:1;16642:9;;;;;;;;;;;;;;;;;16626:55;;;;;-1:-1:-1;;16699:3:31;16474:243;;;-1:-1:-1;16730:3:31;;16414:330;;12689:2038;12803:27;;:34;12795:42;;12787:51;;;;;;12920:1;12885:14;:32;;;:36;12877:45;;;;;;12969:35;13007:14;:27;;;13035:5;13007:34;;;;;;;;;;;;;;12969:72;;13102:24;13072:54;;;;;;;;:13;:26;;;:54;;;;;;;;;;:132;;;;-1:-1:-1;13172:32:31;13142:13;:26;;;:62;;;;;;;;;;13072:132;13051:163;;;;;;13253:32;;;:37;;-1:-1:-1;;13253:37:31;;;-1:-1:-1;;;13531:338:31;13551:27;;:34;13547:38;;13531:338;;;13606:23;13632:14;:27;;;13660:1;13632:30;;;;;;;;;;;;;;13606:56;;13696:13;13680:1;:13;;;:29;:75;;;;-1:-1:-1;13731:24:31;13713:1;:14;;;:42;;;;;;;;;;13680:75;13676:183;;;13791:1;:13;;;13775:29;;13843:1;13822:22;;13676:183;-1:-1:-1;13587:3:31;;13531:338;;;;13892:18;13883:5;:27;13879:236;;;-1:-1:-1;;14060:24:31;14031:26;;;;;:53;14098:7;;13879:236;14328:33;14364:14;:27;;;14392:18;14364:47;;;;;;;;;;;;;;;;;;14524:25;;;;;;14563:23;;;;;14421:175;;;;14633:24;14606;;;;:51;14696:24;14667:26;;:53;;;;-1:-1:-1;;;12689:2038:31;;;:::o;11592:862::-;11739:16;;11735:20;;;;:68;;-1:-1:-1;11759:16:31;;5409:6:11;-1:-1:-1;11759:44:31;11735:68;11727:77;;;;;;11868:5;:14;;;11864:1;:18;:56;;;;-1:-1:-1;11886:14:31;;;;11904:16;-1:-1:-1;11886:34:31;11864:56;11856:65;;;;;;11982:5;:15;;;11978:1;:19;:77;;;;-1:-1:-1;12001:15:31;;;;4907:1:11;-1:-1:-1;12001:54:31;11978:77;11970:86;;;;;;12127:14;;;;-1:-1:-1;;;;;;12108:33:31;;;;:70;;-1:-1:-1;12145:14:31;;;;-1:-1:-1;;;;;;12145:33:31;12108:70;12100:79;;;;;;12262:16;;12229:50;;12320:14;;;;12376:15;;;;12432:14;;;;;12402:45;;-1:-1:-1;;;;;12402:45:31;-1:-1:-1;;;12402:45:31;-1:-1:-1;;12345:47:31;;;;-1:-1:-1;;;12345:47:31;-1:-1:-1;;12289:46:31;;;;;;-1:-1:-1;;12229:50:31;;;;-1:-1:-1;;12229:50:31;;;;;;;12289:46;;;;;;;;12345:47;;;;;12402:45;;;;;;;;;;11592:862::o;10664:882::-;10896:4;10914:7;10935;10967:22;10992:25;:5;:23;:25::i;:::-;10967:50;-1:-1:-1;11089:19:31;;;:54;;;11129:14;11112;:31;11089:54;11085:116;;;11176:14;11159:31;;11085:116;11220:7;:29;;;;11248:1;11231:5;:14;;;:18;11220:29;11210:39;-1:-1:-1;11268:47:31;;;;11260:56;;;;;;-1:-1:-1;;11444:16:31;;11488:7;;11429:2;11400:31;;;;11465:3;11436:32;;;;11399:70;;;;;-1:-1:-1;11524:14:31;-1:-1:-1;10664:882:31:o;6210:263:13:-;6277:77;6370:12;6385:41;6401:24;6385:15;:41::i;2520:163:44:-;2569:6;-1:-1:-1;;;;;2596:1:44;:30;;2587:40;;;;;;-1:-1:-1;2674:1:44;2520:163::o;3768:191:41:-;3825:6;3855:13;;;;:9;;;;:13;-1:-1:-1;;;;;;3883:19:41;;;;;:42;;-1:-1:-1;;;;;;3906:19:41;;;3874:52;;;;;13336:769;13385:6;13412:1;13408;:5;;;13399:15;;;;;;13421:10;13441:13;;;;-1:-1:-1;;;13464:25:41;;13460:56;;13500:2;13504:9;;;;13493;13460:56;13531:11;13525:2;:17;13521:48;;13553:2;13557:9;;;;13546;13521:48;13584:7;13578:2;:13;13574:44;;13602:2;13606:9;;;;13595;13574:44;13633:5;13627:2;:11;13623:40;;13649:1;13652:8;;;;13642;13623:40;13678:4;13672:2;:10;13668:39;;13693:1;13696:8;;;;13686;13668:39;13722:3;13716:2;:9;13712:38;;13736:1;13739:8;;;;13729;13712:38;13765:3;13759:2;:9;13755:23;;13777:1;13770:8;;;;13755:23;-1:-1:-1;;13833:8:41;;13845:2;13833:14;13866:11;;;;13890:3;:9;;;13866:34;-1:-1:-1;;;13906:166:41;13950:1;13944:3;:7;13906:166;;;13972:8;;;14006:3;14000:9;;;14049:16;;;14039:26;;;;;14024:3;:7;14017:14;;13961:1;13953:9;13906:166;;;-1:-1:-1;14093:6:41;;13336:769;-1:-1:-1;;;;;13336:769:41:o;883:554:32:-;1016:7;5409:6:11;1043:38:32;;;1035:47;;;;;;1112:16;1100:28;;;1092:37;;;;;;4907:1:11;1147:48:32;;;1139:57;;;;;;-1:-1:-1;1252:42:32;1292:2;1252:42;;;;1319:39;1357:1;1319:39;;;;1251:108;1390:25;;;1251:165;883:554;;;;;:::o;1006:752:35:-;1085:7;1130:1;1112:5;:15;;;:19;:77;;;;-1:-1:-1;1135:15:35;;;;4907:1:11;-1:-1:-1;1135:54:35;1112:77;1104:86;;;;;;1309:15;;;;4848:1:11;-1:-1:-1;1305:81:35;;-1:-1:-1;1372:14:35;;;;1365:21;;1305:81;1397:20;1420:45;1463:1;1445:5;:15;;;:19;1420:24;:45::i;:::-;1696:14;;;;1397:68;;-1:-1:-1;1696:55:35;;2618:9:11;;1696:32:35;;1397:68;1696:18;:32::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:175:60:-;84:20;;-1:-1:-1;;;;;133:31:60;;123:42;;113:2;;179:1;176;169:12;194:400;;;327:3;320:4;312:6;308:17;304:27;294:2;;350:6;342;335:22;294:2;-1:-1:-1;378:20:60;;421:18;410:30;;407:2;;;460:8;450;443:26;407:2;504:4;496:6;492:17;480:29;;567:3;560:4;552;544:6;540:17;532:6;528:30;524:41;521:50;518:2;;;584:1;581;574:12;599:1524;;727:3;720:4;712:6;708:17;704:27;694:2;;749:5;742;735:20;694:2;789:6;776:20;815:4;838:18;875:2;871;868:10;865:2;;;881:9;865:2;912:36;944:2;939;935;931:11;927:20;912:36;:::i;:::-;982:15;;;1013:12;;;;1045:15;;;1079:4;1114:11;;;1102:24;;1098:33;;1095:42;-1:-1:-1;1092:2:60;;;1154:5;1147;1140:20;1092:2;1180:5;1194:900;1208:2;1205:1;1202:9;1194:900;;;1275:2;1269:3;1264;1260:13;1256:22;1253:2;;;1295:5;1288;1281:20;1253:2;1326;1361;1355:9;1407:2;1399:6;1395:15;1464:6;1452:10;1449:22;1444:2;1432:10;1429:18;1426:46;1423:2;;;1475:9;1423:2;1499:22;;1549:17;;1534:33;;1617:12;;;1604:26;1587:15;;;1580:51;1681:12;;;1668:26;1651:15;;;1644:51;;;;1718:2;1770:12;;;1757:26;1740:15;;;1733:51;1807:3;1860:12;;;1847:26;1830:15;;;1823:51;1897:3;;1937:50;1974:12;;;1937:50;:::i;:::-;1920:15;;;1913:75;;;;2001:19;;2040:12;;;;2072;;;;1226:1;1219:9;1194:900;;;-1:-1:-1;2112:5:60;;684:1439;-1:-1:-1;;;;;;;;;684:1439:60:o;2128:195::-;2209:13;;-1:-1:-1;;;;;;2251:47:60;;2241:58;;2231:2;;2313:1;2310;2303:12;2328:161;2414:20;;2463:1;2453:12;;2443:2;;2479:1;2476;2469:12;2494:140;2574:13;;2596:32;2574:13;2596:32;:::i;2639:162::-;2718:13;;2771:4;2760:16;;2750:27;;2740:2;;2791:1;2788;2781:12;2806:1701;;;;;;3036:3;3024:9;3015:7;3011:23;3007:33;3004:2;;;3058:6;3050;3043:22;3004:2;3086:31;3107:9;3086:31;:::i;:::-;3076:41;;3167:2;3156:9;3152:18;3139:32;3180;3206:5;3180:32;:::i;:::-;3231:5;-1:-1:-1;3287:2:60;3272:18;;3259:32;3310:18;3340:14;;;3337:2;;;3372:6;3364;3357:22;3337:2;3400:22;;;;3456:3;3438:16;;;3434:26;3431:2;;;3478:6;3470;3463:22;3431:2;3516;3510:9;3558:3;3550:6;3546:16;3612:6;3600:10;3597:22;3592:2;3580:10;3577:18;3574:46;3571:2;;;3623:9;3571:2;3650;3643:22;3690:16;;3718;;;3715:2;;;3752:6;3744;3737:22;3715:2;3785:77;3854:7;3843:8;3839:2;3835:17;3785:77;:::i;:::-;3777:6;3770:93;;3909:2;3905;3901:11;3888:25;3938:2;3928:8;3925:16;3922:2;;;3959:6;3951;3944:22;3922:2;4001:77;4070:7;4059:8;4055:2;4051:17;4001:77;:::i;:::-;3996:2;3984:15;;3977:102;-1:-1:-1;4133:2:60;4125:11;;;4112:25;4095:15;;;4088:50;4192:2;4184:11;;;4171:25;4154:15;;;4147:50;3988:6;-1:-1:-1;4260:18:60;;;4247:32;;4291:16;;;4288:2;;;4325:6;4317;4310:22;4288:2;;4369:78;4439:7;4428:8;4417:9;4413:24;4369:78;:::i;:::-;2994:1513;;;;-1:-1:-1;2994:1513:60;;-1:-1:-1;4466:8:60;;4343:104;2994:1513;-1:-1:-1;;;2994:1513:60:o;4512:816::-;;;;;;4708:3;4696:9;4687:7;4683:23;4679:33;4676:2;;;4730:6;4722;4715:22;4676:2;4758:31;4779:9;4758:31;:::i;:::-;4748:41;;4839:2;4828:9;4824:18;4811:32;4852;4878:5;4852:32;:::i;:::-;4903:5;-1:-1:-1;4960:2:60;4945:18;;4932:32;4973:34;4932:32;4973:34;:::i;:::-;5026:7;-1:-1:-1;5084:2:60;5069:18;;5056:32;5111:18;5100:30;;5097:2;;;5148:6;5140;5133:22;5097:2;5192:76;5260:7;5251:6;5240:9;5236:22;5192:76;:::i;5333:193::-;;5455:2;5443:9;5434:7;5430:23;5426:32;5423:2;;;5476:6;5468;5461:22;5423:2;-1:-1:-1;5504:16:60;;5413:113;-1:-1:-1;5413:113:60:o;5531:952::-;;5687:3;5675:9;5666:7;5662:23;5658:33;5655:2;;;5709:6;5701;5694:22;5655:2;5747;5741:9;5789:3;5781:6;5777:16;5859:6;5847:10;5844:22;5823:18;5811:10;5808:34;5805:62;5802:2;;;5870:9;5802:2;5897;5890:22;5934:16;;5959:32;5934:16;5959:32;:::i;:::-;6000:21;;6066:2;6051:18;;6045:25;-1:-1:-1;;;;;;6101:27:60;;6089:40;;6079:2;;6148:6;6140;6133:22;6079:2;6185;6173:15;;6166:32;6231:49;6276:2;6261:18;;6231:49;:::i;:::-;6226:2;6218:6;6214:15;6207:74;6314:50;6360:2;6349:9;6345:18;6314:50;:::i;:::-;6309:2;6301:6;6297:15;6290:75;6399:52;6446:3;6435:9;6431:19;6399:52;:::i;:::-;6393:3;6381:16;;6374:78;6385:6;5645:838;-1:-1:-1;;;5645:838:60:o;6488:325::-;;;6616:2;6604:9;6595:7;6591:23;6587:32;6584:2;;;6637:6;6629;6622:22;6584:2;6681:9;6668:23;6700:32;6726:5;6700:32;:::i;:::-;6751:5;6803:2;6788:18;;;;6775:32;;-1:-1:-1;;;6574:239:60:o;7017:967::-;;7129:5;7123:12;7156:6;7151:3;7144:19;7182:4;7211:2;7206:3;7202:12;7195:19;;7248:2;7241:5;7237:14;7269:3;7281:678;7295:6;7292:1;7289:13;7281:678;;;7354:13;;7392:9;;7380:22;;7442:11;;;7436:18;7422:12;;;7415:40;7478:4;7522:11;;;7516:18;7502:12;;;7495:40;7558:4;7602:11;;;7596:18;7582:12;;;7575:40;7638:4;7682:11;;;7676:18;7662:12;;;7655:40;7718:4;7761:11;;;7755:18;;7813:1;7796:19;;7786:2;;7819:9;7786:2;7850:12;;7843:34;7906:4;7897:14;;;;7934:15;;;;7317:1;7310:9;7281:678;;;-1:-1:-1;7975:3:60;;7099:885;-1:-1:-1;;;;;7099:885:60:o;7989:700::-;-1:-1:-1;;;;;8256:32:60;;;;8238:51;;8329:13;;8344:12;8325:32;8320:2;8305:18;;;8298:60;;;;8404:15;;8398:22;-1:-1:-1;;;;;;8394:42:60;8389:2;8374:18;;;8367:70;;;;8483:15;;8477:22;8431:3;8473:33;8468:2;8453:18;;;8446:61;;;;8554:15;;8548:22;8572:6;8544:35;8538:3;8523:19;;;8516:64;;;;8627:16;8621:23;-1:-1:-1;;;;;;8617:65:60;8276:3;8596:19;;8589:94;8225:3;8210:19;;8192:497::o;8694:183::-;8846:25;;;8834:2;8819:18;;8801:76::o;9062:264::-;9236:25;;;9304:14;9297:22;9292:2;9277:18;;9270:50;9224:2;9209:18;;9191:135::o;9331:244::-;9501:25;;;9557:2;9542:18;;9535:34;9489:2;9474:18;;9456:119::o;9580:346::-;9782:2;9764:21;;;9821:2;9801:18;;;9794:30;-1:-1:-1;;;9855:2:60;9840:18;;9833:52;9917:2;9902:18;;9754:172::o;9931:350::-;10133:2;10115:21;;;10172:2;10152:18;;;10145:30;10211:28;10206:2;10191:18;;10184:56;10272:2;10257:18;;10105:176::o;10286:338::-;10488:2;10470:21;;;10527:2;10507:18;;;10500:30;-1:-1:-1;;;10561:2:60;10546:18;;10539:44;10615:2;10600:18;;10460:164::o;10629:345::-;10831:2;10813:21;;;10870:2;10850:18;;;10843:30;-1:-1:-1;;;10904:2:60;10889:18;;10882:51;10965:2;10950:18;;10803:171::o;10979:337::-;11181:2;11163:21;;;11220:2;11200:18;;;11193:30;-1:-1:-1;;;11254:2:60;11239:18;;11232:43;11307:2;11292:18;;11153:163::o;11321:343::-;11523:2;11505:21;;;11562:2;11542:18;;;11535:30;-1:-1:-1;;;11596:2:60;11581:18;;11574:49;11655:2;11640:18;;11495:169::o;11669:347::-;11871:2;11853:21;;;11910:2;11890:18;;;11883:30;11949:25;11944:2;11929:18;;11922:53;12007:2;11992:18;;11843:173::o;12021:339::-;12223:2;12205:21;;;12262:2;12242:18;;;12235:30;-1:-1:-1;;;12296:2:60;12281:18;;12274:45;12351:2;12336:18;;12195:165::o;12365:340::-;12567:2;12549:21;;;12606:2;12586:18;;;12579:30;-1:-1:-1;;;12640:2:60;12625:18;;12618:46;12696:2;12681:18;;12539:166::o;12710:346::-;12912:2;12894:21;;;12951:2;12931:18;;;12924:30;-1:-1:-1;;;12985:2:60;12970:18;;12963:52;13047:2;13032:18;;12884:172::o;13061:338::-;13263:2;13245:21;;;13302:2;13282:18;;;13275:30;-1:-1:-1;;;13336:2:60;13321:18;;13314:44;13390:2;13375:18;;13235:164::o;13404:342::-;13606:2;13588:21;;;13645:2;13625:18;;;13618:30;-1:-1:-1;;;13679:2:60;13664:18;;13657:48;13737:2;13722:18;;13578:168::o;13751:347::-;13953:2;13935:21;;;13992:2;13972:18;;;13965:30;14031:25;14026:2;14011:18;;14004:53;14089:2;14074:18;;13925:173::o;14103:346::-;14305:2;14287:21;;;14344:2;14324:18;;;14317:30;-1:-1:-1;;;14378:2:60;14363:18;;14356:52;14440:2;14425:18;;14277:172::o;14454:346::-;14656:2;14638:21;;;14695:2;14675:18;;;14668:30;-1:-1:-1;;;14729:2:60;14714:18;;14707:52;14791:2;14776:18;;14628:172::o;14805:331::-;15007:2;14989:21;;;15046:1;15026:18;;;15019:29;-1:-1:-1;;;15079:2:60;15064:18;;15057:38;15127:2;15112:18;;14979:157::o;15141:348::-;15343:2;15325:21;;;15382:2;15362:18;;;15355:30;15421:26;15416:2;15401:18;;15394:54;15480:2;15465:18;;15315:174::o;15494:342::-;15696:2;15678:21;;;15735:2;15715:18;;;15708:30;-1:-1:-1;;;15769:2:60;15754:18;;15747:48;15827:2;15812:18;;15668:168::o;15841:343::-;16043:2;16025:21;;;16082:2;16062:18;;;16055:30;-1:-1:-1;;;16116:2:60;16101:18;;16094:49;16175:2;16160:18;;16015:169::o;16189:841::-;;16418:2;16407:9;16400:21;16456:6;16450:13;16499:4;16494:2;16483:9;16479:18;16472:32;16527:84;16606:3;16595:9;16591:19;16577:12;16527:84;:::i;:::-;16513:98;;16660:4;16652:6;16648:17;16642:24;16734:2;16730:7;16718:9;16710:6;16706:22;16702:36;16697:2;16686:9;16682:18;16675:64;16762:73;16828:6;16812:14;16762:73;:::i;:::-;16891:2;16879:15;;16873:22;16866:4;16851:20;;16844:52;16951:2;16939:15;;;16933:22;16927:3;16912:19;;16905:51;-1:-1:-1;;;17010:4:60;16995:20;16988:36;16748:87;16390:640::o;17035:332::-;17261:12;17249:25;;;;17231:44;;17306:2;17291:18;;17284:34;;;;17349:2;17334:18;;17327:34;17219:2;17204:18;;17186:181::o;17372:242::-;17442:2;17436:9;17472:17;;;17519:18;17504:34;;17540:22;;;17501:62;17498:2;;;17566:9;17498:2;17593;17586:22;17416:198;;-1:-1:-1;17416:198:60:o;17619:119::-;17706:6;17699:5;17695:18;17688:5;17685:29;17675:2;;17728:1;17725;17718:12;17675:2;17665:73;:::o;17743:125::-;17830:12;17823:5;17819:24;17812:5;17809:35;17799:2;;17858:1;17855;17848:12", "language": "Solidity", "natspec": {"kind": "dev", "methods": {"executeTradesArrayBatch(address,uint16,PortfolioState,bytes32[])": {"notice": "Executes trades for a bitmapped portfolio, cannot be called directly", "params": {"account": "account to put fCash assets in", "currencyId": "currency id to trade", "portfolioState": "used to update the positions in the portfolio", "trades": "tightly packed array of trades, schema is defined in global/Types.sol"}, "returns": {"_0": "resulting portfolio state", "_1": "netCash generated by trading"}}, "executeTradesBitmapBatch(address,uint16,uint40,bytes32[])": {"notice": "Executes trades for a bitmapped portfolio, cannot be called directly", "params": {"account": "account to put fCash assets in", "bitmapCurrencyId": "currency id of the bitmap", "nextSettleTime": "used to calculate the relative positions in the bitmap", "trades": "tightly packed array of trades, schema is defined in global/Types.sol"}, "returns": {"_0": "netCash generated by trading", "_1": "didIncurDebt if the bitmap had an fCash position go negative"}}, "executeVaultTrade(uint16,bytes32)": {"notice": "Executes a trade for leveraged vaults (they can only lend or borrow).", "params": {"currencyId": "the currency id to lend or borrow", "trade": "the bytes32 encoded trade data"}}}, "version": 1}, "offset": [554, 26330], "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3643F39B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xB58F83ED EQ PUSH2 0x87 JUMPI DUP1 PUSH4 0xE50F349E EQ PUSH2 0xB5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0x6B CALLDATASIZE PUSH1 0x4 PUSH2 0x4D12 JUMP JUMPDEST PUSH2 0xE2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7E SWAP3 SWAP2 SWAP1 PUSH2 0x4F40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA7 PUSH2 0xA2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C16 JUMP JUMPDEST PUSH2 0x1B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7E SWAP3 SWAP2 SWAP1 PUSH2 0x52C7 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD5 PUSH2 0xD0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E28 JUMP JUMPDEST PUSH2 0x2DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7E SWAP2 SWAP1 PUSH2 0x4F37 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xF0 DUP8 PUSH2 0x321 JUMP JUMPDEST SWAP1 POP PUSH2 0xFA PUSH2 0x492E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH2 0x4976 JUMP JUMPDEST TIMESTAMP PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x1A3 JUMPI PUSH1 0x0 PUSH2 0x13A DUP14 DUP8 DUP8 DUP14 DUP14 DUP8 DUP2 DUP2 LT PUSH2 0x129 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 PUSH1 0xA0 ADD MLOAD PUSH2 0x34D JUMP JUMPDEST DUP6 PUSH1 0x0 ADD DUP7 PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP DUP3 SWAP4 POP POP POP POP PUSH2 0x16C DUP14 DUP14 PUSH2 0xFFFF AND DUP4 DUP15 PUSH5 0xFFFFFFFFFF AND DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x487 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE DUP4 DUP1 PUSH2 0x181 JUMPI POP PUSH1 0x0 DUP4 PUSH1 0x20 ADD MLOAD SLT JUMPDEST DUP4 MLOAD PUSH1 0x60 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x195 SWAP2 SWAP1 PUSH2 0x5F4 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x10D JUMP JUMPDEST POP PUSH1 0x60 ADD MLOAD SWAP5 POP SWAP3 POP POP POP JUMPDEST SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1C1 PUSH2 0x49AC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1CD DUP8 PUSH2 0x321 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D7 PUSH2 0x492E JUMP JUMPDEST PUSH2 0x1DF PUSH2 0x4976 JUMP JUMPDEST TIMESTAMP PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x2CA JUMPI PUSH1 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x1FE JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xFF AND PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x216 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x226 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x23D JUMPI POP PUSH1 0x3 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x23B JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x263 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x5215 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x288 DUP14 DUP8 DUP8 DUP14 DUP14 DUP9 DUP2 DUP2 LT PUSH2 0x277 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 PUSH1 0xA0 ADD MLOAD PUSH2 0x34D JUMP JUMPDEST PUSH1 0x20 DUP8 ADD DUP2 SWAP1 MSTORE SWAP1 DUP7 MSTORE SWAP1 SWAP2 POP PUSH2 0x2AB SWAP1 DUP13 SWAP1 PUSH2 0xFFFF DUP16 AND SWAP1 DUP5 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x610 JUMP JUMPDEST POP DUP3 MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x2BC SWAP2 PUSH2 0x5F4 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x1E8 JUMP JUMPDEST POP PUSH1 0x60 ADD MLOAD SWAP7 SWAP10 SWAP7 SWAP9 POP SWAP6 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2EB DUP5 PUSH2 0x321 JUMP JUMPDEST SWAP1 POP PUSH2 0x2F5 PUSH2 0x492E JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF8 DUP6 SWAP1 SHR PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x307 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x316 DUP4 DUP4 DUP4 TIMESTAMP DUP10 PUSH2 0x715 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x329 PUSH2 0x49D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x338 DUP4 PUSH2 0xFFFF AND PUSH2 0x803 JUMP JUMPDEST SWAP1 POP PUSH2 0x344 DUP4 DUP3 PUSH2 0x84F JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0xF8 DUP7 SWAP1 SHR PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x362 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x372 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x390 JUMPI PUSH2 0x384 DUP10 DUP10 DUP8 DUP10 PUSH2 0x892 JUMP JUMPDEST SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0x47B JUMP JUMPDEST PUSH1 0x5 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x39E JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x3B0 JUMPI PUSH2 0x384 DUP10 DUP10 DUP8 DUP10 PUSH2 0xA7C JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x3BE JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x3D5 JUMPI POP PUSH1 0x1 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x3D3 JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x463 JUMPI PUSH2 0x3E7 DUP9 DUP9 DUP4 DUP9 DUP11 PUSH2 0x715 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP DUP3 PUSH2 0x409 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x5070 JUMP JUMPDEST DUP7 PUSH1 0x20 ADD MLOAD SWAP4 POP DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xC53D733B6FDFAC3F892B49BF468CD1CAE7773AB553E440DC689ED6B09BB646B1 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x456 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x531F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x47B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x5152 JUMP JUMPDEST POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x494 DUP8 DUP8 PUSH2 0xCF5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4A0 PUSH2 0xD2A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SWAP2 SWAP3 POP DUP1 PUSH2 0x4D7 DUP9 DUP11 PUSH2 0xD37 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x4E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4EF DUP6 DUP4 PUSH2 0xE42 JUMP JUMPDEST ISZERO PUSH2 0x57E JUMPI DUP3 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x50B SWAP1 DUP10 SWAP1 PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH2 0x5F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x52C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x535 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0xF DUP4 SWAP1 SIGNEXTEND AND OR DUP5 SSTORE DUP1 PUSH2 0x566 JUMPI PUSH2 0x563 DUP7 DUP5 PUSH1 0x0 PUSH2 0xE72 JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH2 0x571 DUP13 DUP13 DUP9 PUSH2 0xEC0 JUMP JUMPDEST SWAP6 POP PUSH2 0x5EB SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP7 ISZERO PUSH2 0x5E2 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0x5A3 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP8 SGT ISZERO JUMPDEST PUSH2 0x5AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0xF DUP10 SWAP1 SIGNEXTEND AND OR DUP4 SSTORE PUSH2 0x5D5 DUP6 DUP4 PUSH1 0x1 PUSH2 0xE72 JUMP JUMPDEST SWAP5 POP PUSH2 0x5E2 DUP12 DUP12 DUP8 PUSH2 0xEC0 JUMP JUMPDEST DUP7 SWAP6 POP POP POP POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x60A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 MLOAD PUSH2 0x61F SWAP1 DUP6 DUP6 DUP6 DUP6 PUSH2 0xF1A JUMP JUMPDEST ISZERO PUSH2 0x629 JUMPI PUSH2 0x70E JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD ISZERO PUSH2 0x656 JUMPI PUSH1 0x0 PUSH2 0x646 DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 DUP7 DUP7 PUSH2 0xF1A JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x654 JUMPI POP PUSH2 0x70E JUMP JUMPDEST POP JUMPDEST PUSH2 0x65F DUP3 PUSH2 0x102B JUMP JUMPDEST ISZERO PUSH2 0x672 JUMPI PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x672 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x691 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x69A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD MLOAD DUP6 PUSH1 0x40 ADD MLOAD EQ ISZERO PUSH2 0x6BE JUMPI PUSH2 0x6B8 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x1041 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x6D4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP7 DUP2 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP7 ADD DUP1 MLOAD PUSH1 0x1 ADD SWAP1 MSTORE POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xFF PUSH1 0xF0 DUP5 SWAP1 SHR AND PUSH2 0x72D DUP9 DUP9 DUP4 DUP6 DUP10 PUSH2 0x10FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB PUSH1 0x98 DUP6 SWAP1 SHR AND SWAP2 POP PUSH1 0x1 DUP7 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x74B JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x75D JUMPI PUSH2 0x75A DUP3 PUSH2 0x1175 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x783 DUP9 DUP4 PUSH2 0x779 DUP9 DUP12 PUSH1 0x20 ADD MLOAD PUSH2 0x1183 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP11 SWAP3 SWAP2 SWAP1 DUP6 PUSH2 0x11E0 JUMP JUMPDEST SWAP3 POP PUSH4 0xFFFFFFFF PUSH1 0x78 DUP6 SWAP1 SHR AND DUP1 ISZERO PUSH2 0x7F7 JUMPI PUSH1 0x1 DUP8 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x7A4 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x7D3 JUMPI DUP1 DUP9 PUSH1 0xA0 ADD MLOAD GT ISZERO PUSH2 0x7CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x51E5 JUMP JUMPDEST PUSH2 0x7F7 JUMP JUMPDEST DUP1 DUP9 PUSH1 0xA0 ADD MLOAD LT ISZERO PUSH2 0x7F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x51E5 JUMP JUMPDEST POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x80B PUSH2 0x4A00 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x819 DUP6 PUSH2 0x123F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xFF AND PUSH1 0xA EXP SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x857 PUSH2 0x49D4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x866 DUP5 PUSH2 0xFFFF AND PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH2 0xFFFF SWAP7 SWAP1 SWAP7 AND DUP7 MSTORE PUSH1 0xFF DUP3 AND PUSH1 0x20 DUP8 ADD MSTORE DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x60 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH4 0xFFFFFFFF PUSH1 0xD8 DUP6 SWAP1 SHR AND PUSH1 0x80 DUP6 SWAP1 SHR PUSH1 0xA SIGNEXTEND DUP7 DUP3 GT PUSH2 0x8C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x50D0 JUMP JUMPDEST PUSH2 0x8D7 DUP9 PUSH1 0x20 ADD MLOAD DUP4 DUP10 PUSH2 0x131F JUMP JUMPDEST ISZERO PUSH2 0x8F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x4F8E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x907 DUP10 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND PUSH2 0x13C4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x915 DUP4 PUSH2 0x13EA JUMP JUMPDEST SWAP5 POP POP SWAP4 POP POP POP PUSH2 0x93C DUP2 PUSH1 0x2 PUSH1 0xFF AND PUSH1 0x5 DUP2 LT PUSH2 0x92F JUMPI INVALID JUMPDEST DUP5 SWAP2 PUSH2 0xE10 SWAP2 BYTE MUL PUSH2 0x1453 JUMP JUMPDEST DUP11 GT PUSH2 0x95A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x517E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x96F DUP5 DUP14 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP9 PUSH2 0x14AD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT DUP1 ISZERO PUSH2 0x981 JUMPI POP PUSH1 0x0 DUP6 SLT JUMPDEST ISZERO PUSH2 0x997 JUMPI DUP1 DUP6 SLT ISZERO PUSH2 0x992 JUMPI DUP1 SWAP5 POP JUMPDEST PUSH2 0x9D4 JUMP JUMPDEST PUSH1 0x0 DUP2 SGT DUP1 ISZERO PUSH2 0x9A7 JUMPI POP PUSH1 0x0 DUP6 SGT JUMPDEST ISZERO PUSH2 0x9BC JUMPI DUP1 DUP6 SGT ISZERO PUSH2 0x992 JUMPI DUP1 SWAP5 POP PUSH2 0x9D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x4FC5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9ED DUP14 DUP9 DUP15 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xD8 SHL SUB NOT DUP9 AND PUSH2 0x14F2 JUMP JUMPDEST SWAP1 POP PUSH2 0xA05 DUP6 DUP15 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP10 DUP8 DUP11 DUP7 PUSH2 0x1579 JUMP JUMPDEST DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH5 0xFFFFFFFFFF AND DUP15 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND PUSH32 0xE85DD6C9C85C29A2F4D4CB74E31514BFC478C8C5A50DA255EA565123D8793352 DUP10 DUP6 PUSH1 0x40 MLOAD PUSH2 0xA51 SWAP3 SWAP2 SWAP1 PUSH2 0x4F50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP7 PUSH2 0xA63 DUP3 PUSH2 0x1175 JUMP JUMPDEST DUP8 SWAP10 POP SWAP10 POP SWAP10 POP POP POP POP POP POP POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x58 DUP5 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND SWAP1 DUP3 AND EQ ISZERO PUSH2 0xAB1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x526E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB DUP6 AND PUSH1 0x0 PUSH2 0xAC6 DUP4 PUSH2 0x15FE JUMP JUMPDEST SWAP1 POP PUSH2 0xAD1 DUP2 PUSH2 0x169F JUMP JUMPDEST ISZERO PUSH2 0xB62 JUMPI PUSH1 0x40 MLOAD PUSH4 0x37B5FC21 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x6F6BF842 SWAP1 PUSH2 0xB0F SWAP1 DUP7 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x4ECB JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xB3B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB5F SWAP2 SWAP1 PUSH2 0x4D91 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xB6E DUP4 DUP11 DUP5 DUP5 PUSH2 0x16F3 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH3 0x76A700 PUSH2 0xB7F DUP11 PUSH2 0x1826 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 PUSH2 0xB90 DUP12 DUP4 DUP13 DUP8 PUSH2 0x1847 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0xBA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xBBF PUSH2 0x4A2A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xBB7 JUMPI SWAP1 POP POP SWAP1 POP DUP12 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xBEA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC08 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xC21 DUP3 PUSH2 0x1175 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC2E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x1 PUSH1 0xFF AND DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC50 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xC6B DUP7 DUP6 DUP4 PUSH2 0x18A7 JUMP JUMPDEST SWAP4 POP PUSH2 0xC79 SWAP1 POP DUP4 DUP7 PUSH2 0x1928 JUMP JUMPDEST DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xC76E4E38CCD25A7B0A39CDAA81A20EFA0C2127E74C448B7B05AEF1C427D5732B DUP8 PUSH2 0xCC1 DUP7 PUSH2 0x1175 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCCF SWAP3 SWAP2 SWAP1 PUSH2 0x4F50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP2 PUSH2 0xCE1 DUP6 PUSH2 0x1175 JUMP JUMPDEST SWAP1 SWAP14 SWAP1 SWAP13 POP SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD00 PUSH2 0x1A2C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0xC PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xD45 DUP6 PUSH2 0x1A4E JUMP JUMPDEST SWAP1 POP PUSH3 0x15180 DUP5 MOD ISZERO PUSH2 0xD5F JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0xE3B JUMP JUMPDEST DUP4 DUP2 LT PUSH2 0xD73 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0xE3B JUMP JUMPDEST PUSH3 0x15180 DUP2 DUP6 SUB DIV PUSH1 0x5A DUP2 GT PUSH2 0xD90 JUMPI SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0xE3B SWAP1 POP JUMP JUMPDEST PUSH2 0x168 DUP2 GT PUSH2 0xDCF JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x7E900 DUP5 MOD DIV DUP3 ADD PUSH1 0x59 NOT ADD SWAP1 POP PUSH1 0x6 DUP2 DIV PUSH1 0x5A ADD PUSH1 0x6 DUP3 DUP2 PUSH2 0xDBF JUMPI INVALID JUMPDEST MOD PUSH1 0x0 EQ SWAP5 POP SWAP5 POP POP POP POP PUSH2 0xE3B JUMP JUMPDEST PUSH2 0x870 DUP2 GT PUSH2 0xDFF JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x278D00 DUP5 MOD DIV DUP3 ADD PUSH2 0x167 NOT ADD SWAP1 POP PUSH1 0x1E DUP2 DIV PUSH1 0x87 ADD PUSH1 0x1E DUP3 DUP2 PUSH2 0xDBF JUMPI INVALID JUMPDEST PUSH2 0x1DE2 DUP2 GT PUSH2 0xE2F JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x76A700 DUP5 MOD DIV DUP3 ADD PUSH2 0x86F NOT ADD SWAP1 POP PUSH1 0x5A DUP2 DIV PUSH1 0xC3 ADD PUSH1 0x5A DUP3 DUP2 PUSH2 0xDBF JUMPI INVALID JUMPDEST PUSH2 0x100 PUSH1 0x0 SWAP4 POP SWAP4 POP POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0xE57 JUMPI POP PUSH2 0x100 DUP3 GT ISZERO JUMPDEST PUSH2 0xE60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 NOT ADD SHL PUSH1 0x1 PUSH1 0xFF SHL SWAP1 DUP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 LT ISZERO DUP1 ISZERO PUSH2 0xE87 JUMPI POP PUSH2 0x100 DUP4 GT ISZERO JUMPDEST PUSH2 0xE90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0xEA9 JUMPI POP PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP4 ADD SHR DUP4 OR PUSH2 0xEB9 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP4 ADD SHR NOT DUP4 AND JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x14 PUSH2 0xECB DUP3 PUSH2 0x1A6A JUMP JUMPDEST GT ISZERO PUSH2 0xEE9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x50A7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEF3 PUSH2 0x1A2C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP5 DUP6 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP5 DUP3 MSTORE SWAP4 SWAP1 SWAP5 MSTORE POP SWAP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x101E JUMPI PUSH1 0x0 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF35 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP5 DUP2 PUSH1 0x40 ADD MLOAD EQ ISZERO DUP1 PUSH2 0xF53 JUMPI POP DUP1 MLOAD DUP8 EQ ISZERO JUMPDEST DUP1 PUSH2 0xF62 JUMPI POP DUP6 DUP2 PUSH1 0x20 ADD MLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 0xF6D JUMPI POP PUSH2 0x1016 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF7F JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0xF9D JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF9A JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0xFA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0xFB8 SWAP1 DUP7 PUSH2 0x5F4 JUMP JUMPDEST SWAP1 POP PUSH2 0xFC3 DUP7 PUSH2 0x102B JUMP JUMPDEST ISZERO PUSH2 0xFD6 JUMPI PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0xFD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0xFF5 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0xFFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SWAP1 SWAP2 ADD DUP2 SWAP1 MSTORE SWAP2 POP PUSH2 0x5EB SWAP1 POP JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xF1E JUMP JUMPDEST POP PUSH1 0x0 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 LT DUP1 ISZERO SWAP1 PUSH2 0x60A JUMPI POP POP PUSH1 0x8 LT ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 EQ PUSH2 0x1058 JUMPI DUP3 MLOAD PUSH1 0x2 MUL PUSH2 0x105B JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1076 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10B0 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x109D PUSH2 0x4A2A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1095 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x10F2 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x10CB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x10DF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x10B6 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 GT ISZERO DUP1 ISZERO PUSH2 0x110F JUMPI POP DUP5 PUSH1 0x20 ADD MLOAD DUP4 GT ISZERO JUMPDEST PUSH2 0x112B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x512A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1148 PUSH2 0x1139 DUP6 PUSH2 0x1B3A JUMP JUMPDEST PUSH2 0x1142 DUP5 PUSH2 0x1826 JUMP JUMPDEST SWAP1 PUSH2 0x1453 JUMP JUMPDEST SWAP1 POP PUSH2 0x116D DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP3 DUP5 DUP7 PUSH2 0x1162 DUP12 PUSH2 0x1BDE JUMP JUMPDEST DUP11 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1BF2 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60A PUSH1 0x0 NOT DUP4 PUSH2 0x1C1C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x11DA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x11F0 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1C6A JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH2 0x1200 DUP9 PUSH2 0x1D6D JUMP JUMPDEST SWAP1 POP PUSH2 0x1224 DUP2 DUP10 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0x60 ADD MLOAD DUP12 PUSH1 0xA0 ADD MLOAD DUP13 PUSH1 0xC0 ADD MLOAD DUP14 PUSH1 0xE0 ADD MLOAD PUSH2 0x1D71 JUMP JUMPDEST DUP7 MLOAD PUSH2 0x1234 SWAP1 PUSH2 0xFFFF AND DUP4 PUSH2 0x1E85 JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1250 DUP7 PUSH2 0x1F0C JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1275 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH5 0x2540BE400 PUSH2 0x12F7 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1EE10833 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12E8 SWAP2 SWAP1 PUSH2 0x4D79 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x12F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x130D PUSH2 0x1F43 JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x1340 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x4FED JUMP JUMPDEST PUSH1 0x7 DUP5 GT ISZERO PUSH2 0x1361 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x50FA JUMP JUMPDEST PUSH3 0x76A700 DUP4 MOD ISZERO PUSH2 0x1374 JUMPI POP PUSH1 0x0 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x137F DUP4 PUSH2 0x1826 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST DUP6 DUP2 GT PUSH2 0x13B8 JUMPI PUSH2 0x139E PUSH2 0x1397 DUP3 PUSH2 0x1B3A JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x1453 JUMP JUMPDEST DUP6 EQ ISZERO PUSH2 0x13B0 JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1384 JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13CF PUSH2 0x1F50 JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x13FB PUSH2 0x1F5D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP8 SWAP1 SWAP8 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP5 KECCAK256 SLOAD PUSH2 0xFFFF DUP2 AND SWAP6 PUSH4 0xFFFFFFFF PUSH3 0x10000 DUP4 DIV DUP2 AND SWAP7 POP PUSH1 0x1 PUSH1 0x30 SHL DUP4 DIV AND SWAP5 POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x50 SHL DUP4 DIV AND SWAP4 POP PUSH1 0x1 PUSH1 0x58 SHL SWAP1 SWAP2 DIV PUSH1 0xD8 SHL SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xEB9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x14B8 PUSH2 0xD2A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 DUP4 MSTORE DUP4 MSTORE DUP1 DUP3 KECCAK256 DUP7 DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1500 DUP8 DUP8 DUP8 PUSH2 0x1F6A JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP4 SWAP1 BYTE PUSH3 0xF4240 MUL PUSH1 0x0 DUP6 SGT ISZERO PUSH2 0x1526 JUMPI PUSH2 0x151F DUP3 DUP3 PUSH2 0x1453 JUMP JUMPDEST SWAP2 POP PUSH2 0x153D JUMP JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1538 JUMPI PUSH2 0x151F DUP3 DUP3 PUSH2 0x1183 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x1552 DUP4 PUSH2 0x154D DUP11 DUP11 PUSH2 0x1183 JUMP JUMPDEST PUSH2 0x2053 JUMP JUMPDEST SWAP1 POP PUSH2 0x156C PUSH2 0x1561 DUP8 DUP4 PUSH2 0x20C4 JUMP JUMPDEST PUSH1 0x40 DUP12 ADD MLOAD SWAP1 PUSH2 0x20DD JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1590 DUP8 DUP8 DUP8 DUP8 PUSH2 0x158B DUP9 PUSH2 0x1175 JUMP JUMPDEST PUSH2 0x487 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x15A3 JUMPI POP PUSH1 0x0 DUP2 SLT ISZERO JUMPDEST DUP1 PUSH2 0x15BA JUMPI POP PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x15BA JUMPI POP PUSH1 0x0 DUP2 SGT ISZERO JUMPDEST PUSH2 0x15C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15CF DUP9 DUP9 PUSH2 0x211C JUMP JUMPDEST POP POP POP SWAP1 POP PUSH2 0x15E7 DUP4 DUP3 PUSH2 0x5F4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x15F4 DUP9 DUP9 DUP4 PUSH2 0x21C5 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1606 PUSH2 0x4A6A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1610 PUSH2 0x21E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP2 MLOAD PUSH1 0xA0 DUP2 ADD DUP4 MSTORE SWAP1 SLOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP3 MSTORE PUSH6 0x10000000000 DUP2 DIV PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP6 DIV PUSH1 0xFF AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x38 SHL DUP5 DIV PUSH2 0xFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x48 SHL SWAP1 SWAP4 DIV PUSH1 0x70 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT AND PUSH1 0x80 DUP5 ADD MSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH2 0x16AB DUP4 PUSH2 0x21F5 JUMP JUMPDEST ISZERO PUSH2 0x16CC JUMPI PUSH2 0x16B9 DUP2 PUSH2 0x1A4E JUMP JUMPDEST DUP4 MLOAD PUSH5 0xFFFFFFFFFF AND LT SWAP2 POP PUSH2 0x348 SWAP1 POP JUMP JUMPDEST DUP3 MLOAD PUSH5 0xFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x16EB JUMPI POP DUP3 MLOAD PUSH5 0xFFFFFFFFFF AND DUP2 LT ISZERO JUMPDEST SWAP2 POP POP PUSH2 0x348 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x1702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x171A DUP10 DUP10 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND PUSH2 0x211C JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP PUSH1 0x0 DUP5 SLT PUSH2 0x1742 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x51B5 JUMP JUMPDEST DUP7 PUSH2 0x175B JUMPI PUSH2 0x1750 DUP5 PUSH2 0x1175 JUMP JUMPDEST SWAP7 POP PUSH1 0x0 SWAP4 POP PUSH2 0x1790 JUMP JUMPDEST PUSH2 0x1764 DUP5 PUSH2 0x1175 JUMP JUMPDEST DUP8 SGT ISZERO PUSH2 0x1783 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x5237 JUMP JUMPDEST PUSH2 0x178D DUP5 DUP9 PUSH2 0x5F4 JUMP JUMPDEST SWAP4 POP JUMPDEST DUP4 ISZERO DUP1 ISZERO PUSH2 0x179C JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x17B9 JUMPI DUP8 MLOAD PUSH2 0x17B9 SWAP1 DUP8 SWAP1 PUSH2 0xFFFF AND PUSH1 0x0 PUSH1 0x1 PUSH1 0xFE SHL PUSH2 0x2202 JUMP JUMPDEST PUSH2 0x17CF DUP10 DUP10 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP7 DUP7 DUP7 DUP7 PUSH2 0x2402 JUMP JUMPDEST DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x5441E4A5FAC93A951D782E6F1CDB82E95C8FC58561A013953D17E395C5E69B4B DUP10 PUSH1 0x40 MLOAD PUSH2 0x1811 SWAP2 SWAP1 PUSH2 0x4F37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP SWAP5 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x76A700 DUP3 LT ISZERO PUSH2 0x1838 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x76A700 DUP3 JUMPDEST MOD SWAP1 SWAP2 SUB SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1855 DUP7 DUP7 DUP7 PUSH2 0x1F6A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1879 PUSH2 0x186F PUSH2 0x1868 DUP10 PUSH2 0x2540 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x1453 JUMP JUMPDEST PUSH2 0x154D DUP9 DUP9 PUSH2 0x1183 JUMP JUMPDEST SWAP1 POP PUSH2 0x189C DUP2 PUSH2 0x1896 DUP7 DUP11 PUSH1 0x40 ADD MLOAD PUSH2 0x2555 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x2580 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x18AF PUSH2 0x4A6A JUMP JUMPDEST PUSH2 0x18B8 DUP4 PUSH2 0x169F JUMP JUMPDEST ISZERO PUSH2 0x18D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x5043 JUMP JUMPDEST PUSH2 0x18DE DUP4 PUSH2 0x21F5 JUMP JUMPDEST ISZERO PUSH2 0x18F3 JUMPI PUSH2 0x18EE DUP5 DUP5 DUP5 PUSH2 0x2599 JUMP JUMPDEST PUSH2 0x1920 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1905 DUP6 DUP6 PUSH1 0x40 ADD MLOAD DUP6 MLOAD PUSH2 0x265A JUMP JUMPDEST SWAP1 POP PUSH2 0x1911 DUP2 DUP5 PUSH2 0x26ED JUMP JUMPDEST PUSH2 0x191E DUP5 DUP7 DUP4 PUSH1 0x0 PUSH2 0x274B JUMP JUMPDEST POP JUMPDEST POP SWAP1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1932 PUSH2 0x21E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 MLOAD DUP2 SLOAD SWAP4 DUP11 ADD MLOAD DUP4 DUP12 ADD MLOAD PUSH1 0x60 DUP13 ADD MLOAD PUSH1 0x80 DUP14 ADD MLOAD PUSH1 0x70 SHR PUSH1 0x1 PUSH1 0x48 SHL MUL PUSH27 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000 NOT PUSH2 0xFFFF SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x38 SHL MUL PUSH9 0xFFFF00000000000000 NOT PUSH1 0xFF SWAP5 SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH7 0xFF000000000000 NOT PUSH1 0xF8 SWAP7 SWAP1 SWAP7 SHR PUSH6 0x10000000000 MUL PUSH6 0xFF0000000000 NOT PUSH5 0xFFFFFFFFFF SWAP1 SWAP9 AND PUSH5 0xFFFFFFFFFF NOT SWAP1 SWAP12 AND SWAP11 SWAP1 SWAP11 OR SWAP7 SWAP1 SWAP7 AND SWAP9 SWAP1 SWAP9 OR SWAP4 SWAP1 SWAP4 AND SWAP4 SWAP1 SWAP4 OR AND SWAP5 SWAP1 SWAP5 OR AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH32 0x6BD4B121BCA854A191536A2CA891155C42EE2FB23F307FB34E8BC65CFCB5412E SWAP2 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0xB JUMPDEST PUSH1 0x0 PUSH3 0xF4240 DUP3 PUSH1 0x1A DUP2 GT ISZERO PUSH2 0x1A47 JUMPI INVALID JUMPDEST ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15180 DUP3 LT ISZERO PUSH2 0x1A60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x15180 DUP3 PUSH2 0x183E JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SHR PUSH32 0x5555555555555555555555555555555555555555555555555555555555555555 SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x2 DUP2 SWAP1 SHR PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333 SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x4 DUP2 SWAP1 SHR PUSH32 0x707070707070707070707070707070707070707070707070707070707070707 SWAP2 SWAP1 SWAP2 AND ADD PUSH1 0x8 DUP2 SWAP1 SHR PUSH31 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x10 DUP2 SWAP1 SHR ADD PUSH1 0x20 DUP2 SWAP1 SHR ADD PUSH1 0x40 DUP2 SWAP1 SHR ADD PUSH1 0x80 DUP2 SWAP1 SHR PUSH1 0xFF SWAP1 DUP2 AND SWAP2 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 EQ ISZERO PUSH2 0x1B4F JUMPI POP PUSH3 0x76A700 PUSH2 0x348 JUMP JUMPDEST DUP2 PUSH1 0x2 EQ ISZERO PUSH2 0x1B62 JUMPI POP PUSH3 0xED4E00 PUSH2 0x348 JUMP JUMPDEST DUP2 PUSH1 0x3 EQ ISZERO PUSH2 0x1B76 JUMPI POP PUSH4 0x1DA9C00 PUSH2 0x348 JUMP JUMPDEST DUP2 PUSH1 0x4 EQ ISZERO PUSH2 0x1B8A JUMPI POP PUSH4 0x3B53800 PUSH2 0x348 JUMP JUMPDEST DUP2 PUSH1 0x5 EQ ISZERO PUSH2 0x1B9E JUMPI POP PUSH4 0x9450C00 PUSH2 0x348 JUMP JUMPDEST DUP2 PUSH1 0x6 EQ ISZERO PUSH2 0x1BB2 JUMPI POP PUSH4 0x128A1800 PUSH2 0x348 JUMP JUMPDEST DUP2 PUSH1 0x7 EQ ISZERO PUSH2 0x1BC6 JUMPI POP PUSH4 0x25143000 PUSH2 0x348 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x501C JUMP JUMPDEST PUSH1 0x60 ADD MLOAD PUSH2 0x12C PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x76A700 PUSH2 0x1C01 DUP6 PUSH2 0x1826 JUMP JUMPDEST ADD SWAP1 POP PUSH2 0x1C13 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x282D JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 MUL PUSH1 0x0 NOT DUP4 EQ ISZERO PUSH2 0x1C4C JUMPI DUP2 ISZERO DUP1 PUSH2 0x1C3E JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x1C3B JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x1C47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x60A JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x1C61 JUMPI POP DUP2 DUP4 DUP3 DUP2 PUSH2 0x1C5E JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x60A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP8 PUSH1 0x40 ADD MLOAD SGT PUSH2 0x1C83 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x1AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1C94 DUP11 DUP11 DUP10 DUP10 PUSH2 0x2864 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 DUP1 PUSH2 0x1CAE DUP13 PUSH1 0x40 ADD MLOAD DUP6 DUP8 DUP7 DUP15 PUSH2 0x2904 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP1 PUSH2 0x1CC9 JUMPI PUSH1 0x0 DUP1 SWAP7 POP SWAP7 POP POP POP POP POP POP PUSH2 0x1AF JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1CDB DUP14 DUP6 DUP15 DUP15 PUSH2 0x29B0 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 PUSH1 0x0 EQ ISZERO PUSH2 0x1CFD JUMPI PUSH1 0x0 DUP1 SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP PUSH2 0x1AF JUMP JUMPDEST PUSH1 0x40 DUP15 ADD MLOAD PUSH2 0x1D0C SWAP1 DUP14 PUSH2 0x2AA0 JUMP JUMPDEST PUSH1 0x40 DUP16 ADD DUP2 SWAP1 MSTORE PUSH2 0x1D29 SWAP1 PUSH2 0x1D21 DUP9 DUP6 PUSH2 0x5F4 JUMP JUMPDEST DUP10 DUP9 DUP16 PUSH2 0x2ABC JUMP JUMPDEST PUSH1 0xA0 DUP16 ADD DUP2 SWAP1 MSTORE PUSH2 0x1D47 JUMPI PUSH1 0x0 DUP1 SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP PUSH2 0x1AF JUMP JUMPDEST PUSH2 0x1D58 DUP15 DUP15 PUSH1 0x40 ADD MLOAD DUP6 DUP6 DUP6 PUSH2 0x2B79 JUMP JUMPDEST SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 SLT ISZERO DUP1 ISZERO PUSH2 0x1D89 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP6 SGT ISZERO JUMPDEST PUSH2 0x1D92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 SLT ISZERO DUP1 ISZERO PUSH2 0x1DAA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP5 SGT ISZERO JUMPDEST PUSH2 0x1DB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x1DC7 JUMPI POP PUSH4 0xFFFFFFFF DUP4 GT ISZERO JUMPDEST PUSH2 0x1DD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x1DE4 JUMPI POP PUSH4 0xFFFFFFFF DUP3 GT ISZERO JUMPDEST PUSH2 0x1DED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 SLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP6 DUP7 AND OR PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x50 SHL NOT AND PUSH1 0x1 PUSH1 0x50 SHL SWAP5 SWAP1 SWAP6 AND SWAP4 SWAP1 SWAP4 MUL SWAP4 SWAP1 SWAP4 OR PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH4 0xFFFFFFFF SWAP3 DUP4 AND MUL OR PUSH4 0xFFFFFFFF PUSH1 0xC0 SHL NOT AND PUSH1 0x1 PUSH1 0xC0 SHL SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0xE0 SHL SWAP2 SWAP1 SWAP3 AND MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x1E93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1EA0 PUSH1 0x0 DUP5 PUSH2 0x211C JUMP JUMPDEST POP POP POP SWAP1 POP PUSH2 0x1EB8 DUP3 DUP3 PUSH2 0x5F4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1ECB PUSH1 0x0 DUP5 DUP4 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2402 JUMP JUMPDEST DUP3 PUSH2 0xFFFF AND PUSH32 0x85170C297762884F47EC6098B74925C795E6D33686B11019B400E33A9B23B5E9 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1EFF SWAP2 SWAP1 PUSH2 0x4F37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1F19 PUSH2 0x2BCE JUMP JUMPDEST PUSH1 0x0 SWAP5 DUP6 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP3 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0x9 PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0x3 PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0x2 PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1F7E DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 PUSH2 0x2BDB JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x1F8D DUP8 PUSH2 0x1BDE JUMP JUMPDEST SWAP1 POP DUP2 PUSH2 0x1FB0 JUMPI DUP7 MLOAD PUSH2 0x1FA6 SWAP1 PUSH2 0xFFFF AND DUP8 DUP4 DUP9 PUSH2 0x2C9C JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FBB DUP7 PUSH2 0x1826 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1FCB PUSH2 0x1397 DUP7 PUSH2 0x1B3A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1FE3 DUP11 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP4 DUP7 DUP12 PUSH2 0x2C9C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP8 PUSH1 0x1 EQ ISZERO PUSH2 0x2008 JUMPI DUP10 SWAP2 POP PUSH2 0x2001 DUP13 PUSH1 0x40 ADD MLOAD PUSH2 0x2D3B JUMP JUMPDEST SWAP1 POP PUSH2 0x2037 JUMP JUMPDEST PUSH2 0x201E PUSH2 0x2017 PUSH1 0x1 DUP11 SUB PUSH2 0x1B3A JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x1453 JUMP JUMPDEST SWAP2 POP PUSH2 0x2034 DUP13 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP4 DUP9 DUP14 PUSH2 0x2C9C JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x2044 DUP3 DUP6 DUP4 DUP7 DUP16 PUSH2 0x2DCC JUMP JUMPDEST SWAP9 POP POP POP POP POP POP POP POP POP PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2076 PUSH2 0x2071 PUSH4 0x1DA9C00 PUSH2 0x206B DUP8 DUP8 PUSH2 0x2E2A JUMP JUMPDEST SWAP1 PUSH2 0x2E83 JUMP JUMPDEST PUSH2 0x2EEA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x208A DUP3 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x2F08 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2097 DUP3 PUSH2 0x2F5B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x20AB DUP3 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x2FB0 JUMP JUMPDEST SWAP1 POP PUSH2 0x20B6 DUP2 PUSH2 0x2FE6 JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB9 PUSH2 0x20D7 DUP5 PUSH4 0x3B9ACA00 PUSH2 0x1C1C JUMP JUMPDEST DUP4 PUSH2 0x2FEF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2114 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x210E DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x2108 PUSH5 0x2540BE400 DUP9 PUSH2 0x1C1C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x1C1C JUMP JUMPDEST SWAP1 PUSH2 0x2FEF JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x212C PUSH2 0x3020 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP2 AND SWAP7 POP PUSH1 0x1 PUSH1 0x50 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP5 POP SWAP1 SWAP2 POP DUP4 ISZERO PUSH2 0x2195 JUMPI DUP1 SLOAD PUSH2 0x218E SWAP1 PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV PUSH7 0xFFFFFFFFFFFFFF AND PUSH2 0x302D JUMP JUMPDEST SWAP3 POP PUSH2 0x21AA JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV PUSH7 0xFFFFFFFFFFFFFF AND SWAP3 POP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xA SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 POP SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x21D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21E3 DUP4 DUP4 DUP4 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2402 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0x1 PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x60 ADD MLOAD PUSH2 0xFFFF AND ISZERO ISZERO SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x2214 JUMPI POP PUSH2 0x3FFF DUP4 GT ISZERO JUMPDEST PUSH2 0x221D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x2231 JUMPI POP DUP3 DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0xFFFF AND EQ JUMPDEST ISZERO PUSH2 0x223B JUMPI PUSH2 0x23FC JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT DUP3 AND ISZERO PUSH2 0x23B6 JUMPI PUSH1 0xF0 DUP3 SWAP1 SHR PUSH2 0x3FFF AND DUP7 DUP2 EQ DUP1 ISZERO PUSH2 0x226A JUMPI POP DUP6 JUMPDEST ISZERO PUSH2 0x22A2 JUMPI POP PUSH1 0x80 DUP8 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT DUP7 AND PUSH1 0x10 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 SHR SWAP2 SWAP1 SWAP2 OR PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT AND SWAP1 MSTORE POP PUSH2 0x23FC SWAP1 POP JUMP JUMPDEST DUP7 DUP2 EQ DUP1 ISZERO PUSH2 0x22AF JUMPI POP DUP6 ISZERO JUMPDEST ISZERO PUSH2 0x2304 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT DUP6 AND NOT SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH1 0x3 PUSH1 0xFE SHL DUP4 AND PUSH2 0x22E2 JUMPI PUSH1 0x10 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT AND SWAP1 SHL SWAP3 POP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT SWAP2 DUP3 AND PUSH1 0x10 SWAP1 SWAP2 MUL SHR SWAP2 SWAP1 SWAP2 OR AND PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x23FC JUMP JUMPDEST DUP7 DUP2 GT DUP1 ISZERO PUSH2 0x2310 JUMPI POP DUP6 JUMPDEST ISZERO PUSH2 0x236A JUMPI PUSH1 0x80 DUP9 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT PUSH1 0xF0 DUP11 SWAP1 SHL DUP9 OR DUP2 AND PUSH1 0x10 DUP7 MUL SHR SWAP7 SWAP1 SWAP7 OR SWAP6 SWAP2 SHL AND ISZERO PUSH2 0x2344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT SWAP2 DUP3 AND PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x10 MUL SHR SWAP2 SWAP1 SWAP2 OR AND PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x23FC JUMP JUMPDEST DUP7 DUP2 GT DUP1 ISZERO PUSH2 0x2377 JUMPI POP DUP6 ISZERO JUMPDEST ISZERO PUSH2 0x2385 JUMPI POP POP POP POP PUSH2 0x23FC JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT DUP3 AND PUSH1 0x10 DUP3 DUP2 MUL SWAP2 SWAP1 SWAP2 SHR SWAP4 SWAP1 SWAP4 OR SWAP3 SWAP2 SWAP1 SWAP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND SWAP1 PUSH1 0x1 ADD PUSH2 0x2245 JUMP JUMPDEST DUP5 PUSH2 0x23C3 JUMPI POP POP POP PUSH2 0x23FC JUMP JUMPDEST PUSH1 0x9 DUP2 LT PUSH2 0x23D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT PUSH1 0xF0 DUP8 SWAP1 SHL DUP6 OR AND PUSH1 0x10 SWAP1 SWAP2 MUL SHR SWAP2 SWAP1 SWAP2 OR PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT AND PUSH1 0x80 DUP7 ADD MSTORE POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x240C PUSH2 0x3020 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP7 SLT DUP1 ISZERO SWAP1 PUSH2 0x244F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP7 SGT ISZERO JUMPDEST PUSH2 0x2458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 SLT ISZERO DUP1 ISZERO PUSH2 0x2470 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP6 SGT ISZERO JUMPDEST PUSH2 0x2479 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x24B9 JUMPI PUSH7 0xFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x2492 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SLOAD PUSH7 0xFFFFFFFFFFFFFF PUSH1 0x70 SHL NOT AND PUSH1 0x1 PUSH1 0x70 SHL PUSH7 0xFFFFFFFFFFFFFF DUP6 AND MUL OR DUP2 SSTORE PUSH2 0x24D3 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x50 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP5 EQ PUSH2 0x24D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0xA SWAP7 SWAP1 SWAP7 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND PUSH1 0x1 PUSH1 0xA8 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP1 SWAP7 AND PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT PUSH4 0xFFFFFFFF SWAP1 SWAP7 AND PUSH1 0x1 PUSH1 0x50 SHL MUL PUSH4 0xFFFFFFFF PUSH1 0x50 SHL NOT SWAP1 SWAP9 AND SWAP8 SWAP1 SWAP8 OR SWAP5 SWAP1 SWAP5 AND SWAP6 SWAP1 SWAP6 OR SWAP4 SWAP1 SWAP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x60 ADD MLOAD PUSH3 0x7A120 PUSH1 0x30 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2114 DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x210E PUSH5 0x2540BE400 PUSH2 0x210E DUP8 DUP10 PUSH1 0x20 ADD MLOAD PUSH2 0x1C1C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB9 PUSH2 0x258F DUP5 DUP5 PUSH2 0x1C1C JUMP JUMPDEST PUSH4 0x3B9ACA00 PUSH2 0x2FEF JUMP JUMPDEST PUSH2 0x25A2 DUP3 PUSH2 0x21F5 JUMP JUMPDEST PUSH2 0x25AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xFFFF AND PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x70E JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x25CE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x25EB JUMPI POP PUSH2 0x2652 JUMP JUMPDEST DUP1 MLOAD DUP4 EQ PUSH2 0x25F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x1 EQ PUSH2 0x2609 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x262B DUP8 DUP6 DUP5 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD PUSH5 0xFFFFFFFFFF AND DUP7 PUSH1 0x60 ADD MLOAD PUSH2 0x487 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x264F JUMPI PUSH1 0x20 DUP7 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0xF8 SHL OR PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 MSTORE JUMPDEST POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x25B7 JUMP JUMPDEST PUSH2 0x2662 PUSH2 0x49AC JUMP JUMPDEST PUSH2 0x266A PUSH2 0x49AC JUMP JUMPDEST PUSH1 0xFF DUP5 AND PUSH2 0x2679 JUMPI SWAP1 POP PUSH2 0xEB9 JUMP JUMPDEST PUSH2 0x2683 DUP6 DUP6 PUSH2 0x303B JUMP JUMPDEST DUP2 MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x26A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x26DF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x26CC PUSH2 0x4A2A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x26C4 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x20 DUP3 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x21E3 JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2707 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2724 JUMPI POP PUSH2 0x2743 JUMP JUMPDEST PUSH2 0x2741 DUP5 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x610 JUMP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x26F0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH2 0x275A DUP7 DUP9 PUSH2 0x3064 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF DUP2 AND DUP13 MSTORE SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP SWAP1 POP PUSH2 0x2777 DUP9 PUSH2 0x169F JUMP JUMPDEST ISZERO PUSH2 0x2781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP3 AND PUSH1 0x40 DUP10 ADD MSTORE DUP5 PUSH2 0x27A0 JUMPI PUSH1 0x7 PUSH1 0xFF DUP4 AND GT ISZERO PUSH2 0x27A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ISZERO PUSH2 0x27C3 JUMPI PUSH1 0x20 DUP9 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0xF8 SHL OR PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 MSTORE PUSH2 0x27D2 JUMP JUMPDEST PUSH1 0x20 DUP9 ADD DUP1 MLOAD PUSH1 0x7F PUSH1 0xF9 SHL AND SWAP1 MSTORE JUMPDEST PUSH2 0x27DF DUP9 PUSH1 0x80 ADD MLOAD PUSH2 0x32A3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT AND PUSH1 0x80 DUP10 ADD MSTORE PUSH1 0x0 JUMPDEST DUP4 ISZERO PUSH2 0x2822 JUMPI PUSH1 0xF0 DUP5 SWAP1 SHR DUP2 DUP2 EQ PUSH2 0x2814 JUMPI PUSH2 0x2814 DUP11 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL PUSH2 0x2202 JUMP JUMPDEST PUSH1 0x10 SWAP5 SWAP1 SWAP5 SHL SWAP4 SWAP1 POP PUSH2 0x27F1 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x283A DUP8 DUP8 DUP8 DUP7 DUP6 PUSH2 0x331E JUMP JUMPDEST PUSH2 0x2853 DUP8 PUSH1 0xE0 ADD MLOAD DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0xC0 ADD MLOAD DUP6 DUP9 PUSH2 0x33D8 JUMP JUMPDEST PUSH1 0xC0 SWAP1 SWAP8 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH2 0x2874 DUP8 DUP7 DUP9 PUSH2 0x346B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2893 DUP10 PUSH1 0x60 ADD MLOAD DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0x2555 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP9 PUSH1 0x40 ADD MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x28A6 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x28BD JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 SWAP5 POP SWAP5 POP SWAP5 POP POP POP PUSH2 0xA72 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x28D5 DUP12 PUSH1 0x40 ADD MLOAD DUP13 PUSH1 0xA0 ADD MLOAD DUP6 DUP8 DUP14 PUSH2 0x34DD JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP1 PUSH2 0x28F3 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP POP PUSH2 0xA72 JUMP JUMPDEST POP SWAP2 SWAP10 SWAP1 SWAP9 POP SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x2912 DUP9 DUP6 PUSH2 0x2AA0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x292A PUSH2 0x2923 DUP11 DUP11 PUSH2 0x5F4 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x20C4 JUMP JUMPDEST SWAP1 POP PUSH4 0x3B023380 DUP2 SGT ISZERO PUSH2 0x2946 JUMPI PUSH1 0x0 DUP1 SWAP4 POP SWAP4 POP POP POP PUSH2 0x1AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2952 DUP4 PUSH2 0x356D JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x296B JUMPI PUSH1 0x0 DUP1 SWAP6 POP SWAP6 POP POP POP POP POP PUSH2 0x1AF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2981 DUP10 PUSH2 0x297B DUP6 DUP14 PUSH2 0x20C4 JUMP JUMPDEST SWAP1 PUSH2 0x5F4 JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 SLT ISZERO PUSH2 0x29A0 JUMPI PUSH1 0x0 DUP1 SWAP7 POP SWAP7 POP POP POP POP POP POP PUSH2 0x1AF JUMP JUMPDEST SWAP6 POP PUSH1 0x1 SWAP5 POP PUSH2 0x1AF SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH2 0x29C7 PUSH2 0x29C2 DUP8 DUP10 PUSH2 0x20C4 JUMP JUMPDEST PUSH2 0x1175 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x29DD PUSH2 0x29D7 DUP11 PUSH2 0x360F JUMP JUMPDEST DUP8 PUSH2 0x2053 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 SGT ISZERO PUSH2 0x2A35 JUMPI PUSH1 0x0 PUSH2 0x29F4 DUP10 DUP4 PUSH2 0x20C4 JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 SLT ISZERO PUSH2 0x2A15 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP PUSH2 0xA72 JUMP JUMPDEST PUSH2 0x2A2D PUSH2 0x2A26 PUSH4 0x3B9ACA00 DUP5 PUSH2 0x3624 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x2580 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2A57 JUMP JUMPDEST PUSH2 0x2A54 PUSH2 0x29C2 DUP3 PUSH2 0x210E PUSH2 0x2A4D PUSH4 0x3B9ACA00 DUP4 PUSH2 0x3624 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x1C1C JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x2A71 PUSH1 0x64 PUSH2 0x210E PUSH2 0x2A6A DUP14 PUSH2 0x363A JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x1C1C JUMP JUMPDEST SWAP1 POP PUSH2 0x2A7D DUP4 DUP4 PUSH2 0x3624 JUMP JUMPDEST PUSH2 0x2A8E PUSH2 0x29C2 DUP4 PUSH2 0x297B DUP8 DUP8 PUSH2 0x3624 JUMP JUMPDEST SWAP1 SWAP12 SWAP1 SWAP11 POP SWAP1 SWAP9 POP SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AAC DUP4 DUP4 PUSH2 0x3624 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x60A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2ACF DUP9 DUP9 DUP9 DUP9 PUSH1 0x0 PUSH2 0x2904 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x2AE3 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x5EB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AEE DUP4 PUSH2 0x3647 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B02 DUP3 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x2F08 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B0F DUP3 PUSH2 0x3673 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B2B PUSH2 0x2B26 DUP4 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x2FB0 JUMP JUMPDEST PUSH2 0x36AD JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x2B4B DUP10 PUSH2 0x206B DUP5 PUSH4 0x1DA9C00 PUSH2 0x2E2A JUMP JUMPDEST SWAP1 POP PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x2B69 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x5EB JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x2B87 DUP8 DUP7 PUSH2 0x20DD JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x2B99 SWAP1 DUP3 PUSH2 0x5F4 JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MSTORE TIMESTAMP PUSH1 0xE0 DUP10 ADD MSTORE PUSH1 0x0 PUSH2 0x2BB0 DUP9 DUP7 PUSH2 0x20DD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BBE DUP10 DUP10 PUSH2 0x20DD JUMP JUMPDEST SWAP11 SWAP2 SWAP10 POP SWAP1 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0xF PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 GT PUSH2 0x2BFE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x4FED JUMP JUMPDEST PUSH1 0x7 DUP6 GT ISZERO PUSH2 0x2C1F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x50FA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C2A DUP5 PUSH2 0x1826 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST DUP7 DUP2 GT PUSH2 0x2C7B JUMPI PUSH1 0x0 PUSH2 0x2C44 PUSH2 0x1868 DUP4 PUSH2 0x1B3A JUMP JUMPDEST SWAP1 POP DUP7 DUP2 EQ ISZERO PUSH2 0x2C5C JUMPI POP SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH2 0x2C94 SWAP1 POP JUMP JUMPDEST DUP7 DUP2 GT ISZERO PUSH2 0x2C72 JUMPI POP SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0x2C94 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2C2F JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x529A JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2CA7 PUSH2 0x36C9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x76A700 PUSH2 0x2CB8 DUP6 PUSH2 0x1826 JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 ADD DUP1 DUP4 MSTORE SWAP4 SWAP1 MSTORE KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xC0 SHL DUP2 DIV DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV AND DUP2 PUSH2 0x2D1F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x4F5E JUMP JUMPDEST PUSH2 0x2D2C DUP2 DUP5 DUP5 DUP13 DUP13 PUSH2 0x33D8 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2D55 JUMPI POP PUSH1 0x0 PUSH2 0x348 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD30A666 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2DA8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEB9 SWAP2 SWAP1 PUSH2 0x4D79 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP7 LT PUSH2 0x2DDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP3 LT PUSH2 0x2DE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP4 LT PUSH2 0x2E0C JUMPI PUSH2 0x2E05 DUP5 PUSH2 0x1142 DUP9 DUP9 SUB PUSH2 0x206B DUP4 DUP9 SUB DUP12 DUP9 SUB PUSH2 0x2E2A JUMP JUMPDEST SWAP1 POP PUSH2 0x5EB JUMP JUMPDEST PUSH2 0x2E05 PUSH2 0x2E23 DUP8 DUP8 SUB PUSH2 0x206B DUP7 DUP9 SUB DUP11 DUP8 SUB PUSH2 0x2E2A JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x1183 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2E39 JUMPI POP PUSH1 0x0 PUSH2 0x60A JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x2E46 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xEB9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x5389 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x2ED9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x2EE2 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0x7FFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2F01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xF SIGNEXTEND PUSH1 0x0 EQ ISZERO PUSH2 0x2F1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xF SIGNEXTEND PUSH1 0x40 DUP6 PUSH1 0xF SIGNEXTEND SWAP1 SHL DUP2 PUSH2 0x2F30 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x2F52 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0xEB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x46 SHL DUP3 PUSH1 0xF SIGNEXTEND SLT PUSH2 0x2F70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH9 0x3FFFFFFFFFFFFFFFFF NOT DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x2F8D JUMPI POP PUSH1 0x0 PUSH2 0x348 JUMP JUMPDEST PUSH2 0x60A PUSH1 0x80 DUP4 PUSH1 0xF SIGNEXTEND PUSH17 0x171547652B82FE1777D0FFDA0D23A7D12 MUL SWAP1 SAR PUSH2 0x36D6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF DUP4 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND MUL PUSH1 0x40 SAR PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x2F52 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO PUSH2 0xEB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT EQ DUP1 ISZERO PUSH2 0x3005 JUMPI POP PUSH1 0x1 PUSH1 0xFF SHL DUP4 EQ JUMPDEST ISZERO PUSH2 0x300F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x3018 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0x6 PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SHR PUSH1 0xFF SWAP1 SWAP2 AND SHL SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x3049 DUP5 DUP5 PUSH2 0x4184 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 MLOAD GT PUSH2 0x305B JUMPI SWAP1 POP PUSH2 0x60A JUMP JUMPDEST PUSH2 0xEB9 DUP2 PUSH2 0x42A6 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 JUMPDEST DUP10 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x30F5 JUMPI PUSH1 0x0 DUP11 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x308A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0x30A0 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x30B0 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x30BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x30CD JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x30DD JUMPI POP PUSH1 0x60 DUP2 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x30EC JUMPI PUSH2 0x30EC DUP12 DUP4 PUSH2 0x445F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x306E JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP10 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x3198 JUMPI PUSH1 0x0 DUP11 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3115 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x312C JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x313C JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x3150 JUMPI PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 SSTORE PUSH2 0x318F JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3162 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x317B JUMPI PUSH1 0x80 DUP2 ADD MLOAD DUP1 PUSH2 0x3178 DUP4 DUP3 PUSH2 0x45AF JUMP JUMPDEST POP POP JUMPDEST PUSH2 0x3187 DUP2 DUP7 DUP7 DUP7 PUSH2 0x46D4 JUMP JUMPDEST SWAP2 SWAP7 POP SWAP5 POP SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x30F9 JUMP JUMPDEST POP PUSH1 0x60 DUP10 ADD MLOAD PUSH1 0x0 PUSH2 0x31A8 PUSH2 0x4737 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP JUMPDEST DUP13 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x3272 JUMPI PUSH1 0x0 DUP14 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x31E3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3200 JUMPI POP PUSH2 0x326A JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3212 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x3230 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x322D JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x3239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3245 DUP2 DUP10 DUP10 DUP10 PUSH2 0x46D4 JUMP JUMPDEST SWAP2 SWAP10 POP SWAP8 POP SWAP6 POP PUSH2 0x3262 DUP2 DUP5 DUP8 PUSH1 0x10 DUP2 LT PUSH2 0x325C JUMPI INVALID JUMPDEST ADD PUSH2 0x45AF JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SWAP5 POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x31C4 JUMP JUMPDEST POP PUSH1 0x10 DUP4 GT ISZERO DUP1 ISZERO PUSH2 0x3289 JUMPI POP PUSH5 0xFFFFFFFFFF DUP5 GT ISZERO JUMPDEST PUSH2 0x3292 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP4 SWAP11 SWAP3 SWAP10 POP SWAP8 POP SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFF7FFF7FFF7FFF7FFF7FFF7FFF7FFF7FFF0000000000000000000000000000 DUP4 AND DUP2 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT DUP3 AND ISZERO PUSH2 0x3315 JUMPI PUSH1 0x1 PUSH1 0xFE SHL DUP3 DUP2 AND EQ ISZERO PUSH2 0x32FF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT DUP3 AND DUP2 SHR SWAP3 SWAP1 SWAP3 OR SWAP2 PUSH1 0x10 ADD JUMPDEST PUSH1 0x10 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT AND SWAP1 SHL SWAP2 POP PUSH2 0x32CB JUMP JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3328 PUSH2 0x36C9 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 DUP11 MSTORE SWAP1 DUP10 ADD DUP8 SWAP1 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP1 DUP3 AND SWAP4 DUP12 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x50 SHL DUP2 DIV SWAP1 SWAP3 AND PUSH1 0x60 DUP11 ADD MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP4 DIV DUP2 AND PUSH1 0xA0 DUP12 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 SHL DUP4 DIV DUP2 AND PUSH1 0xC0 DUP12 ADD MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP3 DIV SWAP1 SWAP2 AND PUSH1 0xE0 DUP10 ADD MSTORE SWAP1 SWAP2 POP DUP1 DUP5 ISZERO PUSH2 0x33C7 JUMPI PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND PUSH1 0x80 DUP10 ADD MSTORE PUSH2 0x15F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP10 ADD MSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x33E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 GT ISZERO PUSH2 0x33F5 JUMPI POP DUP4 PUSH2 0x5EB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3401 DUP4 DUP9 PUSH2 0x1183 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x3414 JUMPI DUP6 SWAP2 POP POP PUSH2 0x5EB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3428 DUP6 PUSH2 0x206B DUP5 PUSH4 0x3B9ACA00 PUSH2 0x2E2A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x343A PUSH4 0x3B9ACA00 DUP4 PUSH2 0x1183 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x345D PUSH4 0x3B9ACA00 PUSH2 0x206B PUSH2 0x3453 DUP12 DUP7 PUSH2 0x2E2A JUMP JUMPDEST PUSH2 0x1142 DUP14 DUP9 PUSH2 0x2E2A JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 GT ISZERO DUP1 ISZERO PUSH2 0x3482 JUMPI POP DUP4 PUSH1 0x20 ADD MLOAD DUP4 GT ISZERO JUMPDEST PUSH2 0x348B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 PUSH1 0x8 PUSH1 0x0 NOT DUP7 ADD MUL ADD SWAP1 PUSH1 0xFF SWAP1 DUP3 SHR AND PUSH4 0x3B9ACA00 MUL PUSH1 0x0 PUSH2 0x34C4 PUSH2 0x34B6 DUP7 PUSH2 0x4744 JUMP JUMPDEST PUSH2 0x210E DUP5 PUSH4 0x1DA9C00 PUSH2 0x1C1C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x34D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x34EC DUP8 DUP6 PUSH2 0x2053 JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 SLT ISZERO PUSH2 0x3507 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x1AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x351E PUSH2 0x3517 DUP12 DUP11 PUSH2 0x5F4 JUMP JUMPDEST DUP12 SWAP1 PUSH2 0x20C4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x352C DUP4 PUSH2 0x356D JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x3546 JUMPI PUSH1 0x0 DUP1 SWAP7 POP SWAP7 POP POP POP POP POP POP PUSH2 0x1AF JUMP JUMPDEST PUSH2 0x355A PUSH2 0x3553 DUP4 DUP12 PUSH2 0x20C4 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x3624 JUMP JUMPDEST SWAP13 PUSH1 0x1 SWAP13 POP SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH4 0x3B9ACA00 DUP4 EQ ISZERO PUSH2 0x3587 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x360A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35A1 PUSH2 0x359A PUSH4 0x3B9ACA00 DUP7 PUSH2 0x3624 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x20C4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x35AE DUP3 PUSH2 0x3647 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0xF SIGNEXTEND SGT PUSH2 0x35C9 JUMPI PUSH1 0x0 DUP1 SWAP4 POP SWAP4 POP POP POP PUSH2 0x360A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35FD PUSH2 0x35F8 PUSH2 0x35EC PUSH2 0x35DD DUP6 PUSH2 0x3673 JUMP JUMPDEST PUSH9 0x14B927F32BFFB83338 PUSH2 0x475E JUMP JUMPDEST PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x2FB0 JUMP JUMPDEST PUSH2 0x2FE6 JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP5 POP PUSH1 0x1 SWAP4 POP POP POP POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 ADD MLOAD PUSH3 0x186A0 PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND MUL SWAP1 JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x60A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 ADD MLOAD PUSH1 0x18 SHR PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0x7FFFFFFFFFFFFFFF NOT DUP3 SLT ISZERO DUP1 ISZERO PUSH2 0x366A JUMPI POP PUSH8 0x7FFFFFFFFFFFFFFF DUP3 SGT ISZERO JUMPDEST PUSH2 0x2F01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SGT PUSH2 0x3684 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x80 PUSH2 0x368F DUP4 PUSH2 0x4791 JUMP JUMPDEST PUSH1 0xF SIGNEXTEND PUSH16 0xB17217F7D1CF79ABC9E3B39803F2F6AF MUL SWAP1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x36BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0xA PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x46 SHL DUP3 PUSH1 0xF SIGNEXTEND SLT PUSH2 0x36EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH9 0x3FFFFFFFFFFFFFFFFF NOT DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x3708 JUMPI POP PUSH1 0x0 PUSH2 0x348 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7F SHL PUSH1 0x0 PUSH1 0x1 PUSH1 0x3F SHL DUP5 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3736 JUMPI PUSH17 0x16A09E667F3BCC908B2FB1366EA957D3E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x4000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3763 JUMPI PUSH17 0x1306FE0A31B7152DE8D5A46305C85EDEC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x2000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3790 JUMPI PUSH17 0x1172B83C7D517ADCDF7C8C50EB14A791F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x1000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x37BD JUMPI PUSH17 0x10B5586CF9890F6298B92B71842A98363 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x800000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x37EA JUMPI PUSH17 0x1059B0D31585743AE7C548EB68CA417FD MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x400000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3817 JUMPI PUSH17 0x102C9A3E778060EE6F7CACA4F7A29BDE8 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x200000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3844 JUMPI PUSH17 0x10163DA9FB33356D84A66AE336DCDFA3F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x38 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x386D JUMPI PUSH17 0x100B1AFA5ABCBED6129AB13EC11DC9543 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x80000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3899 JUMPI PUSH17 0x10058C86DA1C09EA1FF19D294CF2F679B MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x40000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x38C5 JUMPI PUSH17 0x1002C605E2E8CEC506D21BFC89A23A00F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x20000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x38F1 JUMPI PUSH17 0x100162F3904051FA128BCA9C55C31E5DF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x10000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x391D JUMPI PUSH17 0x1000B175EFFDC76BA38E31671CA939725 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x8000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3949 JUMPI PUSH17 0x100058BA01FB9F96D6CACD4B180917C3D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x4000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3975 JUMPI PUSH17 0x10002C5CC37DA9491D0985C348C68E7B3 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x2000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x39A1 JUMPI PUSH17 0x1000162E525EE054754457D5995292026 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x30 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x39CA JUMPI PUSH17 0x10000B17255775C040618BF4A4ADE83FC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x800000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x39F5 JUMPI PUSH17 0x1000058B91B5BC9AE2EED81E9B7D4CFAB MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x400000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A20 JUMPI PUSH17 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x200000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A4B JUMPI PUSH17 0x10000162E43F4F831060E02D839A9D16D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x100000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A76 JUMPI PUSH17 0x100000B1721BCFC99D9F890EA06911763 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x80000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3AA1 JUMPI PUSH17 0x10000058B90CF1E6D97F9CA14DBCC1628 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x40000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3ACC JUMPI PUSH17 0x1000002C5C863B73F016468F6BAC5CA2B MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x20000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3AF7 JUMPI PUSH17 0x100000162E430E5A18F6119E3C02282A5 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x10000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B22 JUMPI PUSH17 0x1000000B1721835514B86E6D96EFD1BFE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x8000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B4C JUMPI PUSH17 0x100000058B90C0B48C6BE5DF846C5B2EF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x4000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B76 JUMPI PUSH17 0x10000002C5C8601CC6B9E94213C72737A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x2000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3BA0 JUMPI PUSH17 0x1000000162E42FFF037DF38AA2B219F06 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x1000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3BCA JUMPI PUSH17 0x10000000B17217FBA9C739AA5819F44F9 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x800000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3BF4 JUMPI PUSH17 0x1000000058B90BFCDEE5ACD3C1CEDC823 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x400000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3C1E JUMPI PUSH17 0x100000002C5C85FE31F35A6A30DA1BE50 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x200000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3C48 JUMPI PUSH17 0x10000000162E42FF0999CE3541B9FFFCF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x100000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3C72 JUMPI PUSH17 0x100000000B17217F80F4EF5AADDA45554 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x80000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3C9B JUMPI PUSH17 0x10000000058B90BFBF8479BD5A81B51AD MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x40000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3CC4 JUMPI PUSH17 0x1000000002C5C85FDF84BD62AE30A74CC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x20000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3CED JUMPI PUSH17 0x100000000162E42FEFB2FED257559BDAA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x10000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3D16 JUMPI PUSH17 0x1000000000B17217F7D5A7716BBA4A9AE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x8000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3D3F JUMPI PUSH17 0x100000000058B90BFBE9DDBAC5E109CCE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x4000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3D68 JUMPI PUSH17 0x10000000002C5C85FDF4B15DE6F17EB0D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x2000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3D91 JUMPI PUSH17 0x1000000000162E42FEFA494F1478FDE05 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x1000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3DBA JUMPI PUSH17 0x10000000000B17217F7D20CF927C8E94C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x800000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3DE2 JUMPI PUSH17 0x1000000000058B90BFBE8F71CB4E4B33D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x400000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3E0A JUMPI PUSH17 0x100000000002C5C85FDF477B662B26945 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x200000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3E32 JUMPI PUSH17 0x10000000000162E42FEFA3AE53369388C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x100000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3E5A JUMPI PUSH17 0x100000000000B17217F7D1D351A389D40 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x80000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3E82 JUMPI PUSH17 0x10000000000058B90BFBE8E8B2D3D4EDE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x40000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3EAA JUMPI PUSH17 0x1000000000002C5C85FDF4741BEA6E77E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x20000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3ED2 JUMPI PUSH17 0x100000000000162E42FEFA39FE95583C2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x10000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3EFA JUMPI PUSH17 0x1000000000000B17217F7D1CFB72B45E1 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x8000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3F21 JUMPI PUSH17 0x100000000000058B90BFBE8E7CC35C3F0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x4000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3F48 JUMPI PUSH17 0x10000000000002C5C85FDF473E242EA38 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x2000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3F6F JUMPI PUSH17 0x1000000000000162E42FEFA39F02B772C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3F96 JUMPI PUSH17 0x10000000000000B17217F7D1CF7D83C1A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x800 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3FBD JUMPI PUSH17 0x1000000000000058B90BFBE8E7BDCBE2E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x400 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3FE4 JUMPI PUSH17 0x100000000000002C5C85FDF473DEA871F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x200 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x400B JUMPI PUSH17 0x10000000000000162E42FEFA39EF44D91 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x100 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4032 JUMPI PUSH17 0x100000000000000B17217F7D1CF79E949 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x80 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4058 JUMPI PUSH17 0x10000000000000058B90BFBE8E7BCE544 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x40 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x407E JUMPI PUSH17 0x1000000000000002C5C85FDF473DE6ECA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x20 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x40A4 JUMPI PUSH17 0x100000000000000162E42FEFA39EF366F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x10 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x40CA JUMPI PUSH17 0x1000000000000000B17217F7D1CF79AFA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x8 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x40F0 JUMPI PUSH17 0x100000000000000058B90BFBE8E7BCD6D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x4 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4116 JUMPI PUSH17 0x10000000000000002C5C85FDF473DE6B2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x2 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x413C JUMPI PUSH17 0x1000000000000000162E42FEFA39EF358 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4162 JUMPI PUSH17 0x10000000000000000B17217F7D1CF79AB MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0xF DUP4 DUP2 SIGNEXTEND PUSH1 0x40 SAR PUSH1 0x3F SUB SWAP1 SIGNEXTEND SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 GT ISZERO PUSH2 0x60A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x10 DUP3 PUSH1 0xFF AND GT ISZERO PUSH2 0x4197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x41A1 PUSH2 0x4737 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP PUSH1 0xFF DUP6 AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x41D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4210 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x41FD PUSH2 0x4A2A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x41F5 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 PUSH1 0xFF AND DUP2 LT ISZERO PUSH2 0x429C JUMPI PUSH1 0x0 DUP4 DUP3 PUSH1 0x10 DUP2 LT PUSH2 0x422F JUMPI INVALID JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4240 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP4 SLOAD PUSH2 0xFFFF DUP2 AND DUP3 MSTORE PUSH5 0xFFFFFFFFFF PUSH3 0x10000 DUP3 DIV AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xFF PUSH1 0x1 PUSH1 0x38 SHL DUP4 DIV AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH1 0xA SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH1 0x1 ADD PUSH2 0x4216 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x42C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x42EB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4348 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4307 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x4328 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0x486C JUMP JUMPDEST DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4334 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x42F1 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x23FC JUMPI DUP1 JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x438E JUMPI POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x436D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4384 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT JUMPDEST ISZERO PUSH2 0x4456 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x439F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x43B6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x1 DUP5 SUB DUP2 MLOAD DUP2 LT PUSH2 0x43CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x43E0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x43FD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4414 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH1 0x1 DUP5 SUB DUP2 MLOAD DUP2 LT PUSH2 0x442B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x443E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD SWAP2 SWAP1 SWAP2 MSTORE MSTORE PUSH1 0x0 NOT ADD PUSH2 0x4356 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x434C JUMP JUMPDEST DUP2 MLOAD MLOAD DUP2 LT PUSH2 0x446D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD GT PUSH2 0x447E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4490 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x44A7 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x44B7 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x44D5 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x44D2 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x44DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP4 ADD DUP1 MLOAD PUSH1 0x0 NOT ADD SWAP1 MSTORE PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP6 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x4551 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x450B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 DUP2 PUSH1 0x80 ADD MLOAD GT DUP1 ISZERO PUSH2 0x4538 JUMPI POP PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x4535 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST ISZERO PUSH2 0x4548 JUMPI DUP1 PUSH1 0x80 ADD MLOAD SWAP3 POP DUP2 SWAP4 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x44EF JUMP JUMPDEST POP DUP2 DUP5 EQ ISZERO PUSH2 0x456A JUMPI POP POP PUSH1 0x2 PUSH1 0xA0 SWAP2 SWAP1 SWAP2 ADD MSTORE PUSH2 0x45AB JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x457C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x80 DUP6 DUP2 ADD DUP1 MLOAD SWAP2 DUP4 ADD DUP1 MLOAD SWAP1 SWAP2 MSTORE MSTORE PUSH1 0x1 PUSH1 0xA0 SWAP2 DUP3 ADD MSTORE PUSH1 0x2 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP POP JUMPDEST POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x45C2 JUMPI POP DUP2 MLOAD PUSH2 0x3FFF LT ISZERO JUMPDEST PUSH2 0x45CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x45E8 JUMPI POP PUSH1 0x20 DUP3 ADD MLOAD PUSH5 0xFFFFFFFFFF LT ISZERO JUMPDEST PUSH2 0x45F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x460A JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x8 LT ISZERO JUMPDEST PUSH2 0x4613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT SGT DUP1 ISZERO SWAP1 PUSH2 0x463A JUMPI POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB SLT ISZERO JUMPDEST PUSH2 0x4643 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 SLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD PUSH1 0xA SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH19 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000 NOT PUSH1 0xFF SWAP1 SWAP7 AND PUSH1 0x1 PUSH1 0x38 SHL MUL PUSH8 0xFF00000000000000 NOT PUSH5 0xFFFFFFFFFF SWAP1 SWAP4 AND PUSH3 0x10000 MUL PUSH7 0xFFFFFFFFFF0000 NOT PUSH2 0xFFFF SWAP1 SWAP7 AND PUSH2 0xFFFF NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR AND SWAP2 SWAP1 SWAP2 OR SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x46E3 DUP9 PUSH2 0x48C7 JUMP JUMPDEST SWAP1 POP DUP5 ISZERO DUP1 PUSH2 0x46F1 JUMPI POP DUP1 DUP6 GT JUMPDEST ISZERO PUSH2 0x46FA JUMPI DUP1 SWAP5 POP JUMPDEST DUP7 DUP1 PUSH2 0x470A JUMPI POP PUSH1 0x0 DUP9 PUSH1 0x60 ADD MLOAD SLT JUMPDEST SWAP7 POP PUSH2 0xFFFF DUP7 AND ISZERO PUSH2 0x471B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP SWAP5 MLOAD SWAP4 SWAP6 PUSH1 0x10 SWAP4 SWAP1 SWAP4 SHR PUSH1 0xF0 SWAP5 SWAP1 SWAP5 SHL SWAP4 SWAP1 SWAP4 OR SWAP4 POP SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0xD PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP3 GT ISZERO PUSH2 0x475A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF DUP3 DUP2 SIGNEXTEND SWAP1 DUP5 SWAP1 SIGNEXTEND SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x2F52 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO PUSH2 0xEB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SGT PUSH2 0x47A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xF DUP4 SWAP1 SIGNEXTEND PUSH1 0x1 PUSH1 0x40 SHL DUP2 SLT PUSH2 0x47BC JUMPI PUSH1 0x40 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH5 0x100000000 DUP2 SLT PUSH2 0x47D0 JUMPI PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH3 0x10000 DUP2 SLT PUSH2 0x47E2 JUMPI PUSH1 0x10 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH2 0x100 DUP2 SLT PUSH2 0x47F3 JUMPI PUSH1 0x8 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH1 0x10 DUP2 SLT PUSH2 0x4803 JUMPI PUSH1 0x4 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH1 0x4 DUP2 SLT PUSH2 0x4813 JUMPI PUSH1 0x2 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH1 0x2 DUP2 SLT PUSH2 0x4822 JUMPI PUSH1 0x1 DUP3 ADD SWAP2 POP JUMPDEST PUSH1 0x3F NOT DUP3 ADD PUSH1 0x40 SHL PUSH1 0xF DUP6 SWAP1 SIGNEXTEND PUSH1 0x7F DUP5 SWAP1 SUB SHL PUSH1 0x1 PUSH1 0x3F SHL JUMPDEST PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x4861 JUMPI SWAP1 DUP1 MUL PUSH1 0xFF DUP2 SWAP1 SHR DUP3 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x7F ADD SHR SWAP1 PUSH1 0x1 SAR PUSH2 0x483B JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FFF DUP5 GT ISZERO PUSH2 0x487D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH5 0xFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x488F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 DUP3 GT ISZERO PUSH2 0x489D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH8 0xFFFF000000000000 PUSH1 0x30 DUP5 SWAP1 SHL AND PUSH6 0xFFFFFFFFFF00 PUSH1 0x8 DUP5 SWAP1 SHL AND OR PUSH1 0xFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x40 ADD MLOAD GT DUP1 ISZERO PUSH2 0x48E1 JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x8 LT ISZERO JUMPDEST PUSH2 0x48EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 LT PUSH2 0x4901 JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x348 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4913 PUSH1 0x1 DUP5 PUSH1 0x40 ADD MLOAD SUB PUSH2 0x1B3A JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x344 SWAP1 PUSH3 0x76A700 SWAP1 PUSH2 0x1142 SWAP1 DUP5 PUSH2 0x1183 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x49F3 PUSH2 0x4A00 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x4A65 JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4AC0 JUMPI DUP1 DUP2 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4AD7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0xE3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4B01 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 GT ISZERO PUSH2 0x4B18 JUMPI INVALID JUMPDEST PUSH2 0x4B25 DUP3 DUP4 DUP6 MUL ADD PUSH2 0x533E JUMP JUMPDEST DUP4 DUP2 MSTORE DUP3 DUP2 ADD SWAP1 DUP7 DUP5 ADD PUSH1 0xC0 DUP1 DUP8 MUL DUP10 ADD DUP7 ADD DUP11 LT ISZERO PUSH2 0x4B43 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x4BC4 JUMPI DUP2 DUP4 DUP13 SUB SLT ISZERO PUSH2 0x4B5B JUMPI DUP9 DUP10 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 ADD DUP2 DUP2 LT DUP10 DUP3 GT OR ISZERO PUSH2 0x4B70 JUMPI INVALID JUMPDEST DUP3 MSTORE DUP5 CALLDATALOAD DUP2 MSTORE DUP9 DUP6 ADD CALLDATALOAD DUP10 DUP3 ADD MSTORE DUP5 DUP3 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP1 DUP6 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x80 DUP1 DUP6 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 PUSH2 0x4BAB DUP3 DUP7 ADD PUSH2 0x4BEB JUMP JUMPDEST SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MSTORE SWAP4 DUP7 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4B45 JUMP JUMPDEST POP SWAP2 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x348 DUP2 PUSH2 0x5362 JUMP JUMPDEST DUP1 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4C2D JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4C36 DUP7 PUSH2 0x4A98 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4C46 DUP2 PUSH2 0x5362 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4C62 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP8 ADD SWAP1 PUSH1 0x80 DUP3 DUP11 SUB SLT ISZERO PUSH2 0x4C75 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD DUP2 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x4C8A JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x4C9B JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4CA7 DUP12 DUP3 DUP7 ADD PUSH2 0x4AF1 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x4CBB JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4CC7 DUP12 DUP3 DUP7 ADD PUSH2 0x4AF1 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 SWAP3 DUP4 ADD CALLDATALOAD DUP4 DUP3 ADD MSTORE SWAP5 POP SWAP1 DUP8 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x4CF4 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x4D01 DUP9 DUP3 DUP10 ADD PUSH2 0x4AAF JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4D29 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4D32 DUP7 PUSH2 0x4A98 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4D42 DUP2 PUSH2 0x5362 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x4D52 DUP2 PUSH2 0x5375 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4D6D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4D01 DUP9 DUP3 DUP10 ADD PUSH2 0x4AAF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D8A JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4DA2 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x4DBF JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD PUSH2 0x4DCD DUP2 PUSH2 0x5375 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x4DE9 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x4DFA PUSH1 0x40 DUP5 ADD PUSH2 0x4C05 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x4E0B PUSH1 0x60 DUP5 ADD PUSH2 0x4BFA JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x4E1C PUSH1 0x80 DUP5 ADD PUSH2 0x4BD3 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4E3A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4E45 DUP2 PUSH2 0x5362 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4EC0 JUMPI DUP2 MLOAD DUP1 MLOAD DUP9 MSTORE DUP4 DUP2 ADD MLOAD DUP5 DUP10 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP10 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP10 ADD MSTORE PUSH1 0x80 DUP1 DUP3 ADD MLOAD SWAP1 DUP10 ADD MSTORE PUSH1 0xA0 SWAP1 DUP2 ADD MLOAD SWAP1 PUSH1 0x4 DUP3 LT PUSH2 0x4EAB JUMPI INVALID JUMPDEST DUP9 ADD MSTORE PUSH1 0xC0 SWAP1 SWAP7 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4E66 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE DUP1 MLOAD PUSH5 0xFFFFFFFFFF AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x40 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 ADD MLOAD PUSH1 0xFF AND PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 ADD MLOAD PUSH2 0xFFFF AND PUSH1 0x80 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x13585C9AD95D081B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x4E6F6E206964696F73796E637261746963206D61747572697479000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x125B9D985B1A5908185B5BDD5B9D PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x10D1CE881B9BC81B585C9AD95D1CC81B1A5CDD1959 PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x92DCECC2D8D2C840D2DCC8CAF PUSH1 0x9B SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x4163636F756E74206D75737420736574746C65 PUSH1 0x68 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616465206661696C65642C206C6971756964697479000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x4F766572206D617820617373657473 PUSH1 0x88 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x496E76616C6964206D61747572697479 PUSH1 0x80 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x10D1CE881B585C9AD95D081A5B99195E08189BDD5B99 PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x125B9D985B1A59081B585C9AD95D PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x496E76616C69642074726164652074797065 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420626C6F636B2074696D65000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x496E76616C696420736574746C652062616C616E6365 PUSH1 0x50 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x5472616465206661696C65642C20736C697070616765 PUSH1 0x50 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x8 SWAP1 DUP3 ADD MSTORE PUSH8 0x111A5CD8589B1959 PUSH1 0xC2 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420616D6F756E7420746F20736574746C650000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x21B0B73737BA1039B2BA3A36329039B2B633 PUSH1 0x71 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x10D1CE881B9BC81B585C9AD95D08199BDD5B99 PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE DUP4 MLOAD PUSH1 0x80 PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x52E3 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x4E53 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x3F NOT DUP5 DUP4 SUB ADD PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x5300 DUP3 DUP3 PUSH2 0x4E53 JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE POP POP POP PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x535A JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x5372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5372 JUMPI PUSH1 0x0 DUP1 REVERT INVALID MSTORE8 PUSH2 0x6665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77A26469706673582212 KECCAK256 PUSH21 0x317AAABEFE25B77E4DBF698015C66AFDB432F2FFA5 0xBC INVALID PUSH15 0xA1284B5B1BCE7364736F6C63430007 MOD STOP CALLER ", "sha1": "456fb345239721e104043c7a70d013a2779832de", "source": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport \"../FreeCollateralExternal.sol\";\nimport \"../SettleAssetsExternal.sol\";\nimport \"../../internal/markets/Market.sol\";\nimport \"../../internal/markets/CashGroup.sol\";\nimport \"../../internal/markets/AssetRate.sol\";\nimport \"../../internal/balances/BalanceHandler.sol\";\nimport \"../../internal/portfolio/PortfolioHandler.sol\";\nimport \"../../internal/portfolio/TransferAssets.sol\";\nimport \"../../math/SafeInt256.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nlibrary TradingAction {\n    using PortfolioHandler for PortfolioState;\n    using AccountContextHandler for AccountContext;\n    using Market for MarketParameters;\n    using CashGroup for CashGroupParameters;\n    using AssetRate for AssetRateParameters;\n    using SafeInt256 for int256;\n    using SafeMath for uint256;\n\n    event LendBorrowTrade(\n        address indexed account,\n        uint16 indexed currencyId,\n        uint40 maturity,\n        int256 netAssetCash,\n        int256 netfCash\n    );\n\n    event AddRemoveLiquidity(\n        address indexed account,\n        uint16 indexed currencyId,\n        uint40 maturity,\n        int256 netAssetCash,\n        int256 netfCash,\n        int256 netLiquidityTokens\n    );\n\n    event SettledCashDebt(\n        address indexed settledAccount,\n        uint16 indexed currencyId,\n        address indexed settler,\n        int256 amountToSettleAsset,\n        int256 fCashAmount\n    );\n\n    event nTokenResidualPurchase(\n        uint16 indexed currencyId,\n        uint40 indexed maturity,\n        address indexed purchaser,\n        int256 fCashAmountToPurchase,\n        int256 netAssetCashNToken\n    );\n\n    /// @dev Used internally to manage stack issues\n    struct TradeContext {\n        int256 cash;\n        int256 fCashAmount;\n        int256 fee;\n        int256 netCash;\n        int256 totalFee;\n        uint256 blockTime;\n    }\n\n    /// @notice Executes a trade for leveraged vaults (they can only lend or borrow).\n    /// @param currencyId the currency id to lend or borrow\n    /// @param trade the bytes32 encoded trade data\n    function executeVaultTrade(uint16 currencyId, bytes32 trade)\n        external\n        returns (int256 netAssetCash) {\n        CashGroupParameters memory cashGroup = CashGroup.buildCashGroupStateful(currencyId);\n        MarketParameters memory market;\n        TradeActionType tradeType = TradeActionType(uint256(uint8(bytes1(trade))));\n\n        (netAssetCash, /* */) = _executeLendBorrowTrade(cashGroup, market, tradeType, block.timestamp, trade);\n    }\n\n    /// @notice Executes trades for a bitmapped portfolio, cannot be called directly\n    /// @param account account to put fCash assets in\n    /// @param bitmapCurrencyId currency id of the bitmap\n    /// @param nextSettleTime used to calculate the relative positions in the bitmap\n    /// @param trades tightly packed array of trades, schema is defined in global/Types.sol\n    /// @return netCash generated by trading\n    /// @return didIncurDebt if the bitmap had an fCash position go negative\n    function executeTradesBitmapBatch(\n        address account,\n        uint16 bitmapCurrencyId,\n        uint40 nextSettleTime,\n        bytes32[] calldata trades\n    ) external returns (int256, bool) {\n        CashGroupParameters memory cashGroup = CashGroup.buildCashGroupStateful(bitmapCurrencyId);\n        MarketParameters memory market;\n        bool didIncurDebt;\n        TradeContext memory c;\n        c.blockTime = block.timestamp;\n\n        for (uint256 i = 0; i < trades.length; i++) {\n            uint256 maturity;\n            (maturity, c.cash, c.fCashAmount) = _executeTrade(\n                account,\n                cashGroup,\n                market,\n                trades[i],\n                c.blockTime\n            );\n\n            c.fCashAmount = BitmapAssetsHandler.addifCashAsset(\n                account,\n                bitmapCurrencyId,\n                maturity,\n                nextSettleTime,\n                c.fCashAmount\n            );\n\n            didIncurDebt = didIncurDebt || (c.fCashAmount < 0);\n            c.netCash = c.netCash.add(c.cash);\n        }\n\n        return (c.netCash, didIncurDebt);\n    }\n\n    /// @notice Executes trades for a bitmapped portfolio, cannot be called directly\n    /// @param account account to put fCash assets in\n    /// @param currencyId currency id to trade\n    /// @param portfolioState used to update the positions in the portfolio\n    /// @param trades tightly packed array of trades, schema is defined in global/Types.sol\n    /// @return resulting portfolio state\n    /// @return netCash generated by trading\n    function executeTradesArrayBatch(\n        address account,\n        uint16 currencyId,\n        PortfolioState memory portfolioState,\n        bytes32[] calldata trades\n    ) external returns (PortfolioState memory, int256) {\n        CashGroupParameters memory cashGroup = CashGroup.buildCashGroupStateful(currencyId);\n        MarketParameters memory market;\n        TradeContext memory c;\n        c.blockTime = block.timestamp;\n\n        for (uint256 i = 0; i < trades.length; i++) {\n            TradeActionType tradeType = TradeActionType(uint256(uint8(bytes1(trades[i]))));\n\n            if (\n                tradeType == TradeActionType.AddLiquidity ||\n                tradeType == TradeActionType.RemoveLiquidity\n            ) {\n                revert(\"Disabled\");\n                /**\n                 * Manual adding and removing of liquidity is currently disabled.\n                 *\n                 *  // Liquidity tokens can only be added by array portfolio\n                 *  c.cash = _executeLiquidityTrade(\n                 *      account,\n                 *      cashGroup,\n                 *      market,\n                 *      tradeType,\n                 *      trades[i],\n                 *      portfolioState,\n                 *      c.netCash\n                 *  );\n                 */\n            } else {\n                uint256 maturity;\n                (maturity, c.cash, c.fCashAmount) = _executeTrade(\n                    account,\n                    cashGroup,\n                    market,\n                    trades[i],\n                    c.blockTime\n                );\n\n                portfolioState.addAsset(\n                    currencyId,\n                    maturity,\n                    Constants.FCASH_ASSET_TYPE,\n                    c.fCashAmount\n                );\n            }\n\n            c.netCash = c.netCash.add(c.cash);\n        }\n\n        return (portfolioState, c.netCash);\n    }\n\n    /// @notice Executes a non-liquidity token trade\n    /// @param account the initiator of the trade\n    /// @param cashGroup parameters for the trade\n    /// @param market market memory location to use\n    /// @param trade bytes32 encoding of the particular trade\n    /// @param blockTime the current block time\n    /// @return maturity of the asset that was traded\n    /// @return cashAmount - a positive or negative cash amount accrued to the account\n    /// @return fCashAmount - a positive or negative fCash amount accrued to the account\n    function _executeTrade(\n        address account,\n        CashGroupParameters memory cashGroup,\n        MarketParameters memory market,\n        bytes32 trade,\n        uint256 blockTime\n    )\n        private\n        returns (\n            uint256 maturity,\n            int256 cashAmount,\n            int256 fCashAmount\n        )\n    {\n        TradeActionType tradeType = TradeActionType(uint256(uint8(bytes1(trade))));\n        if (tradeType == TradeActionType.PurchaseNTokenResidual) {\n            (maturity, cashAmount, fCashAmount) = _purchaseNTokenResidual(\n                account,\n                cashGroup,\n                blockTime,\n                trade\n            );\n        } else if (tradeType == TradeActionType.SettleCashDebt) {\n            (maturity, cashAmount, fCashAmount) = _settleCashDebt(account, cashGroup, blockTime, trade);\n        } else if (tradeType == TradeActionType.Lend || tradeType == TradeActionType.Borrow) {\n            (cashAmount, fCashAmount) = _executeLendBorrowTrade(\n                cashGroup,\n                market,\n                tradeType,\n                blockTime,\n                trade\n            );\n            require(cashAmount != 0, \"Trade failed, liquidity\");\n\n            // This is a little ugly but required to deal with stack issues. We know the market is loaded\n            // with the proper maturity inside _executeLendBorrowTrade\n            maturity = market.maturity;\n            emit LendBorrowTrade(\n                account,\n                uint16(cashGroup.currencyId),\n                uint40(maturity),\n                cashAmount,\n                fCashAmount\n            );\n        } else {\n            revert(\"Invalid trade type\");\n        }\n    }\n\n    /// @notice Executes a liquidity token trade, no fees incurred and only array portfolios may hold\n    /// liquidity tokens.\n    /// @param account the initiator of the trade\n    /// @param cashGroup parameters for the trade\n    /// @param market market memory location to use\n    /// @param tradeType whether this is add or remove liquidity\n    /// @param trade bytes32 encoding of the particular trade\n    /// @param portfolioState the current account's portfolio state\n    /// @param netCash the current net cash accrued in this batch of trades, can be\n    //  used for adding liquidity\n    /// @return cashAmount: a positive or negative cash amount accrued to the account\n    function _executeLiquidityTrade(\n        address account,\n        CashGroupParameters memory cashGroup,\n        MarketParameters memory market,\n        TradeActionType tradeType,\n        bytes32 trade,\n        PortfolioState memory portfolioState,\n        int256 netCash\n    ) private returns (int256) {\n        uint256 marketIndex = uint8(bytes1(trade << 8));\n        // NOTE: this loads the market in memory\n        cashGroup.loadMarket(market, marketIndex, true, block.timestamp);\n\n        int256 cashAmount;\n        int256 fCashAmount;\n        int256 tokens;\n        if (tradeType == TradeActionType.AddLiquidity) {\n            cashAmount = int256((uint256(trade) >> 152) & type(uint88).max);\n            // Setting cash amount to zero will deposit all net cash accumulated in this trade into\n            // liquidity. This feature allows accounts to borrow in one maturity to provide liquidity\n            // in another in a single transaction without dust. It also allows liquidity providers to\n            // sell off the net cash residuals and use the cash amount in the new market without dust\n            if (cashAmount == 0) cashAmount = netCash;\n\n            // Add liquidity will check cash amount is positive\n            (tokens, fCashAmount) = market.addLiquidity(cashAmount);\n            cashAmount = cashAmount.neg(); // Report a negative cash amount in the event\n        } else {\n            tokens = int256((uint256(trade) >> 152) & type(uint88).max);\n            (cashAmount, fCashAmount) = market.removeLiquidity(tokens);\n            tokens = tokens.neg(); // Report a negative amount tokens in the event\n        }\n\n        {\n            uint256 minImpliedRate = uint32(uint256(trade) >> 120);\n            uint256 maxImpliedRate = uint32(uint256(trade) >> 88);\n            // If minImpliedRate is not set then it will be zero\n            require(market.lastImpliedRate >= minImpliedRate, \"Trade failed, slippage\");\n            if (maxImpliedRate != 0)\n                require(market.lastImpliedRate <= maxImpliedRate, \"Trade failed, slippage\");\n        }\n\n        // Add the assets in this order so they are sorted\n        portfolioState.addAsset(\n            cashGroup.currencyId,\n            market.maturity,\n            Constants.FCASH_ASSET_TYPE,\n            fCashAmount\n        );\n        // Adds the liquidity token asset\n        portfolioState.addAsset(\n            cashGroup.currencyId,\n            market.maturity,\n            marketIndex + 1,\n            tokens\n        );\n\n        emit AddRemoveLiquidity(\n            account,\n            cashGroup.currencyId,\n            // This will not overflow for a long time\n            uint40(market.maturity),\n            cashAmount,\n            fCashAmount,\n            tokens\n        );\n\n        return cashAmount;\n    }\n\n    /// @notice Executes a lend or borrow trade\n    /// @param cashGroup parameters for the trade\n    /// @param market market memory location to use\n    /// @param tradeType whether this is add or remove liquidity\n    /// @param blockTime the current block time\n    /// @param trade bytes32 encoding of the particular trade\n    /// @return cashAmount - a positive or negative cash amount accrued to the account\n    /// @return fCashAmount -  a positive or negative fCash amount accrued to the account\n    function _executeLendBorrowTrade(\n        CashGroupParameters memory cashGroup,\n        MarketParameters memory market,\n        TradeActionType tradeType,\n        uint256 blockTime,\n        bytes32 trade\n    )\n        private\n        returns (\n            int256 cashAmount,\n            int256 fCashAmount\n        )\n    {\n        uint256 marketIndex = uint256(uint8(bytes1(trade << 8)));\n        // NOTE: this updates the market in memory\n        cashGroup.loadMarket(market, marketIndex, false, blockTime);\n\n        fCashAmount = int256(uint88(bytes11(trade << 16)));\n        // fCash to account will be negative here\n        if (tradeType == TradeActionType.Borrow) fCashAmount = fCashAmount.neg();\n\n        cashAmount = market.executeTrade(\n            cashGroup,\n            fCashAmount,\n            market.maturity.sub(blockTime),\n            marketIndex\n        );\n\n        uint256 rateLimit = uint256(uint32(bytes4(trade << 104)));\n        if (rateLimit != 0) {\n            if (tradeType == TradeActionType.Borrow) {\n                // Do not allow borrows over the rate limit\n                require(market.lastImpliedRate <= rateLimit, \"Trade failed, slippage\");\n            } else {\n                // Do not allow lends under the rate limit\n                require(market.lastImpliedRate >= rateLimit, \"Trade failed, slippage\");\n            }\n        }\n    }\n\n    /// @notice If an account has a negative cash balance we allow anyone to lend to to that account at a penalty\n    /// rate to the 3 month market.\n    /// @param account the account initiating the trade, used to check that self settlement is not possible\n    /// @param cashGroup parameters for the trade\n    /// @param blockTime the current block time\n    /// @param trade bytes32 encoding of the particular trade\n    /// @return maturity: the date of the three month maturity where fCash will be exchanged\n    /// @return cashAmount: a negative cash amount that the account must pay to the settled account\n    /// @return fCashAmount: a positive fCash amount that the account will receive\n    function _settleCashDebt(\n        address account,\n        CashGroupParameters memory cashGroup,\n        uint256 blockTime,\n        bytes32 trade\n    )\n        internal\n        returns (\n            uint256,\n            int256,\n            int256\n        )\n    {\n        address counterparty = address(uint256(trade) >> 88);\n        // Allowing an account to settle itself would result in strange outcomes\n        require(account != counterparty, \"Cannot settle self\");\n        int256 amountToSettleAsset = int256(uint88(uint256(trade)));\n\n        AccountContext memory counterpartyContext =\n            AccountContextHandler.getAccountContext(counterparty);\n\n        if (counterpartyContext.mustSettleAssets()) {\n            counterpartyContext = SettleAssetsExternal.settleAccount(counterparty, counterpartyContext);\n        }\n\n        // This will check if the amountToSettleAsset is valid and revert if it is not. Amount to settle is a positive\n        // number denominated in asset terms. If amountToSettleAsset is set equal to zero on the input, will return the\n        // max amount to settle. This will update the balance storage on the counterparty.\n        amountToSettleAsset = BalanceHandler.setBalanceStorageForSettleCashDebt(\n            counterparty,\n            cashGroup,\n            amountToSettleAsset,\n            counterpartyContext\n        );\n\n        // Settled account must borrow from the 3 month market at a penalty rate. This will fail if the market\n        // is not initialized.\n        uint256 threeMonthMaturity = DateTime.getReferenceTime(blockTime) + Constants.QUARTER;\n        int256 fCashAmount =\n            _getfCashSettleAmount(cashGroup, threeMonthMaturity, blockTime, amountToSettleAsset);\n        // Defensive check to ensure that we can't inadvertently cause the settler to lose fCash.\n        require(fCashAmount >= 0);\n\n        // It's possible that this action will put an account into negative free collateral. In this case they\n        // will immediately become eligible for liquidation and the account settling the debt can also liquidate\n        // them in the same transaction. Do not run a free collateral check here to allow this to happen.\n        {\n            PortfolioAsset[] memory assets = new PortfolioAsset[](1);\n            assets[0].currencyId = cashGroup.currencyId;\n            assets[0].maturity = threeMonthMaturity;\n            assets[0].notional = fCashAmount.neg(); // This is the debt the settled account will incur\n            assets[0].assetType = Constants.FCASH_ASSET_TYPE;\n            // Can transfer assets, we have settled above\n            counterpartyContext = TransferAssets.placeAssetsInAccount(\n                counterparty,\n                counterpartyContext,\n                assets\n            );\n        }\n        counterpartyContext.setAccountContext(counterparty);\n\n        emit SettledCashDebt(\n            counterparty,\n            uint16(cashGroup.currencyId),\n            account,\n            amountToSettleAsset,\n            fCashAmount.neg()\n        );\n\n        return (threeMonthMaturity, amountToSettleAsset.neg(), fCashAmount);\n    }\n\n    /// @dev Helper method to calculate the fCashAmount from the penalty settlement rate\n    function _getfCashSettleAmount(\n        CashGroupParameters memory cashGroup,\n        uint256 threeMonthMaturity,\n        uint256 blockTime,\n        int256 amountToSettleAsset\n    ) private view returns (int256) {\n        uint256 oracleRate = cashGroup.calculateOracleRate(threeMonthMaturity, blockTime);\n\n        int256 exchangeRate =\n            Market.getExchangeRateFromImpliedRate(\n                oracleRate.add(cashGroup.getSettlementPenalty()),\n                threeMonthMaturity.sub(blockTime)\n            );\n\n        // Amount to settle is positive, this returns the fCashAmount that the settler will\n        // receive as a positive number\n        return\n            cashGroup.assetRate\n                .convertToUnderlying(amountToSettleAsset)\n                // Exchange rate converts from cash to fCash when multiplying\n                .mulInRatePrecision(exchangeRate);\n    }\n\n    /// @notice Allows an account to purchase ntoken residuals\n    /// @param purchaser account that is purchasing the residuals\n    /// @param cashGroup parameters for the trade\n    /// @param blockTime the current block time\n    /// @param trade bytes32 encoding of the particular trade\n    /// @return maturity: the date of the idiosyncratic maturity where fCash will be exchanged\n    /// @return cashAmount: a positive or negative cash amount that the account will receive or pay\n    /// @return fCashAmount: a positive or negative fCash amount that the account will receive\n    function _purchaseNTokenResidual(\n        address purchaser,\n        CashGroupParameters memory cashGroup,\n        uint256 blockTime,\n        bytes32 trade\n    )\n        internal\n        returns (\n            uint256,\n            int256,\n            int256\n        )\n    {\n        uint256 maturity = uint256(uint32(uint256(trade) >> 216));\n        int256 fCashAmountToPurchase = int88(uint88(uint256(trade) >> 128));\n        require(maturity > blockTime, \"Invalid maturity\");\n        // Require that the residual to purchase does not fall on an existing maturity (i.e.\n        // it is an idiosyncratic maturity)\n        require(\n            !DateTime.isValidMarketMaturity(cashGroup.maxMarketIndex, maturity, blockTime),\n            \"Non idiosyncratic maturity\"\n        );\n\n        address nTokenAddress = nTokenHandler.nTokenAddress(cashGroup.currencyId);\n        // prettier-ignore\n        (\n            /* currencyId */,\n            /* incentiveRate */,\n            uint256 lastInitializedTime,\n            /* assetArrayLength */,\n            bytes5 parameters\n        ) = nTokenHandler.getNTokenContext(nTokenAddress);\n\n        // Restrict purchasing until some amount of time after the last initialized time to ensure that arbitrage\n        // opportunities are not available (by generating residuals and then immediately purchasing them at a discount)\n        // This is always relative to the last initialized time which is set at utc0 when initialized, not the\n        // reference time. Therefore we will always restrict residual purchase relative to initialization, not reference.\n        // This is safer, prevents an attack if someone forces residuals and then somehow prevents market initialization\n        // until the residual time buffer passes.\n        require(\n            blockTime >\n                lastInitializedTime.add(\n                    uint256(uint8(parameters[Constants.RESIDUAL_PURCHASE_TIME_BUFFER])) * 1 hours\n                ),\n            \"Insufficient block time\"\n        );\n\n        int256 notional =\n            BitmapAssetsHandler.getifCashNotional(nTokenAddress, cashGroup.currencyId, maturity);\n        // Check if amounts are valid and set them to the max available if necessary\n        if (notional < 0 && fCashAmountToPurchase < 0) {\n            // Does not allow purchasing more negative notional than available\n            if (fCashAmountToPurchase < notional) fCashAmountToPurchase = notional;\n        } else if (notional > 0 && fCashAmountToPurchase > 0) {\n            // Does not allow purchasing more positive notional than available\n            if (fCashAmountToPurchase > notional) fCashAmountToPurchase = notional;\n        } else {\n            // Does not allow moving notional in the opposite direction\n            revert(\"Invalid amount\");\n        }\n\n        // If fCashAmount > 0 then this will return netAssetCash > 0, if fCashAmount < 0 this will return\n        // netAssetCash < 0. fCashAmount will go to the purchaser and netAssetCash will go to the nToken.\n        int256 netAssetCashNToken =\n            _getResidualPriceAssetCash(\n                cashGroup,\n                maturity,\n                blockTime,\n                fCashAmountToPurchase,\n                parameters\n            );\n\n        _updateNTokenPortfolio(\n            nTokenAddress,\n            cashGroup.currencyId,\n            maturity,\n            lastInitializedTime,\n            fCashAmountToPurchase,\n            netAssetCashNToken\n        );\n\n        emit nTokenResidualPurchase(\n            uint16(cashGroup.currencyId),\n            uint40(maturity),\n            purchaser,\n            fCashAmountToPurchase,\n            netAssetCashNToken\n        );\n\n        return (maturity, netAssetCashNToken.neg(), fCashAmountToPurchase);\n    }\n\n    /// @notice Returns the amount of asset cash required to purchase the nToken residual\n    function _getResidualPriceAssetCash(\n        CashGroupParameters memory cashGroup,\n        uint256 maturity,\n        uint256 blockTime,\n        int256 fCashAmount,\n        bytes6 parameters\n    ) internal view returns (int256) {\n        uint256 oracleRate = cashGroup.calculateOracleRate(maturity, blockTime);\n        // Residual purchase incentive is specified in ten basis point increments\n        uint256 purchaseIncentive =\n            uint256(uint8(parameters[Constants.RESIDUAL_PURCHASE_INCENTIVE])) *\n                Constants.TEN_BASIS_POINTS;\n\n        if (fCashAmount > 0) {\n            // When fCash is positive then we add the purchase incentive, the purchaser\n            // can pay less cash for the fCash relative to the oracle rate\n            oracleRate = oracleRate.add(purchaseIncentive);\n        } else if (oracleRate > purchaseIncentive) {\n            // When fCash is negative, we reduce the interest rate that the purchaser will\n            // borrow at, we do this check to ensure that we floor the oracle rate at zero.\n            oracleRate = oracleRate.sub(purchaseIncentive);\n        } else {\n            // If the oracle rate is less than the purchase incentive floor the interest rate at zero\n            oracleRate = 0;\n        }\n\n        int256 exchangeRate =\n            Market.getExchangeRateFromImpliedRate(oracleRate, maturity.sub(blockTime));\n\n        // Returns the net asset cash from the nToken perspective, which is the same sign as the fCash amount\n        return\n            cashGroup.assetRate.convertFromUnderlying(fCashAmount.divInRatePrecision(exchangeRate));\n    }\n\n    function _updateNTokenPortfolio(\n        address nTokenAddress,\n        uint256 currencyId,\n        uint256 maturity,\n        uint256 lastInitializedTime,\n        int256 fCashAmountToPurchase,\n        int256 netAssetCashNToken\n    ) private {\n        int256 finalNotional = BitmapAssetsHandler.addifCashAsset(\n            nTokenAddress,\n            currencyId,\n            maturity,\n            lastInitializedTime,\n            fCashAmountToPurchase.neg() // the nToken takes on the negative position\n        );\n\n        // Defensive check to ensure that fCash amounts do not flip signs\n        require(\n            (fCashAmountToPurchase > 0 && finalNotional >= 0) ||\n            (fCashAmountToPurchase < 0 && finalNotional <= 0)\n        );\n\n        // prettier-ignore\n        (\n            int256 nTokenCashBalance,\n            /* storedNTokenBalance */,\n            /* lastClaimTime */,\n            /* accountIncentiveDebt */\n        ) = BalanceHandler.getBalanceStorage(nTokenAddress, currencyId);\n        nTokenCashBalance = nTokenCashBalance.add(netAssetCashNToken);\n\n        // This will ensure that the cash balance is not negative\n        BalanceHandler.setBalanceStorageForNToken(nTokenAddress, currencyId, nTokenCashBalance);\n    }\n}\n", "sourceMap": "554:25776:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;", "sourcePath": "contracts/external/actions/TradingAction.sol", "type": "library", "deployment": {"address": "0xBB7712663ab3BeE01a02801276A4441d35470Eb5", "chainid": "5", "blockHeight": 7271184}}