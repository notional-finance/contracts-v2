{"abi": [{"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "account", "type": "address"}, {"indexed": true, "internalType": "uint16", "name": "currencyId", "type": "uint16"}, {"indexed": false, "internalType": "uint40", "name": "maturity", "type": "uint40"}, {"indexed": false, "internalType": "int256", "name": "netAssetCash", "type": "int256"}, {"indexed": false, "internalType": "int256", "name": "netfCash", "type": "int256"}, {"indexed": false, "internalType": "int256", "name": "netLiquidityTokens", "type": "int256"}], "name": "AddRemoveLiquidity", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "account", "type": "address"}, {"indexed": true, "internalType": "uint16", "name": "currencyId", "type": "uint16"}, {"indexed": false, "internalType": "uint40", "name": "maturity", "type": "uint40"}, {"indexed": false, "internalType": "int256", "name": "netAssetCash", "type": "int256"}, {"indexed": false, "internalType": "int256", "name": "netfCash", "type": "int256"}], "name": "LendBorrowTrade", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "settledAccount", "type": "address"}, {"indexed": true, "internalType": "uint16", "name": "currencyId", "type": "uint16"}, {"indexed": true, "internalType": "address", "name": "settler", "type": "address"}, {"indexed": false, "internalType": "int256", "name": "amountToSettleAsset", "type": "int256"}, {"indexed": false, "internalType": "int256", "name": "fCashAmount", "type": "int256"}], "name": "SettledCashDebt", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "uint16", "name": "currencyId", "type": "uint16"}, {"indexed": true, "internalType": "uint40", "name": "maturity", "type": "uint40"}, {"indexed": true, "internalType": "address", "name": "purchaser", "type": "address"}, {"indexed": false, "internalType": "int256", "name": "fCashAmountToPurchase", "type": "int256"}, {"indexed": false, "internalType": "int256", "name": "netAssetCashNToken", "type": "int256"}], "name": "nTokenResidualPurchase", "type": "event"}], "allSourcePaths": {"100": "contracts/math/SafeInt256.sol", "14": "/Users/jwu/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/contracts/token/ERC20/IERC20.sol", "150": "interfaces/IEIP20NonStandard.sol", "157": "interfaces/aave/ILendingPool.sol", "161": "interfaces/compound/CErc20Interface.sol", "162": "interfaces/compound/CEtherInterface.sol", "163": "interfaces/compound/CTokenInterface.sol", "167": "interfaces/notional/AssetRateAdapter.sol", "169": "interfaces/notional/IRewarder.sol", "22": "contracts/external/MigrateIncentives.sol", "25": "contracts/external/SettleAssetsExternal.sol", "35": "contracts/external/actions/TradingAction.sol", "6": "/Users/jwu/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/contracts/math/SafeMath.sol", "63": "contracts/global/Constants.sol", "64": "contracts/global/Deployments.sol", "65": "contracts/global/LibStorage.sol", "68": "contracts/global/Types.sol", "69": "contracts/internal/AccountContextHandler.sol", "70": "contracts/internal/balances/BalanceHandler.sol", "71": "contracts/internal/balances/Incentives.sol", "72": "contracts/internal/balances/TokenHandler.sol", "73": "contracts/internal/balances/protocols/AaveHandler.sol", "74": "contracts/internal/balances/protocols/CompoundHandler.sol", "75": "contracts/internal/balances/protocols/GenericToken.sol", "79": "contracts/internal/markets/AssetRate.sol", "80": "contracts/internal/markets/CashGroup.sol", "81": "contracts/internal/markets/DateTime.sol", "82": "contracts/internal/markets/Market.sol", "84": "contracts/internal/nToken/nTokenHandler.sol", "85": "contracts/internal/nToken/nTokenSupply.sol", "86": "contracts/internal/portfolio/BitmapAssetsHandler.sol", "87": "contracts/internal/portfolio/PortfolioHandler.sol", "88": "contracts/internal/portfolio/TransferAssets.sol", "89": "contracts/internal/settlement/SettleBitmapAssets.sol", "90": "contracts/internal/settlement/SettlePortfolioAssets.sol", "91": "contracts/internal/valuation/AssetHandler.sol", "97": "contracts/math/ABDKMath64x64.sol", "98": "contracts/math/Bitmap.sol", "99": "contracts/math/FloatingPoint56.sol"}, "ast": {"absolutePath": "contracts/external/actions/TradingAction.sol", "exportedSymbols": {"ABDKMath64x64": [52702], "AaveHandler": [29628], "AccountBalance": [67698], "AccountContext": [67617], "AccountContextHandler": [26840], "AggregatorInterface": [73189], "AggregatorV2V3Interface": [69716], "AggregatorV3Interface": [73235], "AssetHandler": [43274], "AssetRate": [33659], "AssetRateAdapter": [69760], "AssetRateParameters": [67513], "AssetRateStorage": [67581], "AssetStorageState": [67374], "BalanceAction": [67395], "BalanceActionWithTrades": [67411], "BalanceHandler": [28243], "BalanceState": [67506], "BalanceStorage": [67641], "BatchLend": [67382], "Bitmap": [53043], "BitmapAssetsHandler": [40303], "CErc20Interface": [70050], "CEtherInterface": [72077], "CTokenInterface": [70380], "CashGroup": [34938], "CashGroupParameters": [67522], "CashGroupSettings": [67606], "CompoundHandler": [29819], "Constants": [66871], "Context": [73258], "DateTime": [35577], "Deployments": [68948], "DepositActionType": [67369], "ERC20": [70883], "ETHRate": [67487], "ETHRateStorage": [67576], "ExchangeRate": [43470], "FloatingPoint56": [53119], "FreeCollateral": [44883], "FreeCollateralExternal": [1471], "GenericToken": [29975], "IAToken": [70905], "IATokenFull": [70940], "IEIP20NonStandard": [72603], "IERC20": [70212], "ILendingPool": [71022], "IRewarder": [69778], "IScaledBalanceToken": [70930], "Incentives": [28432], "LendingPoolStorage": [70946], "LibStorage": [26023], "LiquidationFactors": [67465], "Market": [37496], "MarketParameters": [67552], "MarketStorage": [67661], "MigrateIncentives": [1628], "PortfolioAsset": [67535], "PortfolioAssetStorage": [67673], "PortfolioHandler": [41594], "PortfolioState": [67476], "SafeInt256": [53471], "SafeMath": [66116], "SettleAmount": [67416], "SettleAssetsExternal": [2963], "SettleBitmapAssets": [42074], "SettlePortfolioAssets": [42499], "SettlementRateStorage": [67648], "Token": [67427], "TokenHandler": [29385], "TokenStorage": [67563], "TokenType": [67354], "TradeActionType": [67361], "TradingAction": [12193], "TransferAssets": [41825], "VaultAccount": [67828], "VaultAccountSecondaryDebtShareStorage": [67815], "VaultAccountStorage": [67808], "VaultBorrowCapacityStorage": [67728], "VaultConfig": [67766], "VaultConfigStorage": [67723], "VaultSecondaryBorrowStorage": [67737], "VaultSettledAssetsStorage": [67784], "VaultState": [67799], "VaultStateStorage": [67779], "ifCashStorage": [67664], "nTokenCalculations": [38264], "nTokenContext": [67632], "nTokenHandler": [39312], "nTokenPortfolio": [67442], "nTokenSupply": [39614], "nTokenTotalSupplyStorage": [67687], "nTokenTotalSupplyStorage_deprecated": [67680]}, "id": 12194, "license": "GPL-3.0-only", "nodeType": "SourceUnit", "nodes": [{"id": 10736, "literals": ["solidity", "=", "0.7", ".6"], "nodeType": "PragmaDirective", "src": "41:23:35"}, {"id": 10737, "literals": ["abicoder", "v2"], "nodeType": "PragmaDirective", "src": "65:19:35"}, {"absolutePath": "contracts/external/FreeCollateralExternal.sol", "file": "../FreeCollateralExternal.sol", "id": 10738, "nodeType": "ImportDirective", "scope": 12194, "sourceUnit": 1472, "src": "86:39:35", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/external/SettleAssetsExternal.sol", "file": "../SettleAssetsExternal.sol", "id": 10739, "nodeType": "ImportDirective", "scope": 12194, "sourceUnit": 2964, "src": "126:37:35", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/Market.sol", "file": "../../internal/markets/Market.sol", "id": 10740, "nodeType": "ImportDirective", "scope": 12194, "sourceUnit": 37497, "src": "164:43:35", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/CashGroup.sol", "file": "../../internal/markets/CashGroup.sol", "id": 10741, "nodeType": "ImportDirective", "scope": 12194, "sourceUnit": 34939, "src": "208:46:35", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/AssetRate.sol", "file": "../../internal/markets/AssetRate.sol", "id": 10742, "nodeType": "ImportDirective", "scope": 12194, "sourceUnit": 33660, "src": "255:46:35", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/balances/BalanceHandler.sol", "file": "../../internal/balances/BalanceHandler.sol", "id": 10743, "nodeType": "ImportDirective", "scope": 12194, "sourceUnit": 28244, "src": "302:52:35", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/portfolio/PortfolioHandler.sol", "file": "../../internal/portfolio/PortfolioHandler.sol", "id": 10744, "nodeType": "ImportDirective", "scope": 12194, "sourceUnit": 41595, "src": "355:55:35", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/internal/portfolio/TransferAssets.sol", "file": "../../internal/portfolio/TransferAssets.sol", "id": 10745, "nodeType": "ImportDirective", "scope": 12194, "sourceUnit": 41826, "src": "411:53:35", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/math/SafeInt256.sol", "file": "../../math/SafeInt256.sol", "id": 10746, "nodeType": "ImportDirective", "scope": 12194, "sourceUnit": 53472, "src": "465:35:35", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "/Users/jwu/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/contracts/math/SafeMath.sol", "file": "@openzeppelin/contracts/math/SafeMath.sol", "id": 10747, "nodeType": "ImportDirective", "scope": 12194, "sourceUnit": 66117, "src": "501:51:35", "symbolAliases": [], "unitAlias": ""}, {"abstract": false, "baseContracts": [], "contractDependencies": [], "contractKind": "library", "fullyImplemented": true, "id": 12193, "linearizedBaseContracts": [12193], "name": "TradingAction", "nodeType": "ContractDefinition", "nodes": [{"id": 10750, "libraryName": {"id": 10748, "name": "PortfolioHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 41594, "src": "588:16:35", "typeDescriptions": {"typeIdentifier": "t_contract$_PortfolioHandler_$41594", "typeString": "library PortfolioHandler"}}, "nodeType": "UsingForDirective", "src": "582:42:35", "typeName": {"id": 10749, "name": "PortfolioState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67476, "src": "609:14:35", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67476_storage_ptr", "typeString": "struct PortfolioState"}}}, {"id": 10753, "libraryName": {"id": 10751, "name": "AccountContextHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26840, "src": "635:21:35", "typeDescriptions": {"typeIdentifier": "t_contract$_AccountContextHandler_$26840", "typeString": "library AccountContextHandler"}}, "nodeType": "UsingForDirective", "src": "629:47:35", "typeName": {"id": 10752, "name": "AccountContext", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67617, "src": "661:14:35", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_storage_ptr", "typeString": "struct AccountContext"}}}, {"id": 10756, "libraryName": {"id": 10754, "name": "Market", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 37496, "src": "687:6:35", "typeDescriptions": {"typeIdentifier": "t_contract$_Market_$37496", "typeString": "library Market"}}, "nodeType": "UsingForDirective", "src": "681:34:35", "typeName": {"id": 10755, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67552, "src": "698:16:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_storage_ptr", "typeString": "struct MarketParameters"}}}, {"id": 10759, "libraryName": {"id": 10757, "name": "CashGroup", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 34938, "src": "726:9:35", "typeDescriptions": {"typeIdentifier": "t_contract$_CashGroup_$34938", "typeString": "library CashGroup"}}, "nodeType": "UsingForDirective", "src": "720:40:35", "typeName": {"id": 10758, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67522, "src": "740:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_storage_ptr", "typeString": "struct CashGroupParameters"}}}, {"id": 10762, "libraryName": {"id": 10760, "name": "AssetRate", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 33659, "src": "771:9:35", "typeDescriptions": {"typeIdentifier": "t_contract$_AssetRate_$33659", "typeString": "library AssetRate"}}, "nodeType": "UsingForDirective", "src": "765:40:35", "typeName": {"id": 10761, "name": "AssetRateParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67513, "src": "785:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_AssetRateParameters_$67513_storage_ptr", "typeString": "struct AssetRateParameters"}}}, {"id": 10765, "libraryName": {"id": 10763, "name": "SafeInt256", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 53471, "src": "816:10:35", "typeDescriptions": {"typeIdentifier": "t_contract$_SafeInt256_$53471", "typeString": "library SafeInt256"}}, "nodeType": "UsingForDirective", "src": "810:28:35", "typeName": {"id": 10764, "name": "int256", "nodeType": "ElementaryTypeName", "src": "831:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}}, {"id": 10768, "libraryName": {"id": 10766, "name": "SafeMath", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 66116, "src": "849:8:35", "typeDescriptions": {"typeIdentifier": "t_contract$_SafeMath_$66116", "typeString": "library SafeMath"}}, "nodeType": "UsingForDirective", "src": "843:27:35", "typeName": {"id": 10767, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "862:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}}, {"anonymous": false, "id": 10780, "name": "LendBorrowTrade", "nodeType": "EventDefinition", "parameters": {"id": 10779, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10770, "indexed": true, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 10780, "src": "907:23:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 10769, "name": "address", "nodeType": "ElementaryTypeName", "src": "907:7:35", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 10772, "indexed": true, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10780, "src": "940:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10771, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "940:6:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 10774, "indexed": false, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 10780, "src": "975:15:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}, "typeName": {"id": 10773, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "975:6:35", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "visibility": "internal"}, {"constant": false, "id": 10776, "indexed": false, "mutability": "mutable", "name": "netAssetCash", "nodeType": "VariableDeclaration", "scope": 10780, "src": "1000:19:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10775, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1000:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10778, "indexed": false, "mutability": "mutable", "name": "netfCash", "nodeType": "VariableDeclaration", "scope": 10780, "src": "1029:15:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10777, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1029:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "897:153:35"}, "src": "876:175:35"}, {"anonymous": false, "id": 10794, "name": "AddRemoveLiquidity", "nodeType": "EventDefinition", "parameters": {"id": 10793, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10782, "indexed": true, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 10794, "src": "1091:23:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 10781, "name": "address", "nodeType": "ElementaryTypeName", "src": "1091:7:35", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 10784, "indexed": true, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10794, "src": "1124:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10783, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "1124:6:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 10786, "indexed": false, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 10794, "src": "1159:15:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}, "typeName": {"id": 10785, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "1159:6:35", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "visibility": "internal"}, {"constant": false, "id": 10788, "indexed": false, "mutability": "mutable", "name": "netAssetCash", "nodeType": "VariableDeclaration", "scope": 10794, "src": "1184:19:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10787, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1184:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10790, "indexed": false, "mutability": "mutable", "name": "netfCash", "nodeType": "VariableDeclaration", "scope": 10794, "src": "1213:15:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10789, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1213:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10792, "indexed": false, "mutability": "mutable", "name": "netLiquidityTokens", "nodeType": "VariableDeclaration", "scope": 10794, "src": "1238:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10791, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1238:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "1081:188:35"}, "src": "1057:213:35"}, {"anonymous": false, "id": 10806, "name": "SettledCashDebt", "nodeType": "EventDefinition", "parameters": {"id": 10805, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10796, "indexed": true, "mutability": "mutable", "name": "settledAccount", "nodeType": "VariableDeclaration", "scope": 10806, "src": "1307:30:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 10795, "name": "address", "nodeType": "ElementaryTypeName", "src": "1307:7:35", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 10798, "indexed": true, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10806, "src": "1347:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10797, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "1347:6:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 10800, "indexed": true, "mutability": "mutable", "name": "settler", "nodeType": "VariableDeclaration", "scope": 10806, "src": "1382:23:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 10799, "name": "address", "nodeType": "ElementaryTypeName", "src": "1382:7:35", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 10802, "indexed": false, "mutability": "mutable", "name": "amountToSettleAsset", "nodeType": "VariableDeclaration", "scope": 10806, "src": "1415:26:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10801, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1415:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10804, "indexed": false, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 10806, "src": "1451:18:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10803, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1451:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "1297:178:35"}, "src": "1276:200:35"}, {"anonymous": false, "id": 10818, "name": "nTokenResidualPurchase", "nodeType": "EventDefinition", "parameters": {"id": 10817, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10808, "indexed": true, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10818, "src": "1520:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10807, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "1520:6:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 10810, "indexed": true, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 10818, "src": "1555:23:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}, "typeName": {"id": 10809, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "1555:6:35", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "visibility": "internal"}, {"constant": false, "id": 10812, "indexed": true, "mutability": "mutable", "name": "purchaser", "nodeType": "VariableDeclaration", "scope": 10818, "src": "1588:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 10811, "name": "address", "nodeType": "ElementaryTypeName", "src": "1588:7:35", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 10814, "indexed": false, "mutability": "mutable", "name": "fCashAmountToPurchase", "nodeType": "VariableDeclaration", "scope": 10818, "src": "1623:28:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10813, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1623:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10816, "indexed": false, "mutability": "mutable", "name": "netAssetCashNToken", "nodeType": "VariableDeclaration", "scope": 10818, "src": "1661:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10815, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1661:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "1510:182:35"}, "src": "1482:211:35"}, {"canonicalName": "TradingAction.TradeContext", "id": 10831, "members": [{"constant": false, "id": 10820, "mutability": "mutable", "name": "cash", "nodeType": "VariableDeclaration", "scope": 10831, "src": "1781:11:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10819, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1781:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10822, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 10831, "src": "1802:18:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10821, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1802:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10824, "mutability": "mutable", "name": "fee", "nodeType": "VariableDeclaration", "scope": 10831, "src": "1830:10:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10823, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1830:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10826, "mutability": "mutable", "name": "netCash", "nodeType": "VariableDeclaration", "scope": 10831, "src": "1850:14:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10825, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1850:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10828, "mutability": "mutable", "name": "totalFee", "nodeType": "VariableDeclaration", "scope": 10831, "src": "1874:15:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10827, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1874:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10830, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 10831, "src": "1899:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10829, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "1899:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "name": "TradeContext", "nodeType": "StructDefinition", "scope": 12193, "src": "1751:172:35", "visibility": "public"}, {"body": {"id": 10878, "nodeType": "Block", "src": "2243:336:35", "statements": [{"assignments": [10842], "declarations": [{"constant": false, "id": 10842, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 10878, "src": "2253:36:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 10841, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67522, "src": "2253:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}], "id": 10847, "initialValue": {"arguments": [{"id": 10845, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10834, "src": "2325:10:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 10843, "name": "CashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 34938, "src": "2292:9:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_CashGroup_$34938_$", "typeString": "type(library CashGroup)"}}, "id": 10844, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "buildCashGroupStateful", "nodeType": "MemberAccess", "referencedDeclaration": 34937, "src": "2292:32:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$returns$_t_struct$_CashGroupParameters_$67522_memory_ptr_$", "typeString": "function (uint16) returns (struct CashGroupParameters memory)"}}, "id": 10846, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2292:44:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "nodeType": "VariableDeclarationStatement", "src": "2253:83:35"}, {"assignments": [10849], "declarations": [{"constant": false, "id": 10849, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 10878, "src": "2346:30:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 10848, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67552, "src": "2346:16:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "id": 10850, "nodeType": "VariableDeclarationStatement", "src": "2346:30:35"}, {"assignments": [10852], "declarations": [{"constant": false, "id": 10852, "mutability": "mutable", "name": "tradeType", "nodeType": "VariableDeclaration", "scope": 10878, "src": "2386:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, "typeName": {"id": 10851, "name": "TradeActionType", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67361, "src": "2386:15:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "visibility": "internal"}], "id": 10865, "initialValue": {"arguments": [{"arguments": [{"arguments": [{"arguments": [{"id": 10860, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10836, "src": "2451:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 10859, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "2444:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_bytes1_$", "typeString": "type(bytes1)"}, "typeName": {"id": 10858, "name": "bytes1", "nodeType": "ElementaryTypeName", "src": "2444:6:35", "typeDescriptions": {}}}, "id": 10861, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2444:13:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 10857, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "2438:5:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 10856, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "2438:5:35", "typeDescriptions": {}}}, "id": 10862, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2438:20:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 10855, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "2430:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 10854, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2430:7:35", "typeDescriptions": {}}}, "id": 10863, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2430:29:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10853, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67361, "src": "2414:15:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$67361_$", "typeString": "type(enum TradeActionType)"}}, "id": 10864, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2414:46:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "nodeType": "VariableDeclarationStatement", "src": "2386:74:35"}, {"expression": {"id": 10876, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 10866, "name": "netAssetCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10839, "src": "2472:12:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, null], "id": 10867, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "2471:21:35", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$__$", "typeString": "tuple(int256,)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10869, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10842, "src": "2519:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 10870, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10849, "src": "2530:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 10871, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10852, "src": "2538:9:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, {"expression": {"id": 10872, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "2549:5:35", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 10873, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "2549:15:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10874, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10836, "src": "2566:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 10868, "name": "_executeLendBorrowTrade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11600, "src": "2495:23:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CashGroupParameters_$67522_memory_ptr_$_t_struct$_MarketParameters_$67552_memory_ptr_$_t_enum$_TradeActionType_$67361_$_t_uint256_$_t_bytes32_$returns$_t_int256_$_t_int256_$", "typeString": "function (struct CashGroupParameters memory,struct MarketParameters memory,enum TradeActionType,uint256,bytes32) returns (int256,int256)"}}, "id": 10875, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2495:77:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "src": "2471:101:35", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10877, "nodeType": "ExpressionStatement", "src": "2471:101:35"}]}, "documentation": {"id": 10832, "nodeType": "StructuredDocumentation", "src": "1929:193:35", "text": "@notice Executes a trade for leveraged vaults (they can only lend or borrow).\n @param currencyId the currency id to lend or borrow\n @param trade the bytes32 encoded trade data"}, "functionSelector": "e50f349e", "id": 10879, "implemented": true, "kind": "function", "modifiers": [], "name": "executeVaultTrade", "nodeType": "FunctionDefinition", "parameters": {"id": 10837, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10834, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10879, "src": "2154:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10833, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "2154:6:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 10836, "mutability": "mutable", "name": "trade", "nodeType": "VariableDeclaration", "scope": 10879, "src": "2173:13:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 10835, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "2173:7:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "2153:34:35"}, "returnParameters": {"id": 10840, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10839, "mutability": "mutable", "name": "netAssetCash", "nodeType": "VariableDeclaration", "scope": 10879, "src": "2222:19:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10838, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2222:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "2221:21:35"}, "scope": 12193, "src": "2127:452:35", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 10993, "nodeType": "Block", "src": "3277:929:35", "statements": [{"assignments": [10897], "declarations": [{"constant": false, "id": 10897, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 10993, "src": "3287:36:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 10896, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67522, "src": "3287:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}], "id": 10902, "initialValue": {"arguments": [{"id": 10900, "name": "bitmapCurrencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10884, "src": "3359:16:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 10898, "name": "CashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 34938, "src": "3326:9:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_CashGroup_$34938_$", "typeString": "type(library CashGroup)"}}, "id": 10899, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "buildCashGroupStateful", "nodeType": "MemberAccess", "referencedDeclaration": 34937, "src": "3326:32:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$returns$_t_struct$_CashGroupParameters_$67522_memory_ptr_$", "typeString": "function (uint16) returns (struct CashGroupParameters memory)"}}, "id": 10901, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3326:50:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "nodeType": "VariableDeclarationStatement", "src": "3287:89:35"}, {"assignments": [10904], "declarations": [{"constant": false, "id": 10904, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 10993, "src": "3386:30:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 10903, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67552, "src": "3386:16:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "id": 10905, "nodeType": "VariableDeclarationStatement", "src": "3386:30:35"}, {"assignments": [10907], "declarations": [{"constant": false, "id": 10907, "mutability": "mutable", "name": "didIncurDebt", "nodeType": "VariableDeclaration", "scope": 10993, "src": "3426:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 10906, "name": "bool", "nodeType": "ElementaryTypeName", "src": "3426:4:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "id": 10908, "nodeType": "VariableDeclarationStatement", "src": "3426:17:35"}, {"assignments": [10910], "declarations": [{"constant": false, "id": 10910, "mutability": "mutable", "name": "c", "nodeType": "VariableDeclaration", "scope": 10993, "src": "3453:21:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext"}, "typeName": {"id": 10909, "name": "TradeContext", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 10831, "src": "3453:12:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_storage_ptr", "typeString": "struct TradingAction.TradeContext"}}, "visibility": "internal"}], "id": 10911, "nodeType": "VariableDeclarationStatement", "src": "3453:21:35"}, {"expression": {"id": 10917, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10912, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10910, "src": "3484:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 10914, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "blockTime", "nodeType": "MemberAccess", "referencedDeclaration": 10830, "src": "3484:11:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 10915, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "3498:5:35", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 10916, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "3498:15:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3484:29:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10918, "nodeType": "ExpressionStatement", "src": "3484:29:35"}, {"body": {"id": 10986, "nodeType": "Block", "src": "3568:589:35", "statements": [{"assignments": [10931], "declarations": [{"constant": false, "id": 10931, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 10986, "src": "3582:16:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10930, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3582:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10932, "nodeType": "VariableDeclarationStatement", "src": "3582:16:35"}, {"expression": {"id": 10949, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 10933, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10931, "src": "3613:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 10934, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10910, "src": "3623:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 10935, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cash", "nodeType": "MemberAccess", "referencedDeclaration": 10820, "src": "3623:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"expression": {"id": 10936, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10910, "src": "3631:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 10937, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "fCashAmount", "nodeType": "MemberAccess", "referencedDeclaration": 10822, "src": "3631:13:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 10938, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "3612:33:35", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10940, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10882, "src": "3679:7:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 10941, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10897, "src": "3704:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 10942, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10904, "src": "3731:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"baseExpression": {"id": 10943, "name": "trades", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10889, "src": "3755:6:35", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr", "typeString": "bytes32[] calldata"}}, "id": 10945, "indexExpression": {"id": 10944, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10920, "src": "3762:1:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3755:9:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"expression": {"id": 10946, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10910, "src": "3782:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 10947, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "blockTime", "nodeType": "MemberAccess", "referencedDeclaration": 10830, "src": "3782:11:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10939, "name": "_executeTrade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11253, "src": "3648:13:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_CashGroupParameters_$67522_memory_ptr_$_t_struct$_MarketParameters_$67552_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "function (address,struct CashGroupParameters memory,struct MarketParameters memory,bytes32,uint256) returns (uint256,int256,int256)"}}, "id": 10948, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3648:159:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "src": "3612:195:35", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10950, "nodeType": "ExpressionStatement", "src": "3612:195:35"}, {"expression": {"id": 10963, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10951, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10910, "src": "3822:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 10953, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "fCashAmount", "nodeType": "MemberAccess", "referencedDeclaration": 10822, "src": "3822:13:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10956, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10882, "src": "3890:7:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 10957, "name": "bitmapCurrencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10884, "src": "3915:16:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 10958, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10931, "src": "3949:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10959, "name": "nextSettleTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10886, "src": "3975:14:35", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, {"expression": {"id": 10960, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10910, "src": "4007:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 10961, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "fCashAmount", "nodeType": "MemberAccess", "referencedDeclaration": 10822, "src": "4007:13:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint40", "typeString": "uint40"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10954, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 40303, "src": "3838:19:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$40303_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 10955, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "addifCashAsset", "nodeType": "MemberAccess", "referencedDeclaration": 40000, "src": "3838:34:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint256,uint256,uint256,int256) returns (int256)"}}, "id": 10962, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3838:196:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "3822:212:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10964, "nodeType": "ExpressionStatement", "src": "3822:212:35"}, {"expression": {"id": 10973, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 10965, "name": "didIncurDebt", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10907, "src": "4049:12:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 10972, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10966, "name": "didIncurDebt", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10907, "src": "4064:12:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 10970, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 10967, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10910, "src": "4081:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 10968, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "fCashAmount", "nodeType": "MemberAccess", "referencedDeclaration": 10822, "src": "4081:13:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "30", "id": 10969, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4097:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "4081:17:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 10971, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "4080:19:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "4064:35:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "4049:50:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 10974, "nodeType": "ExpressionStatement", "src": "4049:50:35"}, {"expression": {"id": 10984, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10975, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10910, "src": "4113:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 10977, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "netCash", "nodeType": "MemberAccess", "referencedDeclaration": 10826, "src": "4113:9:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"id": 10981, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10910, "src": "4139:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 10982, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cash", "nodeType": "MemberAccess", "referencedDeclaration": 10820, "src": "4139:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 10978, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10910, "src": "4125:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 10979, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "netCash", "nodeType": "MemberAccess", "referencedDeclaration": 10826, "src": "4125:9:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10980, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 53257, "src": "4125:13:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10983, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4125:21:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "4113:33:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10985, "nodeType": "ExpressionStatement", "src": "4113:33:35"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10926, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10923, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10920, "src": "3544:1:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 10924, "name": "trades", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10889, "src": "3548:6:35", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr", "typeString": "bytes32[] calldata"}}, "id": 10925, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "3548:13:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3544:17:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 10987, "initializationExpression": {"assignments": [10920], "declarations": [{"constant": false, "id": 10920, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 10987, "src": "3529:9:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10919, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3529:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10922, "initialValue": {"hexValue": "30", "id": 10921, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3541:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "3529:13:35"}, "loopExpression": {"expression": {"id": 10928, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "3563:3:35", "subExpression": {"id": 10927, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10920, "src": "3563:1:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10929, "nodeType": "ExpressionStatement", "src": "3563:3:35"}, "nodeType": "ForStatement", "src": "3524:633:35"}, {"expression": {"components": [{"expression": {"id": 10988, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10910, "src": "4175:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 10989, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "netCash", "nodeType": "MemberAccess", "referencedDeclaration": 10826, "src": "4175:9:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 10990, "name": "didIncurDebt", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10907, "src": "4186:12:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 10991, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "4174:25:35", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_bool_$", "typeString": "tuple(int256,bool)"}}, "functionReturnParameters": 10895, "id": 10992, "nodeType": "Return", "src": "4167:32:35"}]}, "documentation": {"id": 10880, "nodeType": "StructuredDocumentation", "src": "2585:491:35", "text": "@notice Executes trades for a bitmapped portfolio, cannot be called directly\n @param account account to put fCash assets in\n @param bitmapCurrencyId currency id of the bitmap\n @param nextSettleTime used to calculate the relative positions in the bitmap\n @param trades tightly packed array of trades, schema is defined in global/Types.sol\n @return netCash generated by trading\n @return didIncurDebt if the bitmap had an fCash position go negative"}, "functionSelector": "3643f39b", "id": 10994, "implemented": true, "kind": "function", "modifiers": [], "name": "executeTradesBitmapBatch", "nodeType": "FunctionDefinition", "parameters": {"id": 10890, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10882, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 10994, "src": "3124:15:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 10881, "name": "address", "nodeType": "ElementaryTypeName", "src": "3124:7:35", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 10884, "mutability": "mutable", "name": "bitmapCurrencyId", "nodeType": "VariableDeclaration", "scope": 10994, "src": "3149:23:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10883, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "3149:6:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 10886, "mutability": "mutable", "name": "nextSettleTime", "nodeType": "VariableDeclaration", "scope": 10994, "src": "3182:21:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}, "typeName": {"id": 10885, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "3182:6:35", "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "visibility": "internal"}, {"constant": false, "id": 10889, "mutability": "mutable", "name": "trades", "nodeType": "VariableDeclaration", "scope": 10994, "src": "3213:25:35", "stateVariable": false, "storageLocation": "calldata", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr", "typeString": "bytes32[]"}, "typeName": {"baseType": {"id": 10887, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "3213:7:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 10888, "nodeType": "ArrayTypeName", "src": "3213:9:35", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr", "typeString": "bytes32[]"}}, "visibility": "internal"}], "src": "3114:130:35"}, "returnParameters": {"id": 10895, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10892, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 10994, "src": "3263:6:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10891, "name": "int256", "nodeType": "ElementaryTypeName", "src": "3263:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10894, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 10994, "src": "3271:4:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 10893, "name": "bool", "nodeType": "ElementaryTypeName", "src": "3271:4:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "3262:14:35"}, "scope": 12193, "src": "3081:1125:35", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 11125, "nodeType": "Block", "src": "4874:1701:35", "statements": [{"assignments": [11012], "declarations": [{"constant": false, "id": 11012, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 11125, "src": "4884:36:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 11011, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67522, "src": "4884:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}], "id": 11017, "initialValue": {"arguments": [{"id": 11015, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10999, "src": "4956:10:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 11013, "name": "CashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 34938, "src": "4923:9:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_CashGroup_$34938_$", "typeString": "type(library CashGroup)"}}, "id": 11014, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "buildCashGroupStateful", "nodeType": "MemberAccess", "referencedDeclaration": 34937, "src": "4923:32:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$returns$_t_struct$_CashGroupParameters_$67522_memory_ptr_$", "typeString": "function (uint16) returns (struct CashGroupParameters memory)"}}, "id": 11016, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4923:44:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "nodeType": "VariableDeclarationStatement", "src": "4884:83:35"}, {"assignments": [11019], "declarations": [{"constant": false, "id": 11019, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 11125, "src": "4977:30:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 11018, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67552, "src": "4977:16:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "id": 11020, "nodeType": "VariableDeclarationStatement", "src": "4977:30:35"}, {"assignments": [11022], "declarations": [{"constant": false, "id": 11022, "mutability": "mutable", "name": "c", "nodeType": "VariableDeclaration", "scope": 11125, "src": "5017:21:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext"}, "typeName": {"id": 11021, "name": "TradeContext", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 10831, "src": "5017:12:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_storage_ptr", "typeString": "struct TradingAction.TradeContext"}}, "visibility": "internal"}], "id": 11023, "nodeType": "VariableDeclarationStatement", "src": "5017:21:35"}, {"expression": {"id": 11029, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11024, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11022, "src": "5048:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 11026, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "blockTime", "nodeType": "MemberAccess", "referencedDeclaration": 10830, "src": "5048:11:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 11027, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "5062:5:35", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 11028, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "5062:15:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5048:29:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11030, "nodeType": "ExpressionStatement", "src": "5048:29:35"}, {"body": {"id": 11118, "nodeType": "Block", "src": "5132:1392:35", "statements": [{"assignments": [11043], "declarations": [{"constant": false, "id": 11043, "mutability": "mutable", "name": "tradeType", "nodeType": "VariableDeclaration", "scope": 11118, "src": "5146:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, "typeName": {"id": 11042, "name": "TradeActionType", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67361, "src": "5146:15:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "visibility": "internal"}], "id": 11058, "initialValue": {"arguments": [{"arguments": [{"arguments": [{"arguments": [{"baseExpression": {"id": 11051, "name": "trades", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11004, "src": "5211:6:35", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr", "typeString": "bytes32[] calldata"}}, "id": 11053, "indexExpression": {"id": 11052, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11032, "src": "5218:1:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "5211:9:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11050, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "5204:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_bytes1_$", "typeString": "type(bytes1)"}, "typeName": {"id": 11049, "name": "bytes1", "nodeType": "ElementaryTypeName", "src": "5204:6:35", "typeDescriptions": {}}}, "id": 11054, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5204:17:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 11048, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "5198:5:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 11047, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "5198:5:35", "typeDescriptions": {}}}, "id": 11055, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5198:24:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 11046, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "5190:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 11045, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5190:7:35", "typeDescriptions": {}}}, "id": 11056, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5190:33:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11044, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67361, "src": "5174:15:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$67361_$", "typeString": "type(enum TradeActionType)"}}, "id": 11057, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5174:50:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "nodeType": "VariableDeclarationStatement", "src": "5146:78:35"}, {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 11067, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, "id": 11062, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11059, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11043, "src": "5260:9:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 11060, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67361, "src": "5273:15:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$67361_$", "typeString": "type(enum TradeActionType)"}}, "id": 11061, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "AddLiquidity", "nodeType": "MemberAccess", "src": "5273:28:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "src": "5260:41:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, "id": 11066, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11063, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11043, "src": "5321:9:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 11064, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67361, "src": "5334:15:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$67361_$", "typeString": "type(enum TradeActionType)"}}, "id": 11065, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "RemoveLiquidity", "nodeType": "MemberAccess", "src": "5334:31:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "src": "5321:44:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "5260:105:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 11105, "nodeType": "Block", "src": "5975:491:35", "statements": [{"assignments": [11074], "declarations": [{"constant": false, "id": 11074, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 11105, "src": "5993:16:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11073, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5993:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11075, "nodeType": "VariableDeclarationStatement", "src": "5993:16:35"}, {"expression": {"id": 11092, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 11076, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11074, "src": "6028:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 11077, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11022, "src": "6038:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 11078, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cash", "nodeType": "MemberAccess", "referencedDeclaration": 10820, "src": "6038:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"expression": {"id": 11079, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11022, "src": "6046:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 11080, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "fCashAmount", "nodeType": "MemberAccess", "referencedDeclaration": 10822, "src": "6046:13:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 11081, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "6027:33:35", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11083, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10997, "src": "6098:7:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 11084, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11012, "src": "6127:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 11085, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11019, "src": "6158:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"baseExpression": {"id": 11086, "name": "trades", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11004, "src": "6186:6:35", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr", "typeString": "bytes32[] calldata"}}, "id": 11088, "indexExpression": {"id": 11087, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11032, "src": "6193:1:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6186:9:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"expression": {"id": 11089, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11022, "src": "6217:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 11090, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "blockTime", "nodeType": "MemberAccess", "referencedDeclaration": 10830, "src": "6217:11:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11082, "name": "_executeTrade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11253, "src": "6063:13:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_CashGroupParameters_$67522_memory_ptr_$_t_struct$_MarketParameters_$67552_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "function (address,struct CashGroupParameters memory,struct MarketParameters memory,bytes32,uint256) returns (uint256,int256,int256)"}}, "id": 11091, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6063:183:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "src": "6027:219:35", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11093, "nodeType": "ExpressionStatement", "src": "6027:219:35"}, {"expression": {"arguments": [{"id": 11097, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10999, "src": "6310:10:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 11098, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11074, "src": "6342:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 11099, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 66871, "src": "6372:9:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$66871_$", "typeString": "type(library Constants)"}}, "id": 11100, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "FCASH_ASSET_TYPE", "nodeType": "MemberAccess", "referencedDeclaration": 66795, "src": "6372:26:35", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, {"expression": {"id": 11101, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11022, "src": "6420:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 11102, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "fCashAmount", "nodeType": "MemberAccess", "referencedDeclaration": 10822, "src": "6420:13:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint8", "typeString": "uint8"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 11094, "name": "portfolioState", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11001, "src": "6265:14:35", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67476_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 11096, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "addAsset", "nodeType": "MemberAccess", "referencedDeclaration": 40625, "src": "6265:23:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioState_$67476_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$__$bound_to$_t_struct$_PortfolioState_$67476_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint256,uint256,uint256,int256) pure"}}, "id": 11103, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6265:186:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11104, "nodeType": "ExpressionStatement", "src": "6265:186:35"}]}, "id": 11106, "nodeType": "IfStatement", "src": "5239:1227:35", "trueBody": {"id": 11072, "nodeType": "Block", "src": "5380:589:35", "statements": [{"expression": {"arguments": [{"hexValue": "44697361626c6564", "id": 11069, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "5405:10:35", "typeDescriptions": {"typeIdentifier": "t_stringliteral_cc706b0562d4d0480fd55e80d6bbe5abb3f248e31fb8d00e56119227634d3ed3", "typeString": "literal_string \"Disabled\""}, "value": "Disabled"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_stringliteral_cc706b0562d4d0480fd55e80d6bbe5abb3f248e31fb8d00e56119227634d3ed3", "typeString": "literal_string \"Disabled\""}], "id": 11068, "name": "revert", "nodeType": "Identifier", "overloadedDeclarations": [-19, -19], "referencedDeclaration": -19, "src": "5398:6:35", "typeDescriptions": {"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$", "typeString": "function (string memory) pure"}}, "id": 11070, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5398:18:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11071, "nodeType": "ExpressionStatement", "src": "5398:18:35"}]}}, {"expression": {"id": 11116, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11107, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11022, "src": "6480:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 11109, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "netCash", "nodeType": "MemberAccess", "referencedDeclaration": 10826, "src": "6480:9:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"id": 11113, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11022, "src": "6506:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 11114, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cash", "nodeType": "MemberAccess", "referencedDeclaration": 10820, "src": "6506:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 11110, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11022, "src": "6492:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 11111, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "netCash", "nodeType": "MemberAccess", "referencedDeclaration": 10826, "src": "6492:9:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11112, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 53257, "src": "6492:13:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 11115, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6492:21:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "6480:33:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11117, "nodeType": "ExpressionStatement", "src": "6480:33:35"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11038, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11035, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11032, "src": "5108:1:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 11036, "name": "trades", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11004, "src": "5112:6:35", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr", "typeString": "bytes32[] calldata"}}, "id": 11037, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "5112:13:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5108:17:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11119, "initializationExpression": {"assignments": [11032], "declarations": [{"constant": false, "id": 11032, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 11119, "src": "5093:9:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11031, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5093:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11034, "initialValue": {"hexValue": "30", "id": 11033, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5105:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "5093:13:35"}, "loopExpression": {"expression": {"id": 11040, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "5127:3:35", "subExpression": {"id": 11039, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11032, "src": "5127:1:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11041, "nodeType": "ExpressionStatement", "src": "5127:3:35"}, "nodeType": "ForStatement", "src": "5088:1436:35"}, {"expression": {"components": [{"id": 11120, "name": "portfolioState", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11001, "src": "6542:14:35", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67476_memory_ptr", "typeString": "struct PortfolioState memory"}}, {"expression": {"id": 11121, "name": "c", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11022, "src": "6558:1:35", "typeDescriptions": {"typeIdentifier": "t_struct$_TradeContext_$10831_memory_ptr", "typeString": "struct TradingAction.TradeContext memory"}}, "id": 11122, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "netCash", "nodeType": "MemberAccess", "referencedDeclaration": 10826, "src": "6558:9:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 11123, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "6541:27:35", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_struct$_PortfolioState_$67476_memory_ptr_$_t_int256_$", "typeString": "tuple(struct PortfolioState memory,int256)"}}, "functionReturnParameters": 11010, "id": 11124, "nodeType": "Return", "src": "6534:34:35"}]}, "documentation": {"id": 10995, "nodeType": "StructuredDocumentation", "src": "4212:436:35", "text": "@notice Executes trades for a bitmapped portfolio, cannot be called directly\n @param account account to put fCash assets in\n @param currencyId currency id to trade\n @param portfolioState used to update the positions in the portfolio\n @param trades tightly packed array of trades, schema is defined in global/Types.sol\n @return resulting portfolio state\n @return netCash generated by trading"}, "functionSelector": "b58f83ed", "id": 11126, "implemented": true, "kind": "function", "modifiers": [], "name": "executeTradesArrayBatch", "nodeType": "FunctionDefinition", "parameters": {"id": 11005, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10997, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 11126, "src": "4695:15:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 10996, "name": "address", "nodeType": "ElementaryTypeName", "src": "4695:7:35", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 10999, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 11126, "src": "4720:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10998, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "4720:6:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 11001, "mutability": "mutable", "name": "portfolioState", "nodeType": "VariableDeclaration", "scope": 11126, "src": "4747:36:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67476_memory_ptr", "typeString": "struct PortfolioState"}, "typeName": {"id": 11000, "name": "PortfolioState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67476, "src": "4747:14:35", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67476_storage_ptr", "typeString": "struct PortfolioState"}}, "visibility": "internal"}, {"constant": false, "id": 11004, "mutability": "mutable", "name": "trades", "nodeType": "VariableDeclaration", "scope": 11126, "src": "4793:25:35", "stateVariable": false, "storageLocation": "calldata", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr", "typeString": "bytes32[]"}, "typeName": {"baseType": {"id": 11002, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "4793:7:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 11003, "nodeType": "ArrayTypeName", "src": "4793:9:35", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr", "typeString": "bytes32[]"}}, "visibility": "internal"}], "src": "4685:139:35"}, "returnParameters": {"id": 11010, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11007, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 11126, "src": "4843:21:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67476_memory_ptr", "typeString": "struct PortfolioState"}, "typeName": {"id": 11006, "name": "PortfolioState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67476, "src": "4843:14:35", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67476_storage_ptr", "typeString": "struct PortfolioState"}}, "visibility": "internal"}, {"constant": false, "id": 11009, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 11126, "src": "4866:6:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11008, "name": "int256", "nodeType": "ElementaryTypeName", "src": "4866:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "4842:31:35"}, "scope": 12193, "src": "4653:1922:35", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 11252, "nodeType": "Block", "src": "7456:1384:35", "statements": [{"assignments": [11147], "declarations": [{"constant": false, "id": 11147, "mutability": "mutable", "name": "tradeType", "nodeType": "VariableDeclaration", "scope": 11252, "src": "7466:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, "typeName": {"id": 11146, "name": "TradeActionType", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67361, "src": "7466:15:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "visibility": "internal"}], "id": 11160, "initialValue": {"arguments": [{"arguments": [{"arguments": [{"arguments": [{"id": 11155, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11135, "src": "7531:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11154, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "7524:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_bytes1_$", "typeString": "type(bytes1)"}, "typeName": {"id": 11153, "name": "bytes1", "nodeType": "ElementaryTypeName", "src": "7524:6:35", "typeDescriptions": {}}}, "id": 11156, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7524:13:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 11152, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "7518:5:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 11151, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "7518:5:35", "typeDescriptions": {}}}, "id": 11157, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7518:20:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 11150, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "7510:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 11149, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7510:7:35", "typeDescriptions": {}}}, "id": 11158, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7510:29:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11148, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67361, "src": "7494:15:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$67361_$", "typeString": "type(enum TradeActionType)"}}, "id": 11159, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7494:46:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "nodeType": "VariableDeclarationStatement", "src": "7466:74:35"}, {"condition": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, "id": 11164, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11161, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11147, "src": "7554:9:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 11162, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67361, "src": "7567:15:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$67361_$", "typeString": "type(enum TradeActionType)"}}, "id": 11163, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "PurchaseNTokenResidual", "nodeType": "MemberAccess", "src": "7567:38:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "src": "7554:51:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, "id": 11181, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11178, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11147, "src": "7819:9:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 11179, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67361, "src": "7832:15:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$67361_$", "typeString": "type(enum TradeActionType)"}}, "id": 11180, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "SettleCashDebt", "nodeType": "MemberAccess", "src": "7832:30:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "src": "7819:43:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 11203, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, "id": 11198, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11195, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11147, "src": "7990:9:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 11196, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67361, "src": "8003:15:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$67361_$", "typeString": "type(enum TradeActionType)"}}, "id": 11197, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "Lend", "nodeType": "MemberAccess", "src": "8003:20:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "src": "7990:33:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, "id": 11202, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11199, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11147, "src": "8027:9:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 11200, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67361, "src": "8040:15:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$67361_$", "typeString": "type(enum TradeActionType)"}}, "id": 11201, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "Borrow", "nodeType": "MemberAccess", "src": "8040:22:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "src": "8027:35:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "7990:72:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 11248, "nodeType": "Block", "src": "8781:53:35", "statements": [{"expression": {"arguments": [{"hexValue": "496e76616c69642074726164652074797065", "id": 11245, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "8802:20:35", "typeDescriptions": {"typeIdentifier": "t_stringliteral_8c2081c7a5c41bdc898663534a06a136ac00f9d6c81c7a4791b3330d35f3a799", "typeString": "literal_string \"Invalid trade type\""}, "value": "Invalid trade type"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_stringliteral_8c2081c7a5c41bdc898663534a06a136ac00f9d6c81c7a4791b3330d35f3a799", "typeString": "literal_string \"Invalid trade type\""}], "id": 11244, "name": "revert", "nodeType": "Identifier", "overloadedDeclarations": [-19, -19], "referencedDeclaration": -19, "src": "8795:6:35", "typeDescriptions": {"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$", "typeString": "function (string memory) pure"}}, "id": 11246, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8795:28:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11247, "nodeType": "ExpressionStatement", "src": "8795:28:35"}]}, "id": 11249, "nodeType": "IfStatement", "src": "7986:848:35", "trueBody": {"id": 11243, "nodeType": "Block", "src": "8064:711:35", "statements": [{"expression": {"id": 11214, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 11204, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11142, "src": "8079:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 11205, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11144, "src": "8091:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 11206, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "8078:25:35", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11208, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11131, "src": "8147:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 11209, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11133, "src": "8174:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 11210, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11147, "src": "8198:9:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, {"id": 11211, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11137, "src": "8225:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11212, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11135, "src": "8252:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11207, "name": "_executeLendBorrowTrade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11600, "src": "8106:23:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_CashGroupParameters_$67522_memory_ptr_$_t_struct$_MarketParameters_$67552_memory_ptr_$_t_enum$_TradeActionType_$67361_$_t_uint256_$_t_bytes32_$returns$_t_int256_$_t_int256_$", "typeString": "function (struct CashGroupParameters memory,struct MarketParameters memory,enum TradeActionType,uint256,bytes32) returns (int256,int256)"}}, "id": 11213, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8106:165:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "src": "8078:193:35", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11215, "nodeType": "ExpressionStatement", "src": "8078:193:35"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 11219, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11217, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11142, "src": "8293:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 11218, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "8307:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "8293:15:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "5472616465206661696c65642c206c6971756964697479", "id": 11220, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "8310:25:35", "typeDescriptions": {"typeIdentifier": "t_stringliteral_5c6237db371d8fd66064bbc81499f19b42663dfe04c0da45fccffe96b03144b1", "typeString": "literal_string \"Trade failed, liquidity\""}, "value": "Trade failed, liquidity"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_5c6237db371d8fd66064bbc81499f19b42663dfe04c0da45fccffe96b03144b1", "typeString": "literal_string \"Trade failed, liquidity\""}], "id": 11216, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "8285:7:35", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 11221, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8285:51:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11222, "nodeType": "ExpressionStatement", "src": "8285:51:35"}, {"expression": {"id": 11226, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11223, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11140, "src": "8528:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 11224, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11133, "src": "8539:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11225, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67539, "src": "8539:15:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8528:26:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11227, "nodeType": "ExpressionStatement", "src": "8528:26:35"}, {"eventCall": {"arguments": [{"id": 11229, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11129, "src": "8606:7:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"arguments": [{"expression": {"id": 11232, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11131, "src": "8638:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11233, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67515, "src": "8638:20:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 11231, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "8631:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint16_$", "typeString": "type(uint16)"}, "typeName": {"id": 11230, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "8631:6:35", "typeDescriptions": {}}}, "id": 11234, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8631:28:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"arguments": [{"id": 11237, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11140, "src": "8684:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11236, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "8677:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}, "typeName": {"id": 11235, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "8677:6:35", "typeDescriptions": {}}}, "id": 11238, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8677:16:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, {"id": 11239, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11142, "src": "8711:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 11240, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11144, "src": "8739:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint40", "typeString": "uint40"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 11228, "name": "LendBorrowTrade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10780, "src": "8573:15:35", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint16_$_t_uint40_$_t_int256_$_t_int256_$returns$__$", "typeString": "function (address,uint16,uint40,int256,int256)"}}, "id": 11241, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8573:191:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11242, "nodeType": "EmitStatement", "src": "8568:196:35"}]}}, "id": 11250, "nodeType": "IfStatement", "src": "7815:1019:35", "trueBody": {"id": 11194, "nodeType": "Block", "src": "7864:116:35", "statements": [{"expression": {"id": 11192, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 11182, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11140, "src": "7879:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11183, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11142, "src": "7889:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 11184, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11144, "src": "7901:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 11185, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "7878:35:35", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11187, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11129, "src": "7932:7:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 11188, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11131, "src": "7941:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 11189, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11137, "src": "7952:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11190, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11135, "src": "7963:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11186, "name": "_settleCashDebt", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11785, "src": "7916:15:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_CashGroupParameters_$67522_memory_ptr_$_t_uint256_$_t_bytes32_$returns$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "function (address,struct CashGroupParameters memory,uint256,bytes32) returns (uint256,int256,int256)"}}, "id": 11191, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7916:53:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "src": "7878:91:35", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11193, "nodeType": "ExpressionStatement", "src": "7878:91:35"}]}}, "id": 11251, "nodeType": "IfStatement", "src": "7550:1284:35", "trueBody": {"id": 11177, "nodeType": "Block", "src": "7607:202:35", "statements": [{"expression": {"id": 11175, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 11165, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11140, "src": "7622:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11166, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11142, "src": "7632:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 11167, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11144, "src": "7644:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 11168, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "7621:35:35", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11170, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11129, "src": "7700:7:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 11171, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11131, "src": "7725:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 11172, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11137, "src": "7752:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11173, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11135, "src": "7779:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11169, "name": "_purchaseNTokenResidual", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12030, "src": "7659:23:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_CashGroupParameters_$67522_memory_ptr_$_t_uint256_$_t_bytes32_$returns$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "function (address,struct CashGroupParameters memory,uint256,bytes32) returns (uint256,int256,int256)"}}, "id": 11174, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7659:139:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "src": "7621:177:35", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11176, "nodeType": "ExpressionStatement", "src": "7621:177:35"}]}}]}, "documentation": {"id": 11127, "nodeType": "StructuredDocumentation", "src": "6581:540:35", "text": "@notice Executes a non-liquidity token trade\n @param account the initiator of the trade\n @param cashGroup parameters for the trade\n @param market market memory location to use\n @param trade bytes32 encoding of the particular trade\n @param blockTime the current block time\n @return maturity of the asset that was traded\n @return cashAmount - a positive or negative cash amount accrued to the account\n @return fCashAmount - a positive or negative fCash amount accrued to the account"}, "id": 11253, "implemented": true, "kind": "function", "modifiers": [], "name": "_executeTrade", "nodeType": "FunctionDefinition", "parameters": {"id": 11138, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11129, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 11253, "src": "7158:15:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 11128, "name": "address", "nodeType": "ElementaryTypeName", "src": "7158:7:35", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 11131, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 11253, "src": "7183:36:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 11130, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67522, "src": "7183:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 11133, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 11253, "src": "7229:30:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 11132, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67552, "src": "7229:16:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 11135, "mutability": "mutable", "name": "trade", "nodeType": "VariableDeclaration", "scope": 11253, "src": "7269:13:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 11134, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "7269:7:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 11137, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 11253, "src": "7292:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11136, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7292:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "7148:167:35"}, "returnParameters": {"id": 11145, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11140, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 11253, "src": "7362:16:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11139, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7362:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 11142, "mutability": "mutable", "name": "cashAmount", "nodeType": "VariableDeclaration", "scope": 11253, "src": "7392:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11141, "name": "int256", "nodeType": "ElementaryTypeName", "src": "7392:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 11144, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 11253, "src": "7423:18:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11143, "name": "int256", "nodeType": "ElementaryTypeName", "src": "7423:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "7348:103:35"}, "scope": 12193, "src": "7126:1714:35", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 11473, "nodeType": "Block", "src": "9827:2494:35", "statements": [{"assignments": [11274], "declarations": [{"constant": false, "id": 11274, "mutability": "mutable", "name": "marketIndex", "nodeType": "VariableDeclaration", "scope": 11473, "src": "9837:19:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11273, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9837:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11284, "initialValue": {"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "id": 11281, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11279, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11264, "src": "9872:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "BinaryOperation", "operator": "<<", "rightExpression": {"hexValue": "38", "id": 11280, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "9881:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_8_by_1", "typeString": "int_const 8"}, "value": "8"}, "src": "9872:10:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11278, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "9865:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_bytes1_$", "typeString": "type(bytes1)"}, "typeName": {"id": 11277, "name": "bytes1", "nodeType": "ElementaryTypeName", "src": "9865:6:35", "typeDescriptions": {}}}, "id": 11282, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9865:18:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 11276, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "9859:5:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 11275, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "9859:5:35", "typeDescriptions": {}}}, "id": 11283, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9859:25:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "nodeType": "VariableDeclarationStatement", "src": "9837:47:35"}, {"expression": {"arguments": [{"id": 11288, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11260, "src": "9964:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 11289, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11274, "src": "9972:11:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"hexValue": "74727565", "id": 11290, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "9985:4:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "true"}, {"expression": {"id": 11291, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "9991:5:35", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 11292, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "9991:15:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11285, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11258, "src": "9943:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11287, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadMarket", "nodeType": "MemberAccess", "referencedDeclaration": 34182, "src": "9943:20:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$67522_memory_ptr_$_t_struct$_MarketParameters_$67552_memory_ptr_$_t_uint256_$_t_bool_$_t_uint256_$returns$__$bound_to$_t_struct$_CashGroupParameters_$67522_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory,struct MarketParameters memory,uint256,bool,uint256) view"}}, "id": 11293, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9943:64:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11294, "nodeType": "ExpressionStatement", "src": "9943:64:35"}, {"assignments": [11296], "declarations": [{"constant": false, "id": 11296, "mutability": "mutable", "name": "cashAmount", "nodeType": "VariableDeclaration", "scope": 11473, "src": "10018:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11295, "name": "int256", "nodeType": "ElementaryTypeName", "src": "10018:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 11297, "nodeType": "VariableDeclarationStatement", "src": "10018:17:35"}, {"assignments": [11299], "declarations": [{"constant": false, "id": 11299, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 11473, "src": "10045:18:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11298, "name": "int256", "nodeType": "ElementaryTypeName", "src": "10045:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 11300, "nodeType": "VariableDeclarationStatement", "src": "10045:18:35"}, {"assignments": [11302], "declarations": [{"constant": false, "id": 11302, "mutability": "mutable", "name": "tokens", "nodeType": "VariableDeclaration", "scope": 11473, "src": "10073:13:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11301, "name": "int256", "nodeType": "ElementaryTypeName", "src": "10073:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 11303, "nodeType": "VariableDeclarationStatement", "src": "10073:13:35"}, {"condition": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, "id": 11307, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11304, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11262, "src": "10100:9:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 11305, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67361, "src": "10113:15:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$67361_$", "typeString": "type(enum TradeActionType)"}}, "id": 11306, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "AddLiquidity", "nodeType": "MemberAccess", "src": "10113:28:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "src": "10100:41:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 11385, "nodeType": "Block", "src": "10921:239:35", "statements": [{"expression": {"id": 11368, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11351, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11302, "src": "10935:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11366, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11359, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 11356, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11264, "src": "10960:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11355, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "10952:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 11354, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "10952:7:35", "typeDescriptions": {}}}, "id": 11357, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10952:14:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">>", "rightExpression": {"hexValue": "313532", "id": 11358, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10970:3:35", "typeDescriptions": {"typeIdentifier": "t_rational_152_by_1", "typeString": "int_const 152"}, "value": "152"}, "src": "10952:21:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 11360, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "10951:23:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "&", "rightExpression": {"expression": {"arguments": [{"id": 11363, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "10982:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint88_$", "typeString": "type(uint88)"}, "typeName": {"id": 11362, "name": "uint88", "nodeType": "ElementaryTypeName", "src": "10982:6:35", "typeDescriptions": {}}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_type$_t_uint88_$", "typeString": "type(uint88)"}], "id": 11361, "name": "type", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -27, "src": "10977:4:35", "typeDescriptions": {"typeIdentifier": "t_function_metatype_pure$__$returns$__$", "typeString": "function () pure"}}, "id": 11364, "isConstant": false, "isLValue": false, "isPure": true, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10977:12:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_magic_meta_type_t_uint88", "typeString": "type(uint88)"}}, "id": 11365, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "max", "nodeType": "MemberAccess", "src": "10977:16:35", "typeDescriptions": {"typeIdentifier": "t_uint88", "typeString": "uint88"}}, "src": "10951:42:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11353, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "10944:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_int256_$", "typeString": "type(int256)"}, "typeName": {"id": 11352, "name": "int256", "nodeType": "ElementaryTypeName", "src": "10944:6:35", "typeDescriptions": {}}}, "id": 11367, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10944:50:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "10935:59:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11369, "nodeType": "ExpressionStatement", "src": "10935:59:35"}, {"expression": {"id": 11377, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 11370, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11296, "src": "11009:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 11371, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11299, "src": "11021:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 11372, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "11008:25:35", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11375, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11302, "src": "11059:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 11373, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11260, "src": "11036:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11374, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "removeLiquidity", "nodeType": "MemberAccess", "referencedDeclaration": 35789, "src": "11036:22:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$67552_memory_ptr_$_t_int256_$returns$_t_int256_$_t_int256_$bound_to$_t_struct$_MarketParameters_$67552_memory_ptr_$", "typeString": "function (struct MarketParameters memory,int256) returns (int256,int256)"}}, "id": 11376, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11036:30:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "src": "11008:58:35", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11378, "nodeType": "ExpressionStatement", "src": "11008:58:35"}, {"expression": {"id": 11383, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11379, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11302, "src": "11080:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 11380, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11302, "src": "11089:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11381, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 53271, "src": "11089:10:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 11382, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11089:12:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "11080:21:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11384, "nodeType": "ExpressionStatement", "src": "11080:21:35"}]}, "id": 11386, "nodeType": "IfStatement", "src": "10096:1064:35", "trueBody": {"id": 11350, "nodeType": "Block", "src": "10143:772:35", "statements": [{"expression": {"id": 11325, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11308, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11296, "src": "10157:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11323, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11316, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 11313, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11264, "src": "10186:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11312, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "10178:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 11311, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "10178:7:35", "typeDescriptions": {}}}, "id": 11314, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10178:14:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">>", "rightExpression": {"hexValue": "313532", "id": 11315, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10196:3:35", "typeDescriptions": {"typeIdentifier": "t_rational_152_by_1", "typeString": "int_const 152"}, "value": "152"}, "src": "10178:21:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 11317, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "10177:23:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "&", "rightExpression": {"expression": {"arguments": [{"id": 11320, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "10208:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint88_$", "typeString": "type(uint88)"}, "typeName": {"id": 11319, "name": "uint88", "nodeType": "ElementaryTypeName", "src": "10208:6:35", "typeDescriptions": {}}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_type$_t_uint88_$", "typeString": "type(uint88)"}], "id": 11318, "name": "type", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -27, "src": "10203:4:35", "typeDescriptions": {"typeIdentifier": "t_function_metatype_pure$__$returns$__$", "typeString": "function () pure"}}, "id": 11321, "isConstant": false, "isLValue": false, "isPure": true, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10203:12:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_magic_meta_type_t_uint88", "typeString": "type(uint88)"}}, "id": 11322, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "max", "nodeType": "MemberAccess", "src": "10203:16:35", "typeDescriptions": {"typeIdentifier": "t_uint88", "typeString": "uint88"}}, "src": "10177:42:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11310, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "10170:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_int256_$", "typeString": "type(int256)"}, "typeName": {"id": 11309, "name": "int256", "nodeType": "ElementaryTypeName", "src": "10170:6:35", "typeDescriptions": {}}}, "id": 11324, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10170:50:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "10157:63:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11326, "nodeType": "ExpressionStatement", "src": "10157:63:35"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 11329, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11327, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11296, "src": "10644:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 11328, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10658:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "10644:15:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11334, "nodeType": "IfStatement", "src": "10640:41:35", "trueBody": {"expression": {"id": 11332, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11330, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11296, "src": "10661:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 11331, "name": "netCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11268, "src": "10674:7:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "10661:20:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11333, "nodeType": "ExpressionStatement", "src": "10661:20:35"}}, {"expression": {"id": 11342, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 11335, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11302, "src": "10761:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 11336, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11299, "src": "10769:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 11337, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "10760:21:35", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11340, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11296, "src": "10804:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 11338, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11260, "src": "10784:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11339, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "addLiquidity", "nodeType": "MemberAccess", "referencedDeclaration": 35704, "src": "10784:19:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$67552_memory_ptr_$_t_int256_$returns$_t_int256_$_t_int256_$bound_to$_t_struct$_MarketParameters_$67552_memory_ptr_$", "typeString": "function (struct MarketParameters memory,int256) returns (int256,int256)"}}, "id": 11341, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10784:31:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "src": "10760:55:35", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11343, "nodeType": "ExpressionStatement", "src": "10760:55:35"}, {"expression": {"id": 11348, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11344, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11296, "src": "10829:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 11345, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11296, "src": "10842:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11346, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 53271, "src": "10842:14:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 11347, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10842:16:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "10829:29:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11349, "nodeType": "ExpressionStatement", "src": "10829:29:35"}]}}, {"id": 11431, "nodeType": "Block", "src": "11170:430:35", "statements": [{"assignments": [11388], "declarations": [{"constant": false, "id": 11388, "mutability": "mutable", "name": "minImpliedRate", "nodeType": "VariableDeclaration", "scope": 11431, "src": "11184:22:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11387, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "11184:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11398, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11396, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 11393, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11264, "src": "11224:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11392, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "11216:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 11391, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "11216:7:35", "typeDescriptions": {}}}, "id": 11394, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11216:14:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">>", "rightExpression": {"hexValue": "313230", "id": 11395, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "11234:3:35", "typeDescriptions": {"typeIdentifier": "t_rational_120_by_1", "typeString": "int_const 120"}, "value": "120"}, "src": "11216:21:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11390, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "11209:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint32_$", "typeString": "type(uint32)"}, "typeName": {"id": 11389, "name": "uint32", "nodeType": "ElementaryTypeName", "src": "11209:6:35", "typeDescriptions": {}}}, "id": 11397, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11209:29:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint32", "typeString": "uint32"}}, "nodeType": "VariableDeclarationStatement", "src": "11184:54:35"}, {"assignments": [11400], "declarations": [{"constant": false, "id": 11400, "mutability": "mutable", "name": "maxImpliedRate", "nodeType": "VariableDeclaration", "scope": 11431, "src": "11252:22:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11399, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "11252:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11410, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11408, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 11405, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11264, "src": "11292:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11404, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "11284:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 11403, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "11284:7:35", "typeDescriptions": {}}}, "id": 11406, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11284:14:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">>", "rightExpression": {"hexValue": "3838", "id": 11407, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "11302:2:35", "typeDescriptions": {"typeIdentifier": "t_rational_88_by_1", "typeString": "int_const 88"}, "value": "88"}, "src": "11284:20:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11402, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "11277:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint32_$", "typeString": "type(uint32)"}, "typeName": {"id": 11401, "name": "uint32", "nodeType": "ElementaryTypeName", "src": "11277:6:35", "typeDescriptions": {}}}, "id": 11409, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11277:28:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint32", "typeString": "uint32"}}, "nodeType": "VariableDeclarationStatement", "src": "11252:53:35"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11415, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 11412, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11260, "src": "11392:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11413, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 67547, "src": "11392:22:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"id": 11414, "name": "minImpliedRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11388, "src": "11418:14:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "11392:40:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "5472616465206661696c65642c20736c697070616765", "id": 11416, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "11434:24:35", "typeDescriptions": {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}, "value": "Trade failed, slippage"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}], "id": 11411, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "11384:7:35", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 11417, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11384:75:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11418, "nodeType": "ExpressionStatement", "src": "11384:75:35"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11421, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11419, "name": "maxImpliedRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11400, "src": "11477:14:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 11420, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "11495:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "11477:19:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11430, "nodeType": "IfStatement", "src": "11473:116:35", "trueBody": {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11426, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 11423, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11260, "src": "11522:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11424, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 67547, "src": "11522:22:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"id": 11425, "name": "maxImpliedRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11400, "src": "11548:14:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "11522:40:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "5472616465206661696c65642c20736c697070616765", "id": 11427, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "11564:24:35", "typeDescriptions": {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}, "value": "Trade failed, slippage"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}], "id": 11422, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "11514:7:35", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 11428, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11514:75:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11429, "nodeType": "ExpressionStatement", "src": "11514:75:35"}}]}, {"expression": {"arguments": [{"expression": {"id": 11435, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11258, "src": "11706:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11436, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67515, "src": "11706:20:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 11437, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11260, "src": "11740:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11438, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67539, "src": "11740:15:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 11439, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 66871, "src": "11769:9:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$66871_$", "typeString": "type(library Constants)"}}, "id": 11440, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "FCASH_ASSET_TYPE", "nodeType": "MemberAccess", "referencedDeclaration": 66795, "src": "11769:26:35", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, {"id": 11441, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11299, "src": "11809:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint8", "typeString": "uint8"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 11432, "name": "portfolioState", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11266, "src": "11669:14:35", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67476_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 11434, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "addAsset", "nodeType": "MemberAccess", "referencedDeclaration": 40625, "src": "11669:23:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioState_$67476_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$__$bound_to$_t_struct$_PortfolioState_$67476_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint256,uint256,uint256,int256) pure"}}, "id": 11442, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11669:161:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11443, "nodeType": "ExpressionStatement", "src": "11669:161:35"}, {"expression": {"arguments": [{"expression": {"id": 11447, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11258, "src": "11919:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11448, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67515, "src": "11919:20:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 11449, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11260, "src": "11953:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11450, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67539, "src": "11953:15:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11453, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11451, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11274, "src": "11982:11:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"hexValue": "31", "id": 11452, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "11996:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "11982:15:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11454, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11302, "src": "12011:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 11444, "name": "portfolioState", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11266, "src": "11882:14:35", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67476_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 11446, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "addAsset", "nodeType": "MemberAccess", "referencedDeclaration": 40625, "src": "11882:23:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioState_$67476_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$__$bound_to$_t_struct$_PortfolioState_$67476_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint256,uint256,uint256,int256) pure"}}, "id": 11455, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11882:145:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11456, "nodeType": "ExpressionStatement", "src": "11882:145:35"}, {"eventCall": {"arguments": [{"id": 11458, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11256, "src": "12075:7:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"id": 11459, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11258, "src": "12096:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11460, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67515, "src": "12096:20:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"arguments": [{"expression": {"id": 11463, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11260, "src": "12191:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11464, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67539, "src": "12191:15:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11462, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "12184:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}, "typeName": {"id": 11461, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "12184:6:35", "typeDescriptions": {}}}, "id": 11465, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12184:23:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, {"id": 11466, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11296, "src": "12221:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 11467, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11299, "src": "12245:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 11468, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11302, "src": "12270:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint40", "typeString": "uint40"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 11457, "name": "AddRemoveLiquidity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10794, "src": "12043:18:35", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint16_$_t_uint40_$_t_int256_$_t_int256_$_t_int256_$returns$__$", "typeString": "function (address,uint16,uint40,int256,int256,int256)"}}, "id": 11469, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12043:243:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11470, "nodeType": "EmitStatement", "src": "12038:248:35"}, {"expression": {"id": 11471, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11296, "src": "12304:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 11272, "id": 11472, "nodeType": "Return", "src": "12297:17:35"}]}, "documentation": {"id": 11254, "nodeType": "StructuredDocumentation", "src": "9439:81:35", "text": "@return cashAmount: a positive or negative cash amount accrued to the account"}, "id": 11474, "implemented": true, "kind": "function", "modifiers": [], "name": "_executeLiquidityTrade", "nodeType": "FunctionDefinition", "parameters": {"id": 11269, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11256, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 11474, "src": "9566:15:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 11255, "name": "address", "nodeType": "ElementaryTypeName", "src": "9566:7:35", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 11258, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 11474, "src": "9591:36:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 11257, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67522, "src": "9591:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 11260, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 11474, "src": "9637:30:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 11259, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67552, "src": "9637:16:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 11262, "mutability": "mutable", "name": "tradeType", "nodeType": "VariableDeclaration", "scope": 11474, "src": "9677:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, "typeName": {"id": 11261, "name": "TradeActionType", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67361, "src": "9677:15:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "visibility": "internal"}, {"constant": false, "id": 11264, "mutability": "mutable", "name": "trade", "nodeType": "VariableDeclaration", "scope": 11474, "src": "9712:13:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 11263, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "9712:7:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 11266, "mutability": "mutable", "name": "portfolioState", "nodeType": "VariableDeclaration", "scope": 11474, "src": "9735:36:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67476_memory_ptr", "typeString": "struct PortfolioState"}, "typeName": {"id": 11265, "name": "PortfolioState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67476, "src": "9735:14:35", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$67476_storage_ptr", "typeString": "struct PortfolioState"}}, "visibility": "internal"}, {"constant": false, "id": 11268, "mutability": "mutable", "name": "netCash", "nodeType": "VariableDeclaration", "scope": 11474, "src": "9781:14:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11267, "name": "int256", "nodeType": "ElementaryTypeName", "src": "9781:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "9556:245:35"}, "returnParameters": {"id": 11272, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11271, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 11474, "src": "9819:6:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11270, "name": "int256", "nodeType": "ElementaryTypeName", "src": "9819:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "9818:8:35"}, "scope": 12193, "src": "9525:2796:35", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 11599, "nodeType": "Block", "src": "13149:1049:35", "statements": [{"assignments": [11493], "declarations": [{"constant": false, "id": 11493, "mutability": "mutable", "name": "marketIndex", "nodeType": "VariableDeclaration", "scope": 11599, "src": "13159:19:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11492, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13159:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11506, "initialValue": {"arguments": [{"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "id": 11502, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11500, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11485, "src": "13202:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "BinaryOperation", "operator": "<<", "rightExpression": {"hexValue": "38", "id": 11501, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13211:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_8_by_1", "typeString": "int_const 8"}, "value": "8"}, "src": "13202:10:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11499, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13195:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_bytes1_$", "typeString": "type(bytes1)"}, "typeName": {"id": 11498, "name": "bytes1", "nodeType": "ElementaryTypeName", "src": "13195:6:35", "typeDescriptions": {}}}, "id": 11503, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13195:18:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 11497, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13189:5:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 11496, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "13189:5:35", "typeDescriptions": {}}}, "id": 11504, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13189:25:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 11495, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13181:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 11494, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13181:7:35", "typeDescriptions": {}}}, "id": 11505, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13181:34:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "13159:56:35"}, {"expression": {"arguments": [{"id": 11510, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11479, "src": "13297:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 11511, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11493, "src": "13305:11:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"hexValue": "66616c7365", "id": 11512, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "13318:5:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}, {"id": 11513, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11483, "src": "13325:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11507, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11477, "src": "13276:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11509, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadMarket", "nodeType": "MemberAccess", "referencedDeclaration": 34182, "src": "13276:20:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$67522_memory_ptr_$_t_struct$_MarketParameters_$67552_memory_ptr_$_t_uint256_$_t_bool_$_t_uint256_$returns$__$bound_to$_t_struct$_CashGroupParameters_$67522_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory,struct MarketParameters memory,uint256,bool,uint256) view"}}, "id": 11514, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13276:59:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11515, "nodeType": "ExpressionStatement", "src": "13276:59:35"}, {"expression": {"id": 11529, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11516, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11490, "src": "13346:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "id": 11525, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11523, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11485, "src": "13382:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "BinaryOperation", "operator": "<<", "rightExpression": {"hexValue": "3136", "id": 11524, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13391:2:35", "typeDescriptions": {"typeIdentifier": "t_rational_16_by_1", "typeString": "int_const 16"}, "value": "16"}, "src": "13382:11:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11522, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13374:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_bytes11_$", "typeString": "type(bytes11)"}, "typeName": {"id": 11521, "name": "bytes11", "nodeType": "ElementaryTypeName", "src": "13374:7:35", "typeDescriptions": {}}}, "id": 11526, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13374:20:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes11", "typeString": "bytes11"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes11", "typeString": "bytes11"}], "id": 11520, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13367:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint88_$", "typeString": "type(uint88)"}, "typeName": {"id": 11519, "name": "uint88", "nodeType": "ElementaryTypeName", "src": "13367:6:35", "typeDescriptions": {}}}, "id": 11527, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13367:28:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint88", "typeString": "uint88"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint88", "typeString": "uint88"}], "id": 11518, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13360:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_int256_$", "typeString": "type(int256)"}, "typeName": {"id": 11517, "name": "int256", "nodeType": "ElementaryTypeName", "src": "13360:6:35", "typeDescriptions": {}}}, "id": 11528, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13360:36:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "13346:50:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11530, "nodeType": "ExpressionStatement", "src": "13346:50:35"}, {"condition": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, "id": 11534, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11531, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11481, "src": "13460:9:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 11532, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67361, "src": "13473:15:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$67361_$", "typeString": "type(enum TradeActionType)"}}, "id": 11533, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "Borrow", "nodeType": "MemberAccess", "src": "13473:22:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "src": "13460:35:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11541, "nodeType": "IfStatement", "src": "13456:72:35", "trueBody": {"expression": {"id": 11539, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11535, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11490, "src": "13497:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 11536, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11490, "src": "13511:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11537, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 53271, "src": "13511:15:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 11538, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13511:17:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "13497:31:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11540, "nodeType": "ExpressionStatement", "src": "13497:31:35"}}, {"expression": {"id": 11554, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11542, "name": "cashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11488, "src": "13539:10:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11545, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11477, "src": "13585:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 11546, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11490, "src": "13608:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"arguments": [{"id": 11550, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11483, "src": "13653:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 11547, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11479, "src": "13633:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11548, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67539, "src": "13633:15:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11549, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 65965, "src": "13633:19:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 11551, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13633:30:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11552, "name": "marketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11493, "src": "13677:11:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11543, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11479, "src": "13552:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11544, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "executeTrade", "nodeType": "MemberAccess", "referencedDeclaration": 35853, "src": "13552:19:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$67552_memory_ptr_$_t_struct$_CashGroupParameters_$67522_memory_ptr_$_t_int256_$_t_uint256_$_t_uint256_$returns$_t_int256_$bound_to$_t_struct$_MarketParameters_$67552_memory_ptr_$", "typeString": "function (struct MarketParameters memory,struct CashGroupParameters memory,int256,uint256,uint256) returns (int256)"}}, "id": 11553, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13552:146:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "13539:159:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11555, "nodeType": "ExpressionStatement", "src": "13539:159:35"}, {"assignments": [11557], "declarations": [{"constant": false, "id": 11557, "mutability": "mutable", "name": "rateLimit", "nodeType": "VariableDeclaration", "scope": 11599, "src": "13709:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11556, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13709:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11570, "initialValue": {"arguments": [{"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "id": 11566, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11564, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11485, "src": "13751:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "BinaryOperation", "operator": "<<", "rightExpression": {"hexValue": "313034", "id": 11565, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13760:3:35", "typeDescriptions": {"typeIdentifier": "t_rational_104_by_1", "typeString": "int_const 104"}, "value": "104"}, "src": "13751:12:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11563, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13744:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_bytes4_$", "typeString": "type(bytes4)"}, "typeName": {"id": 11562, "name": "bytes4", "nodeType": "ElementaryTypeName", "src": "13744:6:35", "typeDescriptions": {}}}, "id": 11567, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13744:20:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes4", "typeString": "bytes4"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes4", "typeString": "bytes4"}], "id": 11561, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13737:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint32_$", "typeString": "type(uint32)"}, "typeName": {"id": 11560, "name": "uint32", "nodeType": "ElementaryTypeName", "src": "13737:6:35", "typeDescriptions": {}}}, "id": 11568, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13737:28:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint32", "typeString": "uint32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint32", "typeString": "uint32"}], "id": 11559, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13729:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 11558, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13729:7:35", "typeDescriptions": {}}}, "id": 11569, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13729:37:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "13709:57:35"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11573, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11571, "name": "rateLimit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11557, "src": "13780:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 11572, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13793:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "13780:14:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11598, "nodeType": "IfStatement", "src": "13776:416:35", "trueBody": {"id": 11597, "nodeType": "Block", "src": "13796:396:35", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, "id": 11577, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11574, "name": "tradeType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11481, "src": "13814:9:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 11575, "name": "TradeActionType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 67361, "src": "13827:15:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_TradeActionType_$67361_$", "typeString": "type(enum TradeActionType)"}}, "id": 11576, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "Borrow", "nodeType": "MemberAccess", "src": "13827:22:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "src": "13814:35:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 11595, "nodeType": "Block", "src": "14020:162:35", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11591, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 11588, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11479, "src": "14105:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11589, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 67547, "src": "14105:22:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"id": 11590, "name": "rateLimit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11557, "src": "14131:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14105:35:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "5472616465206661696c65642c20736c697070616765", "id": 11592, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "14142:24:35", "typeDescriptions": {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}, "value": "Trade failed, slippage"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}], "id": 11587, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "14097:7:35", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 11593, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14097:70:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11594, "nodeType": "ExpressionStatement", "src": "14097:70:35"}]}, "id": 11596, "nodeType": "IfStatement", "src": "13810:372:35", "trueBody": {"id": 11586, "nodeType": "Block", "src": "13851:163:35", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11582, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 11579, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11479, "src": "13937:6:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11580, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 67547, "src": "13937:22:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"id": 11581, "name": "rateLimit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11557, "src": "13963:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13937:35:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "5472616465206661696c65642c20736c697070616765", "id": 11583, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "13974:24:35", "typeDescriptions": {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}, "value": "Trade failed, slippage"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_b8d42142a5fbfddebf103d35e1b686fecd1a04e50c32e313f89927eb4ec7698f", "typeString": "literal_string \"Trade failed, slippage\""}], "id": 11578, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "13929:7:35", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 11584, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13929:70:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11585, "nodeType": "ExpressionStatement", "src": "13929:70:35"}]}}]}}]}, "documentation": {"id": 11475, "nodeType": "StructuredDocumentation", "src": "12327:497:35", "text": "@notice Executes a lend or borrow trade\n @param cashGroup parameters for the trade\n @param market market memory location to use\n @param tradeType whether this is add or remove liquidity\n @param blockTime the current block time\n @param trade bytes32 encoding of the particular trade\n @return cashAmount - a positive or negative cash amount accrued to the account\n @return fCashAmount -  a positive or negative fCash amount accrued to the account"}, "id": 11600, "implemented": true, "kind": "function", "modifiers": [], "name": "_executeLendBorrowTrade", "nodeType": "FunctionDefinition", "parameters": {"id": 11486, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11477, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 11600, "src": "12871:36:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 11476, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67522, "src": "12871:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 11479, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 11600, "src": "12917:30:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 11478, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67552, "src": "12917:16:35", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$67552_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 11481, "mutability": "mutable", "name": "tradeType", "nodeType": "VariableDeclaration", "scope": 11600, "src": "12957:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}, "typeName": {"id": 11480, "name": "TradeActionType", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67361, "src": "12957:15:35", "typeDescriptions": {"typeIdentifier": "t_enum$_TradeActionType_$67361", "typeString": "enum TradeActionType"}}, "visibility": "internal"}, {"constant": false, "id": 11483, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 11600, "src": "12992:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11482, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "12992:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 11485, "mutability": "mutable", "name": "trade", "nodeType": "VariableDeclaration", "scope": 11600, "src": "13019:13:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 11484, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "13019:7:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "12861:177:35"}, "returnParameters": {"id": 11491, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11488, "mutability": "mutable", "name": "cashAmount", "nodeType": "VariableDeclaration", "scope": 11600, "src": "13085:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11487, "name": "int256", "nodeType": "ElementaryTypeName", "src": "13085:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 11490, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 11600, "src": "13116:18:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11489, "name": "int256", "nodeType": "ElementaryTypeName", "src": "13116:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "13071:73:35"}, "scope": 12193, "src": "12829:1369:35", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 11784, "nodeType": "Block", "src": "15159:2871:35", "statements": [{"assignments": [11619], "declarations": [{"constant": false, "id": 11619, "mutability": "mutable", "name": "counterparty", "nodeType": "VariableDeclaration", "scope": 11784, "src": "15169:20:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 11618, "name": "address", "nodeType": "ElementaryTypeName", "src": "15169:7:35", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}], "id": 11629, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11627, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 11624, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11609, "src": "15208:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11623, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "15200:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 11622, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15200:7:35", "typeDescriptions": {}}}, "id": 11625, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15200:14:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">>", "rightExpression": {"hexValue": "3838", "id": 11626, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "15218:2:35", "typeDescriptions": {"typeIdentifier": "t_rational_88_by_1", "typeString": "int_const 88"}, "value": "88"}, "src": "15200:20:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11621, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "15192:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": {"id": 11620, "name": "address", "nodeType": "ElementaryTypeName", "src": "15192:7:35", "typeDescriptions": {}}}, "id": 11628, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15192:29:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "nodeType": "VariableDeclarationStatement", "src": "15169:52:35"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 11633, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11631, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11603, "src": "15320:7:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"id": 11632, "name": "counterparty", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11619, "src": "15331:12:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "15320:23:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "43616e6e6f7420736574746c652073656c66", "id": 11634, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "15345:20:35", "typeDescriptions": {"typeIdentifier": "t_stringliteral_e8be5400a7d7233af68e4ff643cdcf229406c3de9c658b43e802d6e9a5c590cb", "typeString": "literal_string \"Cannot settle self\""}, "value": "Cannot settle self"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_e8be5400a7d7233af68e4ff643cdcf229406c3de9c658b43e802d6e9a5c590cb", "typeString": "literal_string \"Cannot settle self\""}], "id": 11630, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "15312:7:35", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 11635, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15312:54:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11636, "nodeType": "ExpressionStatement", "src": "15312:54:35"}, {"assignments": [11638], "declarations": [{"constant": false, "id": 11638, "mutability": "mutable", "name": "amountToSettleAsset", "nodeType": "VariableDeclaration", "scope": 11784, "src": "15376:26:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11637, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15376:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 11649, "initialValue": {"arguments": [{"arguments": [{"arguments": [{"id": 11645, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11609, "src": "15427:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11644, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "15419:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 11643, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15419:7:35", "typeDescriptions": {}}}, "id": 11646, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15419:14:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11642, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "15412:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint88_$", "typeString": "type(uint88)"}, "typeName": {"id": 11641, "name": "uint88", "nodeType": "ElementaryTypeName", "src": "15412:6:35", "typeDescriptions": {}}}, "id": 11647, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15412:22:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint88", "typeString": "uint88"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint88", "typeString": "uint88"}], "id": 11640, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "15405:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_int256_$", "typeString": "type(int256)"}, "typeName": {"id": 11639, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15405:6:35", "typeDescriptions": {}}}, "id": 11648, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15405:30:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "15376:59:35"}, {"assignments": [11651], "declarations": [{"constant": false, "id": 11651, "mutability": "mutable", "name": "counterpartyContext", "nodeType": "VariableDeclaration", "scope": 11784, "src": "15446:41:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext"}, "typeName": {"id": 11650, "name": "AccountContext", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67617, "src": "15446:14:35", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_storage_ptr", "typeString": "struct AccountContext"}}, "visibility": "internal"}], "id": 11656, "initialValue": {"arguments": [{"id": 11654, "name": "counterparty", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11619, "src": "15542:12:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "expression": {"id": 11652, "name": "AccountContextHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 26840, "src": "15502:21:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_AccountContextHandler_$26840_$", "typeString": "type(library AccountContextHandler)"}}, "id": 11653, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getAccountContext", "nodeType": "MemberAccess", "referencedDeclaration": 26130, "src": "15502:39:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_struct$_AccountContext_$67617_memory_ptr_$", "typeString": "function (address) view returns (struct AccountContext memory)"}}, "id": 11655, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15502:53:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}}, "nodeType": "VariableDeclarationStatement", "src": "15446:109:35"}, {"condition": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 11657, "name": "counterpartyContext", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11651, "src": "15570:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}}, "id": 11658, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "mustSettleAssets", "nodeType": "MemberAccess", "referencedDeclaration": 26295, "src": "15570:36:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_AccountContext_$67617_memory_ptr_$returns$_t_bool_$bound_to$_t_struct$_AccountContext_$67617_memory_ptr_$", "typeString": "function (struct AccountContext memory) view returns (bool)"}}, "id": 11659, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15570:38:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11669, "nodeType": "IfStatement", "src": "15566:160:35", "trueBody": {"id": 11668, "nodeType": "Block", "src": "15610:116:35", "statements": [{"expression": {"id": 11666, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11660, "name": "counterpartyContext", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11651, "src": "15624:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11663, "name": "counterparty", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11619, "src": "15681:12:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 11664, "name": "counterpartyContext", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11651, "src": "15695:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}], "expression": {"id": 11661, "name": "SettleAssetsExternal", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2963, "src": "15646:20:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_SettleAssetsExternal_$2963_$", "typeString": "type(library SettleAssetsExternal)"}}, "id": 11662, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "settleAccount", "nodeType": "MemberAccess", "referencedDeclaration": 2962, "src": "15646:34:35", "typeDescriptions": {"typeIdentifier": "t_function_delegatecall_nonpayable$_t_address_$_t_struct$_AccountContext_$67617_memory_ptr_$returns$_t_struct$_AccountContext_$67617_memory_ptr_$", "typeString": "function (address,struct AccountContext memory) returns (struct AccountContext memory)"}}, "id": 11665, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15646:69:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}}, "src": "15624:91:35", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}}, "id": 11667, "nodeType": "ExpressionStatement", "src": "15624:91:35"}]}}, {"expression": {"id": 11678, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11670, "name": "amountToSettleAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11638, "src": "16066:19:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11673, "name": "counterparty", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11619, "src": "16151:12:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 11674, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11605, "src": "16177:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 11675, "name": "amountToSettleAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11638, "src": "16200:19:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 11676, "name": "counterpartyContext", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11651, "src": "16233:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}], "expression": {"id": 11671, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28243, "src": "16088:14:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$28243_$", "typeString": "type(library BalanceHandler)"}}, "id": 11672, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBalanceStorageForSettleCashDebt", "nodeType": "MemberAccess", "referencedDeclaration": 27530, "src": "16088:49:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_CashGroupParameters_$67522_memory_ptr_$_t_int256_$_t_struct$_AccountContext_$67617_memory_ptr_$returns$_t_int256_$", "typeString": "function (address,struct CashGroupParameters memory,int256,struct AccountContext memory) returns (int256)"}}, "id": 11677, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16088:174:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "16066:196:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11679, "nodeType": "ExpressionStatement", "src": "16066:196:35"}, {"assignments": [11681], "declarations": [{"constant": false, "id": 11681, "mutability": "mutable", "name": "threeMonthMaturity", "nodeType": "VariableDeclaration", "scope": 11784, "src": "16415:26:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11680, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16415:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11689, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11688, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 11684, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11607, "src": "16470:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11682, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 35577, "src": "16444:8:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$35577_$", "typeString": "type(library DateTime)"}}, "id": 11683, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 34970, "src": "16444:25:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 11685, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16444:36:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"expression": {"id": 11686, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 66871, "src": "16483:9:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$66871_$", "typeString": "type(library Constants)"}}, "id": 11687, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 66713, "src": "16483:17:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "16444:56:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "16415:85:35"}, {"assignments": [11691], "declarations": [{"constant": false, "id": 11691, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 11784, "src": "16510:18:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11690, "name": "int256", "nodeType": "ElementaryTypeName", "src": "16510:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 11698, "initialValue": {"arguments": [{"id": 11693, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11605, "src": "16565:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 11694, "name": "threeMonthMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11681, "src": "16576:18:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11695, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11607, "src": "16596:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11696, "name": "amountToSettleAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11638, "src": "16607:19:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 11692, "name": "_getfCashSettleAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11833, "src": "16543:21:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$67522_memory_ptr_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (struct CashGroupParameters memory,uint256,uint256,int256) view returns (int256)"}}, "id": 11697, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16543:84:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "16510:117:35"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 11702, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11700, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11691, "src": "16743:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"hexValue": "30", "id": 11701, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "16758:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "16743:16:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 11699, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "16735:7:35", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 11703, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16735:25:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11704, "nodeType": "ExpressionStatement", "src": "16735:25:35"}, {"id": 11756, "nodeType": "Block", "src": "17101:590:35", "statements": [{"assignments": [11708], "declarations": [{"constant": false, "id": 11708, "mutability": "mutable", "name": "assets", "nodeType": "VariableDeclaration", "scope": 11756, "src": "17115:30:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67535_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset[]"}, "typeName": {"baseType": {"id": 11706, "name": "PortfolioAsset", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67535, "src": "17115:14:35", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67535_storage_ptr", "typeString": "struct PortfolioAsset"}}, "id": 11707, "nodeType": "ArrayTypeName", "src": "17115:16:35", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67535_storage_$dyn_storage_ptr", "typeString": "struct PortfolioAsset[]"}}, "visibility": "internal"}], "id": 11714, "initialValue": {"arguments": [{"hexValue": "31", "id": 11712, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "17169:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}], "id": 11711, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "17148:20:35", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_PortfolioAsset_$67535_memory_ptr_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (struct PortfolioAsset memory[] memory)"}, "typeName": {"baseType": {"id": 11709, "name": "PortfolioAsset", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67535, "src": "17152:14:35", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67535_storage_ptr", "typeString": "struct PortfolioAsset"}}, "id": 11710, "nodeType": "ArrayTypeName", "src": "17152:16:35", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67535_storage_$dyn_storage_ptr", "typeString": "struct PortfolioAsset[]"}}}, "id": 11713, "isConstant": false, "isLValue": false, "isPure": true, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17148:23:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67535_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "17115:56:35"}, {"expression": {"id": 11721, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"baseExpression": {"id": 11715, "name": "assets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11708, "src": "17185:6:35", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67535_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 11717, "indexExpression": {"hexValue": "30", "id": 11716, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "17192:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "17185:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67535_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 11718, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67524, "src": "17185:20:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 11719, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11605, "src": "17208:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11720, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67515, "src": "17208:20:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "src": "17185:43:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11722, "nodeType": "ExpressionStatement", "src": "17185:43:35"}, {"expression": {"id": 11728, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"baseExpression": {"id": 11723, "name": "assets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11708, "src": "17242:6:35", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67535_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 11725, "indexExpression": {"hexValue": "30", "id": 11724, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "17249:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "17242:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67535_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 11726, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 67526, "src": "17242:18:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 11727, "name": "threeMonthMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11681, "src": "17263:18:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17242:39:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11729, "nodeType": "ExpressionStatement", "src": "17242:39:35"}, {"expression": {"id": 11737, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"baseExpression": {"id": 11730, "name": "assets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11708, "src": "17295:6:35", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67535_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 11732, "indexExpression": {"hexValue": "30", "id": 11731, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "17302:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "17295:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67535_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 11733, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "notional", "nodeType": "MemberAccess", "referencedDeclaration": 67530, "src": "17295:18:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 11734, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11691, "src": "17316:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11735, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 53271, "src": "17316:15:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 11736, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17316:17:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "17295:38:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11738, "nodeType": "ExpressionStatement", "src": "17295:38:35"}, {"expression": {"id": 11745, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"baseExpression": {"id": 11739, "name": "assets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11708, "src": "17398:6:35", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67535_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 11741, "indexExpression": {"hexValue": "30", "id": 11740, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "17405:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "17398:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$67535_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 11742, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "assetType", "nodeType": "MemberAccess", "referencedDeclaration": 67528, "src": "17398:19:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 11743, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 66871, "src": "17420:9:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$66871_$", "typeString": "type(library Constants)"}}, "id": 11744, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "FCASH_ASSET_TYPE", "nodeType": "MemberAccess", "referencedDeclaration": 66795, "src": "17420:26:35", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "src": "17398:48:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11746, "nodeType": "ExpressionStatement", "src": "17398:48:35"}, {"expression": {"id": 11754, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11747, "name": "counterpartyContext", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11651, "src": "17518:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11750, "name": "counterparty", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11619, "src": "17593:12:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 11751, "name": "counterpartyContext", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11651, "src": "17623:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}}, {"id": 11752, "name": "assets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11708, "src": "17660:6:35", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67535_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}, {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$67535_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}], "expression": {"id": 11748, "name": "TransferAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 41825, "src": "17540:14:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_TransferAssets_$41825_$", "typeString": "type(library TransferAssets)"}}, "id": 11749, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "placeAssetsInAccount", "nodeType": "MemberAccess", "referencedDeclaration": 41824, "src": "17540:35:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_AccountContext_$67617_memory_ptr_$_t_array$_t_struct$_PortfolioAsset_$67535_memory_ptr_$dyn_memory_ptr_$returns$_t_struct$_AccountContext_$67617_memory_ptr_$", "typeString": "function (address,struct AccountContext memory,struct PortfolioAsset memory[] memory) returns (struct AccountContext memory)"}}, "id": 11753, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17540:140:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}}, "src": "17518:162:35", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}}, "id": 11755, "nodeType": "ExpressionStatement", "src": "17518:162:35"}]}, {"expression": {"arguments": [{"id": 11760, "name": "counterparty", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11619, "src": "17738:12:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "expression": {"id": 11757, "name": "counterpartyContext", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11651, "src": "17700:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_AccountContext_$67617_memory_ptr", "typeString": "struct AccountContext memory"}}, "id": 11759, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "setAccountContext", "nodeType": "MemberAccess", "referencedDeclaration": 26157, "src": "17700:37:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AccountContext_$67617_memory_ptr_$_t_address_$returns$__$bound_to$_t_struct$_AccountContext_$67617_memory_ptr_$", "typeString": "function (struct AccountContext memory,address)"}}, "id": 11761, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17700:51:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11762, "nodeType": "ExpressionStatement", "src": "17700:51:35"}, {"eventCall": {"arguments": [{"id": 11764, "name": "counterparty", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11619, "src": "17796:12:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"arguments": [{"expression": {"id": 11767, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11605, "src": "17829:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11768, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67515, "src": "17829:20:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 11766, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "17822:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint16_$", "typeString": "type(uint16)"}, "typeName": {"id": 11765, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "17822:6:35", "typeDescriptions": {}}}, "id": 11769, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17822:28:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 11770, "name": "account", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11603, "src": "17864:7:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 11771, "name": "amountToSettleAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11638, "src": "17885:19:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 11772, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11691, "src": "17918:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11773, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 53271, "src": "17918:15:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 11774, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17918:17:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 11763, "name": "SettledCashDebt", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10806, "src": "17767:15:35", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint16_$_t_address_$_t_int256_$_t_int256_$returns$__$", "typeString": "function (address,uint16,address,int256,int256)"}}, "id": 11775, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17767:178:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11776, "nodeType": "EmitStatement", "src": "17762:183:35"}, {"expression": {"components": [{"id": 11777, "name": "threeMonthMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11681, "src": "17964:18:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 11778, "name": "amountToSettleAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11638, "src": "17984:19:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11779, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 53271, "src": "17984:23:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 11780, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17984:25:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 11781, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11691, "src": "18011:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 11782, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "17963:60:35", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "functionReturnParameters": 11617, "id": 11783, "nodeType": "Return", "src": "17956:67:35"}]}, "documentation": {"id": 11601, "nodeType": "StructuredDocumentation", "src": "14204:689:35", "text": "@notice If an account has a negative cash balance we allow anyone to lend to to that account at a penalty\n rate to the 3 month market.\n @param account the account initiating the trade, used to check that self settlement is not possible\n @param cashGroup parameters for the trade\n @param blockTime the current block time\n @param trade bytes32 encoding of the particular trade\n @return maturity: the date of the three month maturity where fCash will be exchanged\n @return cashAmount: a negative cash amount that the account must pay to the settled account\n @return fCashAmount: a positive fCash amount that the account will receive"}, "id": 11785, "implemented": true, "kind": "function", "modifiers": [], "name": "_settleCashDebt", "nodeType": "FunctionDefinition", "parameters": {"id": 11610, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11603, "mutability": "mutable", "name": "account", "nodeType": "VariableDeclaration", "scope": 11785, "src": "14932:15:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 11602, "name": "address", "nodeType": "ElementaryTypeName", "src": "14932:7:35", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 11605, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 11785, "src": "14957:36:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 11604, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67522, "src": "14957:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 11607, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 11785, "src": "15003:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11606, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15003:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 11609, "mutability": "mutable", "name": "trade", "nodeType": "VariableDeclaration", "scope": 11785, "src": "15030:13:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 11608, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "15030:7:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "14922:127:35"}, "returnParameters": {"id": 11617, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11612, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 11785, "src": "15097:7:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11611, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15097:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 11614, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 11785, "src": "15118:6:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11613, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15118:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 11616, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 11785, "src": "15138:6:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11615, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15138:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "15083:71:35"}, "scope": 12193, "src": "14898:3132:35", "stateMutability": "nonpayable", "virtual": false, "visibility": "internal"}, {"body": {"id": 11832, "nodeType": "Block", "src": "18337:678:35", "statements": [{"assignments": [11800], "declarations": [{"constant": false, "id": 11800, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 11832, "src": "18347:18:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11799, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "18347:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11806, "initialValue": {"arguments": [{"id": 11803, "name": "threeMonthMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11790, "src": "18398:18:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11804, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11792, "src": "18418:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11801, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11788, "src": "18368:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11802, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "calculateOracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 34380, "src": "18368:29:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$67522_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_CashGroupParameters_$67522_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory,uint256,uint256) view returns (uint256)"}}, "id": 11805, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18368:60:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "18347:81:35"}, {"assignments": [11808], "declarations": [{"constant": false, "id": 11808, "mutability": "mutable", "name": "exchangeRate", "nodeType": "VariableDeclaration", "scope": 11832, "src": "18439:19:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11807, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18439:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 11822, "initialValue": {"arguments": [{"arguments": [{"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 11813, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11788, "src": "18543:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11814, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "getSettlementPenalty", "nodeType": "MemberAccess", "referencedDeclaration": 34078, "src": "18543:30:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_CashGroupParameters_$67522_memory_ptr_$returns$_t_uint256_$bound_to$_t_struct$_CashGroupParameters_$67522_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory) pure returns (uint256)"}}, "id": 11815, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18543:32:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11811, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11800, "src": "18528:10:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11812, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 65943, "src": "18528:14:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 11816, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18528:48:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"arguments": [{"id": 11819, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11792, "src": "18617:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11817, "name": "threeMonthMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11790, "src": "18594:18:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11818, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 65965, "src": "18594:22:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 11820, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18594:33:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11809, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 37496, "src": "18473:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Market_$37496_$", "typeString": "type(library Market)"}}, "id": 11810, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getExchangeRateFromImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 36474, "src": "18473:37:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (uint256,uint256) pure returns (int256)"}}, "id": 11821, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18473:168:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "18439:202:35"}, {"expression": {"arguments": [{"id": 11829, "name": "exchangeRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11808, "src": "18995:12:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"arguments": [{"id": 11826, "name": "amountToSettleAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11794, "src": "18860:19:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 11823, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11788, "src": "18803:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11824, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "assetRate", "nodeType": "MemberAccess", "referencedDeclaration": 67519, "src": "18803:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_AssetRateParameters_$67513_memory_ptr", "typeString": "struct AssetRateParameters memory"}}, "id": 11825, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertToUnderlying", "nodeType": "MemberAccess", "referencedDeclaration": 33136, "src": "18803:56:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_AssetRateParameters_$67513_memory_ptr_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_AssetRateParameters_$67513_memory_ptr_$", "typeString": "function (struct AssetRateParameters memory,int256) pure returns (int256)"}}, "id": 11827, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18803:77:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11828, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mulInRatePrecision", "nodeType": "MemberAccess", "referencedDeclaration": 53354, "src": "18803:191:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 11830, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18803:205:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 11798, "id": 11831, "nodeType": "Return", "src": "18784:224:35"}]}, "documentation": {"id": 11786, "nodeType": "StructuredDocumentation", "src": "18036:84:35", "text": "@dev Helper method to calculate the fCashAmount from the penalty settlement rate"}, "id": 11833, "implemented": true, "kind": "function", "modifiers": [], "name": "_getfCashSettleAmount", "nodeType": "FunctionDefinition", "parameters": {"id": 11795, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11788, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 11833, "src": "18165:36:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 11787, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67522, "src": "18165:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 11790, "mutability": "mutable", "name": "threeMonthMaturity", "nodeType": "VariableDeclaration", "scope": 11833, "src": "18211:26:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11789, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "18211:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 11792, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 11833, "src": "18247:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11791, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "18247:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 11794, "mutability": "mutable", "name": "amountToSettleAsset", "nodeType": "VariableDeclaration", "scope": 11833, "src": "18274:26:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11793, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18274:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "18155:151:35"}, "returnParameters": {"id": 11798, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11797, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 11833, "src": "18329:6:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11796, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18329:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "18328:8:35"}, "scope": 12193, "src": "18125:890:35", "stateMutability": "view", "virtual": false, "visibility": "private"}, {"body": {"id": 12029, "nodeType": "Block", "src": "19871:3502:35", "statements": [{"assignments": [11852], "declarations": [{"constant": false, "id": 11852, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 12029, "src": "19881:16:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11851, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19881:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11865, "initialValue": {"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11862, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 11859, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11842, "src": "19923:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11858, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "19915:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 11857, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19915:7:35", "typeDescriptions": {}}}, "id": 11860, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19915:14:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">>", "rightExpression": {"hexValue": "323136", "id": 11861, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "19933:3:35", "typeDescriptions": {"typeIdentifier": "t_rational_216_by_1", "typeString": "int_const 216"}, "value": "216"}, "src": "19915:21:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11856, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "19908:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint32_$", "typeString": "type(uint32)"}, "typeName": {"id": 11855, "name": "uint32", "nodeType": "ElementaryTypeName", "src": "19908:6:35", "typeDescriptions": {}}}, "id": 11863, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19908:29:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint32", "typeString": "uint32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint32", "typeString": "uint32"}], "id": 11854, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "19900:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 11853, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19900:7:35", "typeDescriptions": {}}}, "id": 11864, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19900:38:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "19881:57:35"}, {"assignments": [11867], "declarations": [{"constant": false, "id": 11867, "mutability": "mutable", "name": "fCashAmountToPurchase", "nodeType": "VariableDeclaration", "scope": 12029, "src": "19948:28:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11866, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19948:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 11880, "initialValue": {"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11877, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 11874, "name": "trade", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11842, "src": "20000:5:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 11873, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "19992:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 11872, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19992:7:35", "typeDescriptions": {}}}, "id": 11875, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19992:14:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">>", "rightExpression": {"hexValue": "313238", "id": 11876, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20010:3:35", "typeDescriptions": {"typeIdentifier": "t_rational_128_by_1", "typeString": "int_const 128"}, "value": "128"}, "src": "19992:21:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11871, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "19985:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint88_$", "typeString": "type(uint88)"}, "typeName": {"id": 11870, "name": "uint88", "nodeType": "ElementaryTypeName", "src": "19985:6:35", "typeDescriptions": {}}}, "id": 11878, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19985:29:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint88", "typeString": "uint88"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint88", "typeString": "uint88"}], "id": 11869, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "19979:5:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_int88_$", "typeString": "type(int88)"}, "typeName": {"id": 11868, "name": "int88", "nodeType": "ElementaryTypeName", "src": "19979:5:35", "typeDescriptions": {}}}, "id": 11879, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19979:36:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int88", "typeString": "int88"}}, "nodeType": "VariableDeclarationStatement", "src": "19948:67:35"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11884, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11882, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11852, "src": "20033:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 11883, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11840, "src": "20044:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "20033:20:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "496e76616c6964206d61747572697479", "id": 11885, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "20055:18:35", "typeDescriptions": {"typeIdentifier": "t_stringliteral_6ac8fa1ec1f45f2a4a2017eedf59db09ad3fe10b2748a8ca73a4b71f86bef54e", "typeString": "literal_string \"Invalid maturity\""}, "value": "Invalid maturity"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_6ac8fa1ec1f45f2a4a2017eedf59db09ad3fe10b2748a8ca73a4b71f86bef54e", "typeString": "literal_string \"Invalid maturity\""}], "id": 11881, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "20025:7:35", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 11886, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20025:49:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11887, "nodeType": "ExpressionStatement", "src": "20025:49:35"}, {"expression": {"arguments": [{"id": 11896, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "!", "prefix": true, "src": "20242:78:35", "subExpression": {"arguments": [{"expression": {"id": 11891, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11838, "src": "20274:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11892, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 67517, "src": "20274:24:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11893, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11852, "src": "20300:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11894, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11840, "src": "20310:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11889, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 35577, "src": "20243:8:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$35577_$", "typeString": "type(library DateTime)"}}, "id": 11890, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "isValidMarketMaturity", "nodeType": "MemberAccess", "referencedDeclaration": 35136, "src": "20243:30:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$", "typeString": "function (uint256,uint256,uint256) pure returns (bool)"}}, "id": 11895, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20243:77:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4e6f6e206964696f73796e637261746963206d61747572697479", "id": 11897, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "20334:28:35", "typeDescriptions": {"typeIdentifier": "t_stringliteral_170cbb6ae2d81aeec65922f85f1fdb93aed169edb18ab7dfe13333b8f0ea8715", "typeString": "literal_string \"Non idiosyncratic maturity\""}, "value": "Non idiosyncratic maturity"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_170cbb6ae2d81aeec65922f85f1fdb93aed169edb18ab7dfe13333b8f0ea8715", "typeString": "literal_string \"Non idiosyncratic maturity\""}], "id": 11888, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "20221:7:35", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 11898, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20221:151:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11899, "nodeType": "ExpressionStatement", "src": "20221:151:35"}, {"assignments": [11901], "declarations": [{"constant": false, "id": 11901, "mutability": "mutable", "name": "nTokenAddress", "nodeType": "VariableDeclaration", "scope": 12029, "src": "20383:21:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 11900, "name": "address", "nodeType": "ElementaryTypeName", "src": "20383:7:35", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}], "id": 11907, "initialValue": {"arguments": [{"expression": {"id": 11904, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11838, "src": "20435:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11905, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67515, "src": "20435:20:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 11902, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 39312, "src": "20407:13:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$39312_$", "typeString": "type(library nTokenHandler)"}}, "id": 11903, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "nTokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 38359, "src": "20407:27:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$", "typeString": "function (uint256) view returns (address)"}}, "id": 11906, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20407:49:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "VariableDeclarationStatement", "src": "20383:73:35"}, {"assignments": [null, null, 11909, null, 11911], "declarations": [null, null, {"constant": false, "id": 11909, "mutability": "mutable", "name": "lastInitializedTime", "nodeType": "VariableDeclaration", "scope": 12029, "src": "20570:27:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11908, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "20570:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, null, {"constant": false, "id": 11911, "mutability": "mutable", "name": "parameters", "nodeType": "VariableDeclaration", "scope": 12029, "src": "20647:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}, "typeName": {"id": 11910, "name": "bytes6", "nodeType": "ElementaryTypeName", "src": "20647:6:35", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}}, "visibility": "internal"}], "id": 11916, "initialValue": {"arguments": [{"id": 11914, "name": "nTokenAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11901, "src": "20708:13:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "expression": {"id": 11912, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 39312, "src": "20677:13:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$39312_$", "typeString": "type(library nTokenHandler)"}}, "id": 11913, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getNTokenContext", "nodeType": "MemberAccess", "referencedDeclaration": 38338, "src": "20677:30:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint16_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes6_$", "typeString": "function (address) view returns (uint16,uint256,uint256,uint8,bytes6)"}}, "id": 11915, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "20677:45:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint16_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes6_$", "typeString": "tuple(uint16,uint256,uint256,uint8,bytes6)"}}, "nodeType": "VariableDeclarationStatement", "src": "20493:229:35"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11934, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11918, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11840, "src": "21392:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11932, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"arguments": [{"baseExpression": {"id": 11925, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11911, "src": "21479:10:35", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}}, "id": 11928, "indexExpression": {"expression": {"id": 11926, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 66871, "src": "21490:9:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$66871_$", "typeString": "type(library Constants)"}}, "id": 11927, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RESIDUAL_PURCHASE_TIME_BUFFER", "nodeType": "MemberAccess", "referencedDeclaration": 66840, "src": "21490:39:35", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "21479:51:35", "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 11924, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "21473:5:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 11923, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "21473:5:35", "typeDescriptions": {}}}, "id": 11929, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21473:58:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 11922, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "21465:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 11921, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "21465:7:35", "typeDescriptions": {}}}, "id": 11930, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21465:67:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"hexValue": "31", "id": 11931, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "21535:7:35", "subdenomination": "hours", "typeDescriptions": {"typeIdentifier": "t_rational_3600_by_1", "typeString": "int_const 3600"}, "value": "1"}, "src": "21465:77:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11919, "name": "lastInitializedTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11909, "src": "21420:19:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11920, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 65943, "src": "21420:23:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 11933, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21420:140:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "21392:168:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "496e73756666696369656e7420626c6f636b2074696d65", "id": 11935, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "21574:25:35", "typeDescriptions": {"typeIdentifier": "t_stringliteral_a342b12b1f68df3836aadf9b184eda8e1c38b67afe19dc75e8fec530927211c1", "typeString": "literal_string \"Insufficient block time\""}, "value": "Insufficient block time"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_a342b12b1f68df3836aadf9b184eda8e1c38b67afe19dc75e8fec530927211c1", "typeString": "literal_string \"Insufficient block time\""}], "id": 11917, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "21371:7:35", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 11936, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21371:238:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11937, "nodeType": "ExpressionStatement", "src": "21371:238:35"}, {"assignments": [11939], "declarations": [{"constant": false, "id": 11939, "mutability": "mutable", "name": "notional", "nodeType": "VariableDeclaration", "scope": 12029, "src": "21620:15:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11938, "name": "int256", "nodeType": "ElementaryTypeName", "src": "21620:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 11947, "initialValue": {"arguments": [{"id": 11942, "name": "nTokenAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11901, "src": "21688:13:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"id": 11943, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11838, "src": "21703:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11944, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67515, "src": "21703:20:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 11945, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11852, "src": "21725:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11940, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 40303, "src": "21650:19:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$40303_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 11941, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getifCashNotional", "nodeType": "MemberAccess", "referencedDeclaration": 39738, "src": "21650:37:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (address,uint256,uint256) view returns (int256)"}}, "id": 11946, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21650:84:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "21620:114:35"}, {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 11954, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 11950, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11948, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11939, "src": "21833:8:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "30", "id": 11949, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "21844:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "21833:12:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 11953, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11951, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11867, "src": "21849:21:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "30", "id": 11952, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "21873:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "21849:25:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "21833:41:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 11970, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 11966, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11964, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11939, "src": "22060:8:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 11965, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "22071:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "22060:12:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 11969, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11967, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11867, "src": "22076:21:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 11968, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "22100:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "22076:25:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "22060:41:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 11984, "nodeType": "Block", "src": "22283:121:35", "statements": [{"expression": {"arguments": [{"hexValue": "496e76616c696420616d6f756e74", "id": 11981, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "22376:16:35", "typeDescriptions": {"typeIdentifier": "t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1", "typeString": "literal_string \"Invalid amount\""}, "value": "Invalid amount"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1", "typeString": "literal_string \"Invalid amount\""}], "id": 11980, "name": "revert", "nodeType": "Identifier", "overloadedDeclarations": [-19, -19], "referencedDeclaration": -19, "src": "22369:6:35", "typeDescriptions": {"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$", "typeString": "function (string memory) pure"}}, "id": 11982, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22369:24:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11983, "nodeType": "ExpressionStatement", "src": "22369:24:35"}]}, "id": 11985, "nodeType": "IfStatement", "src": "22056:348:35", "trueBody": {"id": 11979, "nodeType": "Block", "src": "22103:174:35", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 11973, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11971, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11867, "src": "22200:21:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 11972, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11939, "src": "22224:8:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "22200:32:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11978, "nodeType": "IfStatement", "src": "22196:70:35", "trueBody": {"expression": {"id": 11976, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11974, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11867, "src": "22234:21:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 11975, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11939, "src": "22258:8:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "22234:32:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11977, "nodeType": "ExpressionStatement", "src": "22234:32:35"}}]}}, "id": 11986, "nodeType": "IfStatement", "src": "21829:575:35", "trueBody": {"id": 11963, "nodeType": "Block", "src": "21876:174:35", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 11957, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11955, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11867, "src": "21973:21:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"id": 11956, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11939, "src": "21997:8:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "21973:32:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11962, "nodeType": "IfStatement", "src": "21969:70:35", "trueBody": {"expression": {"id": 11960, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11958, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11867, "src": "22007:21:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 11959, "name": "notional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11939, "src": "22031:8:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "22007:32:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11961, "nodeType": "ExpressionStatement", "src": "22007:32:35"}}]}}, {"assignments": [11988], "declarations": [{"constant": false, "id": 11988, "mutability": "mutable", "name": "netAssetCashNToken", "nodeType": "VariableDeclaration", "scope": 12029, "src": "22626:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11987, "name": "int256", "nodeType": "ElementaryTypeName", "src": "22626:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 11996, "initialValue": {"arguments": [{"id": 11990, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11838, "src": "22710:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, {"id": 11991, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11852, "src": "22737:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11992, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11840, "src": "22763:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11993, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11867, "src": "22790:21:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 11994, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11911, "src": "22829:10:35", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}], "id": 11989, "name": "_getResidualPriceAssetCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12120, "src": "22666:26:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$67522_memory_ptr_$_t_uint256_$_t_uint256_$_t_int256_$_t_bytes6_$returns$_t_int256_$", "typeString": "function (struct CashGroupParameters memory,uint256,uint256,int256,bytes6) view returns (int256)"}}, "id": 11995, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22666:187:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "22626:227:35"}, {"expression": {"arguments": [{"id": 11998, "name": "nTokenAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11901, "src": "22900:13:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"id": 11999, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11838, "src": "22927:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 12000, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67515, "src": "22927:20:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 12001, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11852, "src": "22961:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 12002, "name": "lastInitializedTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11909, "src": "22983:19:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 12003, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11867, "src": "23016:21:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 12004, "name": "netAssetCashNToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11988, "src": "23051:18:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 11997, "name": "_updateNTokenPortfolio", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12192, "src": "22864:22:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$_t_int256_$returns$__$", "typeString": "function (address,uint256,uint256,uint256,int256,int256)"}}, "id": 12005, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22864:215:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12006, "nodeType": "ExpressionStatement", "src": "22864:215:35"}, {"eventCall": {"arguments": [{"arguments": [{"expression": {"id": 12010, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11838, "src": "23138:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 12011, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 67515, "src": "23138:20:35", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 12009, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "23131:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint16_$", "typeString": "type(uint16)"}, "typeName": {"id": 12008, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "23131:6:35", "typeDescriptions": {}}}, "id": 12012, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23131:28:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"arguments": [{"id": 12015, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11852, "src": "23180:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 12014, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "23173:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}, "typeName": {"id": 12013, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "23173:6:35", "typeDescriptions": {}}}, "id": 12016, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23173:16:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, {"id": 12017, "name": "purchaser", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11836, "src": "23203:9:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 12018, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11867, "src": "23226:21:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 12019, "name": "netAssetCashNToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11988, "src": "23261:18:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint40", "typeString": "uint40"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 12007, "name": "nTokenResidualPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10818, "src": "23095:22:35", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_uint16_$_t_uint40_$_t_address_$_t_int256_$_t_int256_$returns$__$", "typeString": "function (uint16,uint40,address,int256,int256)"}}, "id": 12020, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23095:194:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12021, "nodeType": "EmitStatement", "src": "23090:199:35"}, {"expression": {"components": [{"id": 12022, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11852, "src": "23308:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 12023, "name": "netAssetCashNToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11988, "src": "23318:18:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 12024, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 53271, "src": "23318:22:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 12025, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23318:24:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 12026, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11867, "src": "23344:21:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 12027, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "23307:59:35", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint256_$_t_int256_$_t_int256_$", "typeString": "tuple(uint256,int256,int256)"}}, "functionReturnParameters": 11850, "id": 12028, "nodeType": "Return", "src": "23300:66:35"}]}, "documentation": {"id": 11834, "nodeType": "StructuredDocumentation", "src": "19021:574:35", "text": "@notice Allows an account to purchase ntoken residuals\n @param purchaser account that is purchasing the residuals\n @param cashGroup parameters for the trade\n @param blockTime the current block time\n @param trade bytes32 encoding of the particular trade\n @return maturity: the date of the idiosyncratic maturity where fCash will be exchanged\n @return cashAmount: a positive or negative cash amount that the account will receive or pay\n @return fCashAmount: a positive or negative fCash amount that the account will receive"}, "id": 12030, "implemented": true, "kind": "function", "modifiers": [], "name": "_purchaseNTokenResidual", "nodeType": "FunctionDefinition", "parameters": {"id": 11843, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11836, "mutability": "mutable", "name": "purchaser", "nodeType": "VariableDeclaration", "scope": 12030, "src": "19642:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 11835, "name": "address", "nodeType": "ElementaryTypeName", "src": "19642:7:35", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 11838, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 12030, "src": "19669:36:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 11837, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67522, "src": "19669:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 11840, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 12030, "src": "19715:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11839, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19715:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 11842, "mutability": "mutable", "name": "trade", "nodeType": "VariableDeclaration", "scope": 12030, "src": "19742:13:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 11841, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "19742:7:35", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "19632:129:35"}, "returnParameters": {"id": 11850, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11845, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 12030, "src": "19809:7:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11844, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19809:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 11847, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 12030, "src": "19830:6:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11846, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19830:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 11849, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 12030, "src": "19850:6:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11848, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19850:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "19795:71:35"}, "scope": 12193, "src": "19600:3773:35", "stateMutability": "nonpayable", "virtual": false, "visibility": "internal"}, {"body": {"id": 12119, "nodeType": "Block", "src": "23696:1384:35", "statements": [{"assignments": [12047], "declarations": [{"constant": false, "id": 12047, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 12119, "src": "23706:18:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12046, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23706:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 12053, "initialValue": {"arguments": [{"id": 12050, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12035, "src": "23757:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 12051, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12037, "src": "23767:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 12048, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12033, "src": "23727:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 12049, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "calculateOracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 34380, "src": "23727:29:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_CashGroupParameters_$67522_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_CashGroupParameters_$67522_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory,uint256,uint256) view returns (uint256)"}}, "id": 12052, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23727:50:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "23706:71:35"}, {"assignments": [12055], "declarations": [{"constant": false, "id": 12055, "mutability": "mutable", "name": "purchaseIncentive", "nodeType": "VariableDeclaration", "scope": 12119, "src": "23869:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12054, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23869:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 12069, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 12068, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"arguments": [{"baseExpression": {"id": 12060, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12041, "src": "23923:10:35", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}}, "id": 12063, "indexExpression": {"expression": {"id": 12061, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 66871, "src": "23934:9:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$66871_$", "typeString": "type(library Constants)"}}, "id": 12062, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RESIDUAL_PURCHASE_INCENTIVE", "nodeType": "MemberAccess", "referencedDeclaration": 66846, "src": "23934:37:35", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "23923:49:35", "typeDescriptions": {"typeIdentifier": "t_bytes1", "typeString": "bytes1"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes1", "typeString": "bytes1"}], "id": 12059, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "23917:5:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint8_$", "typeString": "type(uint8)"}, "typeName": {"id": 12058, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "23917:5:35", "typeDescriptions": {}}}, "id": 12064, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23917:56:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint8", "typeString": "uint8"}], "id": 12057, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "23909:7:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 12056, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23909:7:35", "typeDescriptions": {}}}, "id": 12065, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23909:65:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"expression": {"id": 12066, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 66871, "src": "23993:9:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$66871_$", "typeString": "type(library Constants)"}}, "id": 12067, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "TEN_BASIS_POINTS", "nodeType": "MemberAccess", "referencedDeclaration": 66779, "src": "23993:26:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "23909:110:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "23869:150:35"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 12072, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12070, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12039, "src": "24034:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 12071, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "24048:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "24034:15:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 12083, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12081, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12047, "src": "24295:10:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 12082, "name": "purchaseIncentive", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12055, "src": "24308:17:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "24295:30:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 12096, "nodeType": "Block", "src": "24587:141:35", "statements": [{"expression": {"id": 12094, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 12092, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12047, "src": "24703:10:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"hexValue": "30", "id": 12093, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "24716:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "24703:14:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 12095, "nodeType": "ExpressionStatement", "src": "24703:14:35"}]}, "id": 12097, "nodeType": "IfStatement", "src": "24291:437:35", "trueBody": {"id": 12091, "nodeType": "Block", "src": "24327:254:35", "statements": [{"expression": {"id": 12089, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 12084, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12047, "src": "24524:10:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 12087, "name": "purchaseIncentive", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12055, "src": "24552:17:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 12085, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12047, "src": "24537:10:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 12086, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 65965, "src": "24537:14:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 12088, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "24537:33:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "24524:46:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 12090, "nodeType": "ExpressionStatement", "src": "24524:46:35"}]}}, "id": 12098, "nodeType": "IfStatement", "src": "24030:698:35", "trueBody": {"id": 12080, "nodeType": "Block", "src": "24051:234:35", "statements": [{"expression": {"id": 12078, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 12073, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12047, "src": "24228:10:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 12076, "name": "purchaseIncentive", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12055, "src": "24256:17:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 12074, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12047, "src": "24241:10:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 12075, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 65943, "src": "24241:14:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 12077, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "24241:33:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "24228:46:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 12079, "nodeType": "ExpressionStatement", "src": "24228:46:35"}]}}, {"assignments": [12100], "declarations": [{"constant": false, "id": 12100, "mutability": "mutable", "name": "exchangeRate", "nodeType": "VariableDeclaration", "scope": 12119, "src": "24738:19:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12099, "name": "int256", "nodeType": "ElementaryTypeName", "src": "24738:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 12109, "initialValue": {"arguments": [{"id": 12103, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12047, "src": "24810:10:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"arguments": [{"id": 12106, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12037, "src": "24835:9:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 12104, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12035, "src": "24822:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 12105, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 65965, "src": "24822:12:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 12107, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "24822:23:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 12101, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 37496, "src": "24772:6:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Market_$37496_$", "typeString": "type(library Market)"}}, "id": 12102, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getExchangeRateFromImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 36474, "src": "24772:37:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (uint256,uint256) pure returns (int256)"}}, "id": 12108, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "24772:74:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "24738:108:35"}, {"expression": {"arguments": [{"arguments": [{"id": 12115, "name": "exchangeRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12100, "src": "25059:12:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 12113, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12039, "src": "25028:11:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 12114, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "divInRatePrecision", "nodeType": "MemberAccess", "referencedDeclaration": 53334, "src": "25028:30:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 12116, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25028:44:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 12110, "name": "cashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12033, "src": "24986:9:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 12111, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "assetRate", "nodeType": "MemberAccess", "referencedDeclaration": 67519, "src": "24986:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_AssetRateParameters_$67513_memory_ptr", "typeString": "struct AssetRateParameters memory"}}, "id": 12112, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertFromUnderlying", "nodeType": "MemberAccess", "referencedDeclaration": 33164, "src": "24986:41:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_AssetRateParameters_$67513_memory_ptr_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_AssetRateParameters_$67513_memory_ptr_$", "typeString": "function (struct AssetRateParameters memory,int256) pure returns (int256)"}}, "id": 12117, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "24986:87:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 12045, "id": 12118, "nodeType": "Return", "src": "24967:106:35"}]}, "documentation": {"id": 12031, "nodeType": "StructuredDocumentation", "src": "23379:85:35", "text": "@notice Returns the amount of asset cash required to purchase the nToken residual"}, "id": 12120, "implemented": true, "kind": "function", "modifiers": [], "name": "_getResidualPriceAssetCash", "nodeType": "FunctionDefinition", "parameters": {"id": 12042, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12033, "mutability": "mutable", "name": "cashGroup", "nodeType": "VariableDeclaration", "scope": 12120, "src": "23514:36:35", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_memory_ptr", "typeString": "struct CashGroupParameters"}, "typeName": {"id": 12032, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 67522, "src": "23514:19:35", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$67522_storage_ptr", "typeString": "struct CashGroupParameters"}}, "visibility": "internal"}, {"constant": false, "id": 12035, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 12120, "src": "23560:16:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12034, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23560:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 12037, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 12120, "src": "23586:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12036, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23586:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 12039, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 12120, "src": "23613:18:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12038, "name": "int256", "nodeType": "ElementaryTypeName", "src": "23613:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 12041, "mutability": "mutable", "name": "parameters", "nodeType": "VariableDeclaration", "scope": 12120, "src": "23641:17:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}, "typeName": {"id": 12040, "name": "bytes6", "nodeType": "ElementaryTypeName", "src": "23641:6:35", "typeDescriptions": {"typeIdentifier": "t_bytes6", "typeString": "bytes6"}}, "visibility": "internal"}], "src": "23504:160:35"}, "returnParameters": {"id": 12045, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12044, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 12120, "src": "23688:6:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12043, "name": "int256", "nodeType": "ElementaryTypeName", "src": "23688:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "23687:8:35"}, "scope": 12193, "src": "23469:1611:35", "stateMutability": "view", "virtual": false, "visibility": "internal"}, {"body": {"id": 12191, "nodeType": "Block", "src": "25327:1001:35", "statements": [{"assignments": [12136], "declarations": [{"constant": false, "id": 12136, "mutability": "mutable", "name": "finalNotional", "nodeType": "VariableDeclaration", "scope": 12191, "src": "25337:20:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12135, "name": "int256", "nodeType": "ElementaryTypeName", "src": "25337:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 12147, "initialValue": {"arguments": [{"id": 12139, "name": "nTokenAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12122, "src": "25408:13:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 12140, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12124, "src": "25435:10:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 12141, "name": "maturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12126, "src": "25459:8:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 12142, "name": "lastInitializedTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12128, "src": "25481:19:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 12143, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12130, "src": "25514:21:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 12144, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 53271, "src": "25514:25:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 12145, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25514:27:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 12137, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 40303, "src": "25360:19:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$40303_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 12138, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "addifCashAsset", "nodeType": "MemberAccess", "referencedDeclaration": 40000, "src": "25360:34:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint256,uint256,uint256,int256) returns (int256)"}}, "id": 12146, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25360:236:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "25337:259:35"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 12165, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 12155, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 12151, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12149, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12130, "src": "25703:21:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 12150, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "25727:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "25703:25:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 12154, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12152, "name": "finalNotional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12136, "src": "25732:13:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"hexValue": "30", "id": 12153, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "25749:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "25732:18:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "25703:47:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 12156, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "25702:49:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 12163, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 12159, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12157, "name": "fCashAmountToPurchase", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12130, "src": "25768:21:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "30", "id": 12158, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "25792:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "25768:25:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 12162, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 12160, "name": "finalNotional", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12136, "src": "25797:13:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"hexValue": "30", "id": 12161, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "25814:1:35", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "25797:18:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "25768:47:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 12164, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "25767:49:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "25702:114:35", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 12148, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "25681:7:35", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 12166, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25681:145:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12167, "nodeType": "ExpressionStatement", "src": "25681:145:35"}, {"assignments": [12169, null, null, null], "declarations": [{"constant": false, "id": 12169, "mutability": "mutable", "name": "nTokenCashBalance", "nodeType": "VariableDeclaration", "scope": 12191, "src": "25878:24:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12168, "name": "int256", "nodeType": "ElementaryTypeName", "src": "25878:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, null, null, null], "id": 12175, "initialValue": {"arguments": [{"id": 12172, "name": "nTokenAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12122, "src": "26060:13:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 12173, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12124, "src": "26075:10:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 12170, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28243, "src": "26027:14:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$28243_$", "typeString": "type(library BalanceHandler)"}}, "id": 12171, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getBalanceStorage", "nodeType": "MemberAccess", "referencedDeclaration": 28104, "src": "26027:32:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_int256_$_t_int256_$_t_uint256_$_t_uint256_$", "typeString": "function (address,uint256) view returns (int256,int256,uint256,uint256)"}}, "id": 12174, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "26027:59:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$_t_uint256_$_t_uint256_$", "typeString": "tuple(int256,int256,uint256,uint256)"}}, "nodeType": "VariableDeclarationStatement", "src": "25864:222:35"}, {"expression": {"id": 12181, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 12176, "name": "nTokenCashBalance", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12169, "src": "26096:17:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 12179, "name": "netAssetCashNToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12132, "src": "26138:18:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 12177, "name": "nTokenCashBalance", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12169, "src": "26116:17:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 12178, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 53257, "src": "26116:21:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 12180, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "26116:41:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "26096:61:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 12182, "nodeType": "ExpressionStatement", "src": "26096:61:35"}, {"expression": {"arguments": [{"id": 12186, "name": "nTokenAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12122, "src": "26276:13:35", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 12187, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12124, "src": "26291:10:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 12188, "name": "nTokenCashBalance", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 12169, "src": "26303:17:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 12183, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 28243, "src": "26234:14:35", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$28243_$", "typeString": "type(library BalanceHandler)"}}, "id": 12185, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBalanceStorageForNToken", "nodeType": "MemberAccess", "referencedDeclaration": 27756, "src": "26234:41:35", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_int256_$returns$__$", "typeString": "function (address,uint256,int256)"}}, "id": 12189, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "26234:87:35", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 12190, "nodeType": "ExpressionStatement", "src": "26234:87:35"}]}, "id": 12192, "implemented": true, "kind": "function", "modifiers": [], "name": "_updateNTokenPortfolio", "nodeType": "FunctionDefinition", "parameters": {"id": 12133, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 12122, "mutability": "mutable", "name": "nTokenAddress", "nodeType": "VariableDeclaration", "scope": 12192, "src": "25127:21:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 12121, "name": "address", "nodeType": "ElementaryTypeName", "src": "25127:7:35", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 12124, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 12192, "src": "25158:18:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12123, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "25158:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 12126, "mutability": "mutable", "name": "maturity", "nodeType": "VariableDeclaration", "scope": 12192, "src": "25186:16:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12125, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "25186:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 12128, "mutability": "mutable", "name": "lastInitializedTime", "nodeType": "VariableDeclaration", "scope": 12192, "src": "25212:27:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12127, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "25212:7:35", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 12130, "mutability": "mutable", "name": "fCashAmountToPurchase", "nodeType": "VariableDeclaration", "scope": 12192, "src": "25249:28:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12129, "name": "int256", "nodeType": "ElementaryTypeName", "src": "25249:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 12132, "mutability": "mutable", "name": "netAssetCashNToken", "nodeType": "VariableDeclaration", "scope": 12192, "src": "25287:25:35", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 12131, "name": "int256", "nodeType": "ElementaryTypeName", "src": "25287:6:35", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "25117:201:35"}, "returnParameters": {"id": 12134, "nodeType": "ParameterList", "parameters": [], "src": "25327:0:35"}, "scope": 12193, "src": "25086:1242:35", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}], "scope": 12194, "src": "554:25776:35"}], "src": "41:26290:35"}, "bytecode": "6153d2610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80633643f39b14610050578063b58f83ed14610087578063e50f349e146100b5575b600080fd5b81801561005c57600080fd5b5061007061006b366004614d05565b6100e2565b60405161007e929190614f33565b60405180910390f35b81801561009357600080fd5b506100a76100a2366004614c09565b6101b9565b60405161007e9291906152ba565b8180156100c157600080fd5b506100d56100d0366004614e1b565b6102df565b60405161007e9190614f2a565b60008060006100f087610321565b90506100fa614921565b6000610104614969565b4260a082015260005b878110156101a357600061013a8d87878d8d8781811061012957fe5b905060200201358760a0015161034d565b8560000186602001828152508281525082935050505061016c8d8d61ffff16838e64ffffffffff168760200151610487565b60208401528380610181575060008360200151125b8351606085015191955061019591906105f4565b60608401525060010161010d565b50606001519450925050505b9550959350505050565b6101c161499f565b6000806101cd87610321565b90506101d7614921565b6101df614969565b4260a082015260005b868110156102ca5760008888838181106101fe57fe5b9050602002013560f81c60ff16600581111561021657fe5b9050600281600581111561022657fe5b148061023d5750600381600581111561023b57fe5b145b156102635760405162461bcd60e51b815260040161025a90615208565b60405180910390fd5b60006102888d87878d8d8881811061027757fe5b905060200201358860a0015161034d565b602087018190529086529091506102ab908c9061ffff8f16908490600190610610565b50825160608401516102bc916105f4565b6060840152506001016101e8565b50606001519699969850959650505050505050565b6000806102eb84610321565b90506102f5614921565b600060f885901c600581111561030757fe5b90506103168383834289610715565b509695505050505050565b6103296149c7565b60006103388361ffff16610803565b9050610344838261084f565b9150505b919050565b600080808060f886901c600581111561036257fe5b9050600481600581111561037257fe5b14156103905761038489898789610892565b9195509350915061047b565b600581600581111561039e57fe5b14156103b05761038489898789610a72565b60008160058111156103be57fe5b14806103d5575060018160058111156103d357fe5b145b15610463576103e7888883888a610715565b9093509150826104095760405162461bcd60e51b815260040161025a90615063565b86602001519350876000015161ffff16896001600160a01b03167fc53d733b6fdfac3f892b49bf468cd1cae7773ab553e440dc689ed6b09bb646b186868660405161045693929190615312565b60405180910390a361047b565b60405162461bcd60e51b815260040161025a90615145565b50955095509592505050565b6000806104948787610ceb565b905060006104a0610d20565b6001600160a01b0389166000908152602082815260408083208b845282528083208a84529091528120919250806104d7888a610d2d565b91509150806104e557600080fd5b6104ef8583610e38565b1561057e57825460009061050b908990600f90810b900b6105f4565b905060016001607f1b0319811280159061052c575060016001607f1b038113155b61053557600080fd5b83546001600160801b0319166001600160801b03600f83900b16178455806105665761056386846000610e68565b95505b6105718c8c88610eb6565b95506105eb945050505050565b86156105e25760016001607f1b031987128015906105a3575060016001607f1b038713155b6105ac57600080fd5b82546001600160801b0319166001600160801b03600f89900b161783556105d585836001610e68565b94506105e28b8b87610eb6565b86955050505050505b95945050505050565b8181018281121560008312151461060a57600080fd5b92915050565b845161061f9085858585610f10565b156106295761070e565b604085015115610656576000610646866020015186868686610f10565b90508015610654575061070e565b505b61065f82611021565b1561067257600081121561067257600080fd5b6001600160571b0319811280159061069157506001600160571b038113155b61069a57600080fd5b846020015151856040015114156106be576106b88560200151611037565b60208601525b600085602001518660400151815181106106d457fe5b602090810291909101810151868152908101859052604080820185905260608201849052600060a090920191909152860180516001019052505b5050505050565b60008060ff60f084901c1661072d88888385896110f0565b6001600160581b03609885901c169150600186600581111561074b57fe5b141561075d5761075a8261116b565b91505b6107838883610779888b6020015161117990919063ffffffff16565b8a929190856111d6565b925063ffffffff607885901c1680156107f75760018760058111156107a457fe5b14156107d357808860a0015111156107ce5760405162461bcd60e51b815260040161025a906151d8565b6107f7565b808860a0015110156107f75760405162461bcd60e51b815260040161025a906151d8565b50509550959350505050565b61080b6149f3565b60008060006108198561123c565b604080516060810182526001600160a01b039093168352602083019390935260ff16600a0a918101919091529350505050919050565b6108576149c7565b60006108668461ffff166112ff565b6040805160808101825261ffff96909616865260ff821660208701528501939093525050606082015290565b6000808063ffffffff60d885901c16608085901c600a0b8682116108c85760405162461bcd60e51b815260040161025a906150c3565b6108d78860200151838961131c565b156108f45760405162461bcd60e51b815260040161025a90614f81565b6000610907896000015161ffff166113c1565b9050600080610915836113e7565b9450509350505061093c81600260ff166006811061092f57fe5b8491610e10911a02611450565b8a1161095a5760405162461bcd60e51b815260040161025a90615171565b600061096f848d6000015161ffff16886114aa565b90506000811280156109815750600085125b156109975780851215610992578094505b6109d4565b6000811380156109a75750600085135b156109bc5780851315610992578094506109d4565b60405162461bcd60e51b815260040161025a90614fb8565b60006109e38d888e89876114ef565b90506109fb858e6000015161ffff1689878a86611576565b8d6001600160a01b03168764ffffffffff168e6000015161ffff167fe85dd6c9c85c29a2f4d4cb74e31514bfc478c8c5a50da255ea565123d87933528985604051610a47929190614f43565b60405180910390a486610a598261116b565b87995099509950505050505050505b9450945094915050565b60008080605884901c6001600160a01b038881169082161415610aa75760405162461bcd60e51b815260040161025a90615261565b6001600160581b0385166000610abc836115fb565b9050610ac78161169c565b15610b58576040516337b5fc2160e11b815273__SettleAssetsExternal__________________90636f6bf84290610b059086908590600401614ebe565b60a06040518083038186803b158015610b1d57600080fd5b505af4158015610b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b559190614d84565b90505b610b64838a84846116f0565b915060006276a700610b758a611823565b0190506000610b868b838c87611844565b90506000811215610b9657600080fd5b604080516001808252818301909252600091816020015b610bb5614a1d565b815260200190600190039081610bad5790505090508b6000015161ffff1681600081518110610be057fe5b602002602001015160000181815250508281600081518110610bfe57fe5b60200260200101516020018181525050610c178261116b565b81600081518110610c2457fe5b60200260200101516060018181525050600160ff1681600081518110610c4657fe5b60200260200101516040018181525050610c618685836118a4565b9350610c6f90508386611925565b8b6001600160a01b03168b6000015161ffff16866001600160a01b03167fc76e4e38ccd25a7b0a39cdaa81a20efa0c2127e74c448b7b05aef1c427d5732b87610cb78661116b565b604051610cc5929190614f43565b60405180910390a481610cd78561116b565b909d909c50909a5098505050505050505050565b600080610cf6611a29565b6001600160a01b038516600090815260209182526040808220868352909252205491505092915050565b60008061060a600c611a32565b6000806000610d3b85611a4b565b905062015180840615610d55576000809250925050610e31565b838110610d69576000809250925050610e31565b6201518081850304605a8111610d8657925060019150610e319050565b6101688111610dc5576000620151806207e900840604820160591901905060068104605a0160068281610db557fe5b0660001494509450505050610e31565b6108708111610df55760006201518062278d00840604820161016719019050601e8104608701601e8281610db557fe5b611de28111610e25576000620151806276a700840604820161086f19019050605a810460c301605a8281610db557fe5b61010060009350935050505b9250929050565b600060018210158015610e4d57506101008211155b610e5657600080fd5b50600019011b600160ff1b9081161490565b600060018310158015610e7d57506101008311155b610e8657600080fd5b8115610e9f5750600160ff1b60001983011c8317610eaf565b50600160ff1b60001983011c1983165b9392505050565b6014610ec182611a67565b1115610edf5760405162461bcd60e51b815260040161025a9061509a565b6000610ee9611a29565b6001600160a01b039094166000908152602094855260408082209482529390945250912055565b6000805b8651811015611014576000878281518110610f2b57fe5b60200260200101519050848160400151141580610f49575080518714155b80610f58575085816020015114155b15610f63575061100c565b60028160a001516003811115610f7557fe5b14158015610f93575060038160a001516003811115610f9057fe5b14155b610f9c57600080fd5b6060810151600090610fae90866105f4565b9050610fb986611021565b15610fcc576000811215610fcc57600080fd5b6001600160571b03198112801590610feb57506001600160571b038113155b610ff457600080fd5b6060820152600160a090910181905291506105eb9050565b600101610f14565b5060009695505050505050565b60006002821080159061060a5750506008101590565b60606000825160001461104e578251600202611051565b60015b905060008167ffffffffffffffff8111801561106c57600080fd5b506040519080825280602002602001820160405280156110a657816020015b611093614a1d565b81526020019060019003908161108b5790505b50905060005b84518110156110e8578481815181106110c157fe5b60200260200101518282815181106110d557fe5b60209081029190910101526001016110ac565b509392505050565b82600111158015611105575084602001518311155b6111215760405162461bcd60e51b815260040161025a9061511d565b600061113e61112f85611b37565b61113884611823565b90611450565b9050611163866000015161ffff168284866111588b611bdb565b8a9493929190611bef565b505050505050565b600061060a60001983611c19565b6000828211156111d0576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000806111e68787878787611c67565b909250905081156112325760006111fc88611d6a565b90506112208189604001518a606001518b60a001518c60c001518d60e00151611d6e565b86516112309061ffff1683611e82565b505b5095945050505050565b600080600080600061124d86611f09565b909250905060006001600160a01b0383166112725750600090506402540be4006112f4565b826001600160a01b0316631ee108336040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156112ad57600080fd5b505af11580156112c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e59190614d6c565b9050600081136112f457600080fd5b969195509350915050565b60008061130a611f40565b60009384526020525050604090205490565b600080841161133d5760405162461bcd60e51b815260040161025a90614fe0565b600784111561135e5760405162461bcd60e51b815260040161025a906150ed565b6276a70083061561137157506000610eaf565b600061137c83611823565b905060015b8581116113b55761139b61139482611b37565b8390611450565b8514156113ad57600192505050610eaf565b600101611381565b50600095945050505050565b6000806113cc611f4d565b6000938452602052505060409020546001600160a01b031690565b6000806000806000806113f8611f5a565b6001600160a01b039097166000908152602097909752505060409094205461ffff81169563ffffffff62010000830481169650600160301b830416945060ff600160501b8304169350600160581b90910460d01b9150565b600082820183811015610eaf576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000806114b5610d20565b6001600160a01b03861660009081526020918252604080822087835283528082208683529092522054600f90810b900b9150509392505050565b6000806114fd878787611f67565b9050600483901a620f42400260008513156115235761151c8282611450565b915061153a565b808211156115355761151c8282611179565b600091505b600061154f8361154a8a8a611179565b612050565b905061156961155e87836120c1565b60408b0151906120da565b9998505050505050505050565b600061158d878787876115888861116b565b610487565b90506000831380156115a0575060008112155b806115b757506000831280156115b7575060008113155b6115c057600080fd5b60006115cc8888612119565b50505090506115e483826105f490919063ffffffff16565b90506115f18888836121c2565b5050505050505050565b611603614a5d565b600061160d6121e5565b6001600160a01b039390931660009081526020938452604090819020815160a081018352905464ffffffffff8116825265010000000000810460f81b6001600160f81b03191695820195909552600160301b850460ff1691810191909152600160381b840461ffff166060820152600160481b90930460701b6001600160701b03191660808401525090919050565b6000426116a8836121f2565b156116c9576116b681611a4b565b835164ffffffffff161091506103489050565b825164ffffffffff16158015906116e85750825164ffffffffff168110155b915050610348565b6000808312156116ff57600080fd5b60008060008061171789896000015161ffff16612119565b93509350935093506000841261173f5760405162461bcd60e51b815260040161025a906151a8565b866117585761174d8461116b565b96506000935061178d565b6117618461116b565b8713156117805760405162461bcd60e51b815260040161025a9061522a565b61178a84886105f4565b93505b83158015611799575082155b156117b65787516117b690879061ffff166000600160fe1b6121ff565b6117cc89896000015161ffff16868686866123ff565b876000015161ffff16896001600160a01b03167f5441e4a5fac93a951d782e6f1cdb82e95c8fc58561a013953d17e395c5e69b4b8960405161180e9190614f2a565b60405180910390a35094979650505050505050565b60006276a70082101561183557600080fd5b6276a700825b06909103919050565b600080611852868686611f67565b9050600061187661186c6118658961253d565b8490611450565b61154a8888611179565b905061189981611893868a6040015161255290919063ffffffff16565b9061257d565b979650505050505050565b6118ac614a5d565b6118b58361169c565b156118d25760405162461bcd60e51b815260040161025a90615036565b6118db836121f2565b156118f0576118eb848484612596565b61191d565b60006119028585604001518551612657565b905061190e81846126ea565b61191b8486836000612748565b505b509092915050565b600061192f6121e5565b6001600160a01b03831660008181526020838152604080832088518154938a0151838b015160608c015160808d015160701c600160481b027affffffffffffffffffffffffffffffffffff0000000000000000001961ffff909216600160381b0268ffff000000000000001960ff94909416600160301b0266ff0000000000001960f89690961c650100000000000265ff00000000001964ffffffffff90981664ffffffffff19909b169a909a1796909616989098179390931693909317169490941716929092179091555192935090917f6bd4b121bca854a191536a2ca891155c42ee2fb23f307fb34e8bc65cfcb5412e9190a2505050565b60008061060a600b5b6000620f424082601a811115611a4457fe5b0192915050565b600062015180821015611a5d57600080fd5b620151808261183b565b600181901c7f5555555555555555555555555555555555555555555555555555555555555555908116911601600281901c7f3333333333333333333333333333333333333333333333333333333333333333908116911601600481901c7f07070707070707070707070707070707070707070707070707070707070707079190911601600881901c7e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f908116911601601081901c01602081901c01604081901c01608081901c60ff90811691160190565b60008160011415611b4c57506276a700610348565b8160021415611b5f575062ed4e00610348565b8160031415611b7357506301da9c00610348565b8160041415611b8757506303b53800610348565b8160051415611b9b57506309450c00610348565b8160061415611baf575063128a1800610348565b8160071415611bc357506325143000610348565b60405162461bcd60e51b815260040161025a9061500f565b6060015161012c60089190911c60ff160290565b60006276a700611bfe85611823565b019050611c108787878787878761282a565b50505050505050565b818102600019831415611c4957811580611c3b575082828281611c3857fe5b05145b611c4457600080fd5b61060a565b821580611c5e575081838281611c5b57fe5b05145b61060a57600080fd5b60008084876040015113611c80575060009050806101af565b6000806000611c918a8a8989612861565b925092509250600080611cab8c604001518587868e612901565b909250905080611cc6576000809650965050505050506101af565b506000806000611cd88d858e8e6129ad565b9250925092508260001415611cfa5760008098509850505050505050506101af565b60408e0151611d09908d612a9d565b60408f01819052611d2690611d1e88856105f4565b89888f612ab9565b60a08f01819052611d445760008098509850505050505050506101af565b611d558e8e60400151858585612b76565b98509850505050505050509550959350505050565b5190565b60008512158015611d8657506001600160501b038513155b611d8f57600080fd5b60008412158015611da757506001600160501b038413155b611db057600080fd5b826000108015611dc4575063ffffffff8311155b611dcd57600080fd5b816000108015611de1575063ffffffff8211155b611dea57600080fd5b63ffffffff811115611dfb57600080fd5b855469ffffffffffffffffffff19166001600160501b039586161769ffffffffffffffffffff60501b1916600160501b94909516939093029390931763ffffffff60a01b1916600160a01b63ffffffff928316021763ffffffff60c01b1916600160c01b93821693909302929092176001600160e01b0316600160e01b9190921602179055565b6000811215611e9057600080fd5b6000611e9d600084612119565b5050509050611eb582826105f490919063ffffffff16565b9050611ec86000848360008060006123ff565b8261ffff167f85170c297762884f47ec6098b74925c795e6d33686b11019b400e33a9b23b5e983604051611efc9190614f2a565b60405180910390a2505050565b6000806000611f16612bcb565b600094855260205250506040909120546001600160a01b03811692600160a01b90910460ff169150565b60008061060a6009611a32565b60008061060a6003611a32565b60008061060a6002611a32565b6000806000611f7b86602001518686612bd8565b915091506000611f8a87611bdb565b905081611fad578651611fa39061ffff16878388612c99565b9350505050610eaf565b6000611fb886611823565b90506000611fc861139486611b37565b90506000611fe08a6000015161ffff1683868b612c99565b9050600080876001141561200557899150611ffe8c60400151612d38565b9050612034565b61201b61201460018a03611b37565b8690611450565b91506120318c6000015161ffff1683888d612c99565b90505b612041828583868f612dc9565b98505050505050505050610eaf565b60008061207361206e6301da9c006120688787612e27565b90612e80565b612ee7565b9050600061208782621dcd6560491b612f05565b9050600061209482612f58565b905060006120a882621dcd6560491b612fad565b90506120b381612fe3565b60070b979650505050505050565b6000610eaf6120d484633b9aca00611c19565b83612fec565b600080612111846020015161210b86604001516121056402540be40088611c1990919063ffffffff16565b90611c19565b90612fec565b949350505050565b600080600080600061212961301d565b6001600160a01b0388166000908152602082815260408083208a8452909152902080546001600160501b0381169650600160501b900463ffffffff169450909150831561219257805461218b90600160701b900466ffffffffffffff1661302a565b92506121a7565b8054600160701b900466ffffffffffffff1692505b54600160a81b9004600a90810b900b97939650919450925050565b60008112156121d057600080fd5b6121e083838360008060006123ff565b505050565b60008061060a6001611a32565b6060015161ffff16151590565b8260001080156122115750613fff8311155b61221a57600080fd5b81801561222e575082846060015161ffff16145b15612238576123f9565b6080840151600090815b6001600160701b03198216156123b35760f082901c613fff1686811480156122675750855b1561229f57506080870180516001600160f01b0319861660109093029290921c919091176001600160701b0319169052506123f99050565b86811480156122ac575085155b15612301576001600160f01b03198516199290921691600360fe1b83166122df576010836001600160701b031916901b92505b506001600160701b031991821660109091021c919091171660808501526123f9565b868111801561230d5750855b15612367576080888101516001600160f01b031960f08a901b88178116601086021c9690961795911b161561234157600080fd5b506001600160701b03199182166001919091016010021c919091171660808501526123f9565b8681118015612374575085155b1561238257505050506123f9565b506001600160f01b0319821660108281029190911c93909317929190911b6001600160801b03191690600101612242565b846123c0575050506123f9565b600981106123cd57600080fd5b6001600160f01b031960f087901b85171660109091021c919091176001600160701b0319166080860152505b50505050565b600061240961301d565b6001600160a01b0388166000908152602082815260408083208a845290915290209091506001600160571b0319861280159061244c57506001600160571b038613155b61245557600080fd5b6000851215801561246d57506001600160501b038513155b61247657600080fd5b836124b65766ffffffffffffff83111561248f57600080fd5b805466ffffffffffffff60701b1916600160701b66ffffffffffffff8516021781556124d0565b8054600160501b900463ffffffff1684146124d057600080fd5b8054600a9690960b6001600160581b0316600160a81b026001600160a81b036001600160501b0390961669ffffffffffffffffffff1963ffffffff909616600160501b0263ffffffff60501b19909816979097179490941695909517939093169190911790925550505050565b606001516207a12060309190911c60ff160290565b600080612111846040015161210b6402540be40061210b878960200151611c1990919063ffffffff16565b6000610eaf61258c8484611c19565b633b9aca00612fec565b61259f826121f2565b6125a857600080fd5b606082015161ffff1660005b825181101561070e5760008382815181106125cb57fe5b602002602001015190508060600151600014156125e8575061264f565b805183146125f557600080fd5b604081015160011461260657600080fd5b600061262887858460200151896000015164ffffffffff168660600151610487565b9050600081121561264c57602086018051600160f81b176001600160f81b03191690525b50505b6001016125b4565b61265f61499f565b61266761499f565b60ff8416612676579050610eaf565b6126808585613038565b815260ff841660608201528267ffffffffffffffff811180156126a257600080fd5b506040519080825280602002602001820160405280156126dc57816020015b6126c9614a1d565b8152602001906001900390816126c15790505b506020820152949350505050565b60005b81518110156121e057600082828151811061270457fe5b602002602001015190508060600151600014156127215750612740565b61273e848260000151836020015184604001518560600151610610565b505b6001016126ed565b60008080806127578688613061565b64ffffffffff81168c52929650909450925090506127748861169c565b1561277e57600080fd5b60ff821660408901528461279d57600760ff8316111561279d57600080fd5b83156127c057602088018051600160f81b176001600160f81b03191690526127cf565b602088018051607f60f91b1690525b6127dc88608001516132a0565b6001600160701b031916608089015260005b831561281f5760f084901c818114612811576128118a826001600160ff1b6121ff565b60109490941b9390506127ee565b505050505050505050565b612837878787868561331b565b6128508760e001518860a001518960c0015185886133d5565b60c090970196909652505050505050565b6000808080612871878688613468565b905060006128908960600151896040015161255290919063ffffffff16565b90508860400151600014806128a3575080155b156128ba5760008060009450945094505050610a68565b6000806128d28b604001518c60a0015185878d6134da565b9092509050806128f057600080600096509650965050505050610a68565b509199909850909650945050505050565b6000808061290f8885612a9d565b905060006129276129208a8a6105f4565b83906120c1565b9050633b023380811315612943576000809350935050506101af565b60008061294f8361356a565b91509150806129685760008095509550505050506101af565b600061297e89612978858d6120c1565b906105f4565b9050633b9aca0081121561299d576000809650965050505050506101af565b9550600194506101af9350505050565b60008080806129c46129bf87896120c1565b61116b565b905060006129da6129d48a61360c565b87612050565b90506000871315612a325760006129f189836120c1565b9050633b9aca00811215612a12576000806000955095509550505050610a68565b612a2a612a23633b9aca0084613621565b849061257d565b915050612a54565b612a516129bf8261210b612a4a633b9aca0083613621565b8690611c19565b90505b6000612a6e606461210b612a678d613637565b8590611c19565b9050612a7a8383613621565b612a8b6129bf836129788787613621565b909b909a509098509650505050505050565b6000612aa98383613621565b9050600081121561060a57600080fd5b6000806000612acc888888886000612901565b9150915080612ae0576000925050506105eb565b6000612aeb83613644565b90506000612aff82621dcd6560491b612f05565b90506000612b0c82613670565b90506000612b28612b2383621dcd6560491b612fad565b6136aa565b67ffffffffffffffff1690506000612b4889612068846301da9c00612e27565b905063ffffffff811115612b665760009750505050505050506105eb565b9c9b505050505050505050505050565b60008080612b8487866120da565b6060890151909150612b9690826105f4565b60608901524260e08901526000612bad88866120da565b90506000612bbb89896120da565b9a91995090975050505050505050565b60008061060a600f611a32565b60008060008511612bfb5760405162461bcd60e51b815260040161025a90614fe0565b6007851115612c1c5760405162461bcd60e51b815260040161025a906150ed565b6000612c2784611823565b905060015b868111612c78576000612c4161186583611b37565b905086811415612c595750925060009150612c919050565b86811115612c6f5750925060019150612c919050565b50600101612c2c565b5060405162461bcd60e51b815260040161025a9061528d565b935093915050565b600080612ca46136c6565b905060006276a700612cb585611823565b6000898152602085815260408083208b84528252808320949093018083529390522080549192509063ffffffff600160a01b8204811691600160c01b8104821691600160e01b9091041681612d1c5760405162461bcd60e51b815260040161025a90614f51565b612d298184848c8c6133d5565b9b9a5050505050505050505050565b80516000906001600160a01b0316612d5257506000610348565b600082600001516001600160a01b031663dd30a6666040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9157600080fd5b505afa158015612da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaf9190614d6c565b6000818610612dd757600080fd5b848210612de357600080fd5b838310612e0957612e02846111388888036120688388038b8803612e27565b90506105eb565b612e02612e208787036120688688038a8703612e27565b8590611179565b600082612e365750600061060a565b82820282848281612e4357fe5b0414610eaf5760405162461bcd60e51b815260040180806020018281038252602181526020018061537c6021913960400191505060405180910390fd5b6000808211612ed6576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612edf57fe5b049392505050565b6000677fffffffffffffff821115612efe57600080fd5b5060401b90565b600081600f0b60001415612f1857600080fd5b600082600f0b604085600f0b901b81612f2d57fe5b05905060016001607f1b03198112801590612f4f575060016001607f1b038113155b610eaf57600080fd5b6000600160461b82600f0b12612f6d57600080fd5b683fffffffffffffffff1982600f0b1215612f8a57506000610348565b61060a608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d6136d3565b6000600f83810b9083900b0260401d60016001607f1b03198112801590612f4f575060016001607f1b03811315610eaf57600080fd5b600f0b60401d90565b6000816000191480156130025750600160ff1b83145b1561300c57600080fd5b81838161301557fe5b059392505050565b60008061060a6006611a32565b600881901c60ff9091161b90565b606060006130468484614181565b9050600181511161305857905061060a565b610eaf81614299565b6000808080808080805b8951518110156130f25760008a60000151828151811061308757fe5b6020026020010151905060038081111561309d57fe5b8160a0015160038111156130ad57fe5b14156130b857600080fd5b60028160a0015160038111156130ca57fe5b141580156130da57506060810151155b156130e9576130e98b83614452565b5060010161306b565b5060005b8951518110156131955760008a60000151828151811061311257fe5b602002602001015190506002600381111561312957fe5b8160a00151600381111561313957fe5b141561314d5760808101516000905561318c565b60018160a00151600381111561315f57fe5b14156131785760808101518061317583826145a2565b50505b613184818686866146c7565b919650945092505b506001016130f6565b50606089015160006131a561472a565b6001600160a01b038b1660009081526020829052604081209192505b8c602001515181101561326f5760008d6020015182815181106131e057fe5b602002602001015190508060600151600014156131fd5750613267565b60028160a00151600381111561320f57fe5b1415801561322d575060038160a00151600381111561322a57fe5b14155b61323657600080fd5b613242818989896146c7565b9199509750955061325f8184876010811061325957fe5b016145a2565b600185019450505b6001016131c1565b5060108311158015613286575064ffffffffff8411155b61328f57600080fd5b50939a929950975095509350505050565b6000807f7fff7fff7fff7fff7fff7fff7fff7fff7fff00000000000000000000000000008316815b6001600160701b031982161561331257600160fe1b82811614156132fc576001600160f01b03198216811c92909217916010015b6010826001600160701b031916901b91506132c8565b50909392505050565b60006133256136c6565b6000868152602082815260408083208884528252808320868452825291829020808a5290890187905280546001600160501b03808216938b0193909352600160501b810490921660608a015263ffffffff600160a01b8304811660a08b0152600160c01b8304811660c08b0152600160e01b90920490911660e08901529091508084156133c45760018201546001600160501b031660808901526115f1565b600060808901525050505050505050565b60008083116133e357600080fd5b818611156133f25750836105eb565b60006133fe8388611179565b90508381111561341157859150506105eb565b60006134258561206884633b9aca00612e27565b90506000613437633b9aca0083611179565b9050600061345a633b9aca006120686134508b86612e27565b6111388d88612e27565b9a9950505050505050505050565b60008260011115801561347f575083602001518311155b61348857600080fd5b606084015160806008600019860102019060ff90821c16633b9aca000260006134c16134b386614737565b61210b846301da9c00611c19565b9050600081136134d057600080fd5b9695505050505050565b60008060006134e98785612050565b9050633b9aca008112156135045760008092509250506101af565b60008061351b6135148b8a6105f4565b8b906120c1565b90506000806135298361356a565b9150915080613543576000809650965050505050506101af565b613557613550838b6120c1565b8690613621565b9c60019c509a5050505050505050505050565b600080633b9aca0083141561358457506000905080613607565b600061359e613597633b9aca0086613621565b85906120c1565b905060006135ab82613644565b9050600081600f0b136135c657600080935093505050613607565b60006135fa6135f56135e96135da85613670565b6814b927f32bffb83338614751565b621dcd6560491b612fad565b612fe3565b60070b9450600193505050505b915091565b60600151620186a060109190911c60ff160290565b8082038281131560008312151461060a57600080fd5b6060015160181c60ff1690565b6000677fffffffffffffff1982121580156136675750677fffffffffffffff8213155b612efe57600080fd5b60008082600f0b1361368157600080fd5b608061368c83614784565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b60008082600f0b12156136bc57600080fd5b50600f0b60401d90565b60008061060a600a611a32565b6000600160461b82600f0b126136e857600080fd5b683fffffffffffffffff1982600f0b121561370557506000610348565b6001607f1b60006001603f1b8416600f0b13156137335770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315613760577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b131561378d577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b13156137ba5770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b13156137e7577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b131561381457700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b13156138415770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600083600160381b16600f0b131561386a57700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b13156138965770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b13156138c2577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b13156138ee57700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b131561391a577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b131561394657700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156139725770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b131561399e577001000162e525ee054754457d59952920260260801c5b600083600160301b16600f0b13156139c75770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b13156139f2577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b1315613a1d57700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b1315613a485770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b1315613a7357700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b1315613a9e5770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315613ac9577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b1315613af457700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b1315613b1f577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b1315613b4957700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b1315613b735770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b1315613b9d577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b1315613bc75770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315613bf1577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b1315613c1b57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b1315613c455770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b1315613c6f57700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b1315613c985770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315613cc1577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b1315613cea57700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315613d13577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b1315613d3c57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b1315613d655770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b1315613d8e577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b1315613db75770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b1315613ddf577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b1315613e0757700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b1315613e2f5770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b1315613e5757700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b1315613e7f5770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315613ea7577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b1315613ecf57700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315613ef7577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b1315613f1e57700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b1315613f455770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b1315613f6c577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b1315613f935770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315613fba577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b1315613fe157700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156140085770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561402f57700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156140555770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b131561407b577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b13156140a157700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b13156140c7577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b13156140ed57700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156141135770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315614139577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b131561415f5770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b0381111561060a57600080fd5b606060108260ff16111561419457600080fd5b600061419e61472a565b6001600160a01b038516600090815260208290526040812091925060ff851667ffffffffffffffff811180156141d357600080fd5b5060405190808252806020026020018201604052801561420d57816020015b6141fa614a1d565b8152602001906001900390816141f25790505b50905060005b8560ff1681101561123257600083826010811061422c57fe5b019050600083838151811061423d57fe5b602090810291909101810151835461ffff8116825264ffffffffff620100008204169282019290925260ff600160381b8304166040820152600160401b909104600a90810b900b60608201526080019190915250600101614213565b805160008167ffffffffffffffff811180156142b457600080fd5b506040519080825280602002602001820160405280156142de578160200160208202803683370190505b50905060005b8281101561433b5760008482815181106142fa57fe5b6020026020010151905061431b81600001518260200151836040015161485f565b83838151811061432757fe5b6020908102919091010152506001016142e4565b5060015b828110156123f957805b600081118015614381575082818151811061436057fe5b602002602001015183600183038151811061437757fe5b6020026020010151115b156144495782818151811061439257fe5b60200260200101518360018303815181106143a957fe5b60200260200101518460018403815181106143c057fe5b602002602001018584815181106143d357fe5b60200260200101828152508281525050508481815181106143f057fe5b602002602001015185600183038151811061440757fe5b602002602001015186600184038151811061441e57fe5b6020026020010187848151811061443157fe5b60209081029190910101919091525260001901614349565b5060010161433f565b815151811061446057600080fd5b600082606001511161447157600080fd5b60008260000151828151811061448357fe5b602002602001015190506002600381111561449a57fe5b8160a0015160038111156144aa57fe5b141580156144c8575060038160a0015160038111156144c557fe5b14155b6144d157600080fd5b606083018051600019019052600080805b855151811015614544576000866000015182815181106144fe57fe5b6020026020010151905082816080015111801561452b575060028160a00151600381111561452857fe5b14155b1561453b57806080015192508193505b506001016144e2565b508184141561455d575050600260a0919091015261459e565b60008560000151838151811061456f57fe5b602090810291909101015160808581018051918301805190915252600160a09182015260029401939093525050505b5050565b8151158015906145b557508151613fff10155b6145be57600080fd5b816020015160001080156145db5750602082015164ffffffffff10155b6145e457600080fd5b816040015160001080156145fd57506040820151600810155b61460657600080fd5b60608201516001600160571b03191380159061462d575060608201516001600160571b0312155b61463657600080fd5b8151815460208401516040850151606090950151600a0b6001600160581b0316600160401b0272ffffffffffffffffffffff00000000000000001960ff909616600160381b0267ff000000000000001964ffffffffff909316620100000266ffffffffff00001961ffff90961661ffff19909516949094179490941692909217169190911792909216919091179055565b6000806000806146d6886148ba565b90508415806146e457508085115b156146ed578094505b86806146fd575060008860600151125b965061ffff86161561470e57600080fd5b50509451939560109390931c60f09490941b9390931793509150565b60008061060a600d611a32565b60006001600160ff1b0382111561474d57600080fd5b5090565b6000600f82810b9084900b0360016001607f1b03198112801590612f4f575060016001607f1b03811315610eaf57600080fd5b60008082600f0b1361479557600080fd5b6000600f83900b600160401b81126147af576040918201911d5b64010000000081126147c3576020918201911d5b6201000081126147d5576010918201911d5b61010081126147e6576008918201911d5b601081126147f6576004918201911d5b60048112614806576002918201911d5b60028112614815576001820191505b603f19820160401b600f85900b607f8490031b6001603f1b5b60008113156148545790800260ff81901c8281029390930192607f011c9060011d61482e565b509095945050505050565b6000613fff84111561487057600080fd5b64ffffffffff83111561488257600080fd5b600882111561489057600080fd5b5067ffff000000000000603084901b1665ffffffffff00600884901b161760ff8216179392505050565b60008082604001511180156148d457506040820151600810155b6148dd57600080fd5b60408201516002106148f457506020810151610348565b60006149066001846040015103611b37565b6020840151909150610344906276a700906111389084611179565b60405180610100016040528060008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280606081526020016060815260200160008152602001600081525090565b60408051608081018252600080825260208201529081016149e66149f3565b8152600060209091015290565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160006003811115614a5857fe5b905290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b80356001600160a01b038116811461034857600080fd5b60008083601f840112614ab3578081fd5b50813567ffffffffffffffff811115614aca578182fd5b6020830191508360208083028501011115610e3157600080fd5b600082601f830112614af4578081fd5b8135602067ffffffffffffffff80831115614b0b57fe5b614b188283850201615331565b8381528281019086840160c0808702890186018a1015614b36578788fd5b875b87811015614bb75781838c031215614b4e578889fd5b604080518381018181108982111715614b6357fe5b82528435815288850135898201528482013591810191909152606080850135908201526080808501359082015260a090614b9e828601614bde565b9181019190915285529386019391810191600101614b38565b50919998505050505050505050565b80516001600160701b03198116811461034857600080fd5b80356004811061034857600080fd5b805161034881615355565b805160ff8116811461034857600080fd5b600080600080600060808688031215614c20578081fd5b614c2986614a8b565b94506020860135614c3981615355565b9350604086013567ffffffffffffffff80821115614c55578283fd5b908701906080828a031215614c68578283fd5b604051608081018181108382111715614c7d57fe5b604052823582811115614c8e578485fd5b614c9a8b828601614ae4565b825250602083013582811115614cae578485fd5b614cba8b828601614ae4565b60208301525060408381013590820152606092830135838201529450908701359080821115614ce7578283fd5b50614cf488828901614aa2565b969995985093965092949392505050565b600080600080600060808688031215614d1c578081fd5b614d2586614a8b565b94506020860135614d3581615355565b93506040860135614d4581615368565b9250606086013567ffffffffffffffff811115614d60578182fd5b614cf488828901614aa2565b600060208284031215614d7d578081fd5b5051919050565b600060a08284031215614d95578081fd5b60405160a0810181811067ffffffffffffffff82111715614db257fe5b6040528251614dc081615368565b815260208301516001600160f81b031981168114614ddc578283fd5b6020820152614ded60408401614bf8565b6040820152614dfe60608401614bed565b6060820152614e0f60808401614bc6565b60808201529392505050565b60008060408385031215614e2d578182fd5b8235614e3881615355565b946020939093013593505050565b6000815180845260208085019450808401835b83811015614eb357815180518852838101518489015260408082015190890152606080820151908901526080808201519089015260a0908101519060048210614e9e57fe5b88015260c09096019590820190600101614e59565b509495945050505050565b6001600160a01b03929092168252805164ffffffffff166020808401919091528101516001600160f81b03191660408084019190915281015160ff1660608084019190915281015161ffff1660808084019190915201516001600160701b03191660a082015260c00190565b90815260200190565b9182521515602082015260400190565b918252602082015260400190565b60208082526016908201527513585c9ad95d081b9bdd081a5b9a5d1a585b1a5e995960521b604082015260600190565b6020808252601a908201527f4e6f6e206964696f73796e637261746963206d61747572697479000000000000604082015260600190565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b60208082526015908201527410d1ce881b9bc81b585c9ad95d1cc81b1a5cdd1959605a1b604082015260600190565b6020808252600d908201526c092dcecc2d8d2c840d2dcc8caf609b1b604082015260600190565b6020808252601390820152724163636f756e74206d75737420736574746c6560681b604082015260600190565b60208082526017908201527f5472616465206661696c65642c206c6971756964697479000000000000000000604082015260600190565b6020808252600f908201526e4f766572206d61782061737365747360881b604082015260600190565b60208082526010908201526f496e76616c6964206d6174757269747960801b604082015260600190565b60208082526016908201527510d1ce881b585c9ad95d081a5b99195e08189bdd5b9960521b604082015260600190565b6020808252600e908201526d125b9d985b1a59081b585c9ad95d60921b604082015260600190565b602080825260129082015271496e76616c6964207472616465207479706560701b604082015260600190565b60208082526017908201527f496e73756666696369656e7420626c6f636b2074696d65000000000000000000604082015260600190565b602080825260169082015275496e76616c696420736574746c652062616c616e636560501b604082015260600190565b6020808252601690820152755472616465206661696c65642c20736c69707061676560501b604082015260600190565b602080825260089082015267111a5cd8589b195960c21b604082015260600190565b60208082526018908201527f496e76616c696420616d6f756e7420746f20736574746c650000000000000000604082015260600190565b60208082526012908201527121b0b73737ba1039b2ba3a36329039b2b63360711b604082015260600190565b60208082526013908201527210d1ce881b9bc81b585c9ad95d08199bdd5b99606a1b604082015260600190565b6000604082528351608060408401526152d660c0840182614e46565b90506020850151603f198483030160608501526152f38282614e46565b6040870151608086015260609096015160a08501525050506020015290565b64ffffffffff9390931683526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561534d57fe5b604052919050565b61ffff8116811461536557600080fd5b50565b64ffffffffff8116811461536557600080fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220f075f13d6ddcc9581f156650a7b3008fa02fe0e73527c7e2c46696be1687522c64736f6c63430007060033", "bytecodeSha1": "7215fe66914e2b3a747e4c5f47b7a658d7988405", "compiler": {"evm_version": "istanbul", "optimizer": {"enabled": true, "runs": 200}, "version": "0.7.6+commit.7338295f"}, "contractName": "TradingAction", "coverageMap": {"branches": {"100": {"SafeInt256.add": {"806": [1511, 1539, true]}, "SafeInt256.div": {"813": [1108, 1115, false], "814": [1119, 1135, true]}, "SafeInt256.mul": {"807": [497, 504, false], "808": [515, 521, true], "809": [525, 535, true], "810": [560, 566, true], "811": [570, 580, true]}, "SafeInt256.sub": {"815": [1385, 1413, true]}, "SafeInt256.subNoNeg": {"812": [1885, 1891, true]}, "SafeInt256.toInt": {"816": [2596, 2626, true]}}, "14": {}, "150": {}, "157": {}, "161": {}, "162": {}, "163": {}, "167": {}, "169": {}, "22": {}, "25": {}, "35": {"TradingAction._executeLendBorrowTrade": {"520": [13460, 13495, false], "521": [13780, 13794, false], "522": [13814, 13849, false], "523": [13937, 13972, true], "524": [14105, 14140, true]}, "TradingAction._executeTrade": {"515": [7554, 7605, false], "516": [7819, 7862, false], "517": [7990, 8023, true], "518": [8027, 8062, false], "519": [8293, 8308, true]}, "TradingAction._getResidualPriceAssetCash": {"537": [24034, 24049, false], "538": [24295, 24325, false]}, "TradingAction._purchaseNTokenResidual": {"525": [20033, 20053, true], "526": [20242, 20320, true], "527": [21392, 21560, true], "528": [21833, 21845, false], "529": [21849, 21874, false], "530": [21973, 22005, false], "531": [22060, 22072, false], "532": [22076, 22101, false], "533": [22200, 22232, false]}, "TradingAction._settleCashDebt": {"534": [15320, 15343, true], "535": [15570, 15608, false], "536": [16743, 16759, true]}, "TradingAction._updateNTokenPortfolio": {"539": [25703, 25728, false], "540": [25732, 25750, true], "541": [25768, 25793, false], "542": [25797, 25815, true]}, "TradingAction.executeTradesArrayBatch": {"513": [5260, 5301, true], "514": [5321, 5365, false]}}, "6": {"SafeMath.add": {"818": [2794, 2800, true]}, "SafeMath.div": {"821": [4294, 4299, true]}, "SafeMath.mul": {"819": [3611, 3617, false], "820": [3672, 3682, true]}, "SafeMath.sub": {"817": [3213, 3219, true]}}, "63": {}, "64": {}, "65": {}, "68": {}, "69": {"AccountContextHandler._clearPortfolioActiveFlags": {"654": [9343, 9420, false]}, "AccountContextHandler.mustSettleAssets": {"632": [3173, 3204, false]}, "AccountContextHandler.setActiveCurrency": {"633": [5431, 5445, false], "634": [5449, 5487, true], "635": [5707, 5715, false], "636": [5719, 5764, false], "637": [6877, 6894, false], "638": [6898, 6906, false], "639": [7232, 7249, false], "640": [7254, 7262, false], "641": [7405, 7455, false], "642": [7689, 7705, false], "643": [7709, 7717, false], "644": [8010, 8058, true], "645": [8358, 8374, false], "646": [8379, 8387, false], "647": [8616, 8624, false], "648": [8724, 8734, true]}, "AccountContextHandler.storeAssetsAndUpdateContext": {"649": [10453, 10494, true], "650": [10772, 10785, false], "651": [10809, 10869, true], "652": [11059, 11066, false], "653": [11955, 11981, false]}}, "70": {"BalanceHandler._setBalanceStorage": {"669": [20570, 20600, false], "670": [20604, 20634, true], "671": [20774, 20792, false], "672": [20796, 20829, true], "673": [20884, 20902, false], "674": [21192, 21232, true], "675": [21563, 21608, true]}, "BalanceHandler.getBalanceStorage": {"667": [22482, 22499, false]}, "BalanceHandler.incrementFeeToReserve": {"666": [18917, 18925, true]}, "BalanceHandler.setBalanceStorageForNToken": {"668": [18135, 18151, true]}, "BalanceHandler.setBalanceStorageForSettleCashDebt": {"660": [13236, 13260, true], "661": [13534, 13549, true], "662": [13590, 13614, false], "663": [13850, 13890, true], "664": [14140, 14156, false], "665": [14160, 14178, false]}}, "71": {}, "72": {}, "73": {}, "74": {}, "75": {}, "79": {"AssetRate._getAssetRateStateful": {"657": [4732, 4765, false], "658": [5116, 5124, true]}, "AssetRate.getSupplyRate": {"659": [2477, 2513, false]}}, "80": {"CashGroup.calculateOracleRate": {"696": [9928, 9941, false], "697": [10537, 10553, false]}, "CashGroup.getRateScalar": {"701": [2840, 2856, false], "702": [2860, 2899, true], "703": [3358, 3372, true]}, "CashGroup.interpolateOracleRate": {"698": [8136, 8165, true], "699": [8239, 8267, true], "700": [8503, 8524, false]}, "CashGroup.loadMarket": {"694": [7199, 7215, false], "695": [7219, 7258, true]}}, "81": {"DateTime.getBitNumFromMaturity": {"704": [4283, 4312, false], "705": [4387, 4412, false], "706": [4680, 4718, false], "707": [4780, 4819, false], "708": [5662, 5702, false], "709": [6112, 6154, false]}, "DateTime.getMarketIndex": {"723": [3155, 3173, true], "724": [3217, 3268, true], "725": [3566, 3592, false], "726": [3709, 3734, false]}, "DateTime.getReferenceTime": {"714": [425, 455, true]}, "DateTime.getTimeUTC0": {"715": [668, 689, true]}, "DateTime.getTradedMarket": {"716": [1014, 1024, false], "717": [1064, 1074, false], "718": [1118, 1128, false], "719": [1165, 1175, false], "720": [1216, 1226, false], "721": [1267, 1277, false], "722": [1319, 1329, false]}, "DateTime.isValidMarketMaturity": {"710": [1665, 1683, true], "711": [1727, 1778, true], "712": [1820, 1853, false], "713": [2003, 2052, false]}}, "82": {"Market._getExchangeRate": {"741": [20164, 20208, false], "742": [20317, 20324, false], "743": [20548, 20579, false]}, "Market._getNetCashAmountsUnderlying": {"744": [10206, 10224, false], "745": [10626, 10672, false]}, "Market._getRateAnchor": {"752": [15667, 15709, false], "753": [16043, 16050, false]}, "Market._logProportion": {"754": [21090, 21128, false], "755": [21743, 21762, false]}, "Market._setMarketStorage": {"730": [29327, 29342, false], "731": [29346, 29376, true], "732": [29431, 29450, false], "733": [29454, 29488, true], "734": [29547, 29566, false], "735": [29570, 29605, true], "736": [29665, 29679, false], "737": [29683, 29713, true], "738": [29794, 29831, true]}, "Market._updateRateOracle": {"749": [23383, 23407, true], "750": [23555, 23584, false], "751": [23684, 23715, false]}, "Market.calculateTrade": {"728": [4871, 4906, false], "729": [6073, 6094, false]}, "Market.executeTrade": {"727": [3255, 3272, false]}, "Market.getExchangeRateFactors": {"739": [8149, 8171, true], "740": [8175, 8199, false]}, "Market.getImpliedRate": {"746": [16863, 16870, false], "747": [17821, 17851, false]}, "Market.getOracleRate": {"748": [25482, 25496, true]}}, "84": {}, "85": {}, "86": {"BitmapAssetsHandler.addMultipleifCashAssets": {"689": [1930, 1962, true], "690": [2179, 2198, false], "691": [2231, 2261, true], "692": [2327, 2372, true], "693": [2692, 2709, false]}, "BitmapAssetsHandler.addifCashAsset": {"681": [3621, 3628, true], "682": [3689, 3718, false], "683": [3879, 3912, false], "684": [3916, 3949, true], "685": [4348, 4361, false], "686": [4483, 4511, false], "687": [4515, 4543, true]}, "BitmapAssetsHandler.setAssetsBitmap": {"688": [1069, 1127, true]}}, "87": {"PortfolioHandler._extendNewAssetArray": {"773": [5552, 5573, true]}, "PortfolioHandler._loadAssetArray": {"787": [16955, 16985, true]}, "PortfolioHandler._mergeAssetIntoArray": {"764": [1530, 1558, true], "765": [1578, 1608, true], "766": [1628, 1654, false], "767": [1853, 1899, false], "768": [1919, 1973, true], "769": [2173, 2213, false], "770": [2241, 2257, true], "771": [2354, 2384, false], "772": [2388, 2418, true]}, "PortfolioHandler._storeAsset": {"795": [11735, 11755, false], "796": [11759, 11803, true], "797": [11864, 11882, false], "798": [11886, 11920, true], "799": [11978, 11997, false], "800": [12001, 12055, true], "801": [12108, 12141, false], "802": [12145, 12178, true]}, "PortfolioHandler._updatePortfolioContext": {"803": [11089, 11108, true], "804": [11112, 11143, false], "805": [11268, 11315, true]}, "PortfolioHandler.addAsset": {"756": [3230, 3416, false], "757": [3448, 3484, false], "758": [3715, 3721, false], "759": [3904, 3944, false], "760": [3968, 3981, true], "761": [4069, 4096, false], "762": [4100, 4127, true], "763": [4242, 4309, false]}, "PortfolioHandler.addMultipleAssets": {"775": [914, 933, false]}, "PortfolioHandler.buildPortfolioState": {"774": [15658, 15679, false]}, "PortfolioHandler.deleteAsset": {"788": [12795, 12837, true], "789": [12885, 12921, true], "790": [13072, 13126, false], "791": [13142, 13204, true], "792": [13680, 13709, false], "793": [13713, 13755, false], "794": [13883, 13910, false]}, "PortfolioHandler.getSortedPortfolio": {"776": [15082, 15100, false]}, "PortfolioHandler.storeAssets": {"777": [7495, 7549, true], "778": [7625, 7671, false], "779": [7675, 7694, false], "780": [8021, 8067, false], "781": [8305, 8351, false], "782": [9569, 9588, false], "783": [9637, 9683, false], "784": [9703, 9757, true], "785": [10311, 10335, false], "786": [10339, 10373, true]}}, "88": {"TransferAssets.encodeAssetId": {"824": [1043, 1081, true], "825": [1100, 1128, true], "826": [1147, 1195, true]}, "TransferAssets.placeAssetsInAccount": {"822": [2322, 2356, true], "823": [2395, 2427, false]}}, "89": {}, "90": {}, "91": {"AssetHandler.getSettlementDate": {"655": [1112, 1131, false], "656": [1135, 1189, true]}}, "97": {"ABDKMath64x64.div": {"544": [6751, 6757, true], "545": [6817, 6836, false], "546": [6840, 6859, true]}, "ABDKMath64x64.exp": {"547": [21409, 21433, true], "548": [21457, 21482, false]}, "ABDKMath64x64.exp_2": {"555": [14708, 14732, true], "556": [14756, 14781, false], "557": [14873, 14899, false], "558": [14977, 15003, false], "559": [15081, 15107, false], "560": [15185, 15211, false], "561": [15289, 15314, false], "562": [15392, 15417, false], "563": [15495, 15520, false], "564": [15598, 15623, false], "565": [15701, 15725, false], "566": [15803, 15827, false], "567": [15905, 15929, false], "568": [16007, 16031, false], "569": [16109, 16132, false], "570": [16210, 16233, false], "571": [16311, 16334, false], "572": [16412, 16435, false], "573": [16513, 16535, false], "574": [16613, 16635, false], "575": [16713, 16735, false], "576": [16813, 16835, false], "577": [16913, 16934, false], "578": [17012, 17033, false], "579": [17111, 17132, false], "580": [17210, 17231, false], "581": [17309, 17329, false], "582": [17407, 17427, false], "583": [17505, 17525, false], "584": [17603, 17623, false], "585": [17701, 17720, false], "586": [17798, 17817, false], "587": [17895, 17914, false], "588": [17992, 18011, false], "589": [18089, 18107, false], "590": [18185, 18203, false], "591": [18281, 18299, false], "592": [18377, 18395, false], "593": [18473, 18490, false], "594": [18568, 18585, false], "595": [18663, 18680, false], "596": [18758, 18775, false], "597": [18853, 18869, false], "598": [18947, 18963, false], "599": [19041, 19057, false], "600": [19135, 19151, false], "601": [19229, 19244, false], "602": [19322, 19337, false], "603": [19415, 19430, false], "604": [19508, 19523, false], "605": [19601, 19615, false], "606": [19693, 19707, false], "607": [19785, 19799, false], "608": [19877, 19891, false], "609": [19969, 19982, false], "610": [20060, 20073, false], "611": [20151, 20164, false], "612": [20242, 20255, false], "613": [20333, 20345, false], "614": [20423, 20435, false], "615": [20513, 20525, false], "616": [20603, 20615, false], "617": [20693, 20704, false], "618": [20782, 20793, false], "619": [20871, 20882, false], "620": [20960, 20971, false], "621": [21096, 21125, true]}, "ABDKMath64x64.fromInt": {"551": [1312, 1336, false], "552": [1340, 1363, true]}, "ABDKMath64x64.fromUInt": {"543": [2004, 2027, true]}, "ABDKMath64x64.ln": {"553": [14352, 14357, true]}, "ABDKMath64x64.log_2": {"624": [13408, 13413, true], "625": [13464, 13489, false], "626": [13525, 13542, false], "627": [13578, 13591, false], "628": [13627, 13638, false], "629": [13672, 13682, false], "630": [13716, 13725, false], "631": [13759, 13768, false]}, "ABDKMath64x64.mul": {"549": [4307, 4326, false], "550": [4330, 4349, true]}, "ABDKMath64x64.sub": {"622": [3883, 3902, false], "623": [3906, 3925, true]}, "ABDKMath64x64.toUInt": {"554": [2373, 2379, true]}}, "98": {"Bitmap.isBitSet": {"676": [828, 838, false], "677": [842, 854, true]}, "Bitmap.setBit": {"678": [455, 465, false], "679": [469, 481, true], "680": [526, 531, false]}}, "99": {}}, "statements": {"100": {"SafeInt256.add": {"34": [1503, 1540]}, "SafeInt256.div": {"325": [1098, 1137], "326": [1245, 1254]}, "SafeInt256.divInRatePrecision": {"215": [2116, 2163]}, "SafeInt256.mul": {"181": [474, 483], "182": [506, 536], "183": [551, 581]}, "SafeInt256.mulInRatePrecision": {"252": [2337, 2384]}, "SafeInt256.neg": {"105": [1619, 1636]}, "SafeInt256.sub": {"371": [1377, 1414]}, "SafeInt256.subNoNeg": {"291": [1854, 1867], "292": [1877, 1892]}, "SafeInt256.toInt": {"484": [2587, 2627], "485": [2660, 2676]}}, "14": {}, "150": {}, "157": {}, "161": {}, "162": {}, "163": {}, "167": {}, "169": {}, "22": {}, "25": {}, "35": {"TradingAction._executeLendBorrowTrade": {"46": [13276, 13335], "47": [13346, 13396], "48": [13497, 13528], "49": [13539, 13698], "50": [13929, 13999], "51": [14097, 14167]}, "TradingAction._executeTrade": {"16": [7621, 7798], "17": [7878, 7969], "18": [8078, 8271], "19": [8285, 8336], "20": [8528, 8554], "21": [8568, 8764], "22": [8795, 8823]}, "TradingAction._getResidualPriceAssetCash": {"130": [24228, 24274], "131": [24524, 24570], "132": [24703, 24717], "133": [24967, 25073]}, "TradingAction._getfCashSettleAmount": {"152": [18784, 19008]}, "TradingAction._purchaseNTokenResidual": {"54": [20025, 20074], "55": [20221, 20372], "56": [21371, 21609], "57": [22007, 22039], "58": [22234, 22266], "59": [22369, 22393], "60": [22864, 23079], "61": [23090, 23289], "62": [23300, 23366]}, "TradingAction._settleCashDebt": {"63": [15312, 15366], "64": [15624, 15715], "65": [16066, 16262], "66": [16735, 16760], "67": [17185, 17228], "68": [17242, 17281], "69": [17295, 17333], "70": [17398, 17446], "71": [17518, 17680], "72": [17700, 17751], "73": [17762, 17945], "74": [17956, 18023]}, "TradingAction._updateNTokenPortfolio": {"134": [25681, 25826], "135": [26096, 26157], "136": [26234, 26321]}, "TradingAction.executeTradesArrayBatch": {"7": [5048, 5077], "8": [5398, 5416], "9": [6027, 6246], "10": [6265, 6451], "11": [6480, 6513], "12": [5127, 5130], "13": [6534, 6568]}, "TradingAction.executeTradesBitmapBatch": {"0": [3484, 3513], "1": [3612, 3807], "2": [3822, 4034], "3": [4049, 4099], "4": [4113, 4146], "5": [3563, 3566], "6": [4167, 4199]}, "TradingAction.executeVaultTrade": {"14": [2471, 2572]}}, "6": {"SafeMath.add": {"128": [2786, 2832]}, "SafeMath.div": {"314": [4286, 4330], "315": [4340, 4352]}, "SafeMath.mul": {"312": [3619, 3627], "313": [3664, 3720]}, "SafeMath.sub": {"106": [3205, 3254], "107": [3264, 3276]}}, "63": {}, "64": {}, "65": {"LibStorage._getStorageSlot": {"160": [11692, 11737]}}, "68": {}, "69": {"AccountContextHandler._clearPortfolioActiveFlags": {"344": [9497, 9550], "345": [9568, 9580], "346": [9608, 9629], "347": [9650, 9663]}, "AccountContextHandler.getAccountContext": {"137": [743, 764]}, "AccountContextHandler.isBitmapEnabled": {"223": [1219, 1262]}, "AccountContextHandler.mustSettleAssets": {"138": [3350, 3420], "139": [3649, 3735]}, "AccountContextHandler.setAccountContext": {"158": [1029, 1060], "159": [1070, 1104]}, "AccountContextHandler.setActiveCurrency": {"224": [5423, 5488], "225": [5766, 5773], "226": [6965, 7106], "227": [7124, 7131], "228": [7350, 7383], "229": [7457, 7478], "230": [7496, 7564], "231": [7582, 7589], "232": [8002, 8059], "233": [7737, 7817], "234": [8147, 8221], "235": [8239, 8246], "236": [8389, 8396], "237": [8410, 8470], "238": [8484, 8505], "239": [8519, 8530], "240": [8626, 8633], "241": [8716, 8735], "242": [8777, 8906]}, "AccountContextHandler.storeAssetsAndUpdateContext": {"267": [10389, 10435], "268": [10445, 10495], "269": [10541, 10591], "270": [10801, 10870], "271": [11082, 11156], "272": [11232, 11307], "273": [11426, 11519], "274": [12001, 12083], "275": [12151, 12198], "276": [12111, 12136]}}, "70": {"BalanceHandler._setBalanceStorage": {"243": [20562, 20635], "244": [20766, 20830], "245": [21184, 21233], "246": [21287, 21353], "247": [21555, 21609], "248": [21630, 21682], "249": [21754, 21801], "250": [21692, 21744]}, "BalanceHandler.getBalanceStorage": {"216": [22370, 22414], "217": [22424, 22468], "218": [22674, 22766], "219": [22797, 22855], "220": [22875, 22915]}, "BalanceHandler.incrementFeeToReserve": {"202": [18909, 18926], "203": [19086, 19122], "204": [19132, 19204], "205": [19214, 19261]}, "BalanceHandler.setBalanceStorageForNToken": {"221": [18127, 18152], "222": [18198, 18265]}, "BalanceHandler.setBalanceStorageForSettleCashDebt": {"140": [13228, 13261], "141": [13526, 13576], "142": [13695, 13734], "143": [13748, 13763], "144": [13842, 13919], "145": [13933, 13983], "146": [14194, 14347], "147": [14368, 14564], "148": [14631, 14705], "149": [14716, 14742]}}, "71": {}, "72": {}, "73": {}, "74": {}, "75": {}, "79": {"AssetRate._getAssetRateStateful": {"111": [4993, 5020], "112": [5051, 5094], "113": [5108, 5125], "114": [5176, 5226]}, "AssetRate._getAssetRateStorage": {"206": [3154, 3198], "207": [3208, 3260]}, "AssetRate.buildAssetRateStateful": {"52": [6164, 6413]}, "AssetRate.getSupplyRate": {"307": [2515, 2523]}}, "80": {"CashGroup._buildCashGroup": {"53": [16991, 17199]}, "CashGroup._getCashGroupStorageBytes": {"115": [11458, 11482]}, "CashGroup.buildCashGroupStateful": {"15": [17869, 17914]}, "CashGroup.calculateOracleRate": {"208": [9957, 10039], "209": [10658, 10683], "210": [10701, 10748], "211": [10846, 10922], "212": [10941, 11131], "213": [11160, 11248]}, "CashGroup.getRateOracleTimeWindow": {"179": [5713, 5811]}, "CashGroup.getRateScalar": {"360": [2832, 2900], "361": [3350, 3373], "362": [3413, 3430]}, "CashGroup.getReserveFeeShare": {"372": [4681, 4739]}, "CashGroup.getSettlementPenalty": {"251": [6043, 6153]}, "CashGroup.getTotalFee": {"370": [4373, 4456]}, "CashGroup.interpolateOracleRate": {"308": [8128, 8166], "309": [8231, 8268], "310": [8540, 8784], "311": [9127, 9463]}, "CashGroup.loadMarket": {"103": [7191, 7277], "104": [7408, 7590]}}, "81": {"DateTime.getBitNumFromMaturity": {"76": [4314, 4331], "77": [4414, 4431], "78": [4734, 4759], "79": [5306, 5641], "80": [5922, 6091], "81": [6377, 6552], "82": [6698, 6717]}, "DateTime.getMarketIndex": {"299": [3147, 3199], "300": [3209, 3295], "301": [3594, 3611], "302": [3736, 3752], "303": [3408, 3411], "304": [3773, 3802]}, "DateTime.getReferenceTime": {"150": [417, 456], "151": [466, 516]}, "DateTime.getTimeUTC0": {"161": [660, 690], "162": [700, 736]}, "DateTime.getTradedMarket": {"171": [1026, 1050], "172": [1076, 1104], "173": [1130, 1151], "174": [1177, 1202], "175": [1228, 1253], "176": [1279, 1305], "177": [1331, 1357], "178": [1368, 1391]}, "DateTime.isValidMarketMaturity": {"116": [1657, 1709], "117": [1719, 1805], "118": [1855, 1867], "119": [2054, 2065], "120": [1980, 1983], "121": [2086, 2098]}}, "82": {"Market._getExchangeRate": {"283": [20210, 20227], "284": [20326, 20343], "285": [20595, 20612], "286": [20643, 20662]}, "Market._getNetCashAmountsUnderlying": {"287": [10674, 10690], "288": [11606, 11685], "289": [12616, 12695], "290": [12836, 13133]}, "Market._getRateAnchor": {"363": [15711, 15728], "364": [16052, 16069], "365": [16164, 16241], "366": [16262, 16287]}, "Market._loadMarketStorage": {"348": [26560, 26585], "349": [26595, 26621], "350": [26631, 26675], "351": [26685, 26737], "352": [26747, 26801], "353": [26811, 26855], "354": [26865, 26923], "355": [26968, 27020], "356": [27051, 27076]}, "Market._logProportion": {"367": [21130, 21147], "368": [21764, 21781], "369": [22147, 22168]}, "Market._setMarketStorage": {"192": [29319, 29377], "193": [29423, 29489], "194": [29539, 29606], "195": [29657, 29714], "196": [29760, 29832], "197": [29888, 29933], "198": [29943, 29996], "199": [30006, 30061], "200": [30071, 30116], "201": [30126, 30185]}, "Market._setNewMarketState": {"296": [13808, 13879], "297": [13948, 13990], "298": [14177, 14227]}, "Market._updateRateOracle": {"357": [23375, 23408], "358": [23586, 23608], "359": [23802, 23824]}, "Market.calculateTrade": {"184": [4908, 4921], "185": [5334, 5556], "186": [5584, 5597], "187": [6096, 6109], "188": [6296, 6358], "189": [6372, 6606], "190": [6934, 6947], "191": [6968, 7181]}, "Market.executeTrade": {"108": [3052, 3240], "109": [3372, 3625], "110": [3639, 3720]}, "Market.getExchangeRateFactors": {"279": [8201, 8217], "280": [8430, 8654], "281": [8682, 8698], "282": [8719, 8771]}, "Market.getExchangeRateFromImpliedRate": {"214": [18585, 18628]}, "Market.getImpliedRate": {"293": [16872, 16880], "294": [17853, 17861], "295": [17872, 17890]}, "Market.getOracleRate": {"305": [25474, 25523], "306": [25534, 25745]}, "Market.loadMarket": {"180": [30694, 30911]}, "Market.loadMarketWithSettlementDate": {"277": [31391, 31471], "278": [31482, 31691]}}, "84": {"nTokenHandler.getNTokenContext": {"123": [1193, 1224], "124": [1234, 1299], "125": [1309, 1358], "126": [1368, 1411], "127": [1421, 1458]}, "nTokenHandler.nTokenAddress": {"122": [1729, 1753]}}, "85": {}, "86": {"BitmapAssetsHandler.addMultipleifCashAssets": {"253": [1922, 1963], "254": [2200, 2208], "255": [2223, 2262], "256": [2319, 2373], "257": [2465, 2673], "258": [2727, 2801], "259": [2103, 2106]}, "BitmapAssetsHandler.addifCashAsset": {"23": [3613, 3629], "24": [3871, 3950], "25": [3997, 4039], "26": [4161, 4210], "27": [4239, 4289], "28": [4303, 4323], "29": [4475, 4544], "30": [4591, 4628], "31": [4643, 4691], "32": [4705, 4755], "33": [4776, 4791]}, "BitmapAssetsHandler.getAssetsBitmap": {"75": [882, 915]}, "BitmapAssetsHandler.getifCashNotional": {"129": [1629, 1681]}, "BitmapAssetsHandler.setAssetsBitmap": {"88": [1061, 1147], "89": [1266, 1307]}}, "87": {"PortfolioHandler._extendNewAssetArray": {"100": [5752, 5783], "101": [5733, 5736], "102": [5804, 5824]}, "PortfolioHandler._loadAssetArray": {"446": [16947, 16986], "447": [17584, 17626], "448": [17640, 17678], "449": [17692, 17732], "450": [17746, 17784], "451": [17798, 17822], "452": [17332, 17335]}, "PortfolioHandler._mergeAssetIntoArray": {"90": [1669, 1677], "91": [1828, 1987], "92": [2233, 2258], "93": [2346, 2419], "94": [2478, 2506], "95": [2520, 2565], "96": [2580, 2591], "97": [1433, 1436], "98": [2612, 2624]}, "PortfolioHandler._sortInPlace": {"453": [16250, 16338], "454": [16120, 16123], "455": [16565, 16608], "456": [16626, 16681], "457": [16699, 16702], "458": [16730, 16733]}, "PortfolioHandler._storeAsset": {"471": [11727, 11804], "472": [11856, 11921], "473": [11970, 12056], "474": [12100, 12179], "475": [12229, 12279], "476": [12289, 12335], "477": [12345, 12392], "478": [12402, 12447]}, "PortfolioHandler._updatePortfolioContext": {"479": [11159, 11190], "480": [11210, 11249], "481": [11260, 11316], "482": [11371, 11469], "483": [11480, 11539]}, "PortfolioHandler.addAsset": {"35": [3427, 3434], "36": [3723, 3730], "37": [3960, 3982], "38": [4061, 4128], "39": [4325, 4398], "40": [4780, 4812], "41": [4822, 4850], "42": [4860, 4890], "43": [4900, 4928], "44": [4938, 4988], "45": [4998, 5035]}, "PortfolioHandler.addMultipleAssets": {"264": [935, 943], "265": [958, 1143], "266": [838, 841]}, "PortfolioHandler.buildPortfolioState": {"260": [15681, 15693], "261": [15704, 15770], "262": [15780, 15822], "263": [15832, 15885]}, "PortfolioHandler.deleteAsset": {"459": [12787, 12838], "460": [12877, 12922], "461": [13051, 13214], "462": [13253, 13290], "463": [13775, 13804], "464": [13822, 13844], "465": [13587, 13590], "466": [14031, 14084], "467": [14098, 14105], "468": [14421, 14596], "469": [14606, 14657], "470": [14667, 14720]}, "PortfolioHandler.getSortedPortfolio": {"328": [15102, 15115], "329": [15126, 15146]}, "PortfolioHandler.storeAssets": {"330": [7487, 7550], "331": [7714, 7744], "332": [7255, 7258], "333": [8611, 8643], "334": [8820, 9055], "335": [7923, 7926], "336": [9590, 9598], "337": [9612, 9771], "338": [9823, 10038], "339": [10053, 10105], "340": [10119, 10142], "341": [9475, 9478], "342": [10303, 10374], "343": [10424, 10576]}}, "88": {"TransferAssets.encodeAssetId": {"506": [1035, 1082], "507": [1092, 1129], "508": [1139, 1196], "509": [1207, 1430]}, "TransferAssets.placeAssetsInAccount": {"153": [2314, 2380], "154": [2515, 2591], "155": [2876, 2916], "156": [3009, 3083], "157": [3104, 3125]}}, "89": {}, "90": {}, "91": {"AssetHandler.getSettlementDate": {"510": [1104, 1190], "511": [1365, 1386], "512": [1689, 1751]}, "AssetHandler.isLiquidityToken": {"99": [699, 830]}}, "97": {"ABDKMath64x64.div": {"318": [6742, 6758], "319": [6808, 6860]}, "ABDKMath64x64.exp": {"320": [21400, 21434], "321": [21484, 21492], "322": [21512, 21600]}, "ABDKMath64x64.exp_2": {"378": [14699, 14733], "379": [14783, 14791], "380": [14907, 14967], "381": [15011, 15071], "382": [15115, 15175], "383": [15219, 15279], "384": [15322, 15382], "385": [15425, 15485], "386": [15528, 15588], "387": [15631, 15691], "388": [15733, 15793], "389": [15835, 15895], "390": [15937, 15997], "391": [16039, 16099], "392": [16140, 16200], "393": [16241, 16301], "394": [16342, 16402], "395": [16443, 16503], "396": [16543, 16603], "397": [16643, 16703], "398": [16743, 16803], "399": [16843, 16903], "400": [16942, 17002], "401": [17041, 17101], "402": [17140, 17200], "403": [17239, 17299], "404": [17337, 17397], "405": [17435, 17495], "406": [17533, 17593], "407": [17631, 17691], "408": [17728, 17788], "409": [17825, 17885], "410": [17922, 17982], "411": [18019, 18079], "412": [18115, 18175], "413": [18211, 18271], "414": [18307, 18367], "415": [18403, 18463], "416": [18498, 18558], "417": [18593, 18653], "418": [18688, 18748], "419": [18783, 18843], "420": [18877, 18937], "421": [18971, 19031], "422": [19065, 19125], "423": [19159, 19219], "424": [19252, 19312], "425": [19345, 19405], "426": [19438, 19498], "427": [19531, 19591], "428": [19623, 19683], "429": [19715, 19775], "430": [19807, 19867], "431": [19899, 19959], "432": [19990, 20050], "433": [20081, 20141], "434": [20172, 20232], "435": [20263, 20323], "436": [20353, 20413], "437": [20443, 20503], "438": [20533, 20593], "439": [20623, 20683], "440": [20712, 20772], "441": [20801, 20861], "442": [20890, 20950], "443": [20979, 21039], "444": [21046, 21081], "445": [21087, 21126]}, "ABDKMath64x64.fromInt": {"373": [1303, 1364]}, "ABDKMath64x64.fromUInt": {"316": [1995, 2028], "317": [2034, 2057]}, "ABDKMath64x64.ln": {"374": [14343, 14358], "375": [14365, 14453]}, "ABDKMath64x64.log_2": {"487": [13399, 13414], "488": [13493, 13502], "489": [13504, 13513], "490": [13546, 13555], "491": [13557, 13566], "492": [13595, 13604], "493": [13606, 13615], "494": [13642, 13650], "495": [13652, 13660], "496": [13686, 13694], "497": [13696, 13704], "498": [13729, 13737], "499": [13739, 13747], "500": [13770, 13778], "501": [13972, 13980], "502": [14039, 14065], "503": [14017, 14031], "504": [13953, 13962], "505": [14078, 14100]}, "ABDKMath64x64.mul": {"323": [4298, 4350]}, "ABDKMath64x64.sub": {"486": [3874, 3926]}, "ABDKMath64x64.toInt": {"324": [1672, 1694]}, "ABDKMath64x64.toUInt": {"376": [2364, 2380], "377": [2386, 2409]}}, "98": {"Bitmap.isBitSet": {"83": [820, 855], "84": [894, 959]}, "Bitmap.setBit": {"85": [447, 482], "86": [547, 593], "87": [624, 671]}, "Bitmap.totalBitsSet": {"163": [1130, 1286], "164": [1296, 1452], "165": [1462, 1549], "166": [1559, 1715], "167": [1725, 1742], "168": [1752, 1769], "169": [1779, 1797], "170": [1807, 1844]}}, "99": {"FloatingPoint56.unpackFrom56Bits": {"327": [1385, 1418]}}}}, "dependencies": ["ABDKMath64x64", "AaveHandler", "AccountContextHandler", "AssetHandler", "AssetRate", "AssetRateAdapter", "BalanceHandler", "Bitmap", "BitmapAssetsHandler", "CErc20Interface", "CEtherInterface", "CTokenInterface", "CashGroup", "CompoundHandler", "Constants", "DateTime", "Deployments", "FloatingPoint56", "GenericToken", "IEIP20NonStandard", "OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/IERC20", "IRewarder", "Incentives", "LibStorage", "Market", "MigrateIncentives", "PortfolioHandler", "SafeInt256", "OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/SafeMath", "SettleAssetsExternal", "SettleBitmapAssets", "SettlePortfolioAssets", "TokenHandler", "TransferAssets", "nTokenHandler", "nTokenSupply"], "deployedBytecode": "730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80633643f39b14610050578063b58f83ed14610087578063e50f349e146100b5575b600080fd5b81801561005c57600080fd5b5061007061006b366004614d05565b6100e2565b60405161007e929190614f33565b60405180910390f35b81801561009357600080fd5b506100a76100a2366004614c09565b6101b9565b60405161007e9291906152ba565b8180156100c157600080fd5b506100d56100d0366004614e1b565b6102df565b60405161007e9190614f2a565b60008060006100f087610321565b90506100fa614921565b6000610104614969565b4260a082015260005b878110156101a357600061013a8d87878d8d8781811061012957fe5b905060200201358760a0015161034d565b8560000186602001828152508281525082935050505061016c8d8d61ffff16838e64ffffffffff168760200151610487565b60208401528380610181575060008360200151125b8351606085015191955061019591906105f4565b60608401525060010161010d565b50606001519450925050505b9550959350505050565b6101c161499f565b6000806101cd87610321565b90506101d7614921565b6101df614969565b4260a082015260005b868110156102ca5760008888838181106101fe57fe5b9050602002013560f81c60ff16600581111561021657fe5b9050600281600581111561022657fe5b148061023d5750600381600581111561023b57fe5b145b156102635760405162461bcd60e51b815260040161025a90615208565b60405180910390fd5b60006102888d87878d8d8881811061027757fe5b905060200201358860a0015161034d565b602087018190529086529091506102ab908c9061ffff8f16908490600190610610565b50825160608401516102bc916105f4565b6060840152506001016101e8565b50606001519699969850959650505050505050565b6000806102eb84610321565b90506102f5614921565b600060f885901c600581111561030757fe5b90506103168383834289610715565b509695505050505050565b6103296149c7565b60006103388361ffff16610803565b9050610344838261084f565b9150505b919050565b600080808060f886901c600581111561036257fe5b9050600481600581111561037257fe5b14156103905761038489898789610892565b9195509350915061047b565b600581600581111561039e57fe5b14156103b05761038489898789610a72565b60008160058111156103be57fe5b14806103d5575060018160058111156103d357fe5b145b15610463576103e7888883888a610715565b9093509150826104095760405162461bcd60e51b815260040161025a90615063565b86602001519350876000015161ffff16896001600160a01b03167fc53d733b6fdfac3f892b49bf468cd1cae7773ab553e440dc689ed6b09bb646b186868660405161045693929190615312565b60405180910390a361047b565b60405162461bcd60e51b815260040161025a90615145565b50955095509592505050565b6000806104948787610ceb565b905060006104a0610d20565b6001600160a01b0389166000908152602082815260408083208b845282528083208a84529091528120919250806104d7888a610d2d565b91509150806104e557600080fd5b6104ef8583610e38565b1561057e57825460009061050b908990600f90810b900b6105f4565b905060016001607f1b0319811280159061052c575060016001607f1b038113155b61053557600080fd5b83546001600160801b0319166001600160801b03600f83900b16178455806105665761056386846000610e68565b95505b6105718c8c88610eb6565b95506105eb945050505050565b86156105e25760016001607f1b031987128015906105a3575060016001607f1b038713155b6105ac57600080fd5b82546001600160801b0319166001600160801b03600f89900b161783556105d585836001610e68565b94506105e28b8b87610eb6565b86955050505050505b95945050505050565b8181018281121560008312151461060a57600080fd5b92915050565b845161061f9085858585610f10565b156106295761070e565b604085015115610656576000610646866020015186868686610f10565b90508015610654575061070e565b505b61065f82611021565b1561067257600081121561067257600080fd5b6001600160571b0319811280159061069157506001600160571b038113155b61069a57600080fd5b846020015151856040015114156106be576106b88560200151611037565b60208601525b600085602001518660400151815181106106d457fe5b602090810291909101810151868152908101859052604080820185905260608201849052600060a090920191909152860180516001019052505b5050505050565b60008060ff60f084901c1661072d88888385896110f0565b6001600160581b03609885901c169150600186600581111561074b57fe5b141561075d5761075a8261116b565b91505b6107838883610779888b6020015161117990919063ffffffff16565b8a929190856111d6565b925063ffffffff607885901c1680156107f75760018760058111156107a457fe5b14156107d357808860a0015111156107ce5760405162461bcd60e51b815260040161025a906151d8565b6107f7565b808860a0015110156107f75760405162461bcd60e51b815260040161025a906151d8565b50509550959350505050565b61080b6149f3565b60008060006108198561123c565b604080516060810182526001600160a01b039093168352602083019390935260ff16600a0a918101919091529350505050919050565b6108576149c7565b60006108668461ffff166112ff565b6040805160808101825261ffff96909616865260ff821660208701528501939093525050606082015290565b6000808063ffffffff60d885901c16608085901c600a0b8682116108c85760405162461bcd60e51b815260040161025a906150c3565b6108d78860200151838961131c565b156108f45760405162461bcd60e51b815260040161025a90614f81565b6000610907896000015161ffff166113c1565b9050600080610915836113e7565b9450509350505061093c81600260ff166006811061092f57fe5b8491610e10911a02611450565b8a1161095a5760405162461bcd60e51b815260040161025a90615171565b600061096f848d6000015161ffff16886114aa565b90506000811280156109815750600085125b156109975780851215610992578094505b6109d4565b6000811380156109a75750600085135b156109bc5780851315610992578094506109d4565b60405162461bcd60e51b815260040161025a90614fb8565b60006109e38d888e89876114ef565b90506109fb858e6000015161ffff1689878a86611576565b8d6001600160a01b03168764ffffffffff168e6000015161ffff167fe85dd6c9c85c29a2f4d4cb74e31514bfc478c8c5a50da255ea565123d87933528985604051610a47929190614f43565b60405180910390a486610a598261116b565b87995099509950505050505050505b9450945094915050565b60008080605884901c6001600160a01b038881169082161415610aa75760405162461bcd60e51b815260040161025a90615261565b6001600160581b0385166000610abc836115fb565b9050610ac78161169c565b15610b58576040516337b5fc2160e11b815273__$f6541b0d362a0c7d99a2a29cd3d373d61b$__90636f6bf84290610b059086908590600401614ebe565b60a06040518083038186803b158015610b1d57600080fd5b505af4158015610b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b559190614d84565b90505b610b64838a84846116f0565b915060006276a700610b758a611823565b0190506000610b868b838c87611844565b90506000811215610b9657600080fd5b604080516001808252818301909252600091816020015b610bb5614a1d565b815260200190600190039081610bad5790505090508b6000015161ffff1681600081518110610be057fe5b602002602001015160000181815250508281600081518110610bfe57fe5b60200260200101516020018181525050610c178261116b565b81600081518110610c2457fe5b60200260200101516060018181525050600160ff1681600081518110610c4657fe5b60200260200101516040018181525050610c618685836118a4565b9350610c6f90508386611925565b8b6001600160a01b03168b6000015161ffff16866001600160a01b03167fc76e4e38ccd25a7b0a39cdaa81a20efa0c2127e74c448b7b05aef1c427d5732b87610cb78661116b565b604051610cc5929190614f43565b60405180910390a481610cd78561116b565b909d909c50909a5098505050505050505050565b600080610cf6611a29565b6001600160a01b038516600090815260209182526040808220868352909252205491505092915050565b60008061060a600c611a32565b6000806000610d3b85611a4b565b905062015180840615610d55576000809250925050610e31565b838110610d69576000809250925050610e31565b6201518081850304605a8111610d8657925060019150610e319050565b6101688111610dc5576000620151806207e900840604820160591901905060068104605a0160068281610db557fe5b0660001494509450505050610e31565b6108708111610df55760006201518062278d00840604820161016719019050601e8104608701601e8281610db557fe5b611de28111610e25576000620151806276a700840604820161086f19019050605a810460c301605a8281610db557fe5b61010060009350935050505b9250929050565b600060018210158015610e4d57506101008211155b610e5657600080fd5b50600019011b600160ff1b9081161490565b600060018310158015610e7d57506101008311155b610e8657600080fd5b8115610e9f5750600160ff1b60001983011c8317610eaf565b50600160ff1b60001983011c1983165b9392505050565b6014610ec182611a67565b1115610edf5760405162461bcd60e51b815260040161025a9061509a565b6000610ee9611a29565b6001600160a01b039094166000908152602094855260408082209482529390945250912055565b6000805b8651811015611014576000878281518110610f2b57fe5b60200260200101519050848160400151141580610f49575080518714155b80610f58575085816020015114155b15610f63575061100c565b60028160a001516003811115610f7557fe5b14158015610f93575060038160a001516003811115610f9057fe5b14155b610f9c57600080fd5b6060810151600090610fae90866105f4565b9050610fb986611021565b15610fcc576000811215610fcc57600080fd5b6001600160571b03198112801590610feb57506001600160571b038113155b610ff457600080fd5b6060820152600160a090910181905291506105eb9050565b600101610f14565b5060009695505050505050565b60006002821080159061060a5750506008101590565b60606000825160001461104e578251600202611051565b60015b905060008167ffffffffffffffff8111801561106c57600080fd5b506040519080825280602002602001820160405280156110a657816020015b611093614a1d565b81526020019060019003908161108b5790505b50905060005b84518110156110e8578481815181106110c157fe5b60200260200101518282815181106110d557fe5b60209081029190910101526001016110ac565b509392505050565b82600111158015611105575084602001518311155b6111215760405162461bcd60e51b815260040161025a9061511d565b600061113e61112f85611b37565b61113884611823565b90611450565b9050611163866000015161ffff168284866111588b611bdb565b8a9493929190611bef565b505050505050565b600061060a60001983611c19565b6000828211156111d0576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000806111e68787878787611c67565b909250905081156112325760006111fc88611d6a565b90506112208189604001518a606001518b60a001518c60c001518d60e00151611d6e565b86516112309061ffff1683611e82565b505b5095945050505050565b600080600080600061124d86611f09565b909250905060006001600160a01b0383166112725750600090506402540be4006112f4565b826001600160a01b0316631ee108336040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156112ad57600080fd5b505af11580156112c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e59190614d6c565b9050600081136112f457600080fd5b969195509350915050565b60008061130a611f40565b60009384526020525050604090205490565b600080841161133d5760405162461bcd60e51b815260040161025a90614fe0565b600784111561135e5760405162461bcd60e51b815260040161025a906150ed565b6276a70083061561137157506000610eaf565b600061137c83611823565b905060015b8581116113b55761139b61139482611b37565b8390611450565b8514156113ad57600192505050610eaf565b600101611381565b50600095945050505050565b6000806113cc611f4d565b6000938452602052505060409020546001600160a01b031690565b6000806000806000806113f8611f5a565b6001600160a01b039097166000908152602097909752505060409094205461ffff81169563ffffffff62010000830481169650600160301b830416945060ff600160501b8304169350600160581b90910460d01b9150565b600082820183811015610eaf576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000806114b5610d20565b6001600160a01b03861660009081526020918252604080822087835283528082208683529092522054600f90810b900b9150509392505050565b6000806114fd878787611f67565b9050600483901a620f42400260008513156115235761151c8282611450565b915061153a565b808211156115355761151c8282611179565b600091505b600061154f8361154a8a8a611179565b612050565b905061156961155e87836120c1565b60408b0151906120da565b9998505050505050505050565b600061158d878787876115888861116b565b610487565b90506000831380156115a0575060008112155b806115b757506000831280156115b7575060008113155b6115c057600080fd5b60006115cc8888612119565b50505090506115e483826105f490919063ffffffff16565b90506115f18888836121c2565b5050505050505050565b611603614a5d565b600061160d6121e5565b6001600160a01b039390931660009081526020938452604090819020815160a081018352905464ffffffffff8116825265010000000000810460f81b6001600160f81b03191695820195909552600160301b850460ff1691810191909152600160381b840461ffff166060820152600160481b90930460701b6001600160701b03191660808401525090919050565b6000426116a8836121f2565b156116c9576116b681611a4b565b835164ffffffffff161091506103489050565b825164ffffffffff16158015906116e85750825164ffffffffff168110155b915050610348565b6000808312156116ff57600080fd5b60008060008061171789896000015161ffff16612119565b93509350935093506000841261173f5760405162461bcd60e51b815260040161025a906151a8565b866117585761174d8461116b565b96506000935061178d565b6117618461116b565b8713156117805760405162461bcd60e51b815260040161025a9061522a565b61178a84886105f4565b93505b83158015611799575082155b156117b65787516117b690879061ffff166000600160fe1b6121ff565b6117cc89896000015161ffff16868686866123ff565b876000015161ffff16896001600160a01b03167f5441e4a5fac93a951d782e6f1cdb82e95c8fc58561a013953d17e395c5e69b4b8960405161180e9190614f2a565b60405180910390a35094979650505050505050565b60006276a70082101561183557600080fd5b6276a700825b06909103919050565b600080611852868686611f67565b9050600061187661186c6118658961253d565b8490611450565b61154a8888611179565b905061189981611893868a6040015161255290919063ffffffff16565b9061257d565b979650505050505050565b6118ac614a5d565b6118b58361169c565b156118d25760405162461bcd60e51b815260040161025a90615036565b6118db836121f2565b156118f0576118eb848484612596565b61191d565b60006119028585604001518551612657565b905061190e81846126ea565b61191b8486836000612748565b505b509092915050565b600061192f6121e5565b6001600160a01b03831660008181526020838152604080832088518154938a0151838b015160608c015160808d015160701c600160481b027affffffffffffffffffffffffffffffffffff0000000000000000001961ffff909216600160381b0268ffff000000000000001960ff94909416600160301b0266ff0000000000001960f89690961c650100000000000265ff00000000001964ffffffffff90981664ffffffffff19909b169a909a1796909616989098179390931693909317169490941716929092179091555192935090917f6bd4b121bca854a191536a2ca891155c42ee2fb23f307fb34e8bc65cfcb5412e9190a2505050565b60008061060a600b5b6000620f424082601a811115611a4457fe5b0192915050565b600062015180821015611a5d57600080fd5b620151808261183b565b600181901c7f5555555555555555555555555555555555555555555555555555555555555555908116911601600281901c7f3333333333333333333333333333333333333333333333333333333333333333908116911601600481901c7f07070707070707070707070707070707070707070707070707070707070707079190911601600881901c7e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f908116911601601081901c01602081901c01604081901c01608081901c60ff90811691160190565b60008160011415611b4c57506276a700610348565b8160021415611b5f575062ed4e00610348565b8160031415611b7357506301da9c00610348565b8160041415611b8757506303b53800610348565b8160051415611b9b57506309450c00610348565b8160061415611baf575063128a1800610348565b8160071415611bc357506325143000610348565b60405162461bcd60e51b815260040161025a9061500f565b6060015161012c60089190911c60ff160290565b60006276a700611bfe85611823565b019050611c108787878787878761282a565b50505050505050565b818102600019831415611c4957811580611c3b575082828281611c3857fe5b05145b611c4457600080fd5b61060a565b821580611c5e575081838281611c5b57fe5b05145b61060a57600080fd5b60008084876040015113611c80575060009050806101af565b6000806000611c918a8a8989612861565b925092509250600080611cab8c604001518587868e612901565b909250905080611cc6576000809650965050505050506101af565b506000806000611cd88d858e8e6129ad565b9250925092508260001415611cfa5760008098509850505050505050506101af565b60408e0151611d09908d612a9d565b60408f01819052611d2690611d1e88856105f4565b89888f612ab9565b60a08f01819052611d445760008098509850505050505050506101af565b611d558e8e60400151858585612b76565b98509850505050505050509550959350505050565b5190565b60008512158015611d8657506001600160501b038513155b611d8f57600080fd5b60008412158015611da757506001600160501b038413155b611db057600080fd5b826000108015611dc4575063ffffffff8311155b611dcd57600080fd5b816000108015611de1575063ffffffff8211155b611dea57600080fd5b63ffffffff811115611dfb57600080fd5b855469ffffffffffffffffffff19166001600160501b039586161769ffffffffffffffffffff60501b1916600160501b94909516939093029390931763ffffffff60a01b1916600160a01b63ffffffff928316021763ffffffff60c01b1916600160c01b93821693909302929092176001600160e01b0316600160e01b9190921602179055565b6000811215611e9057600080fd5b6000611e9d600084612119565b5050509050611eb582826105f490919063ffffffff16565b9050611ec86000848360008060006123ff565b8261ffff167f85170c297762884f47ec6098b74925c795e6d33686b11019b400e33a9b23b5e983604051611efc9190614f2a565b60405180910390a2505050565b6000806000611f16612bcb565b600094855260205250506040909120546001600160a01b03811692600160a01b90910460ff169150565b60008061060a6009611a32565b60008061060a6003611a32565b60008061060a6002611a32565b6000806000611f7b86602001518686612bd8565b915091506000611f8a87611bdb565b905081611fad578651611fa39061ffff16878388612c99565b9350505050610eaf565b6000611fb886611823565b90506000611fc861139486611b37565b90506000611fe08a6000015161ffff1683868b612c99565b9050600080876001141561200557899150611ffe8c60400151612d38565b9050612034565b61201b61201460018a03611b37565b8690611450565b91506120318c6000015161ffff1683888d612c99565b90505b612041828583868f612dc9565b98505050505050505050610eaf565b60008061207361206e6301da9c006120688787612e27565b90612e80565b612ee7565b9050600061208782621dcd6560491b612f05565b9050600061209482612f58565b905060006120a882621dcd6560491b612fad565b90506120b381612fe3565b60070b979650505050505050565b6000610eaf6120d484633b9aca00611c19565b83612fec565b600080612111846020015161210b86604001516121056402540be40088611c1990919063ffffffff16565b90611c19565b90612fec565b949350505050565b600080600080600061212961301d565b6001600160a01b0388166000908152602082815260408083208a8452909152902080546001600160501b0381169650600160501b900463ffffffff169450909150831561219257805461218b90600160701b900466ffffffffffffff1661302a565b92506121a7565b8054600160701b900466ffffffffffffff1692505b54600160a81b9004600a90810b900b97939650919450925050565b60008112156121d057600080fd5b6121e083838360008060006123ff565b505050565b60008061060a6001611a32565b6060015161ffff16151590565b8260001080156122115750613fff8311155b61221a57600080fd5b81801561222e575082846060015161ffff16145b15612238576123f9565b6080840151600090815b6001600160701b03198216156123b35760f082901c613fff1686811480156122675750855b1561229f57506080870180516001600160f01b0319861660109093029290921c919091176001600160701b0319169052506123f99050565b86811480156122ac575085155b15612301576001600160f01b03198516199290921691600360fe1b83166122df576010836001600160701b031916901b92505b506001600160701b031991821660109091021c919091171660808501526123f9565b868111801561230d5750855b15612367576080888101516001600160f01b031960f08a901b88178116601086021c9690961795911b161561234157600080fd5b506001600160701b03199182166001919091016010021c919091171660808501526123f9565b8681118015612374575085155b1561238257505050506123f9565b506001600160f01b0319821660108281029190911c93909317929190911b6001600160801b03191690600101612242565b846123c0575050506123f9565b600981106123cd57600080fd5b6001600160f01b031960f087901b85171660109091021c919091176001600160701b0319166080860152505b50505050565b600061240961301d565b6001600160a01b0388166000908152602082815260408083208a845290915290209091506001600160571b0319861280159061244c57506001600160571b038613155b61245557600080fd5b6000851215801561246d57506001600160501b038513155b61247657600080fd5b836124b65766ffffffffffffff83111561248f57600080fd5b805466ffffffffffffff60701b1916600160701b66ffffffffffffff8516021781556124d0565b8054600160501b900463ffffffff1684146124d057600080fd5b8054600a9690960b6001600160581b0316600160a81b026001600160a81b036001600160501b0390961669ffffffffffffffffffff1963ffffffff909616600160501b0263ffffffff60501b19909816979097179490941695909517939093169190911790925550505050565b606001516207a12060309190911c60ff160290565b600080612111846040015161210b6402540be40061210b878960200151611c1990919063ffffffff16565b6000610eaf61258c8484611c19565b633b9aca00612fec565b61259f826121f2565b6125a857600080fd5b606082015161ffff1660005b825181101561070e5760008382815181106125cb57fe5b602002602001015190508060600151600014156125e8575061264f565b805183146125f557600080fd5b604081015160011461260657600080fd5b600061262887858460200151896000015164ffffffffff168660600151610487565b9050600081121561264c57602086018051600160f81b176001600160f81b03191690525b50505b6001016125b4565b61265f61499f565b61266761499f565b60ff8416612676579050610eaf565b6126808585613038565b815260ff841660608201528267ffffffffffffffff811180156126a257600080fd5b506040519080825280602002602001820160405280156126dc57816020015b6126c9614a1d565b8152602001906001900390816126c15790505b506020820152949350505050565b60005b81518110156121e057600082828151811061270457fe5b602002602001015190508060600151600014156127215750612740565b61273e848260000151836020015184604001518560600151610610565b505b6001016126ed565b60008080806127578688613061565b64ffffffffff81168c52929650909450925090506127748861169c565b1561277e57600080fd5b60ff821660408901528461279d57600760ff8316111561279d57600080fd5b83156127c057602088018051600160f81b176001600160f81b03191690526127cf565b602088018051607f60f91b1690525b6127dc88608001516132a0565b6001600160701b031916608089015260005b831561281f5760f084901c818114612811576128118a826001600160ff1b6121ff565b60109490941b9390506127ee565b505050505050505050565b612837878787868561331b565b6128508760e001518860a001518960c0015185886133d5565b60c090970196909652505050505050565b6000808080612871878688613468565b905060006128908960600151896040015161255290919063ffffffff16565b90508860400151600014806128a3575080155b156128ba5760008060009450945094505050610a68565b6000806128d28b604001518c60a0015185878d6134da565b9092509050806128f057600080600096509650965050505050610a68565b509199909850909650945050505050565b6000808061290f8885612a9d565b905060006129276129208a8a6105f4565b83906120c1565b9050633b023380811315612943576000809350935050506101af565b60008061294f8361356a565b91509150806129685760008095509550505050506101af565b600061297e89612978858d6120c1565b906105f4565b9050633b9aca0081121561299d576000809650965050505050506101af565b9550600194506101af9350505050565b60008080806129c46129bf87896120c1565b61116b565b905060006129da6129d48a61360c565b87612050565b90506000871315612a325760006129f189836120c1565b9050633b9aca00811215612a12576000806000955095509550505050610a68565b612a2a612a23633b9aca0084613621565b849061257d565b915050612a54565b612a516129bf8261210b612a4a633b9aca0083613621565b8690611c19565b90505b6000612a6e606461210b612a678d613637565b8590611c19565b9050612a7a8383613621565b612a8b6129bf836129788787613621565b909b909a509098509650505050505050565b6000612aa98383613621565b9050600081121561060a57600080fd5b6000806000612acc888888886000612901565b9150915080612ae0576000925050506105eb565b6000612aeb83613644565b90506000612aff82621dcd6560491b612f05565b90506000612b0c82613670565b90506000612b28612b2383621dcd6560491b612fad565b6136aa565b67ffffffffffffffff1690506000612b4889612068846301da9c00612e27565b905063ffffffff811115612b665760009750505050505050506105eb565b9c9b505050505050505050505050565b60008080612b8487866120da565b6060890151909150612b9690826105f4565b60608901524260e08901526000612bad88866120da565b90506000612bbb89896120da565b9a91995090975050505050505050565b60008061060a600f611a32565b60008060008511612bfb5760405162461bcd60e51b815260040161025a90614fe0565b6007851115612c1c5760405162461bcd60e51b815260040161025a906150ed565b6000612c2784611823565b905060015b868111612c78576000612c4161186583611b37565b905086811415612c595750925060009150612c919050565b86811115612c6f5750925060019150612c919050565b50600101612c2c565b5060405162461bcd60e51b815260040161025a9061528d565b935093915050565b600080612ca46136c6565b905060006276a700612cb585611823565b6000898152602085815260408083208b84528252808320949093018083529390522080549192509063ffffffff600160a01b8204811691600160c01b8104821691600160e01b9091041681612d1c5760405162461bcd60e51b815260040161025a90614f51565b612d298184848c8c6133d5565b9b9a5050505050505050505050565b80516000906001600160a01b0316612d5257506000610348565b600082600001516001600160a01b031663dd30a6666040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9157600080fd5b505afa158015612da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaf9190614d6c565b6000818610612dd757600080fd5b848210612de357600080fd5b838310612e0957612e02846111388888036120688388038b8803612e27565b90506105eb565b612e02612e208787036120688688038a8703612e27565b8590611179565b600082612e365750600061060a565b82820282848281612e4357fe5b0414610eaf5760405162461bcd60e51b815260040180806020018281038252602181526020018061537c6021913960400191505060405180910390fd5b6000808211612ed6576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612edf57fe5b049392505050565b6000677fffffffffffffff821115612efe57600080fd5b5060401b90565b600081600f0b60001415612f1857600080fd5b600082600f0b604085600f0b901b81612f2d57fe5b05905060016001607f1b03198112801590612f4f575060016001607f1b038113155b610eaf57600080fd5b6000600160461b82600f0b12612f6d57600080fd5b683fffffffffffffffff1982600f0b1215612f8a57506000610348565b61060a608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d6136d3565b6000600f83810b9083900b0260401d60016001607f1b03198112801590612f4f575060016001607f1b03811315610eaf57600080fd5b600f0b60401d90565b6000816000191480156130025750600160ff1b83145b1561300c57600080fd5b81838161301557fe5b059392505050565b60008061060a6006611a32565b600881901c60ff9091161b90565b606060006130468484614181565b9050600181511161305857905061060a565b610eaf81614299565b6000808080808080805b8951518110156130f25760008a60000151828151811061308757fe5b6020026020010151905060038081111561309d57fe5b8160a0015160038111156130ad57fe5b14156130b857600080fd5b60028160a0015160038111156130ca57fe5b141580156130da57506060810151155b156130e9576130e98b83614452565b5060010161306b565b5060005b8951518110156131955760008a60000151828151811061311257fe5b602002602001015190506002600381111561312957fe5b8160a00151600381111561313957fe5b141561314d5760808101516000905561318c565b60018160a00151600381111561315f57fe5b14156131785760808101518061317583826145a2565b50505b613184818686866146c7565b919650945092505b506001016130f6565b50606089015160006131a561472a565b6001600160a01b038b1660009081526020829052604081209192505b8c602001515181101561326f5760008d6020015182815181106131e057fe5b602002602001015190508060600151600014156131fd5750613267565b60028160a00151600381111561320f57fe5b1415801561322d575060038160a00151600381111561322a57fe5b14155b61323657600080fd5b613242818989896146c7565b9199509750955061325f8184876010811061325957fe5b016145a2565b600185019450505b6001016131c1565b5060108311158015613286575064ffffffffff8411155b61328f57600080fd5b50939a929950975095509350505050565b6000807f7fff7fff7fff7fff7fff7fff7fff7fff7fff00000000000000000000000000008316815b6001600160701b031982161561331257600160fe1b82811614156132fc576001600160f01b03198216811c92909217916010015b6010826001600160701b031916901b91506132c8565b50909392505050565b60006133256136c6565b6000868152602082815260408083208884528252808320868452825291829020808a5290890187905280546001600160501b03808216938b0193909352600160501b810490921660608a015263ffffffff600160a01b8304811660a08b0152600160c01b8304811660c08b0152600160e01b90920490911660e08901529091508084156133c45760018201546001600160501b031660808901526115f1565b600060808901525050505050505050565b60008083116133e357600080fd5b818611156133f25750836105eb565b60006133fe8388611179565b90508381111561341157859150506105eb565b60006134258561206884633b9aca00612e27565b90506000613437633b9aca0083611179565b9050600061345a633b9aca006120686134508b86612e27565b6111388d88612e27565b9a9950505050505050505050565b60008260011115801561347f575083602001518311155b61348857600080fd5b606084015160806008600019860102019060ff90821c16633b9aca000260006134c16134b386614737565b61210b846301da9c00611c19565b9050600081136134d057600080fd5b9695505050505050565b60008060006134e98785612050565b9050633b9aca008112156135045760008092509250506101af565b60008061351b6135148b8a6105f4565b8b906120c1565b90506000806135298361356a565b9150915080613543576000809650965050505050506101af565b613557613550838b6120c1565b8690613621565b9c60019c509a5050505050505050505050565b600080633b9aca0083141561358457506000905080613607565b600061359e613597633b9aca0086613621565b85906120c1565b905060006135ab82613644565b9050600081600f0b136135c657600080935093505050613607565b60006135fa6135f56135e96135da85613670565b6814b927f32bffb83338614751565b621dcd6560491b612fad565b612fe3565b60070b9450600193505050505b915091565b60600151620186a060109190911c60ff160290565b8082038281131560008312151461060a57600080fd5b6060015160181c60ff1690565b6000677fffffffffffffff1982121580156136675750677fffffffffffffff8213155b612efe57600080fd5b60008082600f0b1361368157600080fd5b608061368c83614784565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b60008082600f0b12156136bc57600080fd5b50600f0b60401d90565b60008061060a600a611a32565b6000600160461b82600f0b126136e857600080fd5b683fffffffffffffffff1982600f0b121561370557506000610348565b6001607f1b60006001603f1b8416600f0b13156137335770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315613760577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b131561378d577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b13156137ba5770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b13156137e7577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b131561381457700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b13156138415770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600083600160381b16600f0b131561386a57700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b13156138965770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b13156138c2577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b13156138ee57700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b131561391a577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b131561394657700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156139725770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b131561399e577001000162e525ee054754457d59952920260260801c5b600083600160301b16600f0b13156139c75770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b13156139f2577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b1315613a1d57700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b1315613a485770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b1315613a7357700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b1315613a9e5770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315613ac9577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b1315613af457700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b1315613b1f577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b1315613b4957700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b1315613b735770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b1315613b9d577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b1315613bc75770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315613bf1577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b1315613c1b57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b1315613c455770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b1315613c6f57700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b1315613c985770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315613cc1577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b1315613cea57700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315613d13577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b1315613d3c57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b1315613d655770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b1315613d8e577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b1315613db75770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b1315613ddf577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b1315613e0757700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b1315613e2f5770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b1315613e5757700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b1315613e7f5770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315613ea7577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b1315613ecf57700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315613ef7577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b1315613f1e57700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b1315613f455770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b1315613f6c577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b1315613f935770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315613fba577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b1315613fe157700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156140085770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561402f57700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156140555770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b131561407b577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b13156140a157700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b13156140c7577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b13156140ed57700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156141135770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315614139577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b131561415f5770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b0381111561060a57600080fd5b606060108260ff16111561419457600080fd5b600061419e61472a565b6001600160a01b038516600090815260208290526040812091925060ff851667ffffffffffffffff811180156141d357600080fd5b5060405190808252806020026020018201604052801561420d57816020015b6141fa614a1d565b8152602001906001900390816141f25790505b50905060005b8560ff1681101561123257600083826010811061422c57fe5b019050600083838151811061423d57fe5b602090810291909101810151835461ffff8116825264ffffffffff620100008204169282019290925260ff600160381b8304166040820152600160401b909104600a90810b900b60608201526080019190915250600101614213565b805160008167ffffffffffffffff811180156142b457600080fd5b506040519080825280602002602001820160405280156142de578160200160208202803683370190505b50905060005b8281101561433b5760008482815181106142fa57fe5b6020026020010151905061431b81600001518260200151836040015161485f565b83838151811061432757fe5b6020908102919091010152506001016142e4565b5060015b828110156123f957805b600081118015614381575082818151811061436057fe5b602002602001015183600183038151811061437757fe5b6020026020010151115b156144495782818151811061439257fe5b60200260200101518360018303815181106143a957fe5b60200260200101518460018403815181106143c057fe5b602002602001018584815181106143d357fe5b60200260200101828152508281525050508481815181106143f057fe5b602002602001015185600183038151811061440757fe5b602002602001015186600184038151811061441e57fe5b6020026020010187848151811061443157fe5b60209081029190910101919091525260001901614349565b5060010161433f565b815151811061446057600080fd5b600082606001511161447157600080fd5b60008260000151828151811061448357fe5b602002602001015190506002600381111561449a57fe5b8160a0015160038111156144aa57fe5b141580156144c8575060038160a0015160038111156144c557fe5b14155b6144d157600080fd5b606083018051600019019052600080805b855151811015614544576000866000015182815181106144fe57fe5b6020026020010151905082816080015111801561452b575060028160a00151600381111561452857fe5b14155b1561453b57806080015192508193505b506001016144e2565b508184141561455d575050600260a0919091015261459e565b60008560000151838151811061456f57fe5b602090810291909101015160808581018051918301805190915252600160a09182015260029401939093525050505b5050565b8151158015906145b557508151613fff10155b6145be57600080fd5b816020015160001080156145db5750602082015164ffffffffff10155b6145e457600080fd5b816040015160001080156145fd57506040820151600810155b61460657600080fd5b60608201516001600160571b03191380159061462d575060608201516001600160571b0312155b61463657600080fd5b8151815460208401516040850151606090950151600a0b6001600160581b0316600160401b0272ffffffffffffffffffffff00000000000000001960ff909616600160381b0267ff000000000000001964ffffffffff909316620100000266ffffffffff00001961ffff90961661ffff19909516949094179490941692909217169190911792909216919091179055565b6000806000806146d6886148ba565b90508415806146e457508085115b156146ed578094505b86806146fd575060008860600151125b965061ffff86161561470e57600080fd5b50509451939560109390931c60f09490941b9390931793509150565b60008061060a600d611a32565b60006001600160ff1b0382111561474d57600080fd5b5090565b6000600f82810b9084900b0360016001607f1b03198112801590612f4f575060016001607f1b03811315610eaf57600080fd5b60008082600f0b1361479557600080fd5b6000600f83900b600160401b81126147af576040918201911d5b64010000000081126147c3576020918201911d5b6201000081126147d5576010918201911d5b61010081126147e6576008918201911d5b601081126147f6576004918201911d5b60048112614806576002918201911d5b60028112614815576001820191505b603f19820160401b600f85900b607f8490031b6001603f1b5b60008113156148545790800260ff81901c8281029390930192607f011c9060011d61482e565b509095945050505050565b6000613fff84111561487057600080fd5b64ffffffffff83111561488257600080fd5b600882111561489057600080fd5b5067ffff000000000000603084901b1665ffffffffff00600884901b161760ff8216179392505050565b60008082604001511180156148d457506040820151600810155b6148dd57600080fd5b60408201516002106148f457506020810151610348565b60006149066001846040015103611b37565b6020840151909150610344906276a700906111389084611179565b60405180610100016040528060008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280606081526020016060815260200160008152602001600081525090565b60408051608081018252600080825260208201529081016149e66149f3565b8152600060209091015290565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160006003811115614a5857fe5b905290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b80356001600160a01b038116811461034857600080fd5b60008083601f840112614ab3578081fd5b50813567ffffffffffffffff811115614aca578182fd5b6020830191508360208083028501011115610e3157600080fd5b600082601f830112614af4578081fd5b8135602067ffffffffffffffff80831115614b0b57fe5b614b188283850201615331565b8381528281019086840160c0808702890186018a1015614b36578788fd5b875b87811015614bb75781838c031215614b4e578889fd5b604080518381018181108982111715614b6357fe5b82528435815288850135898201528482013591810191909152606080850135908201526080808501359082015260a090614b9e828601614bde565b9181019190915285529386019391810191600101614b38565b50919998505050505050505050565b80516001600160701b03198116811461034857600080fd5b80356004811061034857600080fd5b805161034881615355565b805160ff8116811461034857600080fd5b600080600080600060808688031215614c20578081fd5b614c2986614a8b565b94506020860135614c3981615355565b9350604086013567ffffffffffffffff80821115614c55578283fd5b908701906080828a031215614c68578283fd5b604051608081018181108382111715614c7d57fe5b604052823582811115614c8e578485fd5b614c9a8b828601614ae4565b825250602083013582811115614cae578485fd5b614cba8b828601614ae4565b60208301525060408381013590820152606092830135838201529450908701359080821115614ce7578283fd5b50614cf488828901614aa2565b969995985093965092949392505050565b600080600080600060808688031215614d1c578081fd5b614d2586614a8b565b94506020860135614d3581615355565b93506040860135614d4581615368565b9250606086013567ffffffffffffffff811115614d60578182fd5b614cf488828901614aa2565b600060208284031215614d7d578081fd5b5051919050565b600060a08284031215614d95578081fd5b60405160a0810181811067ffffffffffffffff82111715614db257fe5b6040528251614dc081615368565b815260208301516001600160f81b031981168114614ddc578283fd5b6020820152614ded60408401614bf8565b6040820152614dfe60608401614bed565b6060820152614e0f60808401614bc6565b60808201529392505050565b60008060408385031215614e2d578182fd5b8235614e3881615355565b946020939093013593505050565b6000815180845260208085019450808401835b83811015614eb357815180518852838101518489015260408082015190890152606080820151908901526080808201519089015260a0908101519060048210614e9e57fe5b88015260c09096019590820190600101614e59565b509495945050505050565b6001600160a01b03929092168252805164ffffffffff166020808401919091528101516001600160f81b03191660408084019190915281015160ff1660608084019190915281015161ffff1660808084019190915201516001600160701b03191660a082015260c00190565b90815260200190565b9182521515602082015260400190565b918252602082015260400190565b60208082526016908201527513585c9ad95d081b9bdd081a5b9a5d1a585b1a5e995960521b604082015260600190565b6020808252601a908201527f4e6f6e206964696f73796e637261746963206d61747572697479000000000000604082015260600190565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b60208082526015908201527410d1ce881b9bc81b585c9ad95d1cc81b1a5cdd1959605a1b604082015260600190565b6020808252600d908201526c092dcecc2d8d2c840d2dcc8caf609b1b604082015260600190565b6020808252601390820152724163636f756e74206d75737420736574746c6560681b604082015260600190565b60208082526017908201527f5472616465206661696c65642c206c6971756964697479000000000000000000604082015260600190565b6020808252600f908201526e4f766572206d61782061737365747360881b604082015260600190565b60208082526010908201526f496e76616c6964206d6174757269747960801b604082015260600190565b60208082526016908201527510d1ce881b585c9ad95d081a5b99195e08189bdd5b9960521b604082015260600190565b6020808252600e908201526d125b9d985b1a59081b585c9ad95d60921b604082015260600190565b602080825260129082015271496e76616c6964207472616465207479706560701b604082015260600190565b60208082526017908201527f496e73756666696369656e7420626c6f636b2074696d65000000000000000000604082015260600190565b602080825260169082015275496e76616c696420736574746c652062616c616e636560501b604082015260600190565b6020808252601690820152755472616465206661696c65642c20736c69707061676560501b604082015260600190565b602080825260089082015267111a5cd8589b195960c21b604082015260600190565b60208082526018908201527f496e76616c696420616d6f756e7420746f20736574746c650000000000000000604082015260600190565b60208082526012908201527121b0b73737ba1039b2ba3a36329039b2b63360711b604082015260600190565b60208082526013908201527210d1ce881b9bc81b585c9ad95d08199bdd5b99606a1b604082015260600190565b6000604082528351608060408401526152d660c0840182614e46565b90506020850151603f198483030160608501526152f38282614e46565b6040870151608086015260609096015160a08501525050506020015290565b64ffffffffff9390931683526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561534d57fe5b604052919050565b61ffff8116811461536557600080fd5b50565b64ffffffffff8116811461536557600080fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220f075f13d6ddcc9581f156650a7b3008fa02fe0e73527c7e2c46696be1687522c64736f6c63430007060033", "deployedSourceMap": "554:25776:35:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3081:1125;;;;;;;;;;-1:-1:-1;3081:1125:35;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;4653:1922;;;;;;;;;;-1:-1:-1;4653:1922:35;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;2127:452::-;;;;;;;;;;-1:-1:-1;2127:452:35;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3081:1125::-;3263:6;3271:4;3287:36;3326:50;3359:16;3326:32;:50::i;:::-;3287:89;;3386:30;;:::i;:::-;3426:17;3453:21;;:::i;:::-;3498:15;3484:11;;;:29;3529:9;3524:633;3544:17;;;3524:633;;;3582:16;3648:159;3679:7;3704:9;3731:6;3755;;3762:1;3755:9;;;;;;;;;;;;;3782:1;:11;;;3648:13;:159::i;:::-;3623:1;:6;;3631:1;:13;;3612:195;;;;;;;;;;;;;;3838:196;3890:7;3915:16;3838:196;;3949:8;3975:14;3838:196;;4007:1;:13;;;3838:34;:196::i;:::-;3822:13;;;:212;4064:12;;:35;;;4097:1;4081;:13;;;:17;4064:35;4139:6;;4125:9;;;;4049:50;;-1:-1:-1;4125:21:35;;:9;:13;:21::i;:::-;4113:9;;;:33;-1:-1:-1;3563:3:35;;3524:633;;;-1:-1:-1;4175:9:35;;;;-1:-1:-1;4186:12:35;-1:-1:-1;;;3081:1125:35;;;;;;;;;:::o;4653:1922::-;4843:21;;:::i;:::-;4866:6;4884:36;4923:44;4956:10;4923:32;:44::i;:::-;4884:83;;4977:30;;:::i;:::-;5017:21;;:::i;:::-;5062:15;5048:11;;;:29;5093:9;5088:1436;5108:17;;;5088:1436;;;5146:25;5211:6;;5218:1;5211:9;;;;;;;;;;;;;5198:24;;5190:33;;5174:50;;;;;;;;5146:78;-1:-1:-1;5273:28:35;5260:9;:41;;;;;;;;;:105;;;-1:-1:-1;5334:31:35;5321:9;:44;;;;;;;;;5260:105;5239:1227;;;5398:18;;-1:-1:-1;;;5398:18:35;;;;;;;:::i;:::-;;;;;;;;5239:1227;5993:16;6063:183;6098:7;6127:9;6158:6;6186;;6193:1;6186:9;;;;;;;;;;;;;6217:1;:11;;;6063:13;:183::i;:::-;6046:13;;;6027:219;;;;;;;;-1:-1:-1;6265:186:35;;:14;;:186;;;;6027:219;;4701:1:63;;6265:23:35;:186::i;:::-;5239:1227;6506:6;;6492:9;;;;:21;;:13;:21::i;:::-;6480:9;;;:33;-1:-1:-1;5127:3:35;;5088:1436;;;-1:-1:-1;6558:9:35;;;6542:14;;6558:9;;-1:-1:-1;4653:1922:35;;-1:-1:-1;;;;;;;4653:1922:35:o;2127:452::-;2222:19;2253:36;2292:44;2325:10;2292:32;:44::i;:::-;2253:83;;2346:30;;:::i;:::-;2386:25;2438:20;;;;2414:46;;;;;;;;2386:74;;2495:77;2519:9;2530:6;2538:9;2549:15;2566:5;2495:23;:77::i;:::-;-1:-1:-1;2471:101:35;2127:452;-1:-1:-1;;;;;;2127:452:35:o;17649:272:80:-;17734:26;;:::i;:::-;17776:36;17815:44;17848:10;17815:44;;:32;:44::i;:::-;17776:83;;17876:38;17892:10;17904:9;17876:15;:38::i;:::-;17869:45;;;17649:272;;;;:::o;7126:1714:35:-;7362:16;;;;7518:20;;;;7494:46;;;;;;;;7466:74;-1:-1:-1;7567:38:35;7554:9;:51;;;;;;;;;7550:1284;;;7659:139;7700:7;7725:9;7752;7779:5;7659:23;:139::i;:::-;7621:177;;-1:-1:-1;7621:177:35;-1:-1:-1;7621:177:35;-1:-1:-1;7550:1284:35;;;7832:30;7819:9;:43;;;;;;;;;7815:1019;;;7916:53;7932:7;7941:9;7952;7963:5;7916:15;:53::i;7815:1019::-;8003:20;7990:9;:33;;;;;;;;;:72;;;-1:-1:-1;8040:22:35;8027:9;:35;;;;;;;;;7990:72;7986:848;;;8106:165;8147:9;8174:6;8198:9;8225;8252:5;8106:23;:165::i;:::-;8078:193;;-1:-1:-1;8078:193:35;-1:-1:-1;8293:15:35;8285:51;;;;-1:-1:-1;;;8285:51:35;;;;;;;:::i;:::-;8539:6;:15;;;8528:26;;8638:9;:20;;;8573:191;;8606:7;-1:-1:-1;;;;;8573:191:35;;8684:8;8711:10;8739:11;8573:191;;;;;;;;:::i;:::-;;;;;;;;7986:848;;;8795:28;;-1:-1:-1;;;8795:28:35;;;;;;;:::i;7986:848::-;7126:1714;;;;;;;;;;:::o;3016:1782:86:-;3200:6;3218:20;3241:36;3257:7;3266:10;3241:15;:36::i;:::-;3218:59;;3287:99;3389:35;:33;:35::i;:::-;-1:-1:-1;;;;;3468:14:86;;3434:31;3468:14;;;;;;;;;;;:26;;;;;;;;:36;;;;;;;;3287:137;;-1:-1:-1;3434:31:86;3547:56;3578:14;3495:8;3547:30;:56::i;:::-;3514:89;;;;3621:7;3613:16;;;;;;3689:29;:12;3711:6;3689:21;:29::i;:::-;3685:649;;;3838:18;;3802:20;;3825:32;;:8;;3838:18;;;;3825:32;;:12;:32::i;:::-;3802:55;-1:-1:-1;;;;;;;3879:33:86;-1:-1:-1;3879:33:86;;;:70;;-1:-1:-1;;;;;;3916:33:86;;;3879:70;3871:79;;;;;;3997:42;;-1:-1:-1;;;;;;3997:42:86;-1:-1:-1;;;;;3997:42:86;;;;;;;;;4119:106;;4176:34;:12;4196:6;4204:5;4176:19;:34::i;:::-;4161:49;;4119:106;4239:50;4255:7;4264:10;4276:12;4239:15;:50::i;:::-;4310:13;-1:-1:-1;4303:20:86;;-1:-1:-1;;;;;4303:20:86;3685:649;4348:13;;4344:422;;-1:-1:-1;;;;;;4483:28:86;-1:-1:-1;4483:28:86;;;:60;;-1:-1:-1;;;;;;4515:28:86;;;4483:60;4475:69;;;;;;4591:37;;-1:-1:-1;;;;;;4591:37:86;-1:-1:-1;;;;;4591:37:86;;;;;;;;4658:33;:12;4678:6;-1:-1:-1;4658:19:86;:33::i;:::-;4643:48;;4705:50;4721:7;4730:10;4742:12;4705:15;:50::i;:::-;4783:8;4776:15;;;;;;;3016:1782;;;;;;;;:::o;1427:120:100:-;1516:5;;;1511:16;;;;1483:8;1532:6;;;1511:28;1503:37;;;;;;1427:120;;;;:::o;2971:2071:87:-;3268:27;;3230:186;;3313:10;3341:8;3367:9;3394:8;3230:20;:186::i;:::-;3171:263;;;3427:7;;3171:263;3448:32;;;;:36;3444:296;;3500:11;3514:183;3552:14;:24;;;3594:10;3622:8;3648:9;3675:8;3514:20;:183::i;:::-;3500:197;;3715:6;3711:19;;;3723:7;;;3711:19;3444:296;;3904:40;3934:9;3904:29;:40::i;:::-;3900:152;;;3980:1;3968:8;:13;;3960:22;;;;;;-1:-1:-1;;;;;;4069:27:87;;;;;:58;;-1:-1:-1;;;;;;4100:27:87;;;4069:58;4061:67;;;;;;4278:14;:24;;;:31;4242:14;:32;;;:67;4238:171;;;4352:46;4373:14;:24;;;4352:20;:46::i;:::-;4325:24;;;:73;4238:171;4679:30;4712:14;:24;;;4737:14;:32;;;4712:58;;;;;;;;;;;;;;;;;;;4780:32;;;4822:17;;;:28;;;4860:18;;;;:30;;;4900:17;;;:28;;;-1:-1:-1;4938:21:87;;;;:50;;;;4998:32;;:37;;5034:1;4998:37;;;-1:-1:-1;2971:2071:87;;;;;;:::o;12829:1369:35:-;13085:17;;13189:25;;;;;;13276:59;:9;13297:6;13189:25;13085:17;13325:9;13276:20;:59::i;:::-;-1:-1:-1;;;;;13367:28:35;;;;;;-1:-1:-1;13473:22:35;13460:9;:35;;;;;;;;;13456:72;;;13511:17;:11;:15;:17::i;:::-;13497:31;;13456:72;13552:146;13585:9;13608:11;13633:30;13653:9;13633:6;:15;;;:19;;:30;;;;:::i;:::-;13552:6;;:146;;13677:11;13552:19;:146::i;:::-;13539:159;-1:-1:-1;13737:28:35;;;;;;13780:14;;13776:416;;13827:22;13814:9;:35;;;;;;;;;13810:372;;;13963:9;13937:6;:22;;;:35;;13929:70;;;;-1:-1:-1;;;13929:70:35;;;;;;;:::i;:::-;13810:372;;;14131:9;14105:6;:22;;;:35;;14097:70;;;;-1:-1:-1;;;14097:70:35;;;;;;;:::i;:::-;12829:1369;;;;;;;;;;:::o;5904:516:79:-;5990:26;;:::i;:::-;6033:11;6046:27;6075:29;6120:33;6142:10;6120:21;:33::i;:::-;6183:230;;;;;;;;-1:-1:-1;;;;;6183:230:79;;;;;;;;;;;;6370:27;;:2;:27;6183:230;;;;;;;;-1:-1:-1;;;;5904:516:79;;;:::o;16694:512:80:-;16822:26;;:::i;:::-;16864:12;16879:37;16905:10;16879:37;;:25;:37::i;:::-;17010:189;;;;;;;;;;;;;;;16957:22;;;17010:189;;;;;;;;;;-1:-1:-1;;17010:189:80;;;;;16694:512::o;19600:3773:35:-;19809:7;;;19900:38;19933:3;19915:21;;;19900:38;20010:3;19992:21;;;19948:67;;20033:20;;;20025:49;;;;-1:-1:-1;;;20025:49:35;;;;;;;:::i;:::-;20243:77;20274:9;:24;;;20300:8;20310:9;20243:30;:77::i;:::-;20242:78;20221:151;;;;-1:-1:-1;;;20221:151:35;;;;;;;:::i;:::-;20383:21;20407:49;20435:9;:20;;;20407:49;;:27;:49::i;:::-;20383:73;;20570:27;20647:17;20677:45;20708:13;20677:30;:45::i;:::-;20493:229;;;;;;;21420:140;21479:10;5986:1:63;21479:51:35;;;;;;;;;21420:19;;21535:7;21479:51;;21465:77;21420:23;:140::i;:::-;21392:9;:168;21371:238;;;;-1:-1:-1;;;21371:238:35;;;;;;;:::i;:::-;21620:15;21650:84;21688:13;21703:9;:20;;;21650:84;;21725:8;21650:37;:84::i;:::-;21620:114;;21844:1;21833:8;:12;:41;;;;;21873:1;21849:21;:25;21833:41;21829:575;;;21997:8;21973:21;:32;21969:70;;;22031:8;22007:32;;21969:70;21829:575;;;22071:1;22060:8;:12;:41;;;;;22100:1;22076:21;:25;22060:41;22056:348;;;22224:8;22200:21;:32;22196:70;;;22258:8;22234:32;;22056:348;;;22369:24;;-1:-1:-1;;;22369:24:35;;;;;;;:::i;22056:348::-;22626:25;22666:187;22710:9;22737:8;22763:9;22790:21;22829:10;22666:26;:187::i;:::-;22626:227;;22864:215;22900:13;22927:9;:20;;;22864:215;;22961:8;22983:19;23016:21;23051:18;22864:22;:215::i;:::-;23203:9;-1:-1:-1;;;;;23095:194:35;23180:8;23095:194;;23138:9;:20;;;23095:194;;;23226:21;23261:18;23095:194;;;;;;;:::i;:::-;;;;;;;;23308:8;23318:24;:18;:22;:24::i;:::-;23344:21;23300:66;;;;;;;;;;;;;19600:3773;;;;;;;;;:::o;14898:3132::-;15097:7;;;15218:2;15200:20;;;-1:-1:-1;;;;;15320:23:35;;;;;;;;15312:54;;;;-1:-1:-1;;;15312:54:35;;;;;;;:::i;:::-;-1:-1:-1;;;;;15405:30:35;;15376:26;15502:53;15542:12;15502:39;:53::i;:::-;15446:109;;15570:38;:19;:36;:38::i;:::-;15566:160;;;15646:69;;-1:-1:-1;;;15646:69:35;;:20;;:34;;:69;;15681:12;;15695:19;;15646:69;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;15624:91;;15566:160;16088:174;16151:12;16177:9;16200:19;16233;16088:49;:174::i;:::-;16066:196;-1:-1:-1;16415:26:35;2618:9:63;16444:36:35;16470:9;16444:25;:36::i;:::-;:56;16415:85;;16510:18;16543:84;16565:9;16576:18;16596:9;16607:19;16543:21;:84::i;:::-;16510:117;;16758:1;16743:11;:16;;16735:25;;;;;;17148:23;;;17169:1;17148:23;;;;;;;;;17115:30;;17148:23;;;;;;:::i;:::-;;;;;;;;;;;;;;;;17115:56;;17208:9;:20;;;17185:43;;:6;17192:1;17185:9;;;;;;;;;;;;;;:20;;:43;;;;;17263:18;17242:6;17249:1;17242:9;;;;;;;;;;;;;;:18;;:39;;;;;17316:17;:11;:15;:17::i;:::-;17295:6;17302:1;17295:9;;;;;;;;;;;;;;:18;;:38;;;;;4701:1:63;17398:48:35;;:6;17405:1;17398:9;;;;;;;;;;;;;;:19;;:48;;;;;17540:140;17593:12;17623:19;17660:6;17540:35;:140::i;:::-;17518:162;-1:-1:-1;17700:51:35;;-1:-1:-1;17518:162:35;17738:12;17700:37;:51::i;:::-;17864:7;-1:-1:-1;;;;;17767:178:35;17829:9;:20;;;17767:178;;17796:12;-1:-1:-1;;;;;17767:178:35;;17885:19;17918:17;:11;:15;:17::i;:::-;17767:178;;;;;;;:::i;:::-;;;;;;;;17964:18;17984:25;:19;:23;:25::i;:::-;17956:67;;;;-1:-1:-1;18011:11:35;;-1:-1:-1;14898:3132:35;-1:-1:-1;;;;;;;;;14898:3132:35:o;656:266:86:-;741:20;773:61;837:35;:33;:35::i;:::-;-1:-1:-1;;;;;889:14:86;;;;;;;;;;;;;;:26;;;;;;;;;-1:-1:-1;;656:266:86;;;;:::o;5855:269:65:-;5920:87;6023:12;6038:39;6054:22;6038:15;:39::i;4025:2699:81:-;4140:7;4149:4;4169:21;4193:22;4205:9;4193:11;:22::i;:::-;4169:46;-1:-1:-1;2400:5:63;4283:8:81;:24;:29;4279:52;;4322:1;4325:5;4314:17;;;;;;;4279:52;4404:8;4387:13;:25;4383:48;;4422:1;4425:5;4414:17;;;;;;;4383:48;2400:5:63;4556:24:81;;;4555:42;2985:2:63;4680:38:81;;4676:1887;;4742:10;-1:-1:-1;4754:4:81;;-1:-1:-1;4734:25:81;;-1:-1:-1;4734:25:81;4676:1887;3037:3:63;4780:10:81;:39;4776:1787;;5092:20;2400:5:63;2521:7;5212:30:81;;5211:68;5131:148;;-1:-1:-1;;5131:148:81;;-1:-1:-1;2777:1:63;5131:148:81;5528:37;3258:2:63;5500:65:81;2777:1:63;5584:12:81;:37;;;;;;5626:1;5583:44;5306:335;;;;;;;;;4776:1787;3091:4:63;5662:10:81;:40;5658:905;;5718:20;2400:5:63;2568:8;5839:31:81;;5838:69;5757:150;;-1:-1:-1;;5757:150:81;;-1:-1:-1;2826:2:63;5757:150:81;5976:38;3311:3:63;5947:67:81;2826:2:63;6033:12:81;:38;;;;5658:905;3148:4:63;6112:10:81;:42;6108:455;;6170:20;2400:5:63;2618:9;6292:33:81;;6291:71;6209:153;;-1:-1:-1;;6209:153:81;;-1:-1:-1;2878:2:63;6209:153:81;6433:40;3367:3:63;6402:71:81;2878:2:63;6492:12:81;:40;;;;6108:455;6706:3;6711:5;6698:19;;;;;;4025:2699;;;;;;:::o;732:234:98:-;804:4;837:1;828:5;:10;;:26;;;;;851:3;842:5;:12;;828:26;820:35;;;;;;-1:-1:-1;;;914:9:98;903:21;-1:-1:-1;;;902:39:98;;;901:58;;732:234::o;316:372::-;428:7;464:1;455:5;:10;;:26;;;;;478:3;469:5;:12;;455:26;447:35;;;;;;526:5;522:160;;;-1:-1:-1;;;;;;582:9:98;;564:28;554:39;;547:46;;522:160;-1:-1:-1;;;;;;660:9:98;;642:28;640:31;631:40;;522:160;316:372;;;;;:::o;928:386:86:-;2216:2:63;1069:27:86;:12;:25;:27::i;:::-;:58;;1061:86;;;;-1:-1:-1;;;1061:86:86;;;;;;;:::i;:::-;1157:61;1221:35;:33;:35::i;:::-;-1:-1:-1;;;;;1266:14:86;;;;;;;;;;;;;;;:26;;;;;;;-1:-1:-1;1266:26:86;;:41;928:386::o;1166:1465:87:-;1374:4;;1390:1212;1414:10;:17;1410:1;:21;1390:1212;;;1452:27;1482:10;1493:1;1482:13;;;;;;;;;;;;;;1452:43;;1549:9;1530:5;:15;;;:28;;:78;;;-1:-1:-1;1578:16:87;;:30;;;1530:78;:124;;;;1646:8;1628:5;:14;;;:26;;1530:124;1509:168;;;1669:8;;;1509:168;1875:24;1853:5;:18;;;:46;;;;;;;;;;:120;;;;-1:-1:-1;1941:32:87;1919:5;:18;;;:54;;;;;;;;;;1853:120;1828:159;;;;;;2065:14;;;;2044:18;;2065:28;;2084:8;2065:18;:28::i;:::-;2044:49;;2173:40;2203:9;2173:29;:40::i;:::-;2169:163;;;2256:1;2241:11;:16;;2233:25;;;;;;-1:-1:-1;;;;;;2354:30:87;;;;;:64;;-1:-1:-1;;;;;;2388:30:87;;;2354:64;2346:73;;;;;;2478:14;;;:28;2541:24;2520:18;;;;:45;;;2541:24;-1:-1:-1;2580:11:87;;-1:-1:-1;2580:11:87;1390:1212;1433:3;;1390:1212;;;-1:-1:-1;2619:5:87;;1166:1465;-1:-1:-1;;;;;;1166:1465:87:o;615:222:91:-;683:4;4848:1:63;718:48:91;;;;;:112;;-1:-1:-1;;4907:1:63;-1:-1:-1;782:48:91;;615:222::o;5183:648:87:-;5294:23;5532:17;5552:9;:16;5572:1;5552:21;:48;;5580:9;:16;5599:1;5580:20;5552:48;;;5576:1;5552:48;5532:68;;5610:37;5671:9;5650:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;5610:71;;5696:9;5691:103;5715:9;:16;5711:1;:20;5691:103;;;5771:9;5781:1;5771:12;;;;;;;;;;;;;;5752:13;5766:1;5752:16;;;;;;;;;;;;;;;;;:31;5733:3;;5691:103;;;-1:-1:-1;5811:13:87;5183:648;-1:-1:-1;;;5183:648:87:o;6970:627:80:-;7204:11;7199:1;:16;;:59;;;;;7234:9;:24;;;7219:11;:39;;7199:59;7191:86;;;;-1:-1:-1;;;7191:86:80;;;;;;;:::i;:::-;7287:16;7318:79;7359:37;7384:11;7359:24;:37::i;:::-;7318:36;7344:9;7318:25;:36::i;:::-;:40;;:79::i;:::-;7287:110;;7408:182;7439:9;:20;;;7408:182;;7473:8;7495:9;7518:14;7546:34;7570:9;7546:23;:34::i;:::-;7408:6;;:182;;;;:17;:182::i;:::-;6970:627;;;;;;:::o;1553:90:100:-;1599:8;1626:10;-1:-1:-1;;1634:1:100;1626:3;:10::i;3128:155:6:-;3186:7;3218:1;3213;:6;;3205:49;;;;;-1:-1:-1;;;3205:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3271:5:6;;;3128:155::o;2759:978:82:-;2983:19;3014:28;3092:148;3120:6;3140:9;3163:14;3191;3219:11;3092:14;:148::i;:::-;3052:188;;-1:-1:-1;3052:188:82;-1:-1:-1;3255:17:82;;3251:480;;3288:35;3326:32;3351:6;3326:24;:32::i;:::-;3288:70;;3372:253;3407:13;3438:6;:17;;;3473:6;:21;;;3512:6;:22;;;3552:6;:17;;;3587:6;:24;;;3372:17;:253::i;:::-;3676:20;;3639:81;;;;3698:21;3639:36;:81::i;:::-;3251:480;;2759:978;;;;;;;;:::o;4424:809:79:-;4521:6;4541:16;4571:5;4602:27;4631:29;4664:32;4685:10;4664:20;:32::i;:::-;4601:95;;-1:-1:-1;4601:95:79;-1:-1:-1;4707:11:79;-1:-1:-1;;;;;4732:33:79;;4728:438;;-1:-1:-1;5019:1:79;;-1:-1:-1;658:4:79;4728:438;;;5058:10;-1:-1:-1;;;;;5058:34:79;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5051:43;;5123:1;5116:4;:8;5108:17;;;;;;5184:4;5190:10;;-1:-1:-1;5190:10:79;-1:-1:-1;4424:809:79;-1:-1:-1;;4424:809:79:o;11271:218:80:-;11348:12;11372:41;11416:32;:30;:32::i;:::-;11465:17;;;;;;-1:-1:-1;;11465:17:80;;;;;11271:218::o;1496:609:81:-;1641:4;1682:1;1665:14;:18;1657:52;;;;-1:-1:-1;;;1657:52:81;;;;;;;:::i;:::-;2024:1:63;1727:14:81;:51;;1719:86;;;;-1:-1:-1;;;1719:86:81;;;;;;;:::i;:::-;2618:9:63;1820:8:81;:28;:33;1816:51;;-1:-1:-1;1862:5:81;1855:12;;1816:51;1877:12;1892:36;1918:9;1892:25;:36::i;:::-;1877:51;-1:-1:-1;1956:1:81;1939:137;1964:14;1959:1;:19;1939:137;;2015:37;2024:27;2049:1;2024:24;:27::i;:::-;2015:4;;:8;:37::i;:::-;2003:8;:49;1999:66;;;2061:4;2054:11;;;;;;1999:66;1980:3;;1939:137;;;-1:-1:-1;2093:5:81;;1496:609;-1:-1:-1;;;;;1496:609:81:o;1541:219:84:-;1607:20;1639:41;1683:36;:34;:36::i;:::-;1736:17;;;;;;-1:-1:-1;;1736:17:84;;;;-1:-1:-1;;;;;1736:17:84;;1541:219::o;728:737::-;836:17;867:35;916:27;957:22;993:17;1035:47;1085:36;:34;:36::i;:::-;-1:-1:-1;;;;;1163:19:84;;;1131:29;1163:19;;;;;;;;-1:-1:-1;;1163:19:84;;;;1206:18;;;;;1264:35;;;;;;;-1:-1:-1;;;;1331:27:84;;;;-1:-1:-1;1387:24:84;-1:-1:-1;;;1387:24:84;;;;-1:-1:-1;;;;1434:24:84;;;;;;-1:-1:-1;728:737:84:o;2682:175:6:-;2740:7;2771:5;;;2794:6;;;;2786:46;;;;;-1:-1:-1;;;2786:46:6;;;;;;;;;;;;;;;;;;;;;;;;;;;1320:368:86;1455:15;1482:99;1584:35;:33;:35::i;:::-;-1:-1:-1;;;;;1636:14:86;;;;;;;;;;;;;;:26;;;;;;;;:36;;;;;;;:45;;;;;1629:52;;;-1:-1:-1;;1320:368:86;;;;;:::o;23469:1611:35:-;23688:6;;23727:50;:9;23757:8;23767:9;23727:29;:50::i;:::-;23706:71;-1:-1:-1;6102:1:63;23923:49:35;;;4170:16:63;23909:110:35;23869:25;24034:15;;24030:698;;;24241:33;:10;24256:17;24241:14;:33::i;:::-;24228:46;;24030:698;;;24308:17;24295:10;:30;24291:437;;;24537:33;:10;24552:17;24537:14;:33::i;24291:437::-;24716:1;24703:14;;24291:437;24738:19;24772:74;24810:10;24822:23;:8;24835:9;24822:12;:23::i;:::-;24772:37;:74::i;:::-;24738:108;-1:-1:-1;24986:87:35;25028:44;:11;24738:108;25028:30;:44::i;:::-;24986:19;;;;;:41;:87::i;:::-;24967:106;23469:1611;-1:-1:-1;;;;;;;;;23469:1611:35:o;25086:1242::-;25337:20;25360:236;25408:13;25435:10;25459:8;25481:19;25514:27;:21;:25;:27::i;:::-;25360:34;:236::i;:::-;25337:259;;25727:1;25703:21;:25;:47;;;;;25749:1;25732:13;:18;;25703:47;25702:114;;;;25792:1;25768:21;:25;:47;;;;;25814:1;25797:13;:18;;25768:47;25681:145;;;;;;25878:24;26027:59;26060:13;26075:10;26027:32;:59::i;:::-;25864:222;;;;;26116:41;26138:18;26116:17;:21;;:41;;;;:::i;:::-;26096:61;;26234:87;26276:13;26291:10;26303:17;26234:41;:87::i;:::-;25086:1242;;;;;;;;:::o;552:219:69:-;619:21;;:::i;:::-;652:48;703:30;:28;:30::i;:::-;-1:-1:-1;;;;;750:14:69;;;;;;;;;;;;;;;;;743:21;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;743:21:69;;;;;;;;-1:-1:-1;;;743:21:69;;;;;;;;;;;-1:-1:-1;;;743:21:69;;;;;;;;-1:-1:-1;;;743:21:69;;;;;-1:-1:-1;;;;;;743:21:69;;;;;-1:-1:-1;743:21:69;;552:219;-1:-1:-1;552:219:69:o;3020:732::-;3107:4;3143:15;3173:31;3189:14;3173:15;:31::i;:::-;3169:577;;;3389:31;3410:9;3389:20;:31::i;:::-;3357:29;;:63;;;;-1:-1:-1;3350:70:69;;-1:-1:-1;3350:70:69;3169:577;3660:29;;3656:33;;;;;;:79;;-1:-1:-1;3693:29:69;;:42;;;-1:-1:-1;3693:42:69;3656:79;3649:86;;;;;12989:1760:70;13210:6;13259:1;13236:19;:24;;13228:33;;;;;;13306:18;13326:20;13348:21;13371:28;13415:48;13433:7;13442:9;:20;;;13415:48;;:17;:48::i;:::-;13305:158;;;;;;;;13548:1;13534:11;:15;13526:50;;;;-1:-1:-1;;;13526:50:70;;;;;;;:::i;:::-;13590:24;13586:408;;13717:17;:11;:15;:17::i;:::-;13695:39;;13762:1;13748:15;;13586:408;;;13873:17;:11;:15;:17::i;:::-;13850:19;:40;;13842:77;;;;-1:-1:-1;;;13842:77:70;;;;;;;:::i;:::-;13947:36;:11;13963:19;13947:15;:36::i;:::-;13933:50;;13586:408;14140:16;;:38;;;;-1:-1:-1;14160:18:70;;14140:38;14136:222;;;14244:20;;14194:153;;:14;;:153;;14244:20;-1:-1:-1;;;14194:32:70;:153::i;:::-;14368:196;14400:7;14421:9;:20;;;14368:196;;14455:11;14480:13;14507;14534:20;14368:18;:196::i;:::-;14663:9;:20;;;14636:69;;14654:7;-1:-1:-1;;;;;14636:69:70;;14685:19;14636:69;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;14723:19:70;;12989:1760;-1:-1:-1;;;;;;;12989:1760:70:o;330:193:81:-;398:7;2618:9:63;425:30:81;;;417:39;;;;;;2618:9:63;486::81;:29;;473:43;;;;330:193;-1:-1:-1;330:193:81:o;18125:890:35:-;18329:6;;18368:60;:9;18398:18;18418:9;18368:29;:60::i;:::-;18347:81;;18439:19;18473:168;18528:48;18543:32;:9;:30;:32::i;:::-;18528:10;;:14;:48::i;:::-;18594:33;:18;18617:9;18594:22;:33::i;18473:168::-;18439:202;;18803:205;18995:12;18803:77;18860:19;18803:9;:19;;;:56;;:77;;;;:::i;:::-;:191;;:205::i;:::-;18784:224;18125:890;-1:-1:-1;;;;;;;18125:890:35:o;1997:1135:88:-;2162:21;;:::i;:::-;2323:33;:14;:31;:33::i;:::-;2322:34;2314:66;;;;-1:-1:-1;;;2314:66:88;;;;;;;:::i;:::-;2395:32;:14;:30;:32::i;:::-;2391:703;;;2515:76;2559:7;2568:14;2584:6;2515:43;:76::i;:::-;2391:703;;;2622:36;2661:155;2715:7;2740:14;:31;;;2789:6;:13;2661:36;:155::i;:::-;2622:194;-1:-1:-1;2876:40:88;2622:194;2909:6;2876:32;:40::i;:::-;3009:74;:14;3052:7;3061:14;3077:5;3009:42;:74::i;:::-;2391:703;;-1:-1:-1;3111:14:88;;1997:1135;-1:-1:-1;;1997:1135:88:o;837:274:69:-;938:48;989:30;:28;:30::i;:::-;-1:-1:-1;;;;;1029:14:69;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1029:31:69;-1:-1:-1;;1029:31:69;;;;-1:-1:-1;;;1029:31:69;-1:-1:-1;;1029:31:69;;;;;-1:-1:-1;;;1029:31:69;-1:-1:-1;;1029:31:69;;;;;;;-1:-1:-1;;1029:31:69;;;;-1:-1:-1;;1029:31:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1075:29;938:81;;-1:-1:-1;1029:14:69;;1075:29;;1029:14;1075:29;837:274;;;:::o;5505:243:65:-;5570:61;5647:12;5662:39;5678:22;11415:329;11507:12;494:7;11707:9;11699:18;;;;;;;;:38;;11415:329;-1:-1:-1;;11415:329:65:o;583:160:81:-;641:7;2400:5:63;668:4:81;:21;;660:30;;;;;;2400:5:63;715:4:81;:20;;1013:838:98;1215:1;1210:6;;;1219:66;1210:75;;;1135:70;;1134:152;1381:1;1376:6;;;1385:66;1376:75;;;1301:70;;1300:152;1547:1;1542:6;;;1471:66;1467:70;;;;1466:83;1644:1;1639:6;;;1648:66;1639:75;;;1564:70;;1563:152;1739:2;1734:7;;;1729:13;1766:2;1761:7;;;1756:13;1794:2;1789:7;;;1783:14;1833:3;1828:8;;;1839:4;1828:15;;;1815:8;;1814:30;;1013:838::o;928:470:81:-;991:7;1014:5;1023:1;1014:10;1010:40;;;-1:-1:-1;2618:9:63;1026:24:81;;1010:40;1064:5;1073:1;1064:10;1060:44;;;-1:-1:-1;1083:21:81;1076:28;;1060:44;1118:5;1127:1;1118:10;1114:37;;;-1:-1:-1;2666:11:63;1130:21:81;;1114:37;1165:5;1174:1;1165:10;1161:41;;;-1:-1:-1;1184:18:81;1177:25;;1161:41;1216:5;1225:1;1216:10;1212:41;;;-1:-1:-1;1235:18:81;1228:25;;1212:41;1267:5;1276:1;1267:10;1263:42;;;-1:-1:-1;1286:19:81;1279:26;;1263:42;1319:5;1328:1;1319:10;1315:42;;;-1:-1:-1;1338:19:81;1331:26;;1315:42;1368:23;;-1:-1:-1;;;1368:23:81;;;;;;;:::i;5507:311:80:-;5742:14;;;2265:3:63;1611:1:80;5742:41;;;;5720:66;;:91;;5507:311::o;30309:609:82:-;30603:22;2618:9:63;30628:36:82;30654:9;30628:25;:36::i;:::-;:56;30603:81;;30694:217;30736:6;30756:10;30780:8;30802:9;30825:14;30853:20;30887:14;30694:28;:217::i;:::-;30309:609;;;;;;;:::o;398:190:100:-;478:5;;;-1:-1:-1;;497:7:100;;493:88;;;515:6;;;:20;;;534:1;529;525;:5;;;;;;:10;515:20;506:30;;;;;;493:88;;;560:6;;;:20;;;579:1;574;570;:5;;;;;;:10;560:20;551:30;;;;;4357:2831:82;4588:6;4596;4892:14;4871:6;:17;;;:35;4867:54;;-1:-1:-1;4916:1:82;;-1:-1:-1;4916:1:82;4908:13;;4867:54;4990:17;5009:26;5037:17;5070:70;5093:6;5101:9;5112:14;5128:11;5070:22;:70::i;:::-;4989:151;;;;;;5259:25;5308:12;5366:190;5400:6;:17;;;5435:19;5472:10;5500;5528:14;5366:16;:190::i;:::-;5334:222;;-1:-1:-1;5334:222:82;-1:-1:-1;5334:222:82;5570:27;;5592:1;5595;5584:13;;;;;;;;;;;5570:27;4357:2831;5744:23;5769:22;5793:23;5832:169;5878:9;5905:18;5941:14;5973;5832:28;:169::i;:::-;5743:258;;;;;;6073:16;6093:1;6073:21;6069:40;;;6104:1;6107;6096:13;;;;;;;;;;;;;6069:40;6316:17;;;;:42;;6343:14;6316:26;:42::i;:::-;6296:17;;;:62;;;6397:209;;6464:40;:19;6488:15;6464:23;:40::i;:::-;6522:10;6550;6578:14;6397;:209::i;:::-;6372:22;;;:234;;;6901:46;;6942:1;6945;6934:13;;;;;;;;;;;;;6901:46;6987:194;7023:6;7047:9;:19;;;7084:16;7118:15;7151:16;6987:18;:194::i;:::-;6968:213;;;;;;;;;;;4357:2831;;;;;;;;:::o;27099:257::-;27263:18;;27300:50::o;29069:1123::-;29341:1;29327:10;:15;;:49;;;;-1:-1:-1;;;;;;29346:30:82;;;29327:49;29319:58;;;;;;29449:1;29431:14;:19;;:57;;;;-1:-1:-1;;;;;;29454:34:82;;;29431:57;29423:66;;;;;;29551:15;29547:1;:19;:58;;;;-1:-1:-1;29589:16:82;29570:35;;;29547:58;29539:67;;;;;;29669:10;29665:1;:14;:48;;;;-1:-1:-1;29697:16:82;29683:30;;;29665:48;29657:57;;;;;;29815:16;29794:37;;;29760:72;;;;;;29888:45;;-1:-1:-1;;29888:45:82;-1:-1:-1;;;;;29888:45:82;;;;-1:-1:-1;;;;29943:53:82;-1:-1:-1;;;29943:53:82;;;;;;;;;;;;-1:-1:-1;;;;30006:55:82;-1:-1:-1;;;30006:55:82;;;;;;-1:-1:-1;;;;30071:45:82;-1:-1:-1;;;30071:45:82;;;;;;;;;;;-1:-1:-1;;;;;30126:59:82;-1:-1:-1;;;30126:59:82;;;;;;;;29069:1123::o;18827:441:70:-;18924:1;18917:3;:8;;18909:17;;;;;;18984:19;19028:48;1107:1:63;19065:10:70;19028:17;:48::i;:::-;18983:93;;;;;19101:21;19118:3;19101:12;:16;;:21;;;;:::i;:::-;19086:36;;19132:72;1107:1:63;19170:10:70;19182:12;19196:1;19199;19202;19132:18;:72::i;:::-;19244:10;19219:42;;;19257:3;19219:42;;;;;;:::i;:::-;;;;;;;;18827:441;;;:::o;2832:435:79:-;2928:27;2957:29;3002:50;3055:32;:30;:32::i;:::-;3097:27;3127:17;;;;;-1:-1:-1;;3127:17:79;;;;3184:13;-1:-1:-1;;;;;3184:13:79;;;-1:-1:-1;;;3234:26:79;;;;;;-1:-1:-1;2832:435:79:o;4867:217:65:-;4929:41;4986:12;5001:36;5017:19;5001:15;:36::i;2658:225::-;2724:41;2781:12;2796:40;2812:23;2796:15;:40::i;2365:232::-;2431:47;2495:12;2510:40;2526:23;2510:15;:40::i;9545:1720:80:-;9702:7;9722:19;9743:18;9777:70;9801:9;:24;;;9827:8;9837:9;9777:23;:70::i;:::-;9721:126;;;;9857:18;9878:34;9902:9;9878:23;:34::i;:::-;9857:55;;9928:13;9923:1336;;9985:20;;9964:75;;;;10007:8;10017:10;10029:9;9964:20;:75::i;:::-;9957:82;;;;;;;9923:1336;10070:21;10094:36;10120:9;10094:25;:36::i;:::-;10070:60;;10245:20;10268:56;10286:37;10311:11;10286:24;:37::i;10268:56::-;10245:79;;10338:16;10373:79;10394:9;:20;;;10373:79;;10416:12;10430:10;10442:9;10373:20;:79::i;:::-;10338:114;;10467:21;10502:17;10537:11;10552:1;10537:16;10533:613;;;10674:9;10658:25;;10713:35;:9;:19;;;:33;:35::i;:::-;10701:47;;10533:613;;;10862:60;10880:41;10919:1;10905:11;:15;10880:24;:41::i;:::-;10862:13;;:17;:60::i;:::-;10846:76;;10953:178;10995:9;:20;;;10953:178;;11037:13;11072:10;11104:9;10953:20;:178::i;:::-;10941:190;;10533:613;11167:81;11189:13;11204:12;11218:9;11229:8;11239;11167:21;:81::i;:::-;11160:88;;;;;;;;;;;;18022:613:82;18154:6;;18206:118;18246:64;3524:9:63;18246:31:82;:11;18262:14;18246:15;:31::i;:::-;:35;;:64::i;:::-;18206:22;:118::i;:::-;18176:148;;18334:21;18358:59;18376:8;-1:-1:-1;;;18358:17:82;:59::i;:::-;18334:83;;18427:16;18446:33;18464:14;18446:17;:33::i;:::-;18427:52;;18489:22;18514:60;18532:9;-1:-1:-1;;;18514:17:82;:60::i;:::-;18489:85;;18592:36;18612:15;18592:19;:36::i;:::-;18585:43;;;18022:613;-1:-1:-1;;;;;;;18022:613:82:o;2027:143:100:-;2098:6;2123:40;2127:32;2131:1;3651:3:63;2127::100;:32::i;:::-;2161:1;2123:3;:40::i;1613:470:79:-;1748:6;1893:19;1915:131;2038:2;:7;;;1915:105;1998:2;:21;;;1915:65;658:4;1915:17;:34;;:65;;;;:::i;:::-;:82;;:105::i;:::-;:122;;:131::i;:::-;1893:153;1613:470;-1:-1:-1;;;;1613:470:79:o;21904:1018:70:-;22028:18;22060:20;22094:21;22129:28;22182:68;22253:30;:28;:30::i;:::-;-1:-1:-1;;;;;22333:14:70;;22293:37;22333:14;;;;;;;;;;;:26;;;;;;;;22386:28;;-1:-1:-1;;;;;22386:28:70;;;-1:-1:-1;;;;22440:28:70;;;;;-1:-1:-1;22333:14:70;;-1:-1:-1;22482:17:70;;22478:388;;22730:35;;22697:69;;-1:-1:-1;;;22730:35:70;;;;22697:32;:69::i;:::-;22674:92;;22478:388;;;22820:35;;-1:-1:-1;;;22820:35:70;;;;;-1:-1:-1;22478:388:70;22889:26;-1:-1:-1;;;22889:26:70;;;;;;22875:40;;;21904:1018;;-1:-1:-1;21904:1018:70;;-1:-1:-1;21904:1018:70;-1:-1:-1;;21904:1018:70:o;17979:293::-;18150:1;18135:11;:16;;18127:25;;;;;;18198:67;18217:13;18232:10;18244:11;18257:1;18260;18263;18198:18;:67::i;:::-;17979:293;;;:::o;2069:229:65:-;2130:48;2195:12;2210:41;2226:24;2210:15;:41::i;1117:152:69:-;1226:31;;;:36;;;;;1117:152::o;5247:3666::-;5435:10;5431:1;:14;:56;;;;-1:-1:-1;5409:6:63;5449:38:69;;;5431:56;5423:65;;;;;;5707:8;:57;;;;;5754:10;5719:14;:31;;;:45;;;5707:57;5703:70;;;5766:7;;5703:70;5824:31;;;;5783:14;;;6684:1857;-1:-1:-1;;;;;;6691:14:69;;;6684:1857;;6767:22;6743:47;;;5409:6:63;6743:47:69;6877:17;;;:29;;;;;6898:8;6877:29;6873:272;;;-1:-1:-1;7019:31:69;;;;;-1:-1:-1;;;;;;7074:14:69;;7102:2;7093:11;;;7074:31;;;;7019:87;;;;-1:-1:-1;;;;;;6965:141:69;;;-1:-1:-1;7124:7:69;;-1:-1:-1;7124:7:69;6873:272;7239:10;7232:3;:17;:30;;;;;7254:8;7253:9;7232:30;7228:375;;;-1:-1:-1;;;;;;7369:14:69;;7368:15;7359:24;;;;;-1:-1:-1;;;7405:50:69;;7401:77;;7476:2;7466:6;-1:-1:-1;;;;;7466:12:69;;;;7457:21;;7401:77;-1:-1:-1;;;;;;;7540:23:69;;;7560:2;7551:11;;;7540:23;7530:34;;;;7496:68;:31;;;:68;7582:7;;7228:375;7695:10;7689:3;:16;:28;;;;;7709:8;7689:28;7685:575;;;8046:3;8011:31;;;;-1:-1:-1;;;;;;7764:26:69;;;;:34;;7756:43;;7813:2;7804:11;;7756:60;7746:71;;;;;8011:38;;;8010:48;8002:57;;;;;;-1:-1:-1;;;;;;;8191:29:69;;;8212:1;8203:10;;;;8217:2;8202:17;8191:29;8181:40;;;;8147:74;:31;;;:74;8239:7;;7685:575;8364:10;8358:3;:16;:29;;;;;8379:8;8378:9;8358:29;8354:42;;;8389:7;;;;;;8354:42;-1:-1:-1;;;;;;;8429:23:69;;8466:2;8457:11;;;8429:40;;;;8419:51;;;;;8493:12;;;;-1:-1:-1;;;;;;8493:12:69;;8529:1;8519:11;6684:1857;;;8616:8;8611:22;;8626:7;;;;;8611:22;8733:1;8724:6;:10;8716:19;;;;;;-1:-1:-1;;;;;;8853:26:69;;;;:34;;8845:43;8902:2;8893:11;;;8845:60;8823:83;;;;-1:-1:-1;;;;;;8777:129:69;:31;;;:129;-1:-1:-1;5247:3666:69;;;;;:::o;20142:1666:70:-;20374:68;20445:30;:28;:30::i;:::-;-1:-1:-1;;;;;20525:14:70;;20485:37;20525:14;;;;;;;;;;;:26;;;;;;;;20374:101;;-1:-1:-1;;;;;;;20570:30:70;;;;;:64;;-1:-1:-1;;;;;;20604:30:70;;;20570:64;20562:73;;;;;;20791:1;20774:13;:18;;:55;;;;-1:-1:-1;;;;;;20796:33:70;;;20774:55;20766:64;;;;;;20884:18;20880:740;;21216:16;21192:40;;;21184:49;;;;;;21287:66;;-1:-1:-1;;;;21287:66:70;-1:-1:-1;;;21287:66:70;;;;;;;20880:740;;;21580:28;;-1:-1:-1;;;21580:28:70;;;;21563:45;;21555:54;;;;;;21630:52;;:28;21754:47;;;;-1:-1:-1;;;;;21754:47:70;-1:-1:-1;;;21754:47:70;-1:-1:-1;;;;;;;;;;21692:52:70;;;-1:-1:-1;;21630:52:70;;;;-1:-1:-1;;;21630:52:70;-1:-1:-1;;;;21630:52:70;;;;;;;21692;;;;;;;;21754:47;;;;;;;;;;;-1:-1:-1;;;;20142:1666:70:o;5905:255:80:-;6084:14;;;6062:91;1960:33;6084:36;;;;6062:61;;:91;;5905:255::o;882:468:79:-;1010:6;1155:24;1182:126;1286:2;:21;;;1182:86;658:4;1182:38;1207:12;1182:2;:7;;;:24;;:38;;;;:::i;2248:143:100:-;2319:6;2344:40;2348:9;2352:1;2355;2348:3;:9::i;:::-;3651:3:63;2344::100;:40::i;1753:1065:86:-;1930:32;:14;:30;:32::i;:::-;1922:41;;;;;;2026:31;;;;2005:52;;:18;2068:744;2088:6;:13;2084:1;:17;2068:744;;;2122:27;2152:6;2159:1;2152:9;;;;;;;;;;;;;;2122:39;;2179:5;:14;;;2197:1;2179:19;2175:33;;;2200:8;;;2175:33;2231:16;;:30;;2223:39;;;;;;2327:15;;;;4701:1:63;2327:45:86;2319:54;;;;;;2430:20;2481:192;2513:7;2538:10;2566:5;:14;;;2598;:29;;;2481:192;;2645:5;:14;;;2481;:192::i;:::-;2465:208;;2708:1;2692:13;:17;2688:113;;;2752:22;;;;;-1:-1:-1;;;2752:49:86;-1:-1:-1;;;;;;2727:74:86;;;2688:113;2068:744;;;2103:3;;2068:744;;15438:477:87;15584:21;;:::i;:::-;15617:27;;:::i;:::-;15658:21;;;15654:39;;15688:5;-1:-1:-1;15681:12:87;;15654:39;15725:45;15744:7;15753:16;15725:18;:45::i;:::-;15704:66;;15780:42;;;:23;;;:42;15871:13;15850:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;15832:15:87;;;:53;:15;15438:477;-1:-1:-1;;;;15438:477:87:o;658:502::-;804:9;799:355;823:6;:13;819:1;:17;799:355;;;857:27;887:6;894:1;887:9;;;;;;;;;;;;;;857:39;;914:5;:14;;;932:1;914:19;910:33;;;935:8;;;910:33;958:185;984:14;1016:5;:16;;;1050:5;:14;;;1082:5;:15;;;1115:5;:14;;;958:8;:185::i;:::-;799:355;;838:3;;799:355;;9863:2352:69;10240:12;;;;10344:35;:14;10371:7;10344:26;:35::i;:::-;10389:46;;;;;10239:140;;-1:-1:-1;10239:140:69;;-1:-1:-1;10239:140:69;-1:-1:-1;10239:140:69;-1:-1:-1;10453:32:69;10389:14;10453:16;:32::i;:::-;:41;10445:50;;;;;;10541;;;:31;;;:50;10772:13;10767:141;;2024:1:63;10809:60:69;;;;;10801:69;;;;;;11059:7;11055:263;;;11107:22;;;;;-1:-1:-1;;;11107:49:69;-1:-1:-1;;;;;;11082:74:69;;;11055:263;;;11257:22;;;;;-1:-1:-1;;;11232:75:69;;;11055:263;11460:59;11487:14;:31;;;11460:26;:59::i;:::-;-1:-1:-1;;;;;;11426:93:69;:31;;;:93;11530:20;11560:649;11567:24;;11560:649;;11902:35;;;;11955:26;;;11951:147;;12001:82;12019:14;12035:10;12047:4;-1:-1:-1;;;12001:17:69;:82::i;:::-;12196:2;12173:25;;;;;12126:10;-1:-1:-1;11560:649:69;;;9863:2352;;;;;;;;;:::o;31103:595:82:-;31391:80;31410:6;31418:10;31430:8;31440:14;31456;31391:18;:80::i;:::-;31502:189;31533:6;:24;;;31571:6;:22;;;31607:6;:17;;;31638:20;31672:9;31502:17;:189::i;:::-;31482:17;;;;:209;;;;-1:-1:-1;;;;;;31103:595:82:o;7596:1182::-;7841:6;;;;7932:52;:9;7956:11;7969:14;7932:23;:52::i;:::-;7912:72;;7994:26;8023:62;8063:6;:21;;;8023:9;:19;;;:39;;:62;;;;:::i;:::-;7994:91;;8149:6;:17;;;8170:1;8149:22;:50;;;-1:-1:-1;8175:24:82;;8149:50;8145:72;;;8209:1;8212;8215;8201:16;;;;;;;;;;8145:72;8363:17;8404:12;8454:200;8486:6;:17;;;8521:6;:22;;;8561:19;8598:10;8626:14;8454;:200::i;:::-;8430:224;;-1:-1:-1;8430:224:82;-1:-1:-1;8430:224:82;8668:30;;8690:1;8693;8696;8682:16;;;;;;;;;;;;8668:30;-1:-1:-1;8727:10:82;;8739:19;;-1:-1:-1;8727:10:82;;-1:-1:-1;7596:1182:82;-1:-1:-1;;;;;7596:1182:82:o;19029:1650::-;19232:6;;;19275:35;:10;19295:14;19275:19;:35::i;:::-;19256:54;-1:-1:-1;19459:17:82;19491:65;19520:35;:10;19535:19;19520:14;:35::i;:::-;19491:9;;:28;:65::i;:::-;19459:97;-1:-1:-1;4626:25:63;20164:44:82;;20160:67;;;20218:1;20221:5;20210:17;;;;;;;;20160:67;20239:19;20260:12;20276:26;20291:10;20276:14;:26::i;:::-;20238:64;;;;20317:7;20312:31;;20334:1;20337:5;20326:17;;;;;;;;;;20312:31;20404:11;20418:59;20466:10;20418:43;:12;20450:10;20418:31;:43::i;:::-;:47;;:59::i;:::-;20404:73;;3651:3:63;20548:4:82;:31;20544:129;;;20603:1;20606:5;20595:17;;;;;;;;;;;20544:129;20651:4;-1:-1:-1;20657:4:82;;-1:-1:-1;20643:19:82;;-1:-1:-1;;;;20643:19:82;9175:3965;9422:6;;;;10038:59;:53;:14;10072:18;10038:33;:53::i;:::-;:57;:59::i;:::-;9997:100;;10107:10;10120:71;10151:23;:9;:21;:23::i;:::-;10176:14;10120:30;:71::i;:::-;10107:84;;10223:1;10206:14;:18;10202:2504;;;10353:26;10382:42;:18;10420:3;10382:37;:42::i;:::-;10353:71;;3651:3:63;10626:19:82;:46;10622:68;;;10682:1;10685;10688;10674:16;;;;;;;;;;;10622:68;11612:73;11651:33;3651:3:63;11680::82;11651:28;:33::i;:::-;11612:19;;:38;:73::i;:::-;11606:79;;10202:2504;;;;12622:73;:67;12685:3;12622:58;12646:33;3651:3:63;12685::82;12646:28;:33::i;:::-;12622:19;;:23;:58::i;:73::-;12616:79;;10202:2504;12716:20;12751:74;1863:3:63;12751:39:82;12759:30;:9;:28;:30::i;:::-;12751:3;;:7;:39::i;:74::-;12716:109;-1:-1:-1;12921:28:82;:19;12945:3;12921:23;:28::i;:::-;13041:55;13042:47;13075:13;13042:28;:19;13066:3;13042:23;:28::i;13041:55::-;12836:297;;;;-1:-1:-1;13110:13:82;;-1:-1:-1;9175:3965:82;-1:-1:-1;;;;;;;9175:3965:82:o;1773:176:100:-;1834:8;1858:9;1862:1;1865;1858:3;:9::i;:::-;1854:13;;1890:1;1885;:6;;1877:15;;;;;16428:1469:82;16630:7;16723:19;16744:12;16772:76;16789:10;16801:19;16822:10;16834;16846:1;16772:16;:76::i;:::-;16722:126;;;;16863:7;16858:22;;16879:1;16872:8;;;;;;16858:22;17036:11;17050:35;17072:12;17050:21;:35::i;:::-;17036:49;;17145:17;17165:55;17183:4;-1:-1:-1;;;17165:17:82;:55::i;:::-;17145:75;;17374:19;17396:28;17413:10;17396:16;:28::i;:::-;17374:50;;17472:14;17501:85;17522:63;17540:12;-1:-1:-1;;;17522:17:82;:63::i;:::-;17501:20;:85::i;:::-;17472:114;;;-1:-1:-1;17641:19:82;17663:59;17707:14;17663:39;17472:114;3524:9:63;17663:10:82;:39::i;:59::-;17641:81;-1:-1:-1;17835:16:82;17821:30;;17817:44;;;17860:1;17853:8;;;;;;;;;;;17817:44;17879:11;16428:1469;-1:-1:-1;;;;;;;;;;;;16428:1469:82:o;13388:846::-;13628:6;;;13684:48;:9;13716:15;13684:31;:48::i;:::-;13832:21;;;;13654:78;;-1:-1:-1;13832:47:82;;13654:78;13832:25;:47::i;:::-;13808:21;;;:71;13975:15;13948:24;;;:42;-1:-1:-1;14028:49:82;:9;14060:16;14028:31;:49::i;:::-;14000:77;-1:-1:-1;14087:28:82;14118:49;:9;14150:16;14118:31;:49::i;:::-;14087:80;14208:18;;-1:-1:-1;13388:846:82;;-1:-1:-1;;;;;;;;13388:846:82:o;7264:226:65:-;7326:50;7392:12;7407:36;7423:19;7407:15;:36::i;2984:825:81:-;3122:7;3131:4;3172:1;3155:14;:18;3147:52;;;;-1:-1:-1;;;3147:52:81;;;;;;;:::i;:::-;2024:1:63;3217:14:81;:51;;3209:86;;;;-1:-1:-1;;;3209:86:81;;;;;;;:::i;:::-;3305:12;3320:36;3346:9;3320:25;:36::i;:::-;3305:51;-1:-1:-1;3384:1:81;3367:396;3392:14;3387:1;:19;3367:396;;3427:22;3452:37;3461:27;3486:1;3461:24;:27::i;3452:37::-;3427:62;;3584:8;3566:14;:26;3562:49;;;-1:-1:-1;3602:1:81;-1:-1:-1;3605:5:81;;-1:-1:-1;3594:17:81;;-1:-1:-1;3594:17:81;3562:49;3726:8;3709:14;:25;3705:47;;;-1:-1:-1;3744:1:81;-1:-1:-1;3747:4:81;;-1:-1:-1;3736:16:81;;-1:-1:-1;3736:16:81;3705:47;-1:-1:-1;3408:3:81;;3367:396;;;;3773:29;;-1:-1:-1;;;3773:29:81;;;;;;;:::i;2984:825::-;;;;;;;:::o;24378:1374:82:-;24549:7;24568:100;24671:29;:27;:29::i;:::-;24568:132;-1:-1:-1;24710:22:82;2618:9:63;24735:36:82;24761:9;24735:25;:36::i;:::-;24801:35;24839:17;;;;;;;;;;;:27;;;;;;;;24735:56;;;;24839:43;;;;;;;24919:29;;24735:56;;-1:-1:-1;24839:43:82;24919:29;-1:-1:-1;;;24919:29:82;;;;;-1:-1:-1;;;24979:24:82;;;;;-1:-1:-1;;;25041:31:82;;;;25482:14;25474:49;;;;-1:-1:-1;;;25474:49:82;;;;;;;:::i;:::-;25553:192;25588:17;25623:15;25656:10;25684:20;25722:9;25553:17;:192::i;:::-;25534:211;24378:1374;-1:-1:-1;;;;;;;;;;;24378:1374:82:o;2269:557:79:-;2485:13;;2346:7;;-1:-1:-1;;;;;2477:36:79;2473:50;;-1:-1:-1;2522:1:79;2515:8;;2473:50;2534:12;2549:2;:13;;;-1:-1:-1;;;;;2549:37:79;;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7904:1576:80:-;8109:7;8152:13;8136;:29;8128:38;;;;;;8255:12;8239:13;:28;8231:37;;;;;;8515:9;8503:8;:21;8499:975;;8563:221;8774:9;8563:185;8719:28;;;8563:78;8564:20;;;8611:29;;;8563:47;:78::i;:221::-;8540:244;;;;8499:975;9150:313;9248:197;9416:28;;;9248:82;9249:20;;;9300:29;;;9248:51;:82::i;:197::-;9150:9;;:13;:313::i;3530:215:6:-;3588:7;3611:6;3607:20;;-1:-1:-1;3626:1:6;3619:8;;3607:20;3649:5;;;3653:1;3649;:5;:1;3672:5;;;;;:10;3664:56;;;;-1:-1:-1;;;3664:56:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4209:150;4267:7;4298:1;4294;:5;4286:44;;;;;-1:-1:-1;;;4286:44:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;4351:1;4347;:5;;;;;;;4209:150;-1:-1:-1;;;4209:150:6:o;1928:134:97:-;1981:6;2009:18;2004:1;:23;;1995:33;;;;;;-1:-1:-1;2054:2:97;2049:7;;1928:134::o;6671:222::-;6728:6;6751:1;:6;;6756:1;6751:6;;6742:16;;;;;;6764:13;6801:1;6780:22;;6795:2;6789:1;6781:10;;:16;;6780:22;;;;;;;-1:-1:-1;;;;;;;6817:19:97;;;;;:42;;-1:-1:-1;;;;;;6840:19:97;;;6817:42;6808:52;;;;;21339:266;21386:6;-1:-1:-1;;;21409:1:97;:24;;;21400:34;;;;;;-1:-1:-1;;21457:1:97;:25;;;21453:39;;;-1:-1:-1;21491:1:97;21484:8;;21453:39;21519:81;21595:3;21551:1;21543:10;;21556:35;21543:48;:55;;21519:5;:81::i;4186:197::-;4243:6;4273:13;:9;;;:13;;;;;4290:2;4273:19;-1:-1:-1;;;;;;4307:19:97;;;;;:42;;-1:-1:-1;;;;;;4330:19:97;;;4298:52;;;;;1610:89;1686:7;;1691:2;1686:7;;1610:89::o;1022:239:100:-;1078:8;1108:1;-1:-1:-1;;1108:7:100;:27;;;;;-1:-1:-1;;;1119:1:100;:16;1108:27;1106:30;1098:39;;;;;;1253:1;1249;:5;;;;;;;1022:239;-1:-1:-1;;;1022:239:100:o;3828:240:65:-;3888:68;3972:12;3987:34;4003:17;3987:15;:34::i;1180:245:99:-;1403:1;1394:10;;;1354:21;;;;1393:24;;1180:245::o;14791:385:87:-;14907:23;14946:30;14979:42;14995:7;15004:16;14979:15;:42::i;:::-;14946:75;;15099:1;15082:6;:13;:18;15078:37;;15109:6;-1:-1:-1;15102:13:87;;15078:37;15126:20;15139:6;15126:12;:20::i;6460:4123::-;6583:4;;;;;;;;7195:574;7219:27;;:34;7215:38;;7195:574;;;7274:27;7304:14;:27;;;7332:1;7304:30;;;;;;;;;;;;;;7274:60;;7517:32;7495:54;;;;;;;;:5;:18;;;:54;;;;;;;;;;7487:63;;;;;;7647:24;7625:5;:18;;;:46;;;;;;;;;;:69;;;;-1:-1:-1;7675:14:87;;;;:19;7625:69;7621:138;;;7714:30;7726:14;7742:1;7714:11;:30::i;:::-;-1:-1:-1;7255:3:87;;7195:574;;;;7868:9;7863:1217;7887:27;;:34;7883:38;;7863:1217;;;7942:27;7972:14;:27;;;8000:1;7972:30;;;;;;;;;;;;;;7942:60;;8043:24;8021:46;;;;;;;;:5;:18;;;:46;;;;;;;;;8017:1053;;;8154:17;;;;8132:19;8220:25;;8198:65;;;8327:24;8305:5;:18;;;:46;;;;;;;;;8301:361;;;8461:17;;;;;8611:32;8461:5;:17;8611:11;:32::i;:::-;8301:361;;;8875:180;8920:5;8947:7;8976:25;9023:14;8875:23;:180::i;:::-;8820:235;;-1:-1:-1;8820:235:87;-1:-1:-1;8820:235:87;-1:-1:-1;8017:1053:87;-1:-1:-1;7923:3:87;;7863:1217;;;-1:-1:-1;9145:32:87;;;;9116:26;9280:37;:35;:37::i;:::-;-1:-1:-1;;;;;9394:14:87;;9327:64;9394:14;;;;;;;;;;9187:130;;-1:-1:-1;9418:735:87;9442:14;:24;;;:31;9438:1;:35;9418:735;;;9494:27;9524:14;:24;;;9549:1;9524:27;;;;;;;;;;;;;;9494:57;;9569:5;:14;;;9587:1;9569:19;9565:33;;;9590:8;;;9565:33;9659:24;9637:5;:18;;;:46;;;;;;;;;;:120;;;;-1:-1:-1;9725:32:87;9703:5;:18;;;:54;;;;;;;;;;9637:120;9612:159;;;;;;9878:160;9919:5;9942:7;9967:25;10010:14;9878:23;:160::i;:::-;9823:215;;-1:-1:-1;9823:215:87;-1:-1:-1;9823:215:87;-1:-1:-1;10053:52:87;10065:5;10072:12;10085:18;10072:32;;;;;;;;10053:11;:52::i;:::-;10141:1;10119:23;;;;9418:735;;9475:3;;9418:735;;;;10333:2;10311:18;:24;;:62;;;;-1:-1:-1;10357:16:87;10339:34;;;10311:62;10303:71;;;;;;-1:-1:-1;10445:7:87;;10466:25;;-1:-1:-1;10466:25:87;-1:-1:-1;10511:18:87;-1:-1:-1;6460:4123:87;-1:-1:-1;;;;6460:4123:87:o;8919:751:69:-;9004:7;;9150:24;9131:43;;9004:7;9302:338;-1:-1:-1;;;;;;9309:14:69;;;9302:338;;-1:-1:-1;;;9343:45:69;;;:77;9339:256;;;-1:-1:-1;;;;;;9516:23:69;;:33;;9506:44;;;;;9578:2;9568:12;9339:256;9627:2;9617:6;-1:-1:-1;;;;;9617:12:69;;;;9608:21;;9302:338;;;-1:-1:-1;9657:6:69;;8919:751;-1:-1:-1;;;8919:751:69:o;25932:1161:82:-;26236:100;26339:29;:27;:29::i;:::-;26378:35;26416:17;;;;;;;;;;;:27;;;;;;;;:43;;;;;;;;;26560:25;;;26595:15;;;:26;;;26651:24;;-1:-1:-1;;;;;26651:24:82;;;26631:17;;;:44;;;;-1:-1:-1;;;26709:28:82;;;;;26685:21;;;:52;26772:29;-1:-1:-1;;;26772:29:82;;;;26747:22;;;:54;-1:-1:-1;;;26831:24:82;;;;26811:17;;;:44;-1:-1:-1;;;26892:31:82;;;;;;26865:24;;;:58;26236:132;;-1:-1:-1;26416:43:82;26934:153;;;;26992:28;;;;-1:-1:-1;;;;;26992:28:82;26968:21;;;:52;26934:153;;;27075:1;27051:21;;;:25;25932:1161;;;;;;;;:::o;23140:1232::-;23356:7;23406:1;23383:20;:24;23375:33;;;;;;23575:9;23555:17;:29;23551:57;;;-1:-1:-1;23593:15:82;23586:22;;23551:57;23619:16;23638:32;:9;23652:17;23638:13;:32::i;:::-;23619:51;;23695:20;23684:8;:31;23680:155;;;23809:15;23802:22;;;;;23680:155;23894:23;23932:73;23984:20;23932:47;:8;3651:3:63;23932:12:82;:47::i;:73::-;23894:111;-1:-1:-1;24069:20:82;24092:54;3651:3:63;23894:111:82;24092:37;:54::i;:::-;24069:77;-1:-1:-1;24157:21:82;24193:141;3651:3:63;24194:70:82;24235:28;:10;24069:77;24235:14;:28::i;:::-;24194:36;:15;24214;24194:19;:36::i;24193:141::-;24157:177;23140:1232;-1:-1:-1;;;;;;;;;;23140:1232:82:o;2655:782:80:-;2814:6;2845:11;2840:1;:16;;:59;;;;;2875:9;:24;;;2860:11;:39;;2840:59;2832:68;;;;;;3039:14;;;;2333:32;2971:1;-1:-1:-1;;2976:15:80;;2971:21;2957:35;;3018:48;3039:24;;;3018:48;3651:3:63;3018:75:80;2940:14;3135:85;3187:32;3204:14;3187:16;:32::i;:::-;3135:47;:6;3524:9:63;3135:10:80;:47::i;:85::-;3103:117;;3371:1;3358:10;:14;3350:23;;;;;;3420:10;2655:782;-1:-1:-1;;;;;;2655:782:80:o;15268:1026:82:-;15476:6;15484:4;15565:22;15590:63;15621:15;15638:14;15590:30;:63::i;:::-;15565:88;;3651:3:63;15667:15:82;:42;15663:65;;;15719:1;15722:5;15711:17;;;;;;;15663:65;15739:17;;15879:66;15909:35;:10;15924:19;15909:14;:35::i;:::-;15879:10;;:29;:66::i;:::-;15843:102;;15961:19;15982:12;15998:26;16013:10;15998:14;:26::i;:::-;15960:64;;;;16043:7;16038:31;;16060:1;16063:5;16052:17;;;;;;;;;;;16038:31;16177:64;16197:43;:12;16229:10;16197:31;:43::i;:::-;16177:15;;:19;:64::i;:::-;16164:77;16282:4;;-1:-1:-1;15268:1026:82;-1:-1:-1;;;;;;;;;;;15268:1026:82:o;20935:1240::-;21001:6;21009:4;3651:3:63;21090:10:82;:38;21086:61;;;-1:-1:-1;21138:1:82;;-1:-1:-1;21138:1:82;21130:17;;21086:61;21242:13;21258:71;21288:40;3651:3:63;21317:10:82;21288:28;:40::i;:::-;21258:10;;:29;:71::i;:::-;21242:87;;21613:21;21637:29;21659:6;21637:21;:29::i;:::-;21613:53;;21761:1;21743:14;:19;;;21739:42;;21772:1;21775:5;21764:17;;;;;;;;21739:42;21791:13;21819:317;21856:266;21895:157;21938:32;21955:14;21938:16;:32::i;:::-;4456:21:63;21895:17:82;:157::i;:::-;-1:-1:-1;;;21856:17:82;:266::i;:::-;21819:19;:317::i;:::-;21791:345;;;-1:-1:-1;22163:4:82;;-1:-1:-1;;;;20935:1240:82;;;;:::o;4272:191:80:-;4402:14;;;3755:22:63;1655:24:80;4402:27;;;;4380:52;;:76;;4272:191::o;1267:154:100:-;1390:5;;;1385:16;;;;1323:8;1406:6;;;1385:28;1377:37;;;;;4546:200:80;4702:14;;;1730:32;4702:35;4681:58;;;4546:200::o;1238:160:97:-;1289:6;-1:-1:-1;;1312:1:97;:24;;:51;;;;;1345:18;1340:1;:23;;1312:51;1303:61;;;;;14283:175;14329:6;14356:1;14352;:5;;;14343:15;;;;;;14449:3;14398:9;14405:1;14398:5;:9::i;:::-;14389:19;;14411:34;14389:56;:63;;14365:88;;14283:175;;;:::o;2300:114::-;2350:6;2378:1;2373;:6;;;;2364:16;;;;;;-1:-1:-1;2401:7:97;;2406:2;2401:7;;2300:114::o;5172:257:65:-;5231:87;5334:12;5349:33;5365:16;5349:15;:33::i;14636:6524:97:-;14685:6;-1:-1:-1;;;14708:1:97;:24;;;14699:34;;;;;;-1:-1:-1;;14756:1:97;:25;;;14752:39;;;-1:-1:-1;14790:1:97;14783:8;;14752:39;-1:-1:-1;;;14811:14:97;-1:-1:-1;;;14873:22:97;;:26;;;14869:98;;;14925:35;14916:44;14964:3;14916:51;14869:98;15002:1;14977;14981:18;14977:22;:26;;;14973:98;;;15029:35;15020:44;15068:3;15020:51;14973:98;15106:1;15081;15085:18;15081:22;:26;;;15077:98;;;15133:35;15124:44;15172:3;15124:51;15077:98;15210:1;15185;15189:18;15185:22;:26;;;15181:98;;;15237:35;15228:44;15276:3;15228:51;15181:98;15313:1;15289;15293:17;15289:21;:25;;;15285:97;;;15340:35;15331:44;15379:3;15331:51;15285:97;15416:1;15392;15396:17;15392:21;:25;;;15388:97;;;15443:35;15434:44;15482:3;15434:51;15388:97;15519:1;15495;15499:17;15495:21;:25;;;15491:97;;;15546:35;15537:44;15585:3;15537:51;15491:97;15622:1;15598;-1:-1:-1;;;15598:21:97;:25;;;15594:97;;;15649:35;15640:44;15688:3;15640:51;15594:97;15724:1;15701;15705:16;15701:20;:24;;;15697:96;;;15751:35;15742:44;15790:3;15742:51;15697:96;15826:1;15803;15807:16;15803:20;:24;;;15799:96;;;15853:35;15844:44;15892:3;15844:51;15799:96;15928:1;15905;15909:16;15905:20;:24;;;15901:96;;;15955:35;15946:44;15994:3;15946:51;15901:96;16030:1;16007;16011:16;16007:20;:24;;;16003:96;;;16057:35;16048:44;16096:3;16048:51;16003:96;16131:1;16109;16113:15;16109:19;:23;;;16105:95;;;16158:35;16149:44;16197:3;16149:51;16105:95;16232:1;16210;16214:15;16210:19;:23;;;16206:95;;;16259:35;16250:44;16298:3;16250:51;16206:95;16333:1;16311;16315:15;16311:19;:23;;;16307:95;;;16360:35;16351:44;16399:3;16351:51;16307:95;16434:1;16412;-1:-1:-1;;;16412:19:97;:23;;;16408:95;;;16461:35;16452:44;16500:3;16452:51;16408:95;16534:1;16513;16517:14;16513:18;:22;;;16509:94;;;16561:35;16552:44;16600:3;16552:51;16509:94;16634:1;16613;16617:14;16613:18;:22;;;16609:94;;;16661:35;16652:44;16700:3;16652:51;16609:94;16734:1;16713;16717:14;16713:18;:22;;;16709:94;;;16761:35;16752:44;16800:3;16752:51;16709:94;16834:1;16813;16817:14;16813:18;:22;;;16809:94;;;16861:35;16852:44;16900:3;16852:51;16809:94;16933:1;16913;16917:13;16913:17;:21;;;16909:93;;;16960:35;16951:44;16999:3;16951:51;16909:93;17032:1;17012;17016:13;17012:17;:21;;;17008:93;;;17059:35;17050:44;17098:3;17050:51;17008:93;17131:1;17111;17115:13;17111:17;:21;;;17107:93;;;17158:35;17149:44;17197:3;17149:51;17107:93;17230:1;17210;17214:13;17210:17;:21;;;17206:93;;;17257:35;17248:44;17296:3;17248:51;17206:93;17328:1;17309;17313:12;17309:16;:20;;;17305:92;;;17355:35;17346:44;17394:3;17346:51;17305:92;17426:1;17407;17411:12;17407:16;:20;;;17403:92;;;17453:35;17444:44;17492:3;17444:51;17403:92;17524:1;17505;17509:12;17505:16;:20;;;17501:92;;;17551:35;17542:44;17590:3;17542:51;17501:92;17622:1;17603;17607:12;17603:16;:20;;;17599:92;;;17649:35;17640:44;17688:3;17640:51;17599:92;17719:1;17701;17705:11;17701:15;:19;;;17697:91;;;17746:35;17737:44;17785:3;17737:51;17697:91;17816:1;17798;17802:11;17798:15;:19;;;17794:91;;;17843:35;17834:44;17882:3;17834:51;17794:91;17913:1;17895;17899:11;17895:15;:19;;;17891:91;;;17940:35;17931:44;17979:3;17931:51;17891:91;18010:1;17992;17996:11;17992:15;:19;;;17988:91;;;18037:35;18028:44;18076:3;18028:51;17988:91;18106:1;18089;18093:10;18089:14;:18;;;18085:90;;;18133:35;18124:44;18172:3;18124:51;18085:90;18202:1;18185;18189:10;18185:14;:18;;;18181:90;;;18229:35;18220:44;18268:3;18220:51;18181:90;18298:1;18281;18285:10;18281:14;:18;;;18277:90;;;18325:35;18316:44;18364:3;18316:51;18277:90;18394:1;18377;18381:10;18377:14;:18;;;18373:90;;;18421:35;18412:44;18460:3;18412:51;18373:90;18489:1;18473;18477:9;18473:13;:17;;;18469:89;;;18516:35;18507:44;18555:3;18507:51;18469:89;18584:1;18568;18572:9;18568:13;:17;;;18564:89;;;18611:35;18602:44;18650:3;18602:51;18564:89;18679:1;18663;18667:9;18663:13;:17;;;18659:89;;;18706:35;18697:44;18745:3;18697:51;18659:89;18774:1;18758;18762:9;18758:13;:17;;;18754:89;;;18801:35;18792:44;18840:3;18792:51;18754:89;18868:1;18853;18857:8;18853:12;:16;;;18849:88;;;18895:35;18886:44;18934:3;18886:51;18849:88;18962:1;18947;18951:8;18947:12;:16;;;18943:88;;;18989:35;18980:44;19028:3;18980:51;18943:88;19056:1;19041;19045:8;19041:12;:16;;;19037:88;;;19083:35;19074:44;19122:3;19074:51;19037:88;19150:1;19135;19139:8;19135:12;:16;;;19131:88;;;19177:35;19168:44;19216:3;19168:51;19131:88;19243:1;19229;19233:7;19229:11;:15;;;19225:87;;;19270:35;19261:44;19309:3;19261:51;19225:87;19336:1;19322;19326:7;19322:11;:15;;;19318:87;;;19363:35;19354:44;19402:3;19354:51;19318:87;19429:1;19415;19419:7;19415:11;:15;;;19411:87;;;19456:35;19447:44;19495:3;19447:51;19411:87;19522:1;19508;19512:7;19508:11;:15;;;19504:87;;;19549:35;19540:44;19588:3;19540:51;19504:87;19614:1;19601;19605:6;19601:10;:14;;;19597:86;;;19641:35;19632:44;19680:3;19632:51;19597:86;19706:1;19693;19697:6;19693:10;:14;;;19689:86;;;19733:35;19724:44;19772:3;19724:51;19689:86;19798:1;19785;19789:6;19785:10;:14;;;19781:86;;;19825:35;19816:44;19864:3;19816:51;19781:86;19890:1;19877;19881:6;19877:10;:14;;;19873:86;;;19917:35;19908:44;19956:3;19908:51;19873:86;19981:1;19969;19973:5;19969:9;:13;;;19965:85;;;20008:35;19999:44;20047:3;19999:51;19965:85;20072:1;20060;20064:5;20060:9;:13;;;20056:85;;;20099:35;20090:44;20138:3;20090:51;20056:85;20163:1;20151;20155:5;20151:9;:13;;;20147:85;;;20190:35;20181:44;20229:3;20181:51;20147:85;20254:1;20242;20246:5;20242:9;:13;;;20238:85;;;20281:35;20272:44;20320:3;20272:51;20238:85;20344:1;20333;20337:4;20333:8;:12;;;20329:84;;;20371:35;20362:44;20410:3;20362:51;20329:84;20434:1;20423;20427:4;20423:8;:12;;;20419:84;;;20461:35;20452:44;20500:3;20452:51;20419:84;20524:1;20513;20517:4;20513:8;:12;;;20509:84;;;20551:35;20542:44;20590:3;20542:51;20509:84;20614:1;20603;20607:4;20603:8;:12;;;20599:84;;;20641:35;20632:44;20680:3;20632:51;20599:84;20703:1;20693;20697:3;20693:7;:11;;;20689:83;;;20730:35;20721:44;20769:3;20721:51;20689:83;20792:1;20782;20786:3;20782:7;:11;;;20778:83;;;20819:35;20810:44;20858:3;20810:51;20778:83;20881:1;20871;20875:3;20871:7;:11;;;20867:83;;;20908:35;20899:44;20947:3;20899:51;20867:83;20970:1;20960;20964:3;20960:7;:11;;;20956:83;;;20997:35;20988:44;21036:3;20988:51;20956:83;21072:7;;;;21077:2;21072:7;21066:2;:14;21057:24;;21046:35;-1:-1:-1;;;;;21096:29:97;;;21087:39;;;;;16756:1107:87;16858:23;588:2;16955:6;:30;;;;16947:39;;;;;;16997:90;17090:37;:35;:37::i;:::-;-1:-1:-1;;;;;17204:14:87;;17137:64;17204:14;;;;;;;;;;16997:130;;-1:-1:-1;17261:28:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;17228:61;;17305:9;17300:533;17324:6;17320:10;;:1;:10;17300:533;;;17351:42;17396:12;17409:1;17396:15;;;;;;;;17351:60;;17425:27;17455:6;17462:1;17455:9;;;;;;;;;;;;;;;;;;;17603:23;;;;;17584:42;;17657:21;;;;;17640:14;;;:38;;;;17710:22;-1:-1:-1;;;17710:22:87;;;17692:15;;;:40;-1:-1:-1;;;17763:21:87;;;;;;;17746:38;;:14;;;:38;17798:17;;:24;;;;-1:-1:-1;17603:23:87;17332:3;17300:533;;15921:829;16015:13;;15998:14;16015:13;16061:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16061:21:87;;16038:44;;16097:9;16092:257;16112:6;16108:1;:10;16092:257;;;16139:27;16169:6;16176:1;16169:9;;;;;;;;;;;;;;16139:39;;16259:79;16288:5;:16;;;16306:5;:14;;;16322:5;:15;;;16259:28;:79::i;:::-;16250:3;16254:1;16250:6;;;;;;;;;;;;;;;;;:88;-1:-1:-1;16120:3:87;;16092:257;;;-1:-1:-1;16403:1:87;16414:330;16425:6;16421:1;:10;16414:330;;;16459:1;16474:243;16485:1;16481;:5;:28;;;;;16503:3;16507:1;16503:6;;;;;;;;;;;;;;16490:3;16498:1;16494;:5;16490:10;;;;;;;;;;;;;;:19;16481:28;16474:243;;;16589:3;16593:1;16589:6;;;;;;;;;;;;;;16597:3;16605:1;16601;:5;16597:10;;;;;;;;;;;;;;16566:3;16574:1;16570;:5;16566:10;;;;;;;;;;;;;16578:3;16582:1;16578:6;;;;;;;;;;;;;16565:43;;;;;;;;;;16656:6;16663:1;16656:9;;;;;;;;;;;;;;16667:6;16678:1;16674;:5;16667:13;;;;;;;;;;;;;;16627:6;16638:1;16634;:5;16627:13;;;;;;;;;;;;;16642:6;16649:1;16642:9;;;;;;;;;;;;;;;;;16626:55;;;;;-1:-1:-1;;16699:3:87;16474:243;;;-1:-1:-1;16730:3:87;;16414:330;;12689:2038;12803:27;;:34;12795:42;;12787:51;;;;;;12920:1;12885:14;:32;;;:36;12877:45;;;;;;12969:35;13007:14;:27;;;13035:5;13007:34;;;;;;;;;;;;;;12969:72;;13102:24;13072:54;;;;;;;;:13;:26;;;:54;;;;;;;;;;:132;;;;-1:-1:-1;13172:32:87;13142:13;:26;;;:62;;;;;;;;;;13072:132;13051:163;;;;;;13253:32;;;:37;;-1:-1:-1;;13253:37:87;;;-1:-1:-1;;;13531:338:87;13551:27;;:34;13547:38;;13531:338;;;13606:23;13632:14;:27;;;13660:1;13632:30;;;;;;;;;;;;;;13606:56;;13696:13;13680:1;:13;;;:29;:75;;;;-1:-1:-1;13731:24:87;13713:1;:14;;;:42;;;;;;;;;;13680:75;13676:183;;;13791:1;:13;;;13775:29;;13843:1;13822:22;;13676:183;-1:-1:-1;13587:3:87;;13531:338;;;;13892:18;13883:5;:27;13879:236;;;-1:-1:-1;;14060:24:87;14031:26;;;;;:53;14098:7;;13879:236;14328:33;14364:14;:27;;;14392:18;14364:47;;;;;;;;;;;;;;;;;;14524:25;;;;;;14563:23;;;;;14421:175;;;;14633:24;14606;;;;:51;14696:24;14667:26;;:53;;;;-1:-1:-1;;;12689:2038:87;;;:::o;11592:862::-;11739:16;;11735:20;;;;:68;;-1:-1:-1;11759:16:87;;5409:6:63;-1:-1:-1;11759:44:87;11735:68;11727:77;;;;;;11868:5;:14;;;11864:1;:18;:56;;;;-1:-1:-1;11886:14:87;;;;11904:16;-1:-1:-1;11886:34:87;11864:56;11856:65;;;;;;11982:5;:15;;;11978:1;:19;:77;;;;-1:-1:-1;12001:15:87;;;;4907:1:63;-1:-1:-1;12001:54:87;11978:77;11970:86;;;;;;12127:14;;;;-1:-1:-1;;;;;;12108:33:87;;;;:70;;-1:-1:-1;12145:14:87;;;;-1:-1:-1;;;;;;12145:33:87;12108:70;12100:79;;;;;;12262:16;;12229:50;;12320:14;;;;12376:15;;;;12432:14;;;;;12402:45;;-1:-1:-1;;;;;12402:45:87;-1:-1:-1;;;12402:45:87;-1:-1:-1;;12345:47:87;;;;-1:-1:-1;;;12345:47:87;-1:-1:-1;;12289:46:87;;;;;;-1:-1:-1;;12229:50:87;;;;-1:-1:-1;;12229:50:87;;;;;;;12289:46;;;;;;;;12345:47;;;;;12402:45;;;;;;;;;;11592:862::o;10664:882::-;10896:4;10914:7;10935;10967:22;10992:25;:5;:23;:25::i;:::-;10967:50;-1:-1:-1;11089:19:87;;;:54;;;11129:14;11112;:31;11089:54;11085:116;;;11176:14;11159:31;;11085:116;11220:7;:29;;;;11248:1;11231:5;:14;;;:18;11220:29;11210:39;-1:-1:-1;11268:47:87;;;;11260:56;;;;;;-1:-1:-1;;11444:16:87;;11488:7;;11429:2;11400:31;;;;11465:3;11436:32;;;;11399:70;;;;;-1:-1:-1;11524:14:87;-1:-1:-1;10664:882:87:o;6210:263:65:-;6277:77;6370:12;6385:41;6401:24;6385:15;:41::i;2520:163:100:-;2569:6;-1:-1:-1;;;;;2596:1:100;:30;;2587:40;;;;;;-1:-1:-1;2674:1:100;2520:163::o;3768:191:97:-;3825:6;3855:13;;;;:9;;;;:13;-1:-1:-1;;;;;;3883:19:97;;;;;:42;;-1:-1:-1;;;;;;3906:19:97;;;3874:52;;;;;13336:769;13385:6;13412:1;13408;:5;;;13399:15;;;;;;13421:10;13441:13;;;;-1:-1:-1;;;13464:25:97;;13460:56;;13500:2;13504:9;;;;13493;13460:56;13531:11;13525:2;:17;13521:48;;13553:2;13557:9;;;;13546;13521:48;13584:7;13578:2;:13;13574:44;;13602:2;13606:9;;;;13595;13574:44;13633:5;13627:2;:11;13623:40;;13649:1;13652:8;;;;13642;13623:40;13678:4;13672:2;:10;13668:39;;13693:1;13696:8;;;;13686;13668:39;13722:3;13716:2;:9;13712:38;;13736:1;13739:8;;;;13729;13712:38;13765:3;13759:2;:9;13755:23;;13777:1;13770:8;;;;13755:23;-1:-1:-1;;13833:8:97;;13845:2;13833:14;13866:11;;;;13890:3;:9;;;13866:34;-1:-1:-1;;;13906:166:97;13950:1;13944:3;:7;13906:166;;;13972:8;;;14006:3;14000:9;;;14049:16;;;14039:26;;;;;14024:3;:7;14017:14;;13961:1;13953:9;13906:166;;;-1:-1:-1;14093:6:97;;13336:769;-1:-1:-1;;;;;13336:769:97:o;883:554:88:-;1016:7;5409:6:63;1043:38:88;;;1035:47;;;;;;1112:16;1100:28;;;1092:37;;;;;;4907:1:63;1147:48:88;;;1139:57;;;;;;-1:-1:-1;1252:42:88;1292:2;1252:42;;;;1319:39;1357:1;1319:39;;;;1251:108;1390:25;;;1251:165;883:554;;;;;:::o;1006:752:91:-;1085:7;1130:1;1112:5;:15;;;:19;:77;;;;-1:-1:-1;1135:15:91;;;;4907:1:63;-1:-1:-1;1135:54:91;1112:77;1104:86;;;;;;1309:15;;;;4848:1:63;-1:-1:-1;1305:81:91;;-1:-1:-1;1372:14:91;;;;1365:21;;1305:81;1397:20;1420:45;1463:1;1445:5;:15;;;:19;1420:24;:45::i;:::-;1696:14;;;;1397:68;;-1:-1:-1;1696:55:91;;2618:9:63;;1696:32:91;;1397:68;1696:18;:32::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:175:183:-;84:20;;-1:-1:-1;;;;;133:31:183;;123:42;;113:2;;179:1;176;169:12;194:400;;;327:3;320:4;312:6;308:17;304:27;294:2;;350:6;342;335:22;294:2;-1:-1:-1;378:20:183;;421:18;410:30;;407:2;;;460:8;450;443:26;407:2;504:4;496:6;492:17;480:29;;567:3;560:4;552;544:6;540:17;532:6;528:30;524:41;521:50;518:2;;;584:1;581;574:12;599:1524;;727:3;720:4;712:6;708:17;704:27;694:2;;749:5;742;735:20;694:2;789:6;776:20;815:4;838:18;875:2;871;868:10;865:2;;;881:9;865:2;912:36;944:2;939;935;931:11;927:20;912:36;:::i;:::-;982:15;;;1013:12;;;;1045:15;;;1079:4;1114:11;;;1102:24;;1098:33;;1095:42;-1:-1:-1;1092:2:183;;;1154:5;1147;1140:20;1092:2;1180:5;1194:900;1208:2;1205:1;1202:9;1194:900;;;1275:2;1269:3;1264;1260:13;1256:22;1253:2;;;1295:5;1288;1281:20;1253:2;1326;1361;1355:9;1407:2;1399:6;1395:15;1464:6;1452:10;1449:22;1444:2;1432:10;1429:18;1426:46;1423:2;;;1475:9;1423:2;1499:22;;1549:17;;1534:33;;1617:12;;;1604:26;1587:15;;;1580:51;1681:12;;;1668:26;1651:15;;;1644:51;;;;1718:2;1770:12;;;1757:26;1740:15;;;1733:51;1807:3;1860:12;;;1847:26;1830:15;;;1823:51;1897:3;;1937:50;1974:12;;;1937:50;:::i;:::-;1920:15;;;1913:75;;;;2001:19;;2040:12;;;;2072;;;;1226:1;1219:9;1194:900;;;-1:-1:-1;2112:5:183;;684:1439;-1:-1:-1;;;;;;;;;684:1439:183:o;2128:195::-;2209:13;;-1:-1:-1;;;;;;2251:47:183;;2241:58;;2231:2;;2313:1;2310;2303:12;2328:161;2414:20;;2463:1;2453:12;;2443:2;;2479:1;2476;2469:12;2494:140;2574:13;;2596:32;2574:13;2596:32;:::i;2639:162::-;2718:13;;2771:4;2760:16;;2750:27;;2740:2;;2791:1;2788;2781:12;2806:1701;;;;;;3036:3;3024:9;3015:7;3011:23;3007:33;3004:2;;;3058:6;3050;3043:22;3004:2;3086:31;3107:9;3086:31;:::i;:::-;3076:41;;3167:2;3156:9;3152:18;3139:32;3180;3206:5;3180:32;:::i;:::-;3231:5;-1:-1:-1;3287:2:183;3272:18;;3259:32;3310:18;3340:14;;;3337:2;;;3372:6;3364;3357:22;3337:2;3400:22;;;;3456:3;3438:16;;;3434:26;3431:2;;;3478:6;3470;3463:22;3431:2;3516;3510:9;3558:3;3550:6;3546:16;3612:6;3600:10;3597:22;3592:2;3580:10;3577:18;3574:46;3571:2;;;3623:9;3571:2;3650;3643:22;3690:16;;3718;;;3715:2;;;3752:6;3744;3737:22;3715:2;3785:77;3854:7;3843:8;3839:2;3835:17;3785:77;:::i;:::-;3777:6;3770:93;;3909:2;3905;3901:11;3888:25;3938:2;3928:8;3925:16;3922:2;;;3959:6;3951;3944:22;3922:2;4001:77;4070:7;4059:8;4055:2;4051:17;4001:77;:::i;:::-;3996:2;3984:15;;3977:102;-1:-1:-1;4133:2:183;4125:11;;;4112:25;4095:15;;;4088:50;4192:2;4184:11;;;4171:25;4154:15;;;4147:50;3988:6;-1:-1:-1;4260:18:183;;;4247:32;;4291:16;;;4288:2;;;4325:6;4317;4310:22;4288:2;;4369:78;4439:7;4428:8;4417:9;4413:24;4369:78;:::i;:::-;2994:1513;;;;-1:-1:-1;2994:1513:183;;-1:-1:-1;4466:8:183;;4343:104;2994:1513;-1:-1:-1;;;2994:1513:183:o;4512:816::-;;;;;;4708:3;4696:9;4687:7;4683:23;4679:33;4676:2;;;4730:6;4722;4715:22;4676:2;4758:31;4779:9;4758:31;:::i;:::-;4748:41;;4839:2;4828:9;4824:18;4811:32;4852;4878:5;4852:32;:::i;:::-;4903:5;-1:-1:-1;4960:2:183;4945:18;;4932:32;4973:34;4932:32;4973:34;:::i;:::-;5026:7;-1:-1:-1;5084:2:183;5069:18;;5056:32;5111:18;5100:30;;5097:2;;;5148:6;5140;5133:22;5097:2;5192:76;5260:7;5251:6;5240:9;5236:22;5192:76;:::i;5333:193::-;;5455:2;5443:9;5434:7;5430:23;5426:32;5423:2;;;5476:6;5468;5461:22;5423:2;-1:-1:-1;5504:16:183;;5413:113;-1:-1:-1;5413:113:183:o;5531:952::-;;5687:3;5675:9;5666:7;5662:23;5658:33;5655:2;;;5709:6;5701;5694:22;5655:2;5747;5741:9;5789:3;5781:6;5777:16;5859:6;5847:10;5844:22;5823:18;5811:10;5808:34;5805:62;5802:2;;;5870:9;5802:2;5897;5890:22;5934:16;;5959:32;5934:16;5959:32;:::i;:::-;6000:21;;6066:2;6051:18;;6045:25;-1:-1:-1;;;;;;6101:27:183;;6089:40;;6079:2;;6148:6;6140;6133:22;6079:2;6185;6173:15;;6166:32;6231:49;6276:2;6261:18;;6231:49;:::i;:::-;6226:2;6218:6;6214:15;6207:74;6314:50;6360:2;6349:9;6345:18;6314:50;:::i;:::-;6309:2;6301:6;6297:15;6290:75;6399:52;6446:3;6435:9;6431:19;6399:52;:::i;:::-;6393:3;6381:16;;6374:78;6385:6;5645:838;-1:-1:-1;;;5645:838:183:o;6488:325::-;;;6616:2;6604:9;6595:7;6591:23;6587:32;6584:2;;;6637:6;6629;6622:22;6584:2;6681:9;6668:23;6700:32;6726:5;6700:32;:::i;:::-;6751:5;6803:2;6788:18;;;;6775:32;;-1:-1:-1;;;6574:239:183:o;7017:967::-;;7129:5;7123:12;7156:6;7151:3;7144:19;7182:4;7211:2;7206:3;7202:12;7195:19;;7248:2;7241:5;7237:14;7269:3;7281:678;7295:6;7292:1;7289:13;7281:678;;;7354:13;;7392:9;;7380:22;;7442:11;;;7436:18;7422:12;;;7415:40;7478:4;7522:11;;;7516:18;7502:12;;;7495:40;7558:4;7602:11;;;7596:18;7582:12;;;7575:40;7638:4;7682:11;;;7676:18;7662:12;;;7655:40;7718:4;7761:11;;;7755:18;;7813:1;7796:19;;7786:2;;7819:9;7786:2;7850:12;;7843:34;7906:4;7897:14;;;;7934:15;;;;7317:1;7310:9;7281:678;;;-1:-1:-1;7975:3:183;;7099:885;-1:-1:-1;;;;;7099:885:183:o;7989:700::-;-1:-1:-1;;;;;8256:32:183;;;;8238:51;;8329:13;;8344:12;8325:32;8320:2;8305:18;;;8298:60;;;;8404:15;;8398:22;-1:-1:-1;;;;;;8394:42:183;8389:2;8374:18;;;8367:70;;;;8483:15;;8477:22;8431:3;8473:33;8468:2;8453:18;;;8446:61;;;;8554:15;;8548:22;8572:6;8544:35;8538:3;8523:19;;;8516:64;;;;8627:16;8621:23;-1:-1:-1;;;;;;8617:65:183;8276:3;8596:19;;8589:94;8225:3;8210:19;;8192:497::o;8694:183::-;8846:25;;;8834:2;8819:18;;8801:76::o;9062:264::-;9236:25;;;9304:14;9297:22;9292:2;9277:18;;9270:50;9224:2;9209:18;;9191:135::o;9331:244::-;9501:25;;;9557:2;9542:18;;9535:34;9489:2;9474:18;;9456:119::o;9580:346::-;9782:2;9764:21;;;9821:2;9801:18;;;9794:30;-1:-1:-1;;;9855:2:183;9840:18;;9833:52;9917:2;9902:18;;9754:172::o;9931:350::-;10133:2;10115:21;;;10172:2;10152:18;;;10145:30;10211:28;10206:2;10191:18;;10184:56;10272:2;10257:18;;10105:176::o;10286:338::-;10488:2;10470:21;;;10527:2;10507:18;;;10500:30;-1:-1:-1;;;10561:2:183;10546:18;;10539:44;10615:2;10600:18;;10460:164::o;10629:345::-;10831:2;10813:21;;;10870:2;10850:18;;;10843:30;-1:-1:-1;;;10904:2:183;10889:18;;10882:51;10965:2;10950:18;;10803:171::o;10979:337::-;11181:2;11163:21;;;11220:2;11200:18;;;11193:30;-1:-1:-1;;;11254:2:183;11239:18;;11232:43;11307:2;11292:18;;11153:163::o;11321:343::-;11523:2;11505:21;;;11562:2;11542:18;;;11535:30;-1:-1:-1;;;11596:2:183;11581:18;;11574:49;11655:2;11640:18;;11495:169::o;11669:347::-;11871:2;11853:21;;;11910:2;11890:18;;;11883:30;11949:25;11944:2;11929:18;;11922:53;12007:2;11992:18;;11843:173::o;12021:339::-;12223:2;12205:21;;;12262:2;12242:18;;;12235:30;-1:-1:-1;;;12296:2:183;12281:18;;12274:45;12351:2;12336:18;;12195:165::o;12365:340::-;12567:2;12549:21;;;12606:2;12586:18;;;12579:30;-1:-1:-1;;;12640:2:183;12625:18;;12618:46;12696:2;12681:18;;12539:166::o;12710:346::-;12912:2;12894:21;;;12951:2;12931:18;;;12924:30;-1:-1:-1;;;12985:2:183;12970:18;;12963:52;13047:2;13032:18;;12884:172::o;13061:338::-;13263:2;13245:21;;;13302:2;13282:18;;;13275:30;-1:-1:-1;;;13336:2:183;13321:18;;13314:44;13390:2;13375:18;;13235:164::o;13404:342::-;13606:2;13588:21;;;13645:2;13625:18;;;13618:30;-1:-1:-1;;;13679:2:183;13664:18;;13657:48;13737:2;13722:18;;13578:168::o;13751:347::-;13953:2;13935:21;;;13992:2;13972:18;;;13965:30;14031:25;14026:2;14011:18;;14004:53;14089:2;14074:18;;13925:173::o;14103:346::-;14305:2;14287:21;;;14344:2;14324:18;;;14317:30;-1:-1:-1;;;14378:2:183;14363:18;;14356:52;14440:2;14425:18;;14277:172::o;14454:346::-;14656:2;14638:21;;;14695:2;14675:18;;;14668:30;-1:-1:-1;;;14729:2:183;14714:18;;14707:52;14791:2;14776:18;;14628:172::o;14805:331::-;15007:2;14989:21;;;15046:1;15026:18;;;15019:29;-1:-1:-1;;;15079:2:183;15064:18;;15057:38;15127:2;15112:18;;14979:157::o;15141:348::-;15343:2;15325:21;;;15382:2;15362:18;;;15355:30;15421:26;15416:2;15401:18;;15394:54;15480:2;15465:18;;15315:174::o;15494:342::-;15696:2;15678:21;;;15735:2;15715:18;;;15708:30;-1:-1:-1;;;15769:2:183;15754:18;;15747:48;15827:2;15812:18;;15668:168::o;15841:343::-;16043:2;16025:21;;;16082:2;16062:18;;;16055:30;-1:-1:-1;;;16116:2:183;16101:18;;16094:49;16175:2;16160:18;;16015:169::o;16189:841::-;;16418:2;16407:9;16400:21;16456:6;16450:13;16499:4;16494:2;16483:9;16479:18;16472:32;16527:84;16606:3;16595:9;16591:19;16577:12;16527:84;:::i;:::-;16513:98;;16660:4;16652:6;16648:17;16642:24;16734:2;16730:7;16718:9;16710:6;16706:22;16702:36;16697:2;16686:9;16682:18;16675:64;16762:73;16828:6;16812:14;16762:73;:::i;:::-;16891:2;16879:15;;16873:22;16866:4;16851:20;;16844:52;16951:2;16939:15;;;16933:22;16927:3;16912:19;;16905:51;-1:-1:-1;;;17010:4:183;16995:20;16988:36;16748:87;16390:640::o;17035:332::-;17261:12;17249:25;;;;17231:44;;17306:2;17291:18;;17284:34;;;;17349:2;17334:18;;17327:34;17219:2;17204:18;;17186:181::o;17372:242::-;17442:2;17436:9;17472:17;;;17519:18;17504:34;;17540:22;;;17501:62;17498:2;;;17566:9;17498:2;17593;17586:22;17416:198;;-1:-1:-1;17416:198:183:o;17619:119::-;17706:6;17699:5;17695:18;17688:5;17685:29;17675:2;;17728:1;17725;17718:12;17675:2;17665:73;:::o;17743:125::-;17830:12;17823:5;17819:24;17812:5;17809:35;17799:2;;17858:1;17855;17848:12", "language": "Solidity", "natspec": {"kind": "dev", "methods": {"executeTradesArrayBatch(address,uint16,PortfolioState,bytes32[])": {"notice": "Executes trades for a bitmapped portfolio, cannot be called directly", "params": {"account": "account to put fCash assets in", "currencyId": "currency id to trade", "portfolioState": "used to update the positions in the portfolio", "trades": "tightly packed array of trades, schema is defined in global/Types.sol"}, "returns": {"_0": "resulting portfolio state", "_1": "netCash generated by trading"}}, "executeTradesBitmapBatch(address,uint16,uint40,bytes32[])": {"notice": "Executes trades for a bitmapped portfolio, cannot be called directly", "params": {"account": "account to put fCash assets in", "bitmapCurrencyId": "currency id of the bitmap", "nextSettleTime": "used to calculate the relative positions in the bitmap", "trades": "tightly packed array of trades, schema is defined in global/Types.sol"}, "returns": {"_0": "netCash generated by trading", "_1": "didIncurDebt if the bitmap had an fCash position go negative"}}, "executeVaultTrade(uint16,bytes32)": {"notice": "Executes a trade for leveraged vaults (they can only lend or borrow).", "params": {"currencyId": "the currency id to lend or borrow", "trade": "the bytes32 encoded trade data"}}}, "version": 1}, "offset": [554, 26330], "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3643F39B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xB58F83ED EQ PUSH2 0x87 JUMPI DUP1 PUSH4 0xE50F349E EQ PUSH2 0xB5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0x6B CALLDATASIZE PUSH1 0x4 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0xE2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7E SWAP3 SWAP2 SWAP1 PUSH2 0x4F33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA7 PUSH2 0xA2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C09 JUMP JUMPDEST PUSH2 0x1B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7E SWAP3 SWAP2 SWAP1 PUSH2 0x52BA JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD5 PUSH2 0xD0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E1B JUMP JUMPDEST PUSH2 0x2DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7E SWAP2 SWAP1 PUSH2 0x4F2A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xF0 DUP8 PUSH2 0x321 JUMP JUMPDEST SWAP1 POP PUSH2 0xFA PUSH2 0x4921 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104 PUSH2 0x4969 JUMP JUMPDEST TIMESTAMP PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x1A3 JUMPI PUSH1 0x0 PUSH2 0x13A DUP14 DUP8 DUP8 DUP14 DUP14 DUP8 DUP2 DUP2 LT PUSH2 0x129 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 PUSH1 0xA0 ADD MLOAD PUSH2 0x34D JUMP JUMPDEST DUP6 PUSH1 0x0 ADD DUP7 PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP DUP3 SWAP4 POP POP POP POP PUSH2 0x16C DUP14 DUP14 PUSH2 0xFFFF AND DUP4 DUP15 PUSH5 0xFFFFFFFFFF AND DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x487 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE DUP4 DUP1 PUSH2 0x181 JUMPI POP PUSH1 0x0 DUP4 PUSH1 0x20 ADD MLOAD SLT JUMPDEST DUP4 MLOAD PUSH1 0x60 DUP6 ADD MLOAD SWAP2 SWAP6 POP PUSH2 0x195 SWAP2 SWAP1 PUSH2 0x5F4 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x10D JUMP JUMPDEST POP PUSH1 0x60 ADD MLOAD SWAP5 POP SWAP3 POP POP POP JUMPDEST SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1C1 PUSH2 0x499F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1CD DUP8 PUSH2 0x321 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D7 PUSH2 0x4921 JUMP JUMPDEST PUSH2 0x1DF PUSH2 0x4969 JUMP JUMPDEST TIMESTAMP PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x2CA JUMPI PUSH1 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x1FE JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xFF AND PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x216 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x226 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x23D JUMPI POP PUSH1 0x3 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x23B JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x263 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x5208 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x288 DUP14 DUP8 DUP8 DUP14 DUP14 DUP9 DUP2 DUP2 LT PUSH2 0x277 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 PUSH1 0xA0 ADD MLOAD PUSH2 0x34D JUMP JUMPDEST PUSH1 0x20 DUP8 ADD DUP2 SWAP1 MSTORE SWAP1 DUP7 MSTORE SWAP1 SWAP2 POP PUSH2 0x2AB SWAP1 DUP13 SWAP1 PUSH2 0xFFFF DUP16 AND SWAP1 DUP5 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x610 JUMP JUMPDEST POP DUP3 MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x2BC SWAP2 PUSH2 0x5F4 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x1E8 JUMP JUMPDEST POP PUSH1 0x60 ADD MLOAD SWAP7 SWAP10 SWAP7 SWAP9 POP SWAP6 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2EB DUP5 PUSH2 0x321 JUMP JUMPDEST SWAP1 POP PUSH2 0x2F5 PUSH2 0x4921 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF8 DUP6 SWAP1 SHR PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x307 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x316 DUP4 DUP4 DUP4 TIMESTAMP DUP10 PUSH2 0x715 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x329 PUSH2 0x49C7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x338 DUP4 PUSH2 0xFFFF AND PUSH2 0x803 JUMP JUMPDEST SWAP1 POP PUSH2 0x344 DUP4 DUP3 PUSH2 0x84F JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0xF8 DUP7 SWAP1 SHR PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x362 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x372 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x390 JUMPI PUSH2 0x384 DUP10 DUP10 DUP8 DUP10 PUSH2 0x892 JUMP JUMPDEST SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0x47B JUMP JUMPDEST PUSH1 0x5 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x39E JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x3B0 JUMPI PUSH2 0x384 DUP10 DUP10 DUP8 DUP10 PUSH2 0xA72 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x3BE JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x3D5 JUMPI POP PUSH1 0x1 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x3D3 JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x463 JUMPI PUSH2 0x3E7 DUP9 DUP9 DUP4 DUP9 DUP11 PUSH2 0x715 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP DUP3 PUSH2 0x409 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x5063 JUMP JUMPDEST DUP7 PUSH1 0x20 ADD MLOAD SWAP4 POP DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xC53D733B6FDFAC3F892B49BF468CD1CAE7773AB553E440DC689ED6B09BB646B1 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x456 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5312 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x47B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x5145 JUMP JUMPDEST POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x494 DUP8 DUP8 PUSH2 0xCEB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4A0 PUSH2 0xD20 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SWAP2 SWAP3 POP DUP1 PUSH2 0x4D7 DUP9 DUP11 PUSH2 0xD2D JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x4E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4EF DUP6 DUP4 PUSH2 0xE38 JUMP JUMPDEST ISZERO PUSH2 0x57E JUMPI DUP3 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x50B SWAP1 DUP10 SWAP1 PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH2 0x5F4 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x52C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x535 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0xF DUP4 SWAP1 SIGNEXTEND AND OR DUP5 SSTORE DUP1 PUSH2 0x566 JUMPI PUSH2 0x563 DUP7 DUP5 PUSH1 0x0 PUSH2 0xE68 JUMP JUMPDEST SWAP6 POP JUMPDEST PUSH2 0x571 DUP13 DUP13 DUP9 PUSH2 0xEB6 JUMP JUMPDEST SWAP6 POP PUSH2 0x5EB SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP7 ISZERO PUSH2 0x5E2 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP8 SLT DUP1 ISZERO SWAP1 PUSH2 0x5A3 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP8 SGT ISZERO JUMPDEST PUSH2 0x5AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0xF DUP10 SWAP1 SIGNEXTEND AND OR DUP4 SSTORE PUSH2 0x5D5 DUP6 DUP4 PUSH1 0x1 PUSH2 0xE68 JUMP JUMPDEST SWAP5 POP PUSH2 0x5E2 DUP12 DUP12 DUP8 PUSH2 0xEB6 JUMP JUMPDEST DUP7 SWAP6 POP POP POP POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x60A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 MLOAD PUSH2 0x61F SWAP1 DUP6 DUP6 DUP6 DUP6 PUSH2 0xF10 JUMP JUMPDEST ISZERO PUSH2 0x629 JUMPI PUSH2 0x70E JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD ISZERO PUSH2 0x656 JUMPI PUSH1 0x0 PUSH2 0x646 DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 DUP7 DUP7 PUSH2 0xF10 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x654 JUMPI POP PUSH2 0x70E JUMP JUMPDEST POP JUMPDEST PUSH2 0x65F DUP3 PUSH2 0x1021 JUMP JUMPDEST ISZERO PUSH2 0x672 JUMPI PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x672 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x691 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x69A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD MLOAD DUP6 PUSH1 0x40 ADD MLOAD EQ ISZERO PUSH2 0x6BE JUMPI PUSH2 0x6B8 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x1037 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x6D4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP7 DUP2 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP7 ADD DUP1 MLOAD PUSH1 0x1 ADD SWAP1 MSTORE POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xFF PUSH1 0xF0 DUP5 SWAP1 SHR AND PUSH2 0x72D DUP9 DUP9 DUP4 DUP6 DUP10 PUSH2 0x10F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB PUSH1 0x98 DUP6 SWAP1 SHR AND SWAP2 POP PUSH1 0x1 DUP7 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x74B JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x75D JUMPI PUSH2 0x75A DUP3 PUSH2 0x116B JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x783 DUP9 DUP4 PUSH2 0x779 DUP9 DUP12 PUSH1 0x20 ADD MLOAD PUSH2 0x1179 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP11 SWAP3 SWAP2 SWAP1 DUP6 PUSH2 0x11D6 JUMP JUMPDEST SWAP3 POP PUSH4 0xFFFFFFFF PUSH1 0x78 DUP6 SWAP1 SHR AND DUP1 ISZERO PUSH2 0x7F7 JUMPI PUSH1 0x1 DUP8 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0x7A4 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x7D3 JUMPI DUP1 DUP9 PUSH1 0xA0 ADD MLOAD GT ISZERO PUSH2 0x7CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x51D8 JUMP JUMPDEST PUSH2 0x7F7 JUMP JUMPDEST DUP1 DUP9 PUSH1 0xA0 ADD MLOAD LT ISZERO PUSH2 0x7F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x51D8 JUMP JUMPDEST POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x80B PUSH2 0x49F3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x819 DUP6 PUSH2 0x123C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xFF AND PUSH1 0xA EXP SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x857 PUSH2 0x49C7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x866 DUP5 PUSH2 0xFFFF AND PUSH2 0x12FF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH2 0xFFFF SWAP7 SWAP1 SWAP7 AND DUP7 MSTORE PUSH1 0xFF DUP3 AND PUSH1 0x20 DUP8 ADD MSTORE DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x60 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH4 0xFFFFFFFF PUSH1 0xD8 DUP6 SWAP1 SHR AND PUSH1 0x80 DUP6 SWAP1 SHR PUSH1 0xA SIGNEXTEND DUP7 DUP3 GT PUSH2 0x8C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x50C3 JUMP JUMPDEST PUSH2 0x8D7 DUP9 PUSH1 0x20 ADD MLOAD DUP4 DUP10 PUSH2 0x131C JUMP JUMPDEST ISZERO PUSH2 0x8F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x4F81 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x907 DUP10 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND PUSH2 0x13C1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x915 DUP4 PUSH2 0x13E7 JUMP JUMPDEST SWAP5 POP POP SWAP4 POP POP POP PUSH2 0x93C DUP2 PUSH1 0x2 PUSH1 0xFF AND PUSH1 0x6 DUP2 LT PUSH2 0x92F JUMPI INVALID JUMPDEST DUP5 SWAP2 PUSH2 0xE10 SWAP2 BYTE MUL PUSH2 0x1450 JUMP JUMPDEST DUP11 GT PUSH2 0x95A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x5171 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x96F DUP5 DUP14 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP9 PUSH2 0x14AA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT DUP1 ISZERO PUSH2 0x981 JUMPI POP PUSH1 0x0 DUP6 SLT JUMPDEST ISZERO PUSH2 0x997 JUMPI DUP1 DUP6 SLT ISZERO PUSH2 0x992 JUMPI DUP1 SWAP5 POP JUMPDEST PUSH2 0x9D4 JUMP JUMPDEST PUSH1 0x0 DUP2 SGT DUP1 ISZERO PUSH2 0x9A7 JUMPI POP PUSH1 0x0 DUP6 SGT JUMPDEST ISZERO PUSH2 0x9BC JUMPI DUP1 DUP6 SGT ISZERO PUSH2 0x992 JUMPI DUP1 SWAP5 POP PUSH2 0x9D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x4FB8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9E3 DUP14 DUP9 DUP15 DUP10 DUP8 PUSH2 0x14EF JUMP JUMPDEST SWAP1 POP PUSH2 0x9FB DUP6 DUP15 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP10 DUP8 DUP11 DUP7 PUSH2 0x1576 JUMP JUMPDEST DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH5 0xFFFFFFFFFF AND DUP15 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND PUSH32 0xE85DD6C9C85C29A2F4D4CB74E31514BFC478C8C5A50DA255EA565123D8793352 DUP10 DUP6 PUSH1 0x40 MLOAD PUSH2 0xA47 SWAP3 SWAP2 SWAP1 PUSH2 0x4F43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP7 PUSH2 0xA59 DUP3 PUSH2 0x116B JUMP JUMPDEST DUP8 SWAP10 POP SWAP10 POP SWAP10 POP POP POP POP POP POP POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x58 DUP5 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND SWAP1 DUP3 AND EQ ISZERO PUSH2 0xAA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x5261 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB DUP6 AND PUSH1 0x0 PUSH2 0xABC DUP4 PUSH2 0x15FB JUMP JUMPDEST SWAP1 POP PUSH2 0xAC7 DUP2 PUSH2 0x169C JUMP JUMPDEST ISZERO PUSH2 0xB58 JUMPI PUSH1 0x40 MLOAD PUSH4 0x37B5FC21 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x6F6BF842 SWAP1 PUSH2 0xB05 SWAP1 DUP7 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x4EBE JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xB31 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB55 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0xB64 DUP4 DUP11 DUP5 DUP5 PUSH2 0x16F0 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH3 0x76A700 PUSH2 0xB75 DUP11 PUSH2 0x1823 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 PUSH2 0xB86 DUP12 DUP4 DUP13 DUP8 PUSH2 0x1844 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0xB96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0xBB5 PUSH2 0x4A1D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xBAD JUMPI SWAP1 POP POP SWAP1 POP DUP12 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xBE0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xBFE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xC17 DUP3 PUSH2 0x116B JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC24 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x1 PUSH1 0xFF AND DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC46 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xC61 DUP7 DUP6 DUP4 PUSH2 0x18A4 JUMP JUMPDEST SWAP4 POP PUSH2 0xC6F SWAP1 POP DUP4 DUP7 PUSH2 0x1925 JUMP JUMPDEST DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xC76E4E38CCD25A7B0A39CDAA81A20EFA0C2127E74C448B7B05AEF1C427D5732B DUP8 PUSH2 0xCB7 DUP7 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCC5 SWAP3 SWAP2 SWAP1 PUSH2 0x4F43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP2 PUSH2 0xCD7 DUP6 PUSH2 0x116B JUMP JUMPDEST SWAP1 SWAP14 SWAP1 SWAP13 POP SWAP1 SWAP11 POP SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCF6 PUSH2 0x1A29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0xC PUSH2 0x1A32 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xD3B DUP6 PUSH2 0x1A4B JUMP JUMPDEST SWAP1 POP PUSH3 0x15180 DUP5 MOD ISZERO PUSH2 0xD55 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0xE31 JUMP JUMPDEST DUP4 DUP2 LT PUSH2 0xD69 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0xE31 JUMP JUMPDEST PUSH3 0x15180 DUP2 DUP6 SUB DIV PUSH1 0x5A DUP2 GT PUSH2 0xD86 JUMPI SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0xE31 SWAP1 POP JUMP JUMPDEST PUSH2 0x168 DUP2 GT PUSH2 0xDC5 JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x7E900 DUP5 MOD DIV DUP3 ADD PUSH1 0x59 NOT ADD SWAP1 POP PUSH1 0x6 DUP2 DIV PUSH1 0x5A ADD PUSH1 0x6 DUP3 DUP2 PUSH2 0xDB5 JUMPI INVALID JUMPDEST MOD PUSH1 0x0 EQ SWAP5 POP SWAP5 POP POP POP POP PUSH2 0xE31 JUMP JUMPDEST PUSH2 0x870 DUP2 GT PUSH2 0xDF5 JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x278D00 DUP5 MOD DIV DUP3 ADD PUSH2 0x167 NOT ADD SWAP1 POP PUSH1 0x1E DUP2 DIV PUSH1 0x87 ADD PUSH1 0x1E DUP3 DUP2 PUSH2 0xDB5 JUMPI INVALID JUMPDEST PUSH2 0x1DE2 DUP2 GT PUSH2 0xE25 JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x76A700 DUP5 MOD DIV DUP3 ADD PUSH2 0x86F NOT ADD SWAP1 POP PUSH1 0x5A DUP2 DIV PUSH1 0xC3 ADD PUSH1 0x5A DUP3 DUP2 PUSH2 0xDB5 JUMPI INVALID JUMPDEST PUSH2 0x100 PUSH1 0x0 SWAP4 POP SWAP4 POP POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0xE4D JUMPI POP PUSH2 0x100 DUP3 GT ISZERO JUMPDEST PUSH2 0xE56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 NOT ADD SHL PUSH1 0x1 PUSH1 0xFF SHL SWAP1 DUP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 LT ISZERO DUP1 ISZERO PUSH2 0xE7D JUMPI POP PUSH2 0x100 DUP4 GT ISZERO JUMPDEST PUSH2 0xE86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0xE9F JUMPI POP PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP4 ADD SHR DUP4 OR PUSH2 0xEAF JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP4 ADD SHR NOT DUP4 AND JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x14 PUSH2 0xEC1 DUP3 PUSH2 0x1A67 JUMP JUMPDEST GT ISZERO PUSH2 0xEDF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x509A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEE9 PUSH2 0x1A29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP5 DUP6 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP5 DUP3 MSTORE SWAP4 SWAP1 SWAP5 MSTORE POP SWAP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x1014 JUMPI PUSH1 0x0 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF2B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP5 DUP2 PUSH1 0x40 ADD MLOAD EQ ISZERO DUP1 PUSH2 0xF49 JUMPI POP DUP1 MLOAD DUP8 EQ ISZERO JUMPDEST DUP1 PUSH2 0xF58 JUMPI POP DUP6 DUP2 PUSH1 0x20 ADD MLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 0xF63 JUMPI POP PUSH2 0x100C JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF75 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0xF93 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF90 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0xF9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0xFAE SWAP1 DUP7 PUSH2 0x5F4 JUMP JUMPDEST SWAP1 POP PUSH2 0xFB9 DUP7 PUSH2 0x1021 JUMP JUMPDEST ISZERO PUSH2 0xFCC JUMPI PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0xFCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0xFEB JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0xFF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SWAP1 SWAP2 ADD DUP2 SWAP1 MSTORE SWAP2 POP PUSH2 0x5EB SWAP1 POP JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xF14 JUMP JUMPDEST POP PUSH1 0x0 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 LT DUP1 ISZERO SWAP1 PUSH2 0x60A JUMPI POP POP PUSH1 0x8 LT ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 EQ PUSH2 0x104E JUMPI DUP3 MLOAD PUSH1 0x2 MUL PUSH2 0x1051 JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x106C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10A6 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1093 PUSH2 0x4A1D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x108B JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x10E8 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x10C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x10D5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x10AC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 GT ISZERO DUP1 ISZERO PUSH2 0x1105 JUMPI POP DUP5 PUSH1 0x20 ADD MLOAD DUP4 GT ISZERO JUMPDEST PUSH2 0x1121 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x511D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x113E PUSH2 0x112F DUP6 PUSH2 0x1B37 JUMP JUMPDEST PUSH2 0x1138 DUP5 PUSH2 0x1823 JUMP JUMPDEST SWAP1 PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH2 0x1163 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP3 DUP5 DUP7 PUSH2 0x1158 DUP12 PUSH2 0x1BDB JUMP JUMPDEST DUP11 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1BEF JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60A PUSH1 0x0 NOT DUP4 PUSH2 0x1C19 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x11D0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x11E6 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1C67 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x1232 JUMPI PUSH1 0x0 PUSH2 0x11FC DUP9 PUSH2 0x1D6A JUMP JUMPDEST SWAP1 POP PUSH2 0x1220 DUP2 DUP10 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0x60 ADD MLOAD DUP12 PUSH1 0xA0 ADD MLOAD DUP13 PUSH1 0xC0 ADD MLOAD DUP14 PUSH1 0xE0 ADD MLOAD PUSH2 0x1D6E JUMP JUMPDEST DUP7 MLOAD PUSH2 0x1230 SWAP1 PUSH2 0xFFFF AND DUP4 PUSH2 0x1E82 JUMP JUMPDEST POP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x124D DUP7 PUSH2 0x1F09 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1272 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH5 0x2540BE400 PUSH2 0x12F4 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1EE10833 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12E5 SWAP2 SWAP1 PUSH2 0x4D6C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x12F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x130A PUSH2 0x1F40 JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x133D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x4FE0 JUMP JUMPDEST PUSH1 0x7 DUP5 GT ISZERO PUSH2 0x135E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x50ED JUMP JUMPDEST PUSH3 0x76A700 DUP4 MOD ISZERO PUSH2 0x1371 JUMPI POP PUSH1 0x0 PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x137C DUP4 PUSH2 0x1823 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST DUP6 DUP2 GT PUSH2 0x13B5 JUMPI PUSH2 0x139B PUSH2 0x1394 DUP3 PUSH2 0x1B37 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x1450 JUMP JUMPDEST DUP6 EQ ISZERO PUSH2 0x13AD JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1381 JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13CC PUSH2 0x1F4D JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x13F8 PUSH2 0x1F5A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP8 SWAP1 SWAP8 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP5 KECCAK256 SLOAD PUSH2 0xFFFF DUP2 AND SWAP6 PUSH4 0xFFFFFFFF PUSH3 0x10000 DUP4 DIV DUP2 AND SWAP7 POP PUSH1 0x1 PUSH1 0x30 SHL DUP4 DIV AND SWAP5 POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x50 SHL DUP4 DIV AND SWAP4 POP PUSH1 0x1 PUSH1 0x58 SHL SWAP1 SWAP2 DIV PUSH1 0xD0 SHL SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xEAF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x14B5 PUSH2 0xD20 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 DUP4 MSTORE DUP4 MSTORE DUP1 DUP3 KECCAK256 DUP7 DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x14FD DUP8 DUP8 DUP8 PUSH2 0x1F67 JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP4 SWAP1 BYTE PUSH3 0xF4240 MUL PUSH1 0x0 DUP6 SGT ISZERO PUSH2 0x1523 JUMPI PUSH2 0x151C DUP3 DUP3 PUSH2 0x1450 JUMP JUMPDEST SWAP2 POP PUSH2 0x153A JUMP JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1535 JUMPI PUSH2 0x151C DUP3 DUP3 PUSH2 0x1179 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x154F DUP4 PUSH2 0x154A DUP11 DUP11 PUSH2 0x1179 JUMP JUMPDEST PUSH2 0x2050 JUMP JUMPDEST SWAP1 POP PUSH2 0x1569 PUSH2 0x155E DUP8 DUP4 PUSH2 0x20C1 JUMP JUMPDEST PUSH1 0x40 DUP12 ADD MLOAD SWAP1 PUSH2 0x20DA JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158D DUP8 DUP8 DUP8 DUP8 PUSH2 0x1588 DUP9 PUSH2 0x116B JUMP JUMPDEST PUSH2 0x487 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0x15A0 JUMPI POP PUSH1 0x0 DUP2 SLT ISZERO JUMPDEST DUP1 PUSH2 0x15B7 JUMPI POP PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x15B7 JUMPI POP PUSH1 0x0 DUP2 SGT ISZERO JUMPDEST PUSH2 0x15C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x15CC DUP9 DUP9 PUSH2 0x2119 JUMP JUMPDEST POP POP POP SWAP1 POP PUSH2 0x15E4 DUP4 DUP3 PUSH2 0x5F4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x15F1 DUP9 DUP9 DUP4 PUSH2 0x21C2 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1603 PUSH2 0x4A5D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160D PUSH2 0x21E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP4 DUP5 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP2 MLOAD PUSH1 0xA0 DUP2 ADD DUP4 MSTORE SWAP1 SLOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP3 MSTORE PUSH6 0x10000000000 DUP2 DIV PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x1 PUSH1 0x30 SHL DUP6 DIV PUSH1 0xFF AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x38 SHL DUP5 DIV PUSH2 0xFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x48 SHL SWAP1 SWAP4 DIV PUSH1 0x70 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT AND PUSH1 0x80 DUP5 ADD MSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 TIMESTAMP PUSH2 0x16A8 DUP4 PUSH2 0x21F2 JUMP JUMPDEST ISZERO PUSH2 0x16C9 JUMPI PUSH2 0x16B6 DUP2 PUSH2 0x1A4B JUMP JUMPDEST DUP4 MLOAD PUSH5 0xFFFFFFFFFF AND LT SWAP2 POP PUSH2 0x348 SWAP1 POP JUMP JUMPDEST DUP3 MLOAD PUSH5 0xFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x16E8 JUMPI POP DUP3 MLOAD PUSH5 0xFFFFFFFFFF AND DUP2 LT ISZERO JUMPDEST SWAP2 POP POP PUSH2 0x348 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT ISZERO PUSH2 0x16FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1717 DUP10 DUP10 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND PUSH2 0x2119 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP PUSH1 0x0 DUP5 SLT PUSH2 0x173F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x51A8 JUMP JUMPDEST DUP7 PUSH2 0x1758 JUMPI PUSH2 0x174D DUP5 PUSH2 0x116B JUMP JUMPDEST SWAP7 POP PUSH1 0x0 SWAP4 POP PUSH2 0x178D JUMP JUMPDEST PUSH2 0x1761 DUP5 PUSH2 0x116B JUMP JUMPDEST DUP8 SGT ISZERO PUSH2 0x1780 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x522A JUMP JUMPDEST PUSH2 0x178A DUP5 DUP9 PUSH2 0x5F4 JUMP JUMPDEST SWAP4 POP JUMPDEST DUP4 ISZERO DUP1 ISZERO PUSH2 0x1799 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x17B6 JUMPI DUP8 MLOAD PUSH2 0x17B6 SWAP1 DUP8 SWAP1 PUSH2 0xFFFF AND PUSH1 0x0 PUSH1 0x1 PUSH1 0xFE SHL PUSH2 0x21FF JUMP JUMPDEST PUSH2 0x17CC DUP10 DUP10 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP7 DUP7 DUP7 DUP7 PUSH2 0x23FF JUMP JUMPDEST DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x5441E4A5FAC93A951D782E6F1CDB82E95C8FC58561A013953D17E395C5E69B4B DUP10 PUSH1 0x40 MLOAD PUSH2 0x180E SWAP2 SWAP1 PUSH2 0x4F2A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP SWAP5 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x76A700 DUP3 LT ISZERO PUSH2 0x1835 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x76A700 DUP3 JUMPDEST MOD SWAP1 SWAP2 SUB SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1852 DUP7 DUP7 DUP7 PUSH2 0x1F67 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1876 PUSH2 0x186C PUSH2 0x1865 DUP10 PUSH2 0x253D JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x1450 JUMP JUMPDEST PUSH2 0x154A DUP9 DUP9 PUSH2 0x1179 JUMP JUMPDEST SWAP1 POP PUSH2 0x1899 DUP2 PUSH2 0x1893 DUP7 DUP11 PUSH1 0x40 ADD MLOAD PUSH2 0x2552 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x257D JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x18AC PUSH2 0x4A5D JUMP JUMPDEST PUSH2 0x18B5 DUP4 PUSH2 0x169C JUMP JUMPDEST ISZERO PUSH2 0x18D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x5036 JUMP JUMPDEST PUSH2 0x18DB DUP4 PUSH2 0x21F2 JUMP JUMPDEST ISZERO PUSH2 0x18F0 JUMPI PUSH2 0x18EB DUP5 DUP5 DUP5 PUSH2 0x2596 JUMP JUMPDEST PUSH2 0x191D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1902 DUP6 DUP6 PUSH1 0x40 ADD MLOAD DUP6 MLOAD PUSH2 0x2657 JUMP JUMPDEST SWAP1 POP PUSH2 0x190E DUP2 DUP5 PUSH2 0x26EA JUMP JUMPDEST PUSH2 0x191B DUP5 DUP7 DUP4 PUSH1 0x0 PUSH2 0x2748 JUMP JUMPDEST POP JUMPDEST POP SWAP1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x192F PUSH2 0x21E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 MLOAD DUP2 SLOAD SWAP4 DUP11 ADD MLOAD DUP4 DUP12 ADD MLOAD PUSH1 0x60 DUP13 ADD MLOAD PUSH1 0x80 DUP14 ADD MLOAD PUSH1 0x70 SHR PUSH1 0x1 PUSH1 0x48 SHL MUL PUSH27 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000 NOT PUSH2 0xFFFF SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x38 SHL MUL PUSH9 0xFFFF00000000000000 NOT PUSH1 0xFF SWAP5 SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH7 0xFF000000000000 NOT PUSH1 0xF8 SWAP7 SWAP1 SWAP7 SHR PUSH6 0x10000000000 MUL PUSH6 0xFF0000000000 NOT PUSH5 0xFFFFFFFFFF SWAP1 SWAP9 AND PUSH5 0xFFFFFFFFFF NOT SWAP1 SWAP12 AND SWAP11 SWAP1 SWAP11 OR SWAP7 SWAP1 SWAP7 AND SWAP9 SWAP1 SWAP9 OR SWAP4 SWAP1 SWAP4 AND SWAP4 SWAP1 SWAP4 OR AND SWAP5 SWAP1 SWAP5 OR AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH32 0x6BD4B121BCA854A191536A2CA891155C42EE2FB23F307FB34E8BC65CFCB5412E SWAP2 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0xB JUMPDEST PUSH1 0x0 PUSH3 0xF4240 DUP3 PUSH1 0x1A DUP2 GT ISZERO PUSH2 0x1A44 JUMPI INVALID JUMPDEST ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15180 DUP3 LT ISZERO PUSH2 0x1A5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x15180 DUP3 PUSH2 0x183B JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SHR PUSH32 0x5555555555555555555555555555555555555555555555555555555555555555 SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x2 DUP2 SWAP1 SHR PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333 SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x4 DUP2 SWAP1 SHR PUSH32 0x707070707070707070707070707070707070707070707070707070707070707 SWAP2 SWAP1 SWAP2 AND ADD PUSH1 0x8 DUP2 SWAP1 SHR PUSH31 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x10 DUP2 SWAP1 SHR ADD PUSH1 0x20 DUP2 SWAP1 SHR ADD PUSH1 0x40 DUP2 SWAP1 SHR ADD PUSH1 0x80 DUP2 SWAP1 SHR PUSH1 0xFF SWAP1 DUP2 AND SWAP2 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 EQ ISZERO PUSH2 0x1B4C JUMPI POP PUSH3 0x76A700 PUSH2 0x348 JUMP JUMPDEST DUP2 PUSH1 0x2 EQ ISZERO PUSH2 0x1B5F JUMPI POP PUSH3 0xED4E00 PUSH2 0x348 JUMP JUMPDEST DUP2 PUSH1 0x3 EQ ISZERO PUSH2 0x1B73 JUMPI POP PUSH4 0x1DA9C00 PUSH2 0x348 JUMP JUMPDEST DUP2 PUSH1 0x4 EQ ISZERO PUSH2 0x1B87 JUMPI POP PUSH4 0x3B53800 PUSH2 0x348 JUMP JUMPDEST DUP2 PUSH1 0x5 EQ ISZERO PUSH2 0x1B9B JUMPI POP PUSH4 0x9450C00 PUSH2 0x348 JUMP JUMPDEST DUP2 PUSH1 0x6 EQ ISZERO PUSH2 0x1BAF JUMPI POP PUSH4 0x128A1800 PUSH2 0x348 JUMP JUMPDEST DUP2 PUSH1 0x7 EQ ISZERO PUSH2 0x1BC3 JUMPI POP PUSH4 0x25143000 PUSH2 0x348 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x500F JUMP JUMPDEST PUSH1 0x60 ADD MLOAD PUSH2 0x12C PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x76A700 PUSH2 0x1BFE DUP6 PUSH2 0x1823 JUMP JUMPDEST ADD SWAP1 POP PUSH2 0x1C10 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x282A JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 MUL PUSH1 0x0 NOT DUP4 EQ ISZERO PUSH2 0x1C49 JUMPI DUP2 ISZERO DUP1 PUSH2 0x1C3B JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x1C38 JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x1C44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x60A JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x1C5E JUMPI POP DUP2 DUP4 DUP3 DUP2 PUSH2 0x1C5B JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x60A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP8 PUSH1 0x40 ADD MLOAD SGT PUSH2 0x1C80 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x1AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1C91 DUP11 DUP11 DUP10 DUP10 PUSH2 0x2861 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 DUP1 PUSH2 0x1CAB DUP13 PUSH1 0x40 ADD MLOAD DUP6 DUP8 DUP7 DUP15 PUSH2 0x2901 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP1 PUSH2 0x1CC6 JUMPI PUSH1 0x0 DUP1 SWAP7 POP SWAP7 POP POP POP POP POP POP PUSH2 0x1AF JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1CD8 DUP14 DUP6 DUP15 DUP15 PUSH2 0x29AD JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 PUSH1 0x0 EQ ISZERO PUSH2 0x1CFA JUMPI PUSH1 0x0 DUP1 SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP PUSH2 0x1AF JUMP JUMPDEST PUSH1 0x40 DUP15 ADD MLOAD PUSH2 0x1D09 SWAP1 DUP14 PUSH2 0x2A9D JUMP JUMPDEST PUSH1 0x40 DUP16 ADD DUP2 SWAP1 MSTORE PUSH2 0x1D26 SWAP1 PUSH2 0x1D1E DUP9 DUP6 PUSH2 0x5F4 JUMP JUMPDEST DUP10 DUP9 DUP16 PUSH2 0x2AB9 JUMP JUMPDEST PUSH1 0xA0 DUP16 ADD DUP2 SWAP1 MSTORE PUSH2 0x1D44 JUMPI PUSH1 0x0 DUP1 SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP PUSH2 0x1AF JUMP JUMPDEST PUSH2 0x1D55 DUP15 DUP15 PUSH1 0x40 ADD MLOAD DUP6 DUP6 DUP6 PUSH2 0x2B76 JUMP JUMPDEST SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 SLT ISZERO DUP1 ISZERO PUSH2 0x1D86 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP6 SGT ISZERO JUMPDEST PUSH2 0x1D8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 SLT ISZERO DUP1 ISZERO PUSH2 0x1DA7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP5 SGT ISZERO JUMPDEST PUSH2 0x1DB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x1DC4 JUMPI POP PUSH4 0xFFFFFFFF DUP4 GT ISZERO JUMPDEST PUSH2 0x1DCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x1DE1 JUMPI POP PUSH4 0xFFFFFFFF DUP3 GT ISZERO JUMPDEST PUSH2 0x1DEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 SLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP6 DUP7 AND OR PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x50 SHL NOT AND PUSH1 0x1 PUSH1 0x50 SHL SWAP5 SWAP1 SWAP6 AND SWAP4 SWAP1 SWAP4 MUL SWAP4 SWAP1 SWAP4 OR PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH4 0xFFFFFFFF SWAP3 DUP4 AND MUL OR PUSH4 0xFFFFFFFF PUSH1 0xC0 SHL NOT AND PUSH1 0x1 PUSH1 0xC0 SHL SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0xE0 SHL SWAP2 SWAP1 SWAP3 AND MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x1E90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1E9D PUSH1 0x0 DUP5 PUSH2 0x2119 JUMP JUMPDEST POP POP POP SWAP1 POP PUSH2 0x1EB5 DUP3 DUP3 PUSH2 0x5F4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1EC8 PUSH1 0x0 DUP5 DUP4 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x23FF JUMP JUMPDEST DUP3 PUSH2 0xFFFF AND PUSH32 0x85170C297762884F47EC6098B74925C795E6D33686B11019B400E33A9B23B5E9 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1EFC SWAP2 SWAP1 PUSH2 0x4F2A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1F16 PUSH2 0x2BCB JUMP JUMPDEST PUSH1 0x0 SWAP5 DUP6 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP3 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0x9 PUSH2 0x1A32 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0x3 PUSH2 0x1A32 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0x2 PUSH2 0x1A32 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1F7B DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 PUSH2 0x2BD8 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x1F8A DUP8 PUSH2 0x1BDB JUMP JUMPDEST SWAP1 POP DUP2 PUSH2 0x1FAD JUMPI DUP7 MLOAD PUSH2 0x1FA3 SWAP1 PUSH2 0xFFFF AND DUP8 DUP4 DUP9 PUSH2 0x2C99 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FB8 DUP7 PUSH2 0x1823 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1FC8 PUSH2 0x1394 DUP7 PUSH2 0x1B37 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1FE0 DUP11 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP4 DUP7 DUP12 PUSH2 0x2C99 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP8 PUSH1 0x1 EQ ISZERO PUSH2 0x2005 JUMPI DUP10 SWAP2 POP PUSH2 0x1FFE DUP13 PUSH1 0x40 ADD MLOAD PUSH2 0x2D38 JUMP JUMPDEST SWAP1 POP PUSH2 0x2034 JUMP JUMPDEST PUSH2 0x201B PUSH2 0x2014 PUSH1 0x1 DUP11 SUB PUSH2 0x1B37 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x1450 JUMP JUMPDEST SWAP2 POP PUSH2 0x2031 DUP13 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP4 DUP9 DUP14 PUSH2 0x2C99 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x2041 DUP3 DUP6 DUP4 DUP7 DUP16 PUSH2 0x2DC9 JUMP JUMPDEST SWAP9 POP POP POP POP POP POP POP POP POP PUSH2 0xEAF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2073 PUSH2 0x206E PUSH4 0x1DA9C00 PUSH2 0x2068 DUP8 DUP8 PUSH2 0x2E27 JUMP JUMPDEST SWAP1 PUSH2 0x2E80 JUMP JUMPDEST PUSH2 0x2EE7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2087 DUP3 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x2F05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2094 DUP3 PUSH2 0x2F58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x20A8 DUP3 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x2FAD JUMP JUMPDEST SWAP1 POP PUSH2 0x20B3 DUP2 PUSH2 0x2FE3 JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEAF PUSH2 0x20D4 DUP5 PUSH4 0x3B9ACA00 PUSH2 0x1C19 JUMP JUMPDEST DUP4 PUSH2 0x2FEC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2111 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x210B DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x2105 PUSH5 0x2540BE400 DUP9 PUSH2 0x1C19 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x1C19 JUMP JUMPDEST SWAP1 PUSH2 0x2FEC JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2129 PUSH2 0x301D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP2 AND SWAP7 POP PUSH1 0x1 PUSH1 0x50 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP5 POP SWAP1 SWAP2 POP DUP4 ISZERO PUSH2 0x2192 JUMPI DUP1 SLOAD PUSH2 0x218B SWAP1 PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV PUSH7 0xFFFFFFFFFFFFFF AND PUSH2 0x302A JUMP JUMPDEST SWAP3 POP PUSH2 0x21A7 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV PUSH7 0xFFFFFFFFFFFFFF AND SWAP3 POP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xA SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 POP SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x21D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21E0 DUP4 DUP4 DUP4 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x23FF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0x1 PUSH2 0x1A32 JUMP JUMPDEST PUSH1 0x60 ADD MLOAD PUSH2 0xFFFF AND ISZERO ISZERO SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x2211 JUMPI POP PUSH2 0x3FFF DUP4 GT ISZERO JUMPDEST PUSH2 0x221A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x222E JUMPI POP DUP3 DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0xFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2238 JUMPI PUSH2 0x23F9 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT DUP3 AND ISZERO PUSH2 0x23B3 JUMPI PUSH1 0xF0 DUP3 SWAP1 SHR PUSH2 0x3FFF AND DUP7 DUP2 EQ DUP1 ISZERO PUSH2 0x2267 JUMPI POP DUP6 JUMPDEST ISZERO PUSH2 0x229F JUMPI POP PUSH1 0x80 DUP8 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT DUP7 AND PUSH1 0x10 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 SHR SWAP2 SWAP1 SWAP2 OR PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT AND SWAP1 MSTORE POP PUSH2 0x23F9 SWAP1 POP JUMP JUMPDEST DUP7 DUP2 EQ DUP1 ISZERO PUSH2 0x22AC JUMPI POP DUP6 ISZERO JUMPDEST ISZERO PUSH2 0x2301 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT DUP6 AND NOT SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH1 0x3 PUSH1 0xFE SHL DUP4 AND PUSH2 0x22DF JUMPI PUSH1 0x10 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT AND SWAP1 SHL SWAP3 POP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT SWAP2 DUP3 AND PUSH1 0x10 SWAP1 SWAP2 MUL SHR SWAP2 SWAP1 SWAP2 OR AND PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x23F9 JUMP JUMPDEST DUP7 DUP2 GT DUP1 ISZERO PUSH2 0x230D JUMPI POP DUP6 JUMPDEST ISZERO PUSH2 0x2367 JUMPI PUSH1 0x80 DUP9 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT PUSH1 0xF0 DUP11 SWAP1 SHL DUP9 OR DUP2 AND PUSH1 0x10 DUP7 MUL SHR SWAP7 SWAP1 SWAP7 OR SWAP6 SWAP2 SHL AND ISZERO PUSH2 0x2341 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT SWAP2 DUP3 AND PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x10 MUL SHR SWAP2 SWAP1 SWAP2 OR AND PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x23F9 JUMP JUMPDEST DUP7 DUP2 GT DUP1 ISZERO PUSH2 0x2374 JUMPI POP DUP6 ISZERO JUMPDEST ISZERO PUSH2 0x2382 JUMPI POP POP POP POP PUSH2 0x23F9 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT DUP3 AND PUSH1 0x10 DUP3 DUP2 MUL SWAP2 SWAP1 SWAP2 SHR SWAP4 SWAP1 SWAP4 OR SWAP3 SWAP2 SWAP1 SWAP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND SWAP1 PUSH1 0x1 ADD PUSH2 0x2242 JUMP JUMPDEST DUP5 PUSH2 0x23C0 JUMPI POP POP POP PUSH2 0x23F9 JUMP JUMPDEST PUSH1 0x9 DUP2 LT PUSH2 0x23CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT PUSH1 0xF0 DUP8 SWAP1 SHL DUP6 OR AND PUSH1 0x10 SWAP1 SWAP2 MUL SHR SWAP2 SWAP1 SWAP2 OR PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT AND PUSH1 0x80 DUP7 ADD MSTORE POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2409 PUSH2 0x301D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP7 SLT DUP1 ISZERO SWAP1 PUSH2 0x244C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP7 SGT ISZERO JUMPDEST PUSH2 0x2455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 SLT ISZERO DUP1 ISZERO PUSH2 0x246D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP6 SGT ISZERO JUMPDEST PUSH2 0x2476 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH2 0x24B6 JUMPI PUSH7 0xFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x248F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SLOAD PUSH7 0xFFFFFFFFFFFFFF PUSH1 0x70 SHL NOT AND PUSH1 0x1 PUSH1 0x70 SHL PUSH7 0xFFFFFFFFFFFFFF DUP6 AND MUL OR DUP2 SSTORE PUSH2 0x24D0 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x50 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP5 EQ PUSH2 0x24D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0xA SWAP7 SWAP1 SWAP7 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND PUSH1 0x1 PUSH1 0xA8 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP1 SWAP7 AND PUSH10 0xFFFFFFFFFFFFFFFFFFFF NOT PUSH4 0xFFFFFFFF SWAP1 SWAP7 AND PUSH1 0x1 PUSH1 0x50 SHL MUL PUSH4 0xFFFFFFFF PUSH1 0x50 SHL NOT SWAP1 SWAP9 AND SWAP8 SWAP1 SWAP8 OR SWAP5 SWAP1 SWAP5 AND SWAP6 SWAP1 SWAP6 OR SWAP4 SWAP1 SWAP4 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x60 ADD MLOAD PUSH3 0x7A120 PUSH1 0x30 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2111 DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x210B PUSH5 0x2540BE400 PUSH2 0x210B DUP8 DUP10 PUSH1 0x20 ADD MLOAD PUSH2 0x1C19 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEAF PUSH2 0x258C DUP5 DUP5 PUSH2 0x1C19 JUMP JUMPDEST PUSH4 0x3B9ACA00 PUSH2 0x2FEC JUMP JUMPDEST PUSH2 0x259F DUP3 PUSH2 0x21F2 JUMP JUMPDEST PUSH2 0x25A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0xFFFF AND PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x70E JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x25CB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x25E8 JUMPI POP PUSH2 0x264F JUMP JUMPDEST DUP1 MLOAD DUP4 EQ PUSH2 0x25F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x1 EQ PUSH2 0x2606 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2628 DUP8 DUP6 DUP5 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD PUSH5 0xFFFFFFFFFF AND DUP7 PUSH1 0x60 ADD MLOAD PUSH2 0x487 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x264C JUMPI PUSH1 0x20 DUP7 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0xF8 SHL OR PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 MSTORE JUMPDEST POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x25B4 JUMP JUMPDEST PUSH2 0x265F PUSH2 0x499F JUMP JUMPDEST PUSH2 0x2667 PUSH2 0x499F JUMP JUMPDEST PUSH1 0xFF DUP5 AND PUSH2 0x2676 JUMPI SWAP1 POP PUSH2 0xEAF JUMP JUMPDEST PUSH2 0x2680 DUP6 DUP6 PUSH2 0x3038 JUMP JUMPDEST DUP2 MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x26A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x26DC JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x26C9 PUSH2 0x4A1D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x26C1 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x20 DUP3 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x21E0 JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2704 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2721 JUMPI POP PUSH2 0x2740 JUMP JUMPDEST PUSH2 0x273E DUP5 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x610 JUMP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x26ED JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH2 0x2757 DUP7 DUP9 PUSH2 0x3061 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF DUP2 AND DUP13 MSTORE SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP SWAP1 POP PUSH2 0x2774 DUP9 PUSH2 0x169C JUMP JUMPDEST ISZERO PUSH2 0x277E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP3 AND PUSH1 0x40 DUP10 ADD MSTORE DUP5 PUSH2 0x279D JUMPI PUSH1 0x7 PUSH1 0xFF DUP4 AND GT ISZERO PUSH2 0x279D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ISZERO PUSH2 0x27C0 JUMPI PUSH1 0x20 DUP9 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0xF8 SHL OR PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 MSTORE PUSH2 0x27CF JUMP JUMPDEST PUSH1 0x20 DUP9 ADD DUP1 MLOAD PUSH1 0x7F PUSH1 0xF9 SHL AND SWAP1 MSTORE JUMPDEST PUSH2 0x27DC DUP9 PUSH1 0x80 ADD MLOAD PUSH2 0x32A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT AND PUSH1 0x80 DUP10 ADD MSTORE PUSH1 0x0 JUMPDEST DUP4 ISZERO PUSH2 0x281F JUMPI PUSH1 0xF0 DUP5 SWAP1 SHR DUP2 DUP2 EQ PUSH2 0x2811 JUMPI PUSH2 0x2811 DUP11 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL PUSH2 0x21FF JUMP JUMPDEST PUSH1 0x10 SWAP5 SWAP1 SWAP5 SHL SWAP4 SWAP1 POP PUSH2 0x27EE JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2837 DUP8 DUP8 DUP8 DUP7 DUP6 PUSH2 0x331B JUMP JUMPDEST PUSH2 0x2850 DUP8 PUSH1 0xE0 ADD MLOAD DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0xC0 ADD MLOAD DUP6 DUP9 PUSH2 0x33D5 JUMP JUMPDEST PUSH1 0xC0 SWAP1 SWAP8 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH2 0x2871 DUP8 DUP7 DUP9 PUSH2 0x3468 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2890 DUP10 PUSH1 0x60 ADD MLOAD DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0x2552 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP9 PUSH1 0x40 ADD MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x28A3 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x28BA JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 SWAP5 POP SWAP5 POP SWAP5 POP POP POP PUSH2 0xA68 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x28D2 DUP12 PUSH1 0x40 ADD MLOAD DUP13 PUSH1 0xA0 ADD MLOAD DUP6 DUP8 DUP14 PUSH2 0x34DA JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP1 PUSH2 0x28F0 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 SWAP7 POP SWAP7 POP SWAP7 POP POP POP POP POP PUSH2 0xA68 JUMP JUMPDEST POP SWAP2 SWAP10 SWAP1 SWAP9 POP SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x290F DUP9 DUP6 PUSH2 0x2A9D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2927 PUSH2 0x2920 DUP11 DUP11 PUSH2 0x5F4 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x20C1 JUMP JUMPDEST SWAP1 POP PUSH4 0x3B023380 DUP2 SGT ISZERO PUSH2 0x2943 JUMPI PUSH1 0x0 DUP1 SWAP4 POP SWAP4 POP POP POP PUSH2 0x1AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x294F DUP4 PUSH2 0x356A JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x2968 JUMPI PUSH1 0x0 DUP1 SWAP6 POP SWAP6 POP POP POP POP POP PUSH2 0x1AF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x297E DUP10 PUSH2 0x2978 DUP6 DUP14 PUSH2 0x20C1 JUMP JUMPDEST SWAP1 PUSH2 0x5F4 JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 SLT ISZERO PUSH2 0x299D JUMPI PUSH1 0x0 DUP1 SWAP7 POP SWAP7 POP POP POP POP POP POP PUSH2 0x1AF JUMP JUMPDEST SWAP6 POP PUSH1 0x1 SWAP5 POP PUSH2 0x1AF SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH2 0x29C4 PUSH2 0x29BF DUP8 DUP10 PUSH2 0x20C1 JUMP JUMPDEST PUSH2 0x116B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x29DA PUSH2 0x29D4 DUP11 PUSH2 0x360C JUMP JUMPDEST DUP8 PUSH2 0x2050 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 SGT ISZERO PUSH2 0x2A32 JUMPI PUSH1 0x0 PUSH2 0x29F1 DUP10 DUP4 PUSH2 0x20C1 JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 SLT ISZERO PUSH2 0x2A12 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP PUSH2 0xA68 JUMP JUMPDEST PUSH2 0x2A2A PUSH2 0x2A23 PUSH4 0x3B9ACA00 DUP5 PUSH2 0x3621 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x257D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2A54 JUMP JUMPDEST PUSH2 0x2A51 PUSH2 0x29BF DUP3 PUSH2 0x210B PUSH2 0x2A4A PUSH4 0x3B9ACA00 DUP4 PUSH2 0x3621 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x1C19 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x2A6E PUSH1 0x64 PUSH2 0x210B PUSH2 0x2A67 DUP14 PUSH2 0x3637 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x1C19 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A7A DUP4 DUP4 PUSH2 0x3621 JUMP JUMPDEST PUSH2 0x2A8B PUSH2 0x29BF DUP4 PUSH2 0x2978 DUP8 DUP8 PUSH2 0x3621 JUMP JUMPDEST SWAP1 SWAP12 SWAP1 SWAP11 POP SWAP1 SWAP9 POP SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AA9 DUP4 DUP4 PUSH2 0x3621 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x60A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2ACC DUP9 DUP9 DUP9 DUP9 PUSH1 0x0 PUSH2 0x2901 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x2AE0 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x5EB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AEB DUP4 PUSH2 0x3644 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2AFF DUP3 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x2F05 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B0C DUP3 PUSH2 0x3670 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B28 PUSH2 0x2B23 DUP4 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x2FAD JUMP JUMPDEST PUSH2 0x36AA JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x2B48 DUP10 PUSH2 0x2068 DUP5 PUSH4 0x1DA9C00 PUSH2 0x2E27 JUMP JUMPDEST SWAP1 POP PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x2B66 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x5EB JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x2B84 DUP8 DUP7 PUSH2 0x20DA JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x2B96 SWAP1 DUP3 PUSH2 0x5F4 JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MSTORE TIMESTAMP PUSH1 0xE0 DUP10 ADD MSTORE PUSH1 0x0 PUSH2 0x2BAD DUP9 DUP7 PUSH2 0x20DA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BBB DUP10 DUP10 PUSH2 0x20DA JUMP JUMPDEST SWAP11 SWAP2 SWAP10 POP SWAP1 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0xF PUSH2 0x1A32 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 GT PUSH2 0x2BFB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x4FE0 JUMP JUMPDEST PUSH1 0x7 DUP6 GT ISZERO PUSH2 0x2C1C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x50ED JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C27 DUP5 PUSH2 0x1823 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST DUP7 DUP2 GT PUSH2 0x2C78 JUMPI PUSH1 0x0 PUSH2 0x2C41 PUSH2 0x1865 DUP4 PUSH2 0x1B37 JUMP JUMPDEST SWAP1 POP DUP7 DUP2 EQ ISZERO PUSH2 0x2C59 JUMPI POP SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH2 0x2C91 SWAP1 POP JUMP JUMPDEST DUP7 DUP2 GT ISZERO PUSH2 0x2C6F JUMPI POP SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0x2C91 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2C2C JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x528D JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2CA4 PUSH2 0x36C6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x76A700 PUSH2 0x2CB5 DUP6 PUSH2 0x1823 JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 ADD DUP1 DUP4 MSTORE SWAP4 SWAP1 MSTORE KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xC0 SHL DUP2 DIV DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV AND DUP2 PUSH2 0x2D1C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A SWAP1 PUSH2 0x4F51 JUMP JUMPDEST PUSH2 0x2D29 DUP2 DUP5 DUP5 DUP13 DUP13 PUSH2 0x33D5 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2D52 JUMPI POP PUSH1 0x0 PUSH2 0x348 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD30A666 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2DA5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEAF SWAP2 SWAP1 PUSH2 0x4D6C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP7 LT PUSH2 0x2DD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP3 LT PUSH2 0x2DE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP4 LT PUSH2 0x2E09 JUMPI PUSH2 0x2E02 DUP5 PUSH2 0x1138 DUP9 DUP9 SUB PUSH2 0x2068 DUP4 DUP9 SUB DUP12 DUP9 SUB PUSH2 0x2E27 JUMP JUMPDEST SWAP1 POP PUSH2 0x5EB JUMP JUMPDEST PUSH2 0x2E02 PUSH2 0x2E20 DUP8 DUP8 SUB PUSH2 0x2068 DUP7 DUP9 SUB DUP11 DUP8 SUB PUSH2 0x2E27 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x1179 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2E36 JUMPI POP PUSH1 0x0 PUSH2 0x60A JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x2E43 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xEAF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x537C PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x2ED6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x2EDF JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0x7FFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2EFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xF SIGNEXTEND PUSH1 0x0 EQ ISZERO PUSH2 0x2F18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xF SIGNEXTEND PUSH1 0x40 DUP6 PUSH1 0xF SIGNEXTEND SWAP1 SHL DUP2 PUSH2 0x2F2D JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x2F4F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0xEAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x46 SHL DUP3 PUSH1 0xF SIGNEXTEND SLT PUSH2 0x2F6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH9 0x3FFFFFFFFFFFFFFFFF NOT DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x2F8A JUMPI POP PUSH1 0x0 PUSH2 0x348 JUMP JUMPDEST PUSH2 0x60A PUSH1 0x80 DUP4 PUSH1 0xF SIGNEXTEND PUSH17 0x171547652B82FE1777D0FFDA0D23A7D12 MUL SWAP1 SAR PUSH2 0x36D3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF DUP4 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND MUL PUSH1 0x40 SAR PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x2F4F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO PUSH2 0xEAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT EQ DUP1 ISZERO PUSH2 0x3002 JUMPI POP PUSH1 0x1 PUSH1 0xFF SHL DUP4 EQ JUMPDEST ISZERO PUSH2 0x300C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x3015 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0x6 PUSH2 0x1A32 JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SHR PUSH1 0xFF SWAP1 SWAP2 AND SHL SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x3046 DUP5 DUP5 PUSH2 0x4181 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 MLOAD GT PUSH2 0x3058 JUMPI SWAP1 POP PUSH2 0x60A JUMP JUMPDEST PUSH2 0xEAF DUP2 PUSH2 0x4299 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 JUMPDEST DUP10 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x30F2 JUMPI PUSH1 0x0 DUP11 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3087 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0x309D JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x30AD JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x30B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x30CA JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x30DA JUMPI POP PUSH1 0x60 DUP2 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x30E9 JUMPI PUSH2 0x30E9 DUP12 DUP4 PUSH2 0x4452 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x306B JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP10 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x3195 JUMPI PUSH1 0x0 DUP11 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3112 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3129 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3139 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x314D JUMPI PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 SSTORE PUSH2 0x318C JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x315F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x3178 JUMPI PUSH1 0x80 DUP2 ADD MLOAD DUP1 PUSH2 0x3175 DUP4 DUP3 PUSH2 0x45A2 JUMP JUMPDEST POP POP JUMPDEST PUSH2 0x3184 DUP2 DUP7 DUP7 DUP7 PUSH2 0x46C7 JUMP JUMPDEST SWAP2 SWAP7 POP SWAP5 POP SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x30F6 JUMP JUMPDEST POP PUSH1 0x60 DUP10 ADD MLOAD PUSH1 0x0 PUSH2 0x31A5 PUSH2 0x472A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP JUMPDEST DUP13 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x326F JUMPI PUSH1 0x0 DUP14 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x31E0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x31FD JUMPI POP PUSH2 0x3267 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x320F JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x322D JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x322A JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x3236 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3242 DUP2 DUP10 DUP10 DUP10 PUSH2 0x46C7 JUMP JUMPDEST SWAP2 SWAP10 POP SWAP8 POP SWAP6 POP PUSH2 0x325F DUP2 DUP5 DUP8 PUSH1 0x10 DUP2 LT PUSH2 0x3259 JUMPI INVALID JUMPDEST ADD PUSH2 0x45A2 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SWAP5 POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x31C1 JUMP JUMPDEST POP PUSH1 0x10 DUP4 GT ISZERO DUP1 ISZERO PUSH2 0x3286 JUMPI POP PUSH5 0xFFFFFFFFFF DUP5 GT ISZERO JUMPDEST PUSH2 0x328F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP4 SWAP11 SWAP3 SWAP10 POP SWAP8 POP SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFF7FFF7FFF7FFF7FFF7FFF7FFF7FFF7FFF0000000000000000000000000000 DUP4 AND DUP2 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT DUP3 AND ISZERO PUSH2 0x3312 JUMPI PUSH1 0x1 PUSH1 0xFE SHL DUP3 DUP2 AND EQ ISZERO PUSH2 0x32FC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT DUP3 AND DUP2 SHR SWAP3 SWAP1 SWAP3 OR SWAP2 PUSH1 0x10 ADD JUMPDEST PUSH1 0x10 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT AND SWAP1 SHL SWAP2 POP PUSH2 0x32C8 JUMP JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3325 PUSH2 0x36C6 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 DUP11 MSTORE SWAP1 DUP10 ADD DUP8 SWAP1 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP1 DUP3 AND SWAP4 DUP12 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x50 SHL DUP2 DIV SWAP1 SWAP3 AND PUSH1 0x60 DUP11 ADD MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP4 DIV DUP2 AND PUSH1 0xA0 DUP12 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 SHL DUP4 DIV DUP2 AND PUSH1 0xC0 DUP12 ADD MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP3 DIV SWAP1 SWAP2 AND PUSH1 0xE0 DUP10 ADD MSTORE SWAP1 SWAP2 POP DUP1 DUP5 ISZERO PUSH2 0x33C4 JUMPI PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND PUSH1 0x80 DUP10 ADD MSTORE PUSH2 0x15F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP10 ADD MSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x33E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 GT ISZERO PUSH2 0x33F2 JUMPI POP DUP4 PUSH2 0x5EB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33FE DUP4 DUP9 PUSH2 0x1179 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x3411 JUMPI DUP6 SWAP2 POP POP PUSH2 0x5EB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3425 DUP6 PUSH2 0x2068 DUP5 PUSH4 0x3B9ACA00 PUSH2 0x2E27 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3437 PUSH4 0x3B9ACA00 DUP4 PUSH2 0x1179 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x345A PUSH4 0x3B9ACA00 PUSH2 0x2068 PUSH2 0x3450 DUP12 DUP7 PUSH2 0x2E27 JUMP JUMPDEST PUSH2 0x1138 DUP14 DUP9 PUSH2 0x2E27 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 GT ISZERO DUP1 ISZERO PUSH2 0x347F JUMPI POP DUP4 PUSH1 0x20 ADD MLOAD DUP4 GT ISZERO JUMPDEST PUSH2 0x3488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 PUSH1 0x8 PUSH1 0x0 NOT DUP7 ADD MUL ADD SWAP1 PUSH1 0xFF SWAP1 DUP3 SHR AND PUSH4 0x3B9ACA00 MUL PUSH1 0x0 PUSH2 0x34C1 PUSH2 0x34B3 DUP7 PUSH2 0x4737 JUMP JUMPDEST PUSH2 0x210B DUP5 PUSH4 0x1DA9C00 PUSH2 0x1C19 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x34D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x34E9 DUP8 DUP6 PUSH2 0x2050 JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 SLT ISZERO PUSH2 0x3504 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x1AF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x351B PUSH2 0x3514 DUP12 DUP11 PUSH2 0x5F4 JUMP JUMPDEST DUP12 SWAP1 PUSH2 0x20C1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x3529 DUP4 PUSH2 0x356A JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x3543 JUMPI PUSH1 0x0 DUP1 SWAP7 POP SWAP7 POP POP POP POP POP POP PUSH2 0x1AF JUMP JUMPDEST PUSH2 0x3557 PUSH2 0x3550 DUP4 DUP12 PUSH2 0x20C1 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x3621 JUMP JUMPDEST SWAP13 PUSH1 0x1 SWAP13 POP SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH4 0x3B9ACA00 DUP4 EQ ISZERO PUSH2 0x3584 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x3607 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x359E PUSH2 0x3597 PUSH4 0x3B9ACA00 DUP7 PUSH2 0x3621 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x20C1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x35AB DUP3 PUSH2 0x3644 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0xF SIGNEXTEND SGT PUSH2 0x35C6 JUMPI PUSH1 0x0 DUP1 SWAP4 POP SWAP4 POP POP POP PUSH2 0x3607 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35FA PUSH2 0x35F5 PUSH2 0x35E9 PUSH2 0x35DA DUP6 PUSH2 0x3670 JUMP JUMPDEST PUSH9 0x14B927F32BFFB83338 PUSH2 0x4751 JUMP JUMPDEST PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x2FAD JUMP JUMPDEST PUSH2 0x2FE3 JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP5 POP PUSH1 0x1 SWAP4 POP POP POP POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 ADD MLOAD PUSH3 0x186A0 PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND MUL SWAP1 JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x60A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 ADD MLOAD PUSH1 0x18 SHR PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0x7FFFFFFFFFFFFFFF NOT DUP3 SLT ISZERO DUP1 ISZERO PUSH2 0x3667 JUMPI POP PUSH8 0x7FFFFFFFFFFFFFFF DUP3 SGT ISZERO JUMPDEST PUSH2 0x2EFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SGT PUSH2 0x3681 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x80 PUSH2 0x368C DUP4 PUSH2 0x4784 JUMP JUMPDEST PUSH1 0xF SIGNEXTEND PUSH16 0xB17217F7D1CF79ABC9E3B39803F2F6AF MUL SWAP1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x36BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0xA PUSH2 0x1A32 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x46 SHL DUP3 PUSH1 0xF SIGNEXTEND SLT PUSH2 0x36E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH9 0x3FFFFFFFFFFFFFFFFF NOT DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x3705 JUMPI POP PUSH1 0x0 PUSH2 0x348 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7F SHL PUSH1 0x0 PUSH1 0x1 PUSH1 0x3F SHL DUP5 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3733 JUMPI PUSH17 0x16A09E667F3BCC908B2FB1366EA957D3E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x4000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3760 JUMPI PUSH17 0x1306FE0A31B7152DE8D5A46305C85EDEC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x2000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x378D JUMPI PUSH17 0x1172B83C7D517ADCDF7C8C50EB14A791F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x1000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x37BA JUMPI PUSH17 0x10B5586CF9890F6298B92B71842A98363 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x800000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x37E7 JUMPI PUSH17 0x1059B0D31585743AE7C548EB68CA417FD MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x400000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3814 JUMPI PUSH17 0x102C9A3E778060EE6F7CACA4F7A29BDE8 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x200000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3841 JUMPI PUSH17 0x10163DA9FB33356D84A66AE336DCDFA3F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x38 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x386A JUMPI PUSH17 0x100B1AFA5ABCBED6129AB13EC11DC9543 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x80000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3896 JUMPI PUSH17 0x10058C86DA1C09EA1FF19D294CF2F679B MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x40000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x38C2 JUMPI PUSH17 0x1002C605E2E8CEC506D21BFC89A23A00F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x20000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x38EE JUMPI PUSH17 0x100162F3904051FA128BCA9C55C31E5DF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x10000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x391A JUMPI PUSH17 0x1000B175EFFDC76BA38E31671CA939725 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x8000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3946 JUMPI PUSH17 0x100058BA01FB9F96D6CACD4B180917C3D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x4000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3972 JUMPI PUSH17 0x10002C5CC37DA9491D0985C348C68E7B3 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x2000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x399E JUMPI PUSH17 0x1000162E525EE054754457D5995292026 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x30 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x39C7 JUMPI PUSH17 0x10000B17255775C040618BF4A4ADE83FC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x800000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x39F2 JUMPI PUSH17 0x1000058B91B5BC9AE2EED81E9B7D4CFAB MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x400000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A1D JUMPI PUSH17 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x200000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A48 JUMPI PUSH17 0x10000162E43F4F831060E02D839A9D16D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x100000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A73 JUMPI PUSH17 0x100000B1721BCFC99D9F890EA06911763 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x80000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3A9E JUMPI PUSH17 0x10000058B90CF1E6D97F9CA14DBCC1628 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x40000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3AC9 JUMPI PUSH17 0x1000002C5C863B73F016468F6BAC5CA2B MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x20000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3AF4 JUMPI PUSH17 0x100000162E430E5A18F6119E3C02282A5 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x10000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B1F JUMPI PUSH17 0x1000000B1721835514B86E6D96EFD1BFE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x8000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B49 JUMPI PUSH17 0x100000058B90C0B48C6BE5DF846C5B2EF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x4000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B73 JUMPI PUSH17 0x10000002C5C8601CC6B9E94213C72737A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x2000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3B9D JUMPI PUSH17 0x1000000162E42FFF037DF38AA2B219F06 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x1000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3BC7 JUMPI PUSH17 0x10000000B17217FBA9C739AA5819F44F9 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x800000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3BF1 JUMPI PUSH17 0x1000000058B90BFCDEE5ACD3C1CEDC823 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x400000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3C1B JUMPI PUSH17 0x100000002C5C85FE31F35A6A30DA1BE50 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x200000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3C45 JUMPI PUSH17 0x10000000162E42FF0999CE3541B9FFFCF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x100000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3C6F JUMPI PUSH17 0x100000000B17217F80F4EF5AADDA45554 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x80000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3C98 JUMPI PUSH17 0x10000000058B90BFBF8479BD5A81B51AD MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x40000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3CC1 JUMPI PUSH17 0x1000000002C5C85FDF84BD62AE30A74CC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x20000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3CEA JUMPI PUSH17 0x100000000162E42FEFB2FED257559BDAA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x10000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3D13 JUMPI PUSH17 0x1000000000B17217F7D5A7716BBA4A9AE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x8000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3D3C JUMPI PUSH17 0x100000000058B90BFBE9DDBAC5E109CCE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x4000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3D65 JUMPI PUSH17 0x10000000002C5C85FDF4B15DE6F17EB0D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x2000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3D8E JUMPI PUSH17 0x1000000000162E42FEFA494F1478FDE05 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x1000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3DB7 JUMPI PUSH17 0x10000000000B17217F7D20CF927C8E94C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x800000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3DDF JUMPI PUSH17 0x1000000000058B90BFBE8F71CB4E4B33D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x400000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3E07 JUMPI PUSH17 0x100000000002C5C85FDF477B662B26945 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x200000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3E2F JUMPI PUSH17 0x10000000000162E42FEFA3AE53369388C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x100000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3E57 JUMPI PUSH17 0x100000000000B17217F7D1D351A389D40 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x80000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3E7F JUMPI PUSH17 0x10000000000058B90BFBE8E8B2D3D4EDE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x40000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3EA7 JUMPI PUSH17 0x1000000000002C5C85FDF4741BEA6E77E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x20000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3ECF JUMPI PUSH17 0x100000000000162E42FEFA39FE95583C2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x10000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3EF7 JUMPI PUSH17 0x1000000000000B17217F7D1CFB72B45E1 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x8000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3F1E JUMPI PUSH17 0x100000000000058B90BFBE8E7CC35C3F0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x4000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3F45 JUMPI PUSH17 0x10000000000002C5C85FDF473E242EA38 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x2000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3F6C JUMPI PUSH17 0x1000000000000162E42FEFA39F02B772C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3F93 JUMPI PUSH17 0x10000000000000B17217F7D1CF7D83C1A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x800 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3FBA JUMPI PUSH17 0x1000000000000058B90BFBE8E7BDCBE2E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x400 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x3FE1 JUMPI PUSH17 0x100000000000002C5C85FDF473DEA871F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x200 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4008 JUMPI PUSH17 0x10000000000000162E42FEFA39EF44D91 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x100 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x402F JUMPI PUSH17 0x100000000000000B17217F7D1CF79E949 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x80 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4055 JUMPI PUSH17 0x10000000000000058B90BFBE8E7BCE544 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x40 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x407B JUMPI PUSH17 0x1000000000000002C5C85FDF473DE6ECA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x20 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x40A1 JUMPI PUSH17 0x100000000000000162E42FEFA39EF366F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x10 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x40C7 JUMPI PUSH17 0x1000000000000000B17217F7D1CF79AFA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x8 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x40ED JUMPI PUSH17 0x100000000000000058B90BFBE8E7BCD6D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x4 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4113 JUMPI PUSH17 0x10000000000000002C5C85FDF473DE6B2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x2 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4139 JUMPI PUSH17 0x1000000000000000162E42FEFA39EF358 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x415F JUMPI PUSH17 0x10000000000000000B17217F7D1CF79AB MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0xF DUP4 DUP2 SIGNEXTEND PUSH1 0x40 SAR PUSH1 0x3F SUB SWAP1 SIGNEXTEND SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 GT ISZERO PUSH2 0x60A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x10 DUP3 PUSH1 0xFF AND GT ISZERO PUSH2 0x4194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x419E PUSH2 0x472A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP PUSH1 0xFF DUP6 AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x41D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x420D JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x41FA PUSH2 0x4A1D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x41F2 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 PUSH1 0xFF AND DUP2 LT ISZERO PUSH2 0x1232 JUMPI PUSH1 0x0 DUP4 DUP3 PUSH1 0x10 DUP2 LT PUSH2 0x422C JUMPI INVALID JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x423D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP4 SLOAD PUSH2 0xFFFF DUP2 AND DUP3 MSTORE PUSH5 0xFFFFFFFFFF PUSH3 0x10000 DUP3 DIV AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xFF PUSH1 0x1 PUSH1 0x38 SHL DUP4 DIV AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH1 0xA SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH1 0x1 ADD PUSH2 0x4213 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x42B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x42DE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x433B JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x42FA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x431B DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0x485F JUMP JUMPDEST DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4327 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x42E4 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x23F9 JUMPI DUP1 JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x4381 JUMPI POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4360 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4377 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT JUMPDEST ISZERO PUSH2 0x4449 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4392 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x43A9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x1 DUP5 SUB DUP2 MLOAD DUP2 LT PUSH2 0x43C0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x43D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x43F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4407 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH1 0x1 DUP5 SUB DUP2 MLOAD DUP2 LT PUSH2 0x441E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4431 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD SWAP2 SWAP1 SWAP2 MSTORE MSTORE PUSH1 0x0 NOT ADD PUSH2 0x4349 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x433F JUMP JUMPDEST DUP2 MLOAD MLOAD DUP2 LT PUSH2 0x4460 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD GT PUSH2 0x4471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4483 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x449A JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x44AA JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x44C8 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x44C5 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x44D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP4 ADD DUP1 MLOAD PUSH1 0x0 NOT ADD SWAP1 MSTORE PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP6 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x4544 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x44FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 DUP2 PUSH1 0x80 ADD MLOAD GT DUP1 ISZERO PUSH2 0x452B JUMPI POP PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x4528 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST ISZERO PUSH2 0x453B JUMPI DUP1 PUSH1 0x80 ADD MLOAD SWAP3 POP DUP2 SWAP4 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x44E2 JUMP JUMPDEST POP DUP2 DUP5 EQ ISZERO PUSH2 0x455D JUMPI POP POP PUSH1 0x2 PUSH1 0xA0 SWAP2 SWAP1 SWAP2 ADD MSTORE PUSH2 0x459E JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x456F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x80 DUP6 DUP2 ADD DUP1 MLOAD SWAP2 DUP4 ADD DUP1 MLOAD SWAP1 SWAP2 MSTORE MSTORE PUSH1 0x1 PUSH1 0xA0 SWAP2 DUP3 ADD MSTORE PUSH1 0x2 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP POP JUMPDEST POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x45B5 JUMPI POP DUP2 MLOAD PUSH2 0x3FFF LT ISZERO JUMPDEST PUSH2 0x45BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x45DB JUMPI POP PUSH1 0x20 DUP3 ADD MLOAD PUSH5 0xFFFFFFFFFF LT ISZERO JUMPDEST PUSH2 0x45E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x45FD JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x8 LT ISZERO JUMPDEST PUSH2 0x4606 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT SGT DUP1 ISZERO SWAP1 PUSH2 0x462D JUMPI POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB SLT ISZERO JUMPDEST PUSH2 0x4636 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 SLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD PUSH1 0xA SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH19 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000 NOT PUSH1 0xFF SWAP1 SWAP7 AND PUSH1 0x1 PUSH1 0x38 SHL MUL PUSH8 0xFF00000000000000 NOT PUSH5 0xFFFFFFFFFF SWAP1 SWAP4 AND PUSH3 0x10000 MUL PUSH7 0xFFFFFFFFFF0000 NOT PUSH2 0xFFFF SWAP1 SWAP7 AND PUSH2 0xFFFF NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR AND SWAP2 SWAP1 SWAP2 OR SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x46D6 DUP9 PUSH2 0x48BA JUMP JUMPDEST SWAP1 POP DUP5 ISZERO DUP1 PUSH2 0x46E4 JUMPI POP DUP1 DUP6 GT JUMPDEST ISZERO PUSH2 0x46ED JUMPI DUP1 SWAP5 POP JUMPDEST DUP7 DUP1 PUSH2 0x46FD JUMPI POP PUSH1 0x0 DUP9 PUSH1 0x60 ADD MLOAD SLT JUMPDEST SWAP7 POP PUSH2 0xFFFF DUP7 AND ISZERO PUSH2 0x470E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP SWAP5 MLOAD SWAP4 SWAP6 PUSH1 0x10 SWAP4 SWAP1 SWAP4 SHR PUSH1 0xF0 SWAP5 SWAP1 SWAP5 SHL SWAP4 SWAP1 SWAP4 OR SWAP4 POP SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x60A PUSH1 0xD PUSH2 0x1A32 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP3 GT ISZERO PUSH2 0x474D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF DUP3 DUP2 SIGNEXTEND SWAP1 DUP5 SWAP1 SIGNEXTEND SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x2F4F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO PUSH2 0xEAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0xF SIGNEXTEND SGT PUSH2 0x4795 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xF DUP4 SWAP1 SIGNEXTEND PUSH1 0x1 PUSH1 0x40 SHL DUP2 SLT PUSH2 0x47AF JUMPI PUSH1 0x40 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH5 0x100000000 DUP2 SLT PUSH2 0x47C3 JUMPI PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH3 0x10000 DUP2 SLT PUSH2 0x47D5 JUMPI PUSH1 0x10 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH2 0x100 DUP2 SLT PUSH2 0x47E6 JUMPI PUSH1 0x8 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH1 0x10 DUP2 SLT PUSH2 0x47F6 JUMPI PUSH1 0x4 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH1 0x4 DUP2 SLT PUSH2 0x4806 JUMPI PUSH1 0x2 SWAP2 DUP3 ADD SWAP2 SAR JUMPDEST PUSH1 0x2 DUP2 SLT PUSH2 0x4815 JUMPI PUSH1 0x1 DUP3 ADD SWAP2 POP JUMPDEST PUSH1 0x3F NOT DUP3 ADD PUSH1 0x40 SHL PUSH1 0xF DUP6 SWAP1 SIGNEXTEND PUSH1 0x7F DUP5 SWAP1 SUB SHL PUSH1 0x1 PUSH1 0x3F SHL JUMPDEST PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x4854 JUMPI SWAP1 DUP1 MUL PUSH1 0xFF DUP2 SWAP1 SHR DUP3 DUP2 MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x7F ADD SHR SWAP1 PUSH1 0x1 SAR PUSH2 0x482E JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FFF DUP5 GT ISZERO PUSH2 0x4870 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH5 0xFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x4882 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 DUP3 GT ISZERO PUSH2 0x4890 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH8 0xFFFF000000000000 PUSH1 0x30 DUP5 SWAP1 SHL AND PUSH6 0xFFFFFFFFFF00 PUSH1 0x8 DUP5 SWAP1 SHL AND OR PUSH1 0xFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x40 ADD MLOAD GT DUP1 ISZERO PUSH2 0x48D4 JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x8 LT ISZERO JUMPDEST PUSH2 0x48DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 LT PUSH2 0x48F4 JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x348 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4906 PUSH1 0x1 DUP5 PUSH1 0x40 ADD MLOAD SUB PUSH2 0x1B37 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x344 SWAP1 PUSH3 0x76A700 SWAP1 PUSH2 0x1138 SWAP1 DUP5 PUSH2 0x1179 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x49E6 PUSH2 0x49F3 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x4A58 JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4AB3 JUMPI DUP1 DUP2 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4ACA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0xE31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4AF4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 GT ISZERO PUSH2 0x4B0B JUMPI INVALID JUMPDEST PUSH2 0x4B18 DUP3 DUP4 DUP6 MUL ADD PUSH2 0x5331 JUMP JUMPDEST DUP4 DUP2 MSTORE DUP3 DUP2 ADD SWAP1 DUP7 DUP5 ADD PUSH1 0xC0 DUP1 DUP8 MUL DUP10 ADD DUP7 ADD DUP11 LT ISZERO PUSH2 0x4B36 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x4BB7 JUMPI DUP2 DUP4 DUP13 SUB SLT ISZERO PUSH2 0x4B4E JUMPI DUP9 DUP10 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 ADD DUP2 DUP2 LT DUP10 DUP3 GT OR ISZERO PUSH2 0x4B63 JUMPI INVALID JUMPDEST DUP3 MSTORE DUP5 CALLDATALOAD DUP2 MSTORE DUP9 DUP6 ADD CALLDATALOAD DUP10 DUP3 ADD MSTORE DUP5 DUP3 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP1 DUP6 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x80 DUP1 DUP6 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 PUSH2 0x4B9E DUP3 DUP7 ADD PUSH2 0x4BDE JUMP JUMPDEST SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MSTORE SWAP4 DUP7 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4B38 JUMP JUMPDEST POP SWAP2 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x348 DUP2 PUSH2 0x5355 JUMP JUMPDEST DUP1 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4C20 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4C29 DUP7 PUSH2 0x4A8B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4C39 DUP2 PUSH2 0x5355 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4C55 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP8 ADD SWAP1 PUSH1 0x80 DUP3 DUP11 SUB SLT ISZERO PUSH2 0x4C68 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD DUP2 DUP2 LT DUP4 DUP3 GT OR ISZERO PUSH2 0x4C7D JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x4C8E JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4C9A DUP12 DUP3 DUP7 ADD PUSH2 0x4AE4 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x4CAE JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4CBA DUP12 DUP3 DUP7 ADD PUSH2 0x4AE4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 SWAP3 DUP4 ADD CALLDATALOAD DUP4 DUP3 ADD MSTORE SWAP5 POP SWAP1 DUP8 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x4CE7 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x4CF4 DUP9 DUP3 DUP10 ADD PUSH2 0x4AA2 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4D1C JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4D25 DUP7 PUSH2 0x4A8B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4D35 DUP2 PUSH2 0x5355 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x4D45 DUP2 PUSH2 0x5368 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4D60 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4CF4 DUP9 DUP3 DUP10 ADD PUSH2 0x4AA2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D7D JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D95 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x4DB2 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD PUSH2 0x4DC0 DUP2 PUSH2 0x5368 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x4DDC JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x4DED PUSH1 0x40 DUP5 ADD PUSH2 0x4BF8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x4DFE PUSH1 0x60 DUP5 ADD PUSH2 0x4BED JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x4E0F PUSH1 0x80 DUP5 ADD PUSH2 0x4BC6 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4E2D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4E38 DUP2 PUSH2 0x5355 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4EB3 JUMPI DUP2 MLOAD DUP1 MLOAD DUP9 MSTORE DUP4 DUP2 ADD MLOAD DUP5 DUP10 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP10 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP10 ADD MSTORE PUSH1 0x80 DUP1 DUP3 ADD MLOAD SWAP1 DUP10 ADD MSTORE PUSH1 0xA0 SWAP1 DUP2 ADD MLOAD SWAP1 PUSH1 0x4 DUP3 LT PUSH2 0x4E9E JUMPI INVALID JUMPDEST DUP9 ADD MSTORE PUSH1 0xC0 SWAP1 SWAP7 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4E59 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE DUP1 MLOAD PUSH5 0xFFFFFFFFFF AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x40 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 ADD MLOAD PUSH1 0xFF AND PUSH1 0x60 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 ADD MLOAD PUSH2 0xFFFF AND PUSH1 0x80 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB NOT AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x13585C9AD95D081B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x4E6F6E206964696F73796E637261746963206D61747572697479000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x125B9D985B1A5908185B5BDD5B9D PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x10D1CE881B9BC81B585C9AD95D1CC81B1A5CDD1959 PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x92DCECC2D8D2C840D2DCC8CAF PUSH1 0x9B SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x4163636F756E74206D75737420736574746C65 PUSH1 0x68 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x5472616465206661696C65642C206C6971756964697479000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x4F766572206D617820617373657473 PUSH1 0x88 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x496E76616C6964206D61747572697479 PUSH1 0x80 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x10D1CE881B585C9AD95D081A5B99195E08189BDD5B99 PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x125B9D985B1A59081B585C9AD95D PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x496E76616C69642074726164652074797065 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420626C6F636B2074696D65000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x496E76616C696420736574746C652062616C616E6365 PUSH1 0x50 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x5472616465206661696C65642C20736C697070616765 PUSH1 0x50 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x8 SWAP1 DUP3 ADD MSTORE PUSH8 0x111A5CD8589B1959 PUSH1 0xC2 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E76616C696420616D6F756E7420746F20736574746C650000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x21B0B73737BA1039B2BA3A36329039B2B633 PUSH1 0x71 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH19 0x10D1CE881B9BC81B585C9AD95D08199BDD5B99 PUSH1 0x6A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE DUP4 MLOAD PUSH1 0x80 PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x52D6 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x4E46 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x3F NOT DUP5 DUP4 SUB ADD PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x52F3 DUP3 DUP3 PUSH2 0x4E46 JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE POP POP POP PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x534D JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x5365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5365 JUMPI PUSH1 0x0 DUP1 REVERT INVALID MSTORE8 PUSH2 0x6665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77A26469706673582212 KECCAK256 CREATE PUSH22 0xF13D6DDCC9581F156650A7B3008FA02FE0E73527C7E2 0xC4 PUSH7 0x96BE1687522C64 PUSH20 0x6F6C634300070600330000000000000000000000 ", "sha1": "6c95099cf703d9ffae538df1eee46f241dabab62", "source": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport \"../FreeCollateralExternal.sol\";\nimport \"../SettleAssetsExternal.sol\";\nimport \"../../internal/markets/Market.sol\";\nimport \"../../internal/markets/CashGroup.sol\";\nimport \"../../internal/markets/AssetRate.sol\";\nimport \"../../internal/balances/BalanceHandler.sol\";\nimport \"../../internal/portfolio/PortfolioHandler.sol\";\nimport \"../../internal/portfolio/TransferAssets.sol\";\nimport \"../../math/SafeInt256.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nlibrary TradingAction {\n    using PortfolioHandler for PortfolioState;\n    using AccountContextHandler for AccountContext;\n    using Market for MarketParameters;\n    using CashGroup for CashGroupParameters;\n    using AssetRate for AssetRateParameters;\n    using SafeInt256 for int256;\n    using SafeMath for uint256;\n\n    event LendBorrowTrade(\n        address indexed account,\n        uint16 indexed currencyId,\n        uint40 maturity,\n        int256 netAssetCash,\n        int256 netfCash\n    );\n\n    event AddRemoveLiquidity(\n        address indexed account,\n        uint16 indexed currencyId,\n        uint40 maturity,\n        int256 netAssetCash,\n        int256 netfCash,\n        int256 netLiquidityTokens\n    );\n\n    event SettledCashDebt(\n        address indexed settledAccount,\n        uint16 indexed currencyId,\n        address indexed settler,\n        int256 amountToSettleAsset,\n        int256 fCashAmount\n    );\n\n    event nTokenResidualPurchase(\n        uint16 indexed currencyId,\n        uint40 indexed maturity,\n        address indexed purchaser,\n        int256 fCashAmountToPurchase,\n        int256 netAssetCashNToken\n    );\n\n    /// @dev Used internally to manage stack issues\n    struct TradeContext {\n        int256 cash;\n        int256 fCashAmount;\n        int256 fee;\n        int256 netCash;\n        int256 totalFee;\n        uint256 blockTime;\n    }\n\n    /// @notice Executes a trade for leveraged vaults (they can only lend or borrow).\n    /// @param currencyId the currency id to lend or borrow\n    /// @param trade the bytes32 encoded trade data\n    function executeVaultTrade(uint16 currencyId, bytes32 trade)\n        external\n        returns (int256 netAssetCash) {\n        CashGroupParameters memory cashGroup = CashGroup.buildCashGroupStateful(currencyId);\n        MarketParameters memory market;\n        TradeActionType tradeType = TradeActionType(uint256(uint8(bytes1(trade))));\n\n        (netAssetCash, /* */) = _executeLendBorrowTrade(cashGroup, market, tradeType, block.timestamp, trade);\n    }\n\n    /// @notice Executes trades for a bitmapped portfolio, cannot be called directly\n    /// @param account account to put fCash assets in\n    /// @param bitmapCurrencyId currency id of the bitmap\n    /// @param nextSettleTime used to calculate the relative positions in the bitmap\n    /// @param trades tightly packed array of trades, schema is defined in global/Types.sol\n    /// @return netCash generated by trading\n    /// @return didIncurDebt if the bitmap had an fCash position go negative\n    function executeTradesBitmapBatch(\n        address account,\n        uint16 bitmapCurrencyId,\n        uint40 nextSettleTime,\n        bytes32[] calldata trades\n    ) external returns (int256, bool) {\n        CashGroupParameters memory cashGroup = CashGroup.buildCashGroupStateful(bitmapCurrencyId);\n        MarketParameters memory market;\n        bool didIncurDebt;\n        TradeContext memory c;\n        c.blockTime = block.timestamp;\n\n        for (uint256 i = 0; i < trades.length; i++) {\n            uint256 maturity;\n            (maturity, c.cash, c.fCashAmount) = _executeTrade(\n                account,\n                cashGroup,\n                market,\n                trades[i],\n                c.blockTime\n            );\n\n            c.fCashAmount = BitmapAssetsHandler.addifCashAsset(\n                account,\n                bitmapCurrencyId,\n                maturity,\n                nextSettleTime,\n                c.fCashAmount\n            );\n\n            didIncurDebt = didIncurDebt || (c.fCashAmount < 0);\n            c.netCash = c.netCash.add(c.cash);\n        }\n\n        return (c.netCash, didIncurDebt);\n    }\n\n    /// @notice Executes trades for a bitmapped portfolio, cannot be called directly\n    /// @param account account to put fCash assets in\n    /// @param currencyId currency id to trade\n    /// @param portfolioState used to update the positions in the portfolio\n    /// @param trades tightly packed array of trades, schema is defined in global/Types.sol\n    /// @return resulting portfolio state\n    /// @return netCash generated by trading\n    function executeTradesArrayBatch(\n        address account,\n        uint16 currencyId,\n        PortfolioState memory portfolioState,\n        bytes32[] calldata trades\n    ) external returns (PortfolioState memory, int256) {\n        CashGroupParameters memory cashGroup = CashGroup.buildCashGroupStateful(currencyId);\n        MarketParameters memory market;\n        TradeContext memory c;\n        c.blockTime = block.timestamp;\n\n        for (uint256 i = 0; i < trades.length; i++) {\n            TradeActionType tradeType = TradeActionType(uint256(uint8(bytes1(trades[i]))));\n\n            if (\n                tradeType == TradeActionType.AddLiquidity ||\n                tradeType == TradeActionType.RemoveLiquidity\n            ) {\n                revert(\"Disabled\");\n                /**\n                 * Manual adding and removing of liquidity is currently disabled.\n                 *\n                 *  // Liquidity tokens can only be added by array portfolio\n                 *  c.cash = _executeLiquidityTrade(\n                 *      account,\n                 *      cashGroup,\n                 *      market,\n                 *      tradeType,\n                 *      trades[i],\n                 *      portfolioState,\n                 *      c.netCash\n                 *  );\n                 */\n            } else {\n                uint256 maturity;\n                (maturity, c.cash, c.fCashAmount) = _executeTrade(\n                    account,\n                    cashGroup,\n                    market,\n                    trades[i],\n                    c.blockTime\n                );\n\n                portfolioState.addAsset(\n                    currencyId,\n                    maturity,\n                    Constants.FCASH_ASSET_TYPE,\n                    c.fCashAmount\n                );\n            }\n\n            c.netCash = c.netCash.add(c.cash);\n        }\n\n        return (portfolioState, c.netCash);\n    }\n\n    /// @notice Executes a non-liquidity token trade\n    /// @param account the initiator of the trade\n    /// @param cashGroup parameters for the trade\n    /// @param market market memory location to use\n    /// @param trade bytes32 encoding of the particular trade\n    /// @param blockTime the current block time\n    /// @return maturity of the asset that was traded\n    /// @return cashAmount - a positive or negative cash amount accrued to the account\n    /// @return fCashAmount - a positive or negative fCash amount accrued to the account\n    function _executeTrade(\n        address account,\n        CashGroupParameters memory cashGroup,\n        MarketParameters memory market,\n        bytes32 trade,\n        uint256 blockTime\n    )\n        private\n        returns (\n            uint256 maturity,\n            int256 cashAmount,\n            int256 fCashAmount\n        )\n    {\n        TradeActionType tradeType = TradeActionType(uint256(uint8(bytes1(trade))));\n        if (tradeType == TradeActionType.PurchaseNTokenResidual) {\n            (maturity, cashAmount, fCashAmount) = _purchaseNTokenResidual(\n                account,\n                cashGroup,\n                blockTime,\n                trade\n            );\n        } else if (tradeType == TradeActionType.SettleCashDebt) {\n            (maturity, cashAmount, fCashAmount) = _settleCashDebt(account, cashGroup, blockTime, trade);\n        } else if (tradeType == TradeActionType.Lend || tradeType == TradeActionType.Borrow) {\n            (cashAmount, fCashAmount) = _executeLendBorrowTrade(\n                cashGroup,\n                market,\n                tradeType,\n                blockTime,\n                trade\n            );\n            require(cashAmount != 0, \"Trade failed, liquidity\");\n\n            // This is a little ugly but required to deal with stack issues. We know the market is loaded\n            // with the proper maturity inside _executeLendBorrowTrade\n            maturity = market.maturity;\n            emit LendBorrowTrade(\n                account,\n                uint16(cashGroup.currencyId),\n                uint40(maturity),\n                cashAmount,\n                fCashAmount\n            );\n        } else {\n            revert(\"Invalid trade type\");\n        }\n    }\n\n    /// @notice Executes a liquidity token trade, no fees incurred and only array portfolios may hold\n    /// liquidity tokens.\n    /// @param account the initiator of the trade\n    /// @param cashGroup parameters for the trade\n    /// @param market market memory location to use\n    /// @param tradeType whether this is add or remove liquidity\n    /// @param trade bytes32 encoding of the particular trade\n    /// @param portfolioState the current account's portfolio state\n    /// @param netCash the current net cash accrued in this batch of trades, can be\n    //  used for adding liquidity\n    /// @return cashAmount: a positive or negative cash amount accrued to the account\n    function _executeLiquidityTrade(\n        address account,\n        CashGroupParameters memory cashGroup,\n        MarketParameters memory market,\n        TradeActionType tradeType,\n        bytes32 trade,\n        PortfolioState memory portfolioState,\n        int256 netCash\n    ) private returns (int256) {\n        uint256 marketIndex = uint8(bytes1(trade << 8));\n        // NOTE: this loads the market in memory\n        cashGroup.loadMarket(market, marketIndex, true, block.timestamp);\n\n        int256 cashAmount;\n        int256 fCashAmount;\n        int256 tokens;\n        if (tradeType == TradeActionType.AddLiquidity) {\n            cashAmount = int256((uint256(trade) >> 152) & type(uint88).max);\n            // Setting cash amount to zero will deposit all net cash accumulated in this trade into\n            // liquidity. This feature allows accounts to borrow in one maturity to provide liquidity\n            // in another in a single transaction without dust. It also allows liquidity providers to\n            // sell off the net cash residuals and use the cash amount in the new market without dust\n            if (cashAmount == 0) cashAmount = netCash;\n\n            // Add liquidity will check cash amount is positive\n            (tokens, fCashAmount) = market.addLiquidity(cashAmount);\n            cashAmount = cashAmount.neg(); // Report a negative cash amount in the event\n        } else {\n            tokens = int256((uint256(trade) >> 152) & type(uint88).max);\n            (cashAmount, fCashAmount) = market.removeLiquidity(tokens);\n            tokens = tokens.neg(); // Report a negative amount tokens in the event\n        }\n\n        {\n            uint256 minImpliedRate = uint32(uint256(trade) >> 120);\n            uint256 maxImpliedRate = uint32(uint256(trade) >> 88);\n            // If minImpliedRate is not set then it will be zero\n            require(market.lastImpliedRate >= minImpliedRate, \"Trade failed, slippage\");\n            if (maxImpliedRate != 0)\n                require(market.lastImpliedRate <= maxImpliedRate, \"Trade failed, slippage\");\n        }\n\n        // Add the assets in this order so they are sorted\n        portfolioState.addAsset(\n            cashGroup.currencyId,\n            market.maturity,\n            Constants.FCASH_ASSET_TYPE,\n            fCashAmount\n        );\n        // Adds the liquidity token asset\n        portfolioState.addAsset(\n            cashGroup.currencyId,\n            market.maturity,\n            marketIndex + 1,\n            tokens\n        );\n\n        emit AddRemoveLiquidity(\n            account,\n            cashGroup.currencyId,\n            // This will not overflow for a long time\n            uint40(market.maturity),\n            cashAmount,\n            fCashAmount,\n            tokens\n        );\n\n        return cashAmount;\n    }\n\n    /// @notice Executes a lend or borrow trade\n    /// @param cashGroup parameters for the trade\n    /// @param market market memory location to use\n    /// @param tradeType whether this is add or remove liquidity\n    /// @param blockTime the current block time\n    /// @param trade bytes32 encoding of the particular trade\n    /// @return cashAmount - a positive or negative cash amount accrued to the account\n    /// @return fCashAmount -  a positive or negative fCash amount accrued to the account\n    function _executeLendBorrowTrade(\n        CashGroupParameters memory cashGroup,\n        MarketParameters memory market,\n        TradeActionType tradeType,\n        uint256 blockTime,\n        bytes32 trade\n    )\n        private\n        returns (\n            int256 cashAmount,\n            int256 fCashAmount\n        )\n    {\n        uint256 marketIndex = uint256(uint8(bytes1(trade << 8)));\n        // NOTE: this updates the market in memory\n        cashGroup.loadMarket(market, marketIndex, false, blockTime);\n\n        fCashAmount = int256(uint88(bytes11(trade << 16)));\n        // fCash to account will be negative here\n        if (tradeType == TradeActionType.Borrow) fCashAmount = fCashAmount.neg();\n\n        cashAmount = market.executeTrade(\n            cashGroup,\n            fCashAmount,\n            market.maturity.sub(blockTime),\n            marketIndex\n        );\n\n        uint256 rateLimit = uint256(uint32(bytes4(trade << 104)));\n        if (rateLimit != 0) {\n            if (tradeType == TradeActionType.Borrow) {\n                // Do not allow borrows over the rate limit\n                require(market.lastImpliedRate <= rateLimit, \"Trade failed, slippage\");\n            } else {\n                // Do not allow lends under the rate limit\n                require(market.lastImpliedRate >= rateLimit, \"Trade failed, slippage\");\n            }\n        }\n    }\n\n    /// @notice If an account has a negative cash balance we allow anyone to lend to to that account at a penalty\n    /// rate to the 3 month market.\n    /// @param account the account initiating the trade, used to check that self settlement is not possible\n    /// @param cashGroup parameters for the trade\n    /// @param blockTime the current block time\n    /// @param trade bytes32 encoding of the particular trade\n    /// @return maturity: the date of the three month maturity where fCash will be exchanged\n    /// @return cashAmount: a negative cash amount that the account must pay to the settled account\n    /// @return fCashAmount: a positive fCash amount that the account will receive\n    function _settleCashDebt(\n        address account,\n        CashGroupParameters memory cashGroup,\n        uint256 blockTime,\n        bytes32 trade\n    )\n        internal\n        returns (\n            uint256,\n            int256,\n            int256\n        )\n    {\n        address counterparty = address(uint256(trade) >> 88);\n        // Allowing an account to settle itself would result in strange outcomes\n        require(account != counterparty, \"Cannot settle self\");\n        int256 amountToSettleAsset = int256(uint88(uint256(trade)));\n\n        AccountContext memory counterpartyContext =\n            AccountContextHandler.getAccountContext(counterparty);\n\n        if (counterpartyContext.mustSettleAssets()) {\n            counterpartyContext = SettleAssetsExternal.settleAccount(counterparty, counterpartyContext);\n        }\n\n        // This will check if the amountToSettleAsset is valid and revert if it is not. Amount to settle is a positive\n        // number denominated in asset terms. If amountToSettleAsset is set equal to zero on the input, will return the\n        // max amount to settle. This will update the balance storage on the counterparty.\n        amountToSettleAsset = BalanceHandler.setBalanceStorageForSettleCashDebt(\n            counterparty,\n            cashGroup,\n            amountToSettleAsset,\n            counterpartyContext\n        );\n\n        // Settled account must borrow from the 3 month market at a penalty rate. This will fail if the market\n        // is not initialized.\n        uint256 threeMonthMaturity = DateTime.getReferenceTime(blockTime) + Constants.QUARTER;\n        int256 fCashAmount =\n            _getfCashSettleAmount(cashGroup, threeMonthMaturity, blockTime, amountToSettleAsset);\n        // Defensive check to ensure that we can't inadvertently cause the settler to lose fCash.\n        require(fCashAmount >= 0);\n\n        // It's possible that this action will put an account into negative free collateral. In this case they\n        // will immediately become eligible for liquidation and the account settling the debt can also liquidate\n        // them in the same transaction. Do not run a free collateral check here to allow this to happen.\n        {\n            PortfolioAsset[] memory assets = new PortfolioAsset[](1);\n            assets[0].currencyId = cashGroup.currencyId;\n            assets[0].maturity = threeMonthMaturity;\n            assets[0].notional = fCashAmount.neg(); // This is the debt the settled account will incur\n            assets[0].assetType = Constants.FCASH_ASSET_TYPE;\n            // Can transfer assets, we have settled above\n            counterpartyContext = TransferAssets.placeAssetsInAccount(\n                counterparty,\n                counterpartyContext,\n                assets\n            );\n        }\n        counterpartyContext.setAccountContext(counterparty);\n\n        emit SettledCashDebt(\n            counterparty,\n            uint16(cashGroup.currencyId),\n            account,\n            amountToSettleAsset,\n            fCashAmount.neg()\n        );\n\n        return (threeMonthMaturity, amountToSettleAsset.neg(), fCashAmount);\n    }\n\n    /// @dev Helper method to calculate the fCashAmount from the penalty settlement rate\n    function _getfCashSettleAmount(\n        CashGroupParameters memory cashGroup,\n        uint256 threeMonthMaturity,\n        uint256 blockTime,\n        int256 amountToSettleAsset\n    ) private view returns (int256) {\n        uint256 oracleRate = cashGroup.calculateOracleRate(threeMonthMaturity, blockTime);\n\n        int256 exchangeRate =\n            Market.getExchangeRateFromImpliedRate(\n                oracleRate.add(cashGroup.getSettlementPenalty()),\n                threeMonthMaturity.sub(blockTime)\n            );\n\n        // Amount to settle is positive, this returns the fCashAmount that the settler will\n        // receive as a positive number\n        return\n            cashGroup.assetRate\n                .convertToUnderlying(amountToSettleAsset)\n                // Exchange rate converts from cash to fCash when multiplying\n                .mulInRatePrecision(exchangeRate);\n    }\n\n    /// @notice Allows an account to purchase ntoken residuals\n    /// @param purchaser account that is purchasing the residuals\n    /// @param cashGroup parameters for the trade\n    /// @param blockTime the current block time\n    /// @param trade bytes32 encoding of the particular trade\n    /// @return maturity: the date of the idiosyncratic maturity where fCash will be exchanged\n    /// @return cashAmount: a positive or negative cash amount that the account will receive or pay\n    /// @return fCashAmount: a positive or negative fCash amount that the account will receive\n    function _purchaseNTokenResidual(\n        address purchaser,\n        CashGroupParameters memory cashGroup,\n        uint256 blockTime,\n        bytes32 trade\n    )\n        internal\n        returns (\n            uint256,\n            int256,\n            int256\n        )\n    {\n        uint256 maturity = uint256(uint32(uint256(trade) >> 216));\n        int256 fCashAmountToPurchase = int88(uint88(uint256(trade) >> 128));\n        require(maturity > blockTime, \"Invalid maturity\");\n        // Require that the residual to purchase does not fall on an existing maturity (i.e.\n        // it is an idiosyncratic maturity)\n        require(\n            !DateTime.isValidMarketMaturity(cashGroup.maxMarketIndex, maturity, blockTime),\n            \"Non idiosyncratic maturity\"\n        );\n\n        address nTokenAddress = nTokenHandler.nTokenAddress(cashGroup.currencyId);\n        // prettier-ignore\n        (\n            /* currencyId */,\n            /* incentiveRate */,\n            uint256 lastInitializedTime,\n            /* assetArrayLength */,\n            bytes6 parameters\n        ) = nTokenHandler.getNTokenContext(nTokenAddress);\n\n        // Restrict purchasing until some amount of time after the last initialized time to ensure that arbitrage\n        // opportunities are not available (by generating residuals and then immediately purchasing them at a discount)\n        // This is always relative to the last initialized time which is set at utc0 when initialized, not the\n        // reference time. Therefore we will always restrict residual purchase relative to initialization, not reference.\n        // This is safer, prevents an attack if someone forces residuals and then somehow prevents market initialization\n        // until the residual time buffer passes.\n        require(\n            blockTime >\n                lastInitializedTime.add(\n                    uint256(uint8(parameters[Constants.RESIDUAL_PURCHASE_TIME_BUFFER])) * 1 hours\n                ),\n            \"Insufficient block time\"\n        );\n\n        int256 notional =\n            BitmapAssetsHandler.getifCashNotional(nTokenAddress, cashGroup.currencyId, maturity);\n        // Check if amounts are valid and set them to the max available if necessary\n        if (notional < 0 && fCashAmountToPurchase < 0) {\n            // Does not allow purchasing more negative notional than available\n            if (fCashAmountToPurchase < notional) fCashAmountToPurchase = notional;\n        } else if (notional > 0 && fCashAmountToPurchase > 0) {\n            // Does not allow purchasing more positive notional than available\n            if (fCashAmountToPurchase > notional) fCashAmountToPurchase = notional;\n        } else {\n            // Does not allow moving notional in the opposite direction\n            revert(\"Invalid amount\");\n        }\n\n        // If fCashAmount > 0 then this will return netAssetCash > 0, if fCashAmount < 0 this will return\n        // netAssetCash < 0. fCashAmount will go to the purchaser and netAssetCash will go to the nToken.\n        int256 netAssetCashNToken =\n            _getResidualPriceAssetCash(\n                cashGroup,\n                maturity,\n                blockTime,\n                fCashAmountToPurchase,\n                parameters\n            );\n\n        _updateNTokenPortfolio(\n            nTokenAddress,\n            cashGroup.currencyId,\n            maturity,\n            lastInitializedTime,\n            fCashAmountToPurchase,\n            netAssetCashNToken\n        );\n\n        emit nTokenResidualPurchase(\n            uint16(cashGroup.currencyId),\n            uint40(maturity),\n            purchaser,\n            fCashAmountToPurchase,\n            netAssetCashNToken\n        );\n\n        return (maturity, netAssetCashNToken.neg(), fCashAmountToPurchase);\n    }\n\n    /// @notice Returns the amount of asset cash required to purchase the nToken residual\n    function _getResidualPriceAssetCash(\n        CashGroupParameters memory cashGroup,\n        uint256 maturity,\n        uint256 blockTime,\n        int256 fCashAmount,\n        bytes6 parameters\n    ) internal view returns (int256) {\n        uint256 oracleRate = cashGroup.calculateOracleRate(maturity, blockTime);\n        // Residual purchase incentive is specified in ten basis point increments\n        uint256 purchaseIncentive =\n            uint256(uint8(parameters[Constants.RESIDUAL_PURCHASE_INCENTIVE])) *\n                Constants.TEN_BASIS_POINTS;\n\n        if (fCashAmount > 0) {\n            // When fCash is positive then we add the purchase incentive, the purchaser\n            // can pay less cash for the fCash relative to the oracle rate\n            oracleRate = oracleRate.add(purchaseIncentive);\n        } else if (oracleRate > purchaseIncentive) {\n            // When fCash is negative, we reduce the interest rate that the purchaser will\n            // borrow at, we do this check to ensure that we floor the oracle rate at zero.\n            oracleRate = oracleRate.sub(purchaseIncentive);\n        } else {\n            // If the oracle rate is less than the purchase incentive floor the interest rate at zero\n            oracleRate = 0;\n        }\n\n        int256 exchangeRate =\n            Market.getExchangeRateFromImpliedRate(oracleRate, maturity.sub(blockTime));\n\n        // Returns the net asset cash from the nToken perspective, which is the same sign as the fCash amount\n        return\n            cashGroup.assetRate.convertFromUnderlying(fCashAmount.divInRatePrecision(exchangeRate));\n    }\n\n    function _updateNTokenPortfolio(\n        address nTokenAddress,\n        uint256 currencyId,\n        uint256 maturity,\n        uint256 lastInitializedTime,\n        int256 fCashAmountToPurchase,\n        int256 netAssetCashNToken\n    ) private {\n        int256 finalNotional = BitmapAssetsHandler.addifCashAsset(\n            nTokenAddress,\n            currencyId,\n            maturity,\n            lastInitializedTime,\n            fCashAmountToPurchase.neg() // the nToken takes on the negative position\n        );\n\n        // Defensive check to ensure that fCash amounts do not flip signs\n        require(\n            (fCashAmountToPurchase > 0 && finalNotional >= 0) ||\n            (fCashAmountToPurchase < 0 && finalNotional <= 0)\n        );\n\n        // prettier-ignore\n        (\n            int256 nTokenCashBalance,\n            /* storedNTokenBalance */,\n            /* lastClaimTime */,\n            /* accountIncentiveDebt */\n        ) = BalanceHandler.getBalanceStorage(nTokenAddress, currencyId);\n        nTokenCashBalance = nTokenCashBalance.add(netAssetCashNToken);\n\n        // This will ensure that the cash balance is not negative\n        BalanceHandler.setBalanceStorageForNToken(nTokenAddress, currencyId, nTokenCashBalance);\n    }\n}\n", "sourceMap": "554:25776:35:-:0;;;;;;;;;;;;;;;;;;;;;;;;;", "sourcePath": "contracts/external/actions/TradingAction.sol", "type": "library", "deployment": {"address": "0x9f2ef160Cf02a02E60E4b17183343292B28D3466", "chainid": "1", "blockHeight": 18956152}}