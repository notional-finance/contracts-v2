{"abi": [{"anonymous": false, "inputs": [{"indexed": false, "internalType": "uint16", "name": "currencyId", "type": "uint16"}], "name": "MarketsInitialized", "type": "event"}, {"inputs": [], "name": "getLibInfo", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "pure", "type": "function"}], "allSourcePaths": {"106": "contracts/math/ABDKMath64x64.sol", "107": "contracts/math/Bitmap.sol", "108": "contracts/math/FloatingPoint.sol", "109": "contracts/math/SafeInt256.sol", "110": "contracts/math/SafeUint256.sol", "156": "contracts/proxy/beacon/IBeacon.sol", "163": "interfaces/IEIP20NonStandard.sol", "165": "interfaces/IERC20.sol", "167": "interfaces/WETH9.sol", "171": "interfaces/aave/ILendingPool.sol", "172": "interfaces/chainlink/AggregatorInterface.sol", "173": "interfaces/chainlink/AggregatorV2V3Interface.sol", "174": "interfaces/chainlink/AggregatorV3Interface.sol", "175": "interfaces/compound/CErc20Interface.sol", "177": "interfaces/compound/CTokenInterface.sol", "183": "interfaces/notional/IPrimeCashHoldingsOracle.sol", "185": "interfaces/notional/IRewarder.sol", "22": "contracts/external/MigrateIncentives.sol", "32": "contracts/external/actions/InitializeMarketsAction.sol", "42": "contracts/external/actions/nTokenMintAction.sol", "6": "/Users/jwu/.brownie/packages/OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/contracts/math/SafeMath.sol", "63": "contracts/external/proxies/BaseERC4626Proxy.sol", "67": "contracts/global/Constants.sol", "68": "contracts/global/Deployments.sol", "69": "contracts/global/LibStorage.sol", "72": "contracts/global/Types.sol", "73": "contracts/internal/AccountContextHandler.sol", "74": "contracts/internal/Emitter.sol", "75": "contracts/internal/balances/BalanceHandler.sol", "76": "contracts/internal/balances/Incentives.sol", "77": "contracts/internal/balances/TokenHandler.sol", "78": "contracts/internal/balances/protocols/CompoundHandler.sol", "79": "contracts/internal/balances/protocols/GenericToken.sol", "83": "contracts/internal/markets/CashGroup.sol", "84": "contracts/internal/markets/DateTime.sol", "86": "contracts/internal/markets/InterestRateCurve.sol", "87": "contracts/internal/markets/Market.sol", "88": "contracts/internal/nToken/nTokenCalculations.sol", "89": "contracts/internal/nToken/nTokenHandler.sol", "90": "contracts/internal/nToken/nTokenSupply.sol", "91": "contracts/internal/pCash/PrimeCashExchangeRate.sol", "92": "contracts/internal/pCash/PrimeRateLib.sol", "93": "contracts/internal/portfolio/BitmapAssetsHandler.sol", "94": "contracts/internal/portfolio/PortfolioHandler.sol", "96": "contracts/internal/settlement/SettleBitmapAssets.sol", "98": "contracts/internal/valuation/AssetHandler.sol"}, "ast": {"absolutePath": "contracts/external/actions/InitializeMarketsAction.sol", "exportedSymbols": {"AssetHandler": [54304], "BalanceHandler": [37474], "BalanceState": [81248], "Bitmap": [65746], "BitmapAssetsHandler": [51750], "CashGroup": [42730], "CashGroupParameters": [81264], "Constants": [81077], "DateTime": [43368], "InitializeMarketsAction": [11392], "InterestRateCurve": [45413], "InterestRateParameters": [81418], "Market": [46257], "MarketParameters": [81294], "PortfolioAsset": [81277], "PortfolioHandler": [53120], "PortfolioState": [81216], "PrimeRate": [81698], "PrimeRateLib": [51059], "SafeInt256": [66372], "SafeUint256": [66859], "SettleBitmapAssets": [53519], "nTokenHandler": [47854], "nTokenMintAction": [20288], "nTokenPortfolio": [81182]}, "id": 11393, "license": "GPL-3.0-only", "nodeType": "SourceUnit", "nodes": [{"id": 10075, "literals": ["solidity", "=", "0.7", ".6"], "nodeType": "PragmaDirective", "src": "41:23:32"}, {"id": 10076, "literals": ["abicoder", "v2"], "nodeType": "PragmaDirective", "src": "65:19:32"}, {"absolutePath": "contracts/global/Types.sol", "file": "../../global/Types.sol", "id": 10085, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 81725, "src": "86:209:32", "symbolAliases": [{"foreign": {"id": 10077, "name": "PrimeRate", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "99:9:32", "typeDescriptions": {}}}, {"foreign": {"id": 10078, "name": "PortfolioState", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "114:14:32", "typeDescriptions": {}}}, {"foreign": {"id": 10079, "name": "MarketParameters", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "134:16:32", "typeDescriptions": {}}}, {"foreign": {"id": 10080, "name": "BalanceState", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "156:12:32", "typeDescriptions": {}}}, {"foreign": {"id": 10081, "name": "CashGroupParameters", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "174:19:32", "typeDescriptions": {}}}, {"foreign": {"id": 10082, "name": "nTokenPortfolio", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "199:15:32", "typeDescriptions": {}}}, {"foreign": {"id": 10083, "name": "InterestRateParameters", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "220:22:32", "typeDescriptions": {}}}, {"foreign": {"id": 10084, "name": "PortfolioAsset", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "248:14:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/global/Constants.sol", "file": "../../global/Constants.sol", "id": 10087, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 81078, "src": "296:53:32", "symbolAliases": [{"foreign": {"id": 10086, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "304:9:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/math/SafeInt256.sol", "file": "../../math/SafeInt256.sol", "id": 10089, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 66373, "src": "350:53:32", "symbolAliases": [{"foreign": {"id": 10088, "name": "SafeInt256", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "358:10:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/math/SafeUint256.sol", "file": "../../math/SafeUint256.sol", "id": 10091, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 66860, "src": "404:55:32", "symbolAliases": [{"foreign": {"id": 10090, "name": "SafeUint256", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "412:11:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/math/Bitmap.sol", "file": "../../math/Bitmap.sol", "id": 10093, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 65747, "src": "460:45:32", "symbolAliases": [{"foreign": {"id": 10092, "name": "Bitmap", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "468:6:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/Market.sol", "file": "../../internal/markets/Market.sol", "id": 10095, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 46258, "src": "507:57:32", "symbolAliases": [{"foreign": {"id": 10094, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "515:6:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/DateTime.sol", "file": "../../internal/markets/DateTime.sol", "id": 10097, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 43369, "src": "565:61:32", "symbolAliases": [{"foreign": {"id": 10096, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "573:8:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/CashGroup.sol", "file": "../../internal/markets/CashGroup.sol", "id": 10099, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 42731, "src": "627:63:32", "symbolAliases": [{"foreign": {"id": 10098, "name": "CashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "635:9:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/markets/InterestRateCurve.sol", "file": "../../internal/markets/InterestRateCurve.sol", "id": 10101, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 45414, "src": "691:79:32", "symbolAliases": [{"foreign": {"id": 10100, "name": "InterestRateCurve", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "699:17:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/pCash/PrimeRateLib.sol", "file": "../../internal/pCash/PrimeRateLib.sol", "id": 10103, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 51060, "src": "771:67:32", "symbolAliases": [{"foreign": {"id": 10102, "name": "PrimeRateLib", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "779:12:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/balances/BalanceHandler.sol", "file": "../../internal/balances/BalanceHandler.sol", "id": 10105, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 37475, "src": "839:74:32", "symbolAliases": [{"foreign": {"id": 10104, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "847:14:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/portfolio/PortfolioHandler.sol", "file": "../../internal/portfolio/PortfolioHandler.sol", "id": 10107, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 53121, "src": "914:79:32", "symbolAliases": [{"foreign": {"id": 10106, "name": "PortfolioHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "922:16:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/portfolio/BitmapAssetsHandler.sol", "file": "../../internal/portfolio/BitmapAssetsHandler.sol", "id": 10109, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 51751, "src": "994:85:32", "symbolAliases": [{"foreign": {"id": 10108, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "1002:19:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/settlement/SettleBitmapAssets.sol", "file": "../../internal/settlement/SettleBitmapAssets.sol", "id": 10111, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 53520, "src": "1080:84:32", "symbolAliases": [{"foreign": {"id": 10110, "name": "SettleBitmapAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "1088:18:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/nToken/nTokenHandler.sol", "file": "../../internal/nToken/nTokenHandler.sol", "id": 10113, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 47855, "src": "1165:70:32", "symbolAliases": [{"foreign": {"id": 10112, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "1173:13:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/internal/valuation/AssetHandler.sol", "file": "../../internal/valuation/AssetHandler.sol", "id": 10115, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 54305, "src": "1236:71:32", "symbolAliases": [{"foreign": {"id": 10114, "name": "AssetHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "1244:12:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "contracts/external/actions/nTokenMintAction.sol", "file": "./nTokenMintAction.sol", "id": 10117, "nodeType": "ImportDirective", "scope": 11393, "sourceUnit": 20289, "src": "1309:56:32", "symbolAliases": [{"foreign": {"id": 10116, "name": "nTokenMintAction", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "1317:16:32", "typeDescriptions": {}}}], "unitAlias": ""}, {"abstract": false, "baseContracts": [], "contractDependencies": [], "contractKind": "library", "documentation": {"id": 10118, "nodeType": "StructuredDocumentation", "src": "1367:803:32", "text": "@notice Initialize markets is called once every quarter to setup the new markets. Only the nToken account\n can initialize markets, and this method will be called on behalf of that account. In this action\n the following will occur:\n  - nToken Liquidity Tokens will be settled\n  - Any ifCash assets will be settled\n  - If nToken liquidity tokens are settled with negative net ifCash, enough cash will be withheld at the PV\n    to purchase offsetting positions\n  - fCash positions are written to storage\n  - For each market, calculate the proportion of fCash to cash given:\n     - previous oracle rates\n     - rate anchor set by governance\n     - percent of cash to deposit into the market set by governance\n  - Set new markets and add liquidity tokens to portfolio"}, "fullyImplemented": true, "id": 11392, "linearizedBaseContracts": [11392], "name": "InitializeMarketsAction", "nodeType": "ContractDefinition", "nodes": [{"id": 10121, "libraryName": {"id": 10119, "name": "Bitmap", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 65746, "src": "2214:6:32", "typeDescriptions": {"typeIdentifier": "t_contract$_Bitmap_$65746", "typeString": "library Bitmap"}}, "nodeType": "UsingForDirective", "src": "2208:25:32", "typeName": {"id": 10120, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "2225:7:32", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}}, {"id": 10124, "libraryName": {"id": 10122, "name": "SafeUint256", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 66859, "src": "2244:11:32", "typeDescriptions": {"typeIdentifier": "t_contract$_SafeUint256_$66859", "typeString": "library SafeUint256"}}, "nodeType": "UsingForDirective", "src": "2238:30:32", "typeName": {"id": 10123, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2260:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}}, {"id": 10127, "libraryName": {"id": 10125, "name": "SafeInt256", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 66372, "src": "2279:10:32", "typeDescriptions": {"typeIdentifier": "t_contract$_SafeInt256_$66372", "typeString": "library SafeInt256"}}, "nodeType": "UsingForDirective", "src": "2273:28:32", "typeName": {"id": 10126, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2294:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}}, {"id": 10130, "libraryName": {"id": 10128, "name": "PortfolioHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 53120, "src": "2312:16:32", "typeDescriptions": {"typeIdentifier": "t_contract$_PortfolioHandler_$53120", "typeString": "library PortfolioHandler"}}, "nodeType": "UsingForDirective", "src": "2306:42:32", "typeName": {"id": 10129, "name": "PortfolioState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81216, "src": "2333:14:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$81216_storage_ptr", "typeString": "struct PortfolioState"}}}, {"id": 10133, "libraryName": {"id": 10131, "name": "Market", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 46257, "src": "2359:6:32", "typeDescriptions": {"typeIdentifier": "t_contract$_Market_$46257", "typeString": "library Market"}}, "nodeType": "UsingForDirective", "src": "2353:34:32", "typeName": {"id": 10132, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81294, "src": "2370:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_storage_ptr", "typeString": "struct MarketParameters"}}}, {"id": 10136, "libraryName": {"id": 10134, "name": "BalanceHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 37474, "src": "2398:14:32", "typeDescriptions": {"typeIdentifier": "t_contract$_BalanceHandler_$37474", "typeString": "library BalanceHandler"}}, "nodeType": "UsingForDirective", "src": "2392:38:32", "typeName": {"id": 10135, "name": "BalanceState", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81248, "src": "2417:12:32", "typeDescriptions": {"typeIdentifier": "t_struct$_BalanceState_$81248_storage_ptr", "typeString": "struct BalanceState"}}}, {"id": 10139, "libraryName": {"id": 10137, "name": "CashGroup", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 42730, "src": "2441:9:32", "typeDescriptions": {"typeIdentifier": "t_contract$_CashGroup_$42730", "typeString": "library CashGroup"}}, "nodeType": "UsingForDirective", "src": "2435:40:32", "typeName": {"id": 10138, "name": "CashGroupParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81264, "src": "2455:19:32", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$81264_storage_ptr", "typeString": "struct CashGroupParameters"}}}, {"id": 10142, "libraryName": {"id": 10140, "name": "PrimeRateLib", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 51059, "src": "2486:12:32", "typeDescriptions": {"typeIdentifier": "t_contract$_PrimeRateLib_$51059", "typeString": "library PrimeRateLib"}}, "nodeType": "UsingForDirective", "src": "2480:33:32", "typeName": {"id": 10141, "name": "PrimeRate", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81698, "src": "2503:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$81698_storage_ptr", "typeString": "struct PrimeRate"}}}, {"id": 10145, "libraryName": {"id": 10143, "name": "nTokenHandler", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 47854, "src": "2524:13:32", "typeDescriptions": {"typeIdentifier": "t_contract$_nTokenHandler_$47854", "typeString": "library nTokenHandler"}}, "nodeType": "UsingForDirective", "src": "2518:40:32", "typeName": {"id": 10144, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81182, "src": "2542:15:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_storage_ptr", "typeString": "struct nTokenPortfolio"}}}, {"id": 10148, "libraryName": {"id": 10146, "name": "InterestRateCurve", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 45413, "src": "2569:17:32", "typeDescriptions": {"typeIdentifier": "t_contract$_InterestRateCurve_$45413", "typeString": "library InterestRateCurve"}}, "nodeType": "UsingForDirective", "src": "2563:51:32", "typeName": {"id": 10147, "name": "InterestRateParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81418, "src": "2591:22:32", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$81418_storage_ptr", "typeString": "struct InterestRateParameters"}}}, {"constant": true, "id": 10151, "mutability": "constant", "name": "MIN_CASH_REQUIRED", "nodeType": "VariableDeclaration", "scope": 11392, "src": "2759:49:32", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10149, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2759:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "value": {"hexValue": "315f303030", "id": 10150, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2803:5:32", "typeDescriptions": {"typeIdentifier": "t_rational_1000_by_1", "typeString": "int_const 1000"}, "value": "1_000"}, "visibility": "private"}, {"anonymous": false, "id": 10155, "name": "MarketsInitialized", "nodeType": "EventDefinition", "parameters": {"id": 10154, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10153, "indexed": false, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10155, "src": "2840:17:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10152, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "2840:6:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}], "src": "2839:19:32"}, "src": "2815:44:32"}, {"canonicalName": "InitializeMarketsAction.GovernanceParameters", "id": 10168, "members": [{"constant": false, "id": 10158, "mutability": "mutable", "name": "depositShares", "nodeType": "VariableDeclaration", "scope": 10168, "src": "2903:22:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 10156, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2903:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10157, "nodeType": "ArrayTypeName", "src": "2903:8:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}, {"constant": false, "id": 10161, "mutability": "mutable", "name": "leverageThresholds", "nodeType": "VariableDeclaration", "scope": 10168, "src": "2935:27:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 10159, "name": "int256", "nodeType": "ElementaryTypeName", "src": "2935:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10160, "nodeType": "ArrayTypeName", "src": "2935:8:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}, {"constant": false, "id": 10164, "mutability": "mutable", "name": "proportions", "nodeType": "VariableDeclaration", "scope": 10168, "src": "2972:21:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}, "typeName": {"baseType": {"id": 10162, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2972:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10163, "nodeType": "ArrayTypeName", "src": "2972:9:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}, "visibility": "internal"}, {"constant": false, "id": 10167, "mutability": "mutable", "name": "interestRateParams", "nodeType": "VariableDeclaration", "scope": 10168, "src": "3003:43:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$81418_storage_$dyn_storage_ptr", "typeString": "struct InterestRateParameters[]"}, "typeName": {"baseType": {"id": 10165, "name": "InterestRateParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81418, "src": "3003:22:32", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$81418_storage_ptr", "typeString": "struct InterestRateParameters"}}, "id": 10166, "nodeType": "ArrayTypeName", "src": "3003:24:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$81418_storage_$dyn_storage_ptr", "typeString": "struct InterestRateParameters[]"}}, "visibility": "internal"}], "name": "GovernanceParameters", "nodeType": "StructDefinition", "scope": 11392, "src": "2865:188:32", "visibility": "public"}, {"body": {"id": 10284, "nodeType": "Block", "src": "3202:1191:32", "statements": [{"assignments": [10178], "declarations": [{"constant": false, "id": 10178, "mutability": "mutable", "name": "params", "nodeType": "VariableDeclaration", "scope": 10284, "src": "3212:34:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}, "typeName": {"id": 10177, "name": "GovernanceParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 10168, "src": "3212:20:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_storage_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}}, "visibility": "internal"}], "id": 10179, "nodeType": "VariableDeclarationStatement", "src": "3212:34:32"}, {"expression": {"id": 10191, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"expression": {"id": 10180, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10178, "src": "3257:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 10182, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "depositShares", "nodeType": "MemberAccess", "referencedDeclaration": 10158, "src": "3257:20:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, {"expression": {"id": 10183, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10178, "src": "3279:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 10184, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "leverageThresholds", "nodeType": "MemberAccess", "referencedDeclaration": 10161, "src": "3279:25:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}], "id": 10185, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "3256:49:32", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "tuple(int256[] memory,int256[] memory)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10188, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10170, "src": "3356:10:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 10189, "name": "maxMarketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10172, "src": "3380:14:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10186, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 47854, "src": "3308:13:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$47854_$", "typeString": "type(library nTokenHandler)"}}, "id": 10187, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getDepositParameters", "nodeType": "MemberAccess", "referencedDeclaration": 47331, "src": "3308:34:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "function (uint256,uint256) view returns (int256[] memory,int256[] memory)"}}, "id": 10190, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3308:96:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "tuple(int256[] memory,int256[] memory)"}}, "src": "3256:148:32", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10192, "nodeType": "ExpressionStatement", "src": "3256:148:32"}, {"assignments": [10197], "declarations": [{"constant": false, "id": 10197, "mutability": "mutable", "name": "_proportions", "nodeType": "VariableDeclaration", "scope": 10284, "src": "3415:28:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 10195, "name": "int256", "nodeType": "ElementaryTypeName", "src": "3415:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10196, "nodeType": "ArrayTypeName", "src": "3415:8:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}], "id": 10203, "initialValue": {"arguments": [{"id": 10200, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10170, "src": "3488:10:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 10201, "name": "maxMarketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10172, "src": "3500:14:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10198, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 47854, "src": "3446:13:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$47854_$", "typeString": "type(library nTokenHandler)"}}, "id": 10199, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getInitializationParameters", "nodeType": "MemberAccess", "referencedDeclaration": 47571, "src": "3446:41:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "function (uint256,uint256) view returns (int256[] memory)"}}, "id": 10202, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3446:69:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "3415:100:32"}, {"expression": {"id": 10213, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10204, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10178, "src": "3608:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 10206, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "proportions", "nodeType": "MemberAccess", "referencedDeclaration": 10164, "src": "3608:18:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"id": 10210, "name": "_proportions", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10197, "src": "3643:12:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 10211, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "3643:19:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10209, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "3629:13:32", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (uint256[] memory)"}, "typeName": {"baseType": {"id": 10207, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3633:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10208, "nodeType": "ArrayTypeName", "src": "3633:9:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}}, "id": 10212, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3629:34:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "src": "3608:55:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 10214, "nodeType": "ExpressionStatement", "src": "3608:55:32"}, {"body": {"id": 10238, "nodeType": "Block", "src": "3723:73:32", "statements": [{"expression": {"id": 10236, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"expression": {"id": 10226, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10178, "src": "3737:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 10229, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "proportions", "nodeType": "MemberAccess", "referencedDeclaration": 10164, "src": "3737:18:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 10230, "indexExpression": {"id": 10228, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10216, "src": "3756:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "3737:21:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"baseExpression": {"id": 10231, "name": "_proportions", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10197, "src": "3761:12:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 10233, "indexExpression": {"id": 10232, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10216, "src": "3774:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3761:15:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10234, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "toUint", "nodeType": "MemberAccess", "referencedDeclaration": 66133, "src": "3761:22:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (uint256)"}}, "id": 10235, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3761:24:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3737:48:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10237, "nodeType": "ExpressionStatement", "src": "3737:48:32"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10222, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10219, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10216, "src": "3693:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 10220, "name": "_proportions", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10197, "src": "3697:12:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 10221, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "3697:19:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3693:23:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 10239, "initializationExpression": {"assignments": [10216], "declarations": [{"constant": false, "id": 10216, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 10239, "src": "3678:9:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10215, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3678:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10218, "initialValue": {"hexValue": "30", "id": 10217, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3690:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "3678:13:32"}, "loopExpression": {"expression": {"id": 10224, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "3718:3:32", "subExpression": {"id": 10223, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10216, "src": "3718:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10225, "nodeType": "ExpressionStatement", "src": "3718:3:32"}, "nodeType": "ForStatement", "src": "3673:123:32"}, {"expression": {"arguments": [{"id": 10243, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10170, "src": "4005:10:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 10240, "name": "InterestRateCurve", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 45413, "src": "3955:17:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_InterestRateCurve_$45413_$", "typeString": "type(library InterestRateCurve)"}}, "id": 10242, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setActiveInterestRateParameters", "nodeType": "MemberAccess", "referencedDeclaration": 44350, "src": "3955:49:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$returns$__$", "typeString": "function (uint16)"}}, "id": 10244, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3955:61:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10245, "nodeType": "ExpressionStatement", "src": "3955:61:32"}, {"expression": {"id": 10254, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10246, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10178, "src": "4026:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 10248, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10167, "src": "4026:25:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$81418_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10252, "name": "maxMarketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10172, "src": "4083:14:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10251, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "4054:28:32", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_InterestRateParameters_$81418_memory_ptr_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (struct InterestRateParameters memory[] memory)"}, "typeName": {"baseType": {"id": 10249, "name": "InterestRateParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81418, "src": "4058:22:32", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$81418_storage_ptr", "typeString": "struct InterestRateParameters"}}, "id": 10250, "nodeType": "ArrayTypeName", "src": "4058:24:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$81418_storage_$dyn_storage_ptr", "typeString": "struct InterestRateParameters[]"}}}, "id": 10253, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4054:44:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$81418_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "src": "4026:72:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$81418_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 10255, "nodeType": "ExpressionStatement", "src": "4026:72:32"}, {"body": {"id": 10280, "nodeType": "Block", "src": "4193:170:32", "statements": [{"expression": {"id": 10278, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"expression": {"id": 10266, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10178, "src": "4207:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 10271, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10167, "src": "4207:25:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$81418_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 10272, "indexExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10270, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10268, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10257, "src": "4233:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"hexValue": "31", "id": 10269, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4237:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "4233:5:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "4207:32:32", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$81418_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10275, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10170, "src": "4309:10:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 10276, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10257, "src": "4337:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10273, "name": "InterestRateCurve", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 45413, "src": "4242:17:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_InterestRateCurve_$45413_$", "typeString": "type(library InterestRateCurve)"}}, "id": 10274, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getActiveInterestRateParameters", "nodeType": "MemberAccess", "referencedDeclaration": 44206, "src": "4242:49:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint16_$_t_uint256_$returns$_t_struct$_InterestRateParameters_$81418_memory_ptr_$", "typeString": "function (uint16,uint256) view returns (struct InterestRateParameters memory)"}}, "id": 10277, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4242:110:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$81418_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "src": "4207:145:32", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$81418_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 10279, "nodeType": "ExpressionStatement", "src": "4207:145:32"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10262, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10260, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10257, "src": "4167:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"id": 10261, "name": "maxMarketIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10172, "src": "4172:14:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "4167:19:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 10281, "initializationExpression": {"assignments": [10257], "declarations": [{"constant": false, "id": 10257, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 10281, "src": "4152:9:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10256, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4152:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10259, "initialValue": {"hexValue": "31", "id": 10258, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4164:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "nodeType": "VariableDeclarationStatement", "src": "4152:13:32"}, "loopExpression": {"expression": {"id": 10264, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "4188:3:32", "subExpression": {"id": 10263, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10257, "src": "4188:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10265, "nodeType": "ExpressionStatement", "src": "4188:3:32"}, "nodeType": "ForStatement", "src": "4147:216:32"}, {"expression": {"id": 10282, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10178, "src": "4380:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "functionReturnParameters": 10176, "id": 10283, "nodeType": "Return", "src": "4373:13:32"}]}, "id": 10285, "implemented": true, "kind": "function", "modifiers": [], "name": "_getGovernanceParameters", "nodeType": "FunctionDefinition", "parameters": {"id": 10173, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10170, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10285, "src": "3093:17:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10169, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "3093:6:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 10172, "mutability": "mutable", "name": "maxMarketIndex", "nodeType": "VariableDeclaration", "scope": 10285, "src": "3112:22:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10171, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3112:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "3092:43:32"}, "returnParameters": {"id": 10176, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10175, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 10285, "src": "3169:27:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}, "typeName": {"id": 10174, "name": "GovernanceParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 10168, "src": "3169:20:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_storage_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}}, "visibility": "internal"}], "src": "3168:29:32"}, "scope": 11392, "src": "3059:1334:32", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 10434, "nodeType": "Block", "src": "4578:2041:32", "statements": [{"assignments": [10297], "declarations": [{"constant": false, "id": 10297, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 10434, "src": "4588:30:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 10296, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81294, "src": "4588:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "id": 10298, "nodeType": "VariableDeclarationStatement", "src": "4588:30:32"}, {"assignments": [10302], "declarations": [{"constant": false, "id": 10302, "mutability": "mutable", "name": "storedAssets", "nodeType": "VariableDeclaration", "scope": 10434, "src": "4628:36:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$81277_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset[]"}, "typeName": {"baseType": {"id": 10300, "name": "PortfolioAsset", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81277, "src": "4628:14:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_storage_ptr", "typeString": "struct PortfolioAsset"}}, "id": 10301, "nodeType": "ArrayTypeName", "src": "4628:16:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$81277_storage_$dyn_storage_ptr", "typeString": "struct PortfolioAsset[]"}}, "visibility": "internal"}], "id": 10306, "initialValue": {"expression": {"expression": {"id": 10303, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10287, "src": "4667:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10304, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 81171, "src": "4667:21:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$81216_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 10305, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 81208, "src": "4667:34:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$81277_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "4628:73:32"}, {"body": {"id": 10432, "nodeType": "Block", "src": "4847:1766:32", "statements": [{"assignments": [10318], "declarations": [{"constant": false, "id": 10318, "mutability": "mutable", "name": "asset", "nodeType": "VariableDeclaration", "scope": 10432, "src": "4861:27:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_memory_ptr", "typeString": "struct PortfolioAsset"}, "typeName": {"id": 10317, "name": "PortfolioAsset", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81277, "src": "4861:14:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_storage_ptr", "typeString": "struct PortfolioAsset"}}, "visibility": "internal"}], "id": 10322, "initialValue": {"baseExpression": {"id": 10319, "name": "storedAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10302, "src": "4891:12:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$81277_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 10321, "indexExpression": {"id": 10320, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10308, "src": "4904:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "4891:15:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "nodeType": "VariableDeclarationStatement", "src": "4861:45:32"}, {"expression": {"arguments": [{"arguments": [{"expression": {"id": 10326, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10318, "src": "5002:5:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10327, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "assetType", "nodeType": "MemberAccess", "referencedDeclaration": 81270, "src": "5002:15:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10324, "name": "AssetHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 54304, "src": "4972:12:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_AssetHandler_$54304_$", "typeString": "type(library AssetHandler)"}}, "id": 10325, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "isLiquidityToken", "nodeType": "MemberAccess", "referencedDeclaration": 53872, "src": "4972:29:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_bool_$", "typeString": "function (uint256) pure returns (bool)"}}, "id": 10328, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4972:46:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10323, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "4964:7:32", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10329, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4964:55:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10330, "nodeType": "ExpressionStatement", "src": "4964:55:32"}, {"id": 10355, "nodeType": "Block", "src": "5033:300:32", "statements": [{"assignments": [10332], "declarations": [{"constant": false, "id": 10332, "mutability": "mutable", "name": "settleDate", "nodeType": "VariableDeclaration", "scope": 10355, "src": "5051:18:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10331, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5051:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10337, "initialValue": {"arguments": [{"id": 10335, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10318, "src": "5103:5:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_memory_ptr", "typeString": "struct PortfolioAsset memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_PortfolioAsset_$81277_memory_ptr", "typeString": "struct PortfolioAsset memory"}], "expression": {"id": 10333, "name": "AssetHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 54304, "src": "5072:12:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_AssetHandler_$54304_$", "typeString": "type(library AssetHandler)"}}, "id": 10334, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getSettlementDate", "nodeType": "MemberAccess", "referencedDeclaration": 53923, "src": "5072:30:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioAsset_$81277_memory_ptr_$returns$_t_uint256_$", "typeString": "function (struct PortfolioAsset memory) pure returns (uint256)"}}, "id": 10336, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5072:37:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "5051:58:32"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10341, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10339, "name": "settleDate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10332, "src": "5195:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"id": 10340, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10289, "src": "5209:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5195:23:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10338, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "5187:7:32", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10342, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5187:32:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10343, "nodeType": "ExpressionStatement", "src": "5187:32:32"}, {"expression": {"arguments": [{"id": 10347, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10297, "src": "5265:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"expression": {"id": 10348, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10318, "src": "5273:5:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10349, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 81266, "src": "5273:16:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 10350, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10318, "src": "5291:5:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10351, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 81268, "src": "5291:14:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10352, "name": "settleDate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10332, "src": "5307:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10344, "name": "Market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 46257, "src": "5237:6:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Market_$46257_$", "typeString": "type(library Market)"}}, "id": 10346, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "loadSettlementMarket", "nodeType": "MemberAccess", "referencedDeclaration": 46256, "src": "5237:27:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_MarketParameters_$81294_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$", "typeString": "function (struct MarketParameters memory,uint256,uint256,uint256) view"}}, "id": 10353, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5237:81:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10354, "nodeType": "ExpressionStatement", "src": "5237:81:32"}]}, {"assignments": [10357], "declarations": [{"constant": false, "id": 10357, "mutability": "mutable", "name": "fCash", "nodeType": "VariableDeclaration", "scope": 10432, "src": "5347:12:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10356, "name": "int256", "nodeType": "ElementaryTypeName", "src": "5347:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10358, "nodeType": "VariableDeclarationStatement", "src": "5347:12:32"}, {"id": 10379, "nodeType": "Block", "src": "5373:188:32", "statements": [{"assignments": [10360], "declarations": [{"constant": false, "id": 10360, "mutability": "mutable", "name": "primeCash", "nodeType": "VariableDeclaration", "scope": 10379, "src": "5391:16:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10359, "name": "int256", "nodeType": "ElementaryTypeName", "src": "5391:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10361, "nodeType": "VariableDeclarationStatement", "src": "5391:16:32"}, {"expression": {"id": 10370, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 10362, "name": "primeCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10360, "src": "5426:9:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 10363, "name": "fCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10357, "src": "5437:5:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 10364, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "5425:18:32", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"id": 10367, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10318, "src": "5469:5:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10368, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "notional", "nodeType": "MemberAccess", "referencedDeclaration": 81272, "src": "5469:14:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10365, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10297, "src": "5446:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10366, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "removeLiquidity", "nodeType": "MemberAccess", "referencedDeclaration": 45626, "src": "5446:22:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$81294_memory_ptr_$_t_int256_$returns$_t_int256_$_t_int256_$bound_to$_t_struct$_MarketParameters_$81294_memory_ptr_$", "typeString": "function (struct MarketParameters memory,int256) returns (int256,int256)"}}, "id": 10369, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5446:38:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "src": "5425:59:32", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10371, "nodeType": "ExpressionStatement", "src": "5425:59:32"}, {"expression": {"id": 10377, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 10372, "name": "withdrawnCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10292, "src": "5502:13:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10375, "name": "primeCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10360, "src": "5536:9:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10373, "name": "withdrawnCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10292, "src": "5518:13:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10374, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 66017, "src": "5518:17:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10376, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5518:28:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "5502:44:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10378, "nodeType": "ExpressionStatement", "src": "5502:44:32"}]}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10383, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 10380, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10318, "src": "5863:5:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10381, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 81268, "src": "5863:14:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"id": 10382, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10289, "src": "5881:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5863:27:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 10422, "nodeType": "Block", "src": "6277:275:32", "statements": [{"expression": {"arguments": [{"expression": {"id": 10411, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10287, "src": "6351:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10412, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 81181, "src": "6351:19:32", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"id": 10413, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10318, "src": "6392:5:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10414, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 81266, "src": "6392:16:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 10415, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10318, "src": "6430:5:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10416, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 81268, "src": "6430:14:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 10417, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10287, "src": "6466:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10418, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 81177, "src": "6466:26:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10419, "name": "fCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10357, "src": "6514:5:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10408, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 51750, "src": "6295:19:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$51750_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 10410, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "addifCashAsset", "nodeType": "MemberAccess", "referencedDeclaration": 51448, "src": "6295:34:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint16_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint16,uint256,uint256,int256) returns (int256)"}}, "id": 10420, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6295:242:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10421, "nodeType": "ExpressionStatement", "src": "6295:242:32"}]}, "id": 10423, "nodeType": "IfStatement", "src": "5859:693:32", "trueBody": {"id": 10407, "nodeType": "Block", "src": "5892:379:32", "statements": [{"assignments": [10385], "declarations": [{"constant": false, "id": 10385, "mutability": "mutable", "name": "settledPrimeCash", "nodeType": "VariableDeclaration", "scope": 10407, "src": "5990:23:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10384, "name": "int256", "nodeType": "ElementaryTypeName", "src": "5990:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10399, "initialValue": {"arguments": [{"expression": {"id": 10390, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10287, "src": "6084:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10391, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 81181, "src": "6084:19:32", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"id": 10392, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10318, "src": "6105:5:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10393, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 81266, "src": "6105:16:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 10394, "name": "asset", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10318, "src": "6123:5:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10395, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 81268, "src": "6123:14:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10396, "name": "fCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10357, "src": "6139:5:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 10397, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10289, "src": "6146:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"expression": {"id": 10386, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10287, "src": "6016:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10387, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 81169, "src": "6016:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$81264_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10388, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "primeRate", "nodeType": "MemberAccess", "referencedDeclaration": 81261, "src": "6016:26:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$81698_memory_ptr", "typeString": "struct PrimeRate memory"}}, "id": 10389, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertSettledfCash", "nodeType": "MemberAccess", "referencedDeclaration": 50136, "src": "6016:46:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PrimeRate_$81698_memory_ptr_$_t_address_$_t_uint16_$_t_uint256_$_t_int256_$_t_uint256_$returns$_t_int256_$bound_to$_t_struct$_PrimeRate_$81698_memory_ptr_$", "typeString": "function (struct PrimeRate memory,address,uint16,uint256,int256,uint256) returns (int256)"}}, "id": 10398, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6016:157:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "5990:183:32"}, {"expression": {"id": 10405, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 10400, "name": "settledCashFromfCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10294, "src": "6191:20:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10403, "name": "settledPrimeCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10385, "src": "6239:16:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10401, "name": "settledCashFromfCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10294, "src": "6214:20:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10402, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 66017, "src": "6214:24:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10404, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6214:42:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "6191:65:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10406, "nodeType": "ExpressionStatement", "src": "6191:65:32"}]}}, {"expression": {"arguments": [{"id": 10429, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10308, "src": "6600:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"expression": {"id": 10424, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10287, "src": "6566:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10427, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 81171, "src": "6566:21:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$81216_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 10428, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "deleteAsset", "nodeType": "MemberAccess", "referencedDeclaration": 52735, "src": "6566:33:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioState_$81216_memory_ptr_$_t_uint256_$returns$__$bound_to$_t_struct$_PortfolioState_$81216_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint256) pure"}}, "id": 10430, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6566:36:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10431, "nodeType": "ExpressionStatement", "src": "6566:36:32"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10313, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10310, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10308, "src": "4817:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 10311, "name": "storedAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10302, "src": "4821:12:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$81277_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 10312, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "4821:19:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "4817:23:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 10433, "initializationExpression": {"assignments": [10308], "declarations": [{"constant": false, "id": 10308, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 10433, "src": "4806:9:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10307, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4806:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10309, "nodeType": "VariableDeclarationStatement", "src": "4806:9:32"}, "loopExpression": {"expression": {"id": 10315, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "4842:3:32", "subExpression": {"id": 10314, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10308, "src": "4842:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10316, "nodeType": "ExpressionStatement", "src": "4842:3:32"}, "nodeType": "ForStatement", "src": "4801:1812:32"}]}, "id": 10435, "implemented": true, "kind": "function", "modifiers": [], "name": "_settleNTokenLiquidityTokens", "nodeType": "FunctionDefinition", "parameters": {"id": 10290, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10287, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 10435, "src": "4446:29:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 10286, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81182, "src": "4446:15:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 10289, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 10435, "src": "4485:17:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10288, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4485:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "4436:72:32"}, "returnParameters": {"id": 10295, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10292, "mutability": "mutable", "name": "withdrawnCash", "nodeType": "VariableDeclaration", "scope": 10435, "src": "4527:20:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10291, "name": "int256", "nodeType": "ElementaryTypeName", "src": "4527:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10294, "mutability": "mutable", "name": "settledCashFromfCash", "nodeType": "VariableDeclaration", "scope": 10435, "src": "4549:27:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10293, "name": "int256", "nodeType": "ElementaryTypeName", "src": "4549:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "4526:51:32"}, "scope": 11392, "src": "4399:2220:32", "stateMutability": "nonpayable", "virtual": false, "visibility": "internal"}, {"body": {"id": 10537, "nodeType": "Block", "src": "6715:2758:32", "statements": [{"assignments": [10443], "declarations": [{"constant": false, "id": 10443, "mutability": "mutable", "name": "referenceTime", "nodeType": "VariableDeclaration", "scope": 10537, "src": "7497:21:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10442, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7497:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10448, "initialValue": {"arguments": [{"id": 10446, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10439, "src": "7547:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10444, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43368, "src": "7521:8:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$43368_$", "typeString": "type(library DateTime)"}}, "id": 10445, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 42764, "src": "7521:25:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 10447, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7521:36:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "7497:60:32"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10453, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 10450, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "7575:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10451, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 81177, "src": "7575:26:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"id": 10452, "name": "referenceTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10443, "src": "7604:13:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "7575:42:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10449, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "7567:7:32", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10454, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7567:51:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10455, "nodeType": "ExpressionStatement", "src": "7567:51:32"}, {"assignments": [10457, 10459], "declarations": [{"constant": false, "id": 10457, "mutability": "mutable", "name": "withdrawnCash", "nodeType": "VariableDeclaration", "scope": 10537, "src": "7885:20:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10456, "name": "int256", "nodeType": "ElementaryTypeName", "src": "7885:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10459, "mutability": "mutable", "name": "settledCashFromfCash", "nodeType": "VariableDeclaration", "scope": 10537, "src": "7907:27:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10458, "name": "int256", "nodeType": "ElementaryTypeName", "src": "7907:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10464, "initialValue": {"arguments": [{"id": 10461, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "7967:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 10462, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10439, "src": "7975:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10460, "name": "_settleNTokenLiquidityTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10435, "src": "7938:28:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$81182_memory_ptr_$_t_uint256_$returns$_t_int256_$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,uint256) returns (int256,int256)"}}, "id": 10463, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7938:47:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$", "typeString": "tuple(int256,int256)"}}, "nodeType": "VariableDeclarationStatement", "src": "7884:101:32"}, {"assignments": [10466, 10468, 10470], "declarations": [{"constant": false, "id": 10466, "mutability": "mutable", "name": "settledPositiveCash", "nodeType": "VariableDeclaration", "scope": 10537, "src": "8162:26:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10465, "name": "int256", "nodeType": "ElementaryTypeName", "src": "8162:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10468, "mutability": "mutable", "name": "settledNegativeCash", "nodeType": "VariableDeclaration", "scope": 10537, "src": "8190:26:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10467, "name": "int256", "nodeType": "ElementaryTypeName", "src": "8190:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10470, "mutability": "mutable", "name": "blockTimeUTC0", "nodeType": "VariableDeclaration", "scope": 10537, "src": "8218:21:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10469, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8218:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10485, "initialValue": {"arguments": [{"expression": {"id": 10473, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "8316:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10474, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 81181, "src": "8316:19:32", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 10475, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "8353:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10476, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 81169, "src": "8353:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$81264_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10477, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 81257, "src": "8353:27:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 10478, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "8398:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10479, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 81177, "src": "8398:26:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10480, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10439, "src": "8442:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"expression": {"id": 10481, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "8469:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10482, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 81169, "src": "8469:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$81264_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10483, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "primeRate", "nodeType": "MemberAccess", "referencedDeclaration": 81261, "src": "8469:26:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$81698_memory_ptr", "typeString": "struct PrimeRate memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_PrimeRate_$81698_memory_ptr", "typeString": "struct PrimeRate memory"}], "expression": {"id": 10471, "name": "SettleBitmapAssets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 53519, "src": "8255:18:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_SettleBitmapAssets_$53519_$", "typeString": "type(library SettleBitmapAssets)"}}, "id": 10472, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "settleBitmappedCashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 53458, "src": "8255:43:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint16_$_t_uint256_$_t_uint256_$_t_struct$_PrimeRate_$81698_memory_ptr_$returns$_t_int256_$_t_int256_$_t_uint256_$", "typeString": "function (address,uint16,uint256,uint256,struct PrimeRate memory) returns (int256,int256,uint256)"}}, "id": 10484, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8255:254:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$_t_uint256_$", "typeString": "tuple(int256,int256,uint256)"}}, "nodeType": "VariableDeclarationStatement", "src": "8161:348:32"}, {"expression": {"id": 10491, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 10486, "name": "settledPositiveCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10466, "src": "8583:19:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10489, "name": "settledCashFromfCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10459, "src": "8629:20:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10487, "name": "settledPositiveCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10466, "src": "8605:19:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10488, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 66017, "src": "8605:23:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10490, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8605:45:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "8583:67:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10492, "nodeType": "ExpressionStatement", "src": "8583:67:32"}, {"expression": {"id": 10501, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10493, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "8721:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10495, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 81175, "src": "8721:18:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10499, "name": "withdrawnCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10457, "src": "8765:13:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 10496, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "8742:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10497, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 81175, "src": "8742:18:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10498, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 66017, "src": "8742:22:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10500, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8742:37:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "8721:58:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10502, "nodeType": "ExpressionStatement", "src": "8721:58:32"}, {"expression": {"id": 10520, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10503, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "8922:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10505, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 81175, "src": "8922:18:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"id": 10510, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "9012:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10511, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 81181, "src": "9012:19:32", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"expression": {"id": 10512, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "9045:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10513, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 81169, "src": "9045:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$81264_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10514, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 81257, "src": "9045:27:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 10515, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "9086:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10516, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 81175, "src": "9086:18:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 10517, "name": "settledPositiveCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10466, "src": "9143:19:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 10518, "name": "settledNegativeCash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10468, "src": "9176:19:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"expression": {"id": 10506, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "8943:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10507, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 81169, "src": "8943:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$81264_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10508, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "primeRate", "nodeType": "MemberAccess", "referencedDeclaration": 81261, "src": "8943:26:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$81698_memory_ptr", "typeString": "struct PrimeRate memory"}}, "id": 10509, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertToStorageInSettlement", "nodeType": "MemberAccess", "referencedDeclaration": 50338, "src": "8943:55:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PrimeRate_$81698_memory_ptr_$_t_address_$_t_uint16_$_t_int256_$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_PrimeRate_$81698_memory_ptr_$", "typeString": "function (struct PrimeRate memory,address,uint16,int256,int256,int256) returns (int256)"}}, "id": 10519, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8943:262:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "8922:283:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10521, "nodeType": "ExpressionStatement", "src": "8922:283:32"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 10526, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 10523, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "9296:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10524, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 81175, "src": "9296:18:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 10525, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "9317:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "9296:22:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10522, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "9288:7:32", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10527, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9288:31:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10528, "nodeType": "ExpressionStatement", "src": "9288:31:32"}, {"expression": {"id": 10535, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10529, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10437, "src": "9413:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10531, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 81177, "src": "9413:26:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 10532, "name": "blockTimeUTC0", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10470, "src": "9442:13:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10533, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "toUint40", "nodeType": "MemberAccess", "referencedDeclaration": 66648, "src": "9442:22:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint40_$bound_to$_t_uint256_$", "typeString": "function (uint256) pure returns (uint40)"}}, "id": 10534, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9442:24:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "src": "9413:53:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10536, "nodeType": "ExpressionStatement", "src": "9413:53:32"}]}, "id": 10538, "implemented": true, "kind": "function", "modifiers": [], "name": "_settleNTokenPortfolio", "nodeType": "FunctionDefinition", "parameters": {"id": 10440, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10437, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 10538, "src": "6657:29:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 10436, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81182, "src": "6657:15:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 10439, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 10538, "src": "6688:17:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10438, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6688:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "6656:50:32"}, "returnParameters": {"id": 10441, "nodeType": "ParameterList", "parameters": [], "src": "6715:0:32"}, "scope": 11392, "src": "6625:2848:32", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 10597, "nodeType": "Block", "src": "9798:1333:32", "statements": [{"assignments": [10552], "declarations": [{"constant": false, "id": 10552, "mutability": "mutable", "name": "rateOracleTimeWindow", "nodeType": "VariableDeclaration", "scope": 10597, "src": "9808:28:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10551, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9808:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10557, "initialValue": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"expression": {"id": 10553, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10545, "src": "9839:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10554, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 81169, "src": "9839:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$81264_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10555, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "getRateOracleTimeWindow", "nodeType": "MemberAccess", "referencedDeclaration": 41974, "src": "9839:40:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_CashGroupParameters_$81264_memory_ptr_$returns$_t_uint256_$bound_to$_t_struct$_CashGroupParameters_$81264_memory_ptr_$", "typeString": "function (struct CashGroupParameters memory) pure returns (uint256)"}}, "id": 10556, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "9839:42:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "9808:73:32"}, {"assignments": [10559], "declarations": [{"constant": false, "id": 10559, "mutability": "mutable", "name": "settlementDate", "nodeType": "VariableDeclaration", "scope": 10597, "src": "9979:22:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10558, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9979:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10564, "initialValue": {"arguments": [{"id": 10562, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10543, "src": "10030:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10560, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43368, "src": "10004:8:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$43368_$", "typeString": "type(library DateTime)"}}, "id": 10561, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 42764, "src": "10004:25:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 10563, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10004:36:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "9979:61:32"}, {"body": {"id": 10595, "nodeType": "Block", "src": "10685:440:32", "statements": [{"expression": {"arguments": [{"id": 10582, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10541, "src": "10764:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"expression": {"expression": {"id": 10583, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10545, "src": "10869:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10584, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 81171, "src": "10869:21:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$81216_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 10585, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 81208, "src": "10869:34:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$81277_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 10587, "indexExpression": {"id": 10586, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10566, "src": "10904:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "10869:37:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioAsset_$81277_memory_ptr", "typeString": "struct PortfolioAsset memory"}}, "id": 10588, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 81268, "src": "10869:46:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10589, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10543, "src": "10933:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"hexValue": "66616c7365", "id": 10590, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "11025:5:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}, {"id": 10591, "name": "rateOracleTimeWindow", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10552, "src": "11048:20:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10592, "name": "settlementDate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10559, "src": "11086:14:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"baseExpression": {"id": 10578, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10548, "src": "10699:15:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 10580, "indexExpression": {"id": 10579, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10566, "src": "10715:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "10699:18:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10581, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadMarketWithSettlementDate", "nodeType": "MemberAccess", "referencedDeclaration": 46236, "src": "10699:47:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_MarketParameters_$81294_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$_t_uint256_$_t_uint256_$returns$__$bound_to$_t_struct$_MarketParameters_$81294_memory_ptr_$", "typeString": "function (struct MarketParameters memory,uint256,uint256,uint256,bool,uint256,uint256) view"}}, "id": 10593, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10699:415:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10594, "nodeType": "ExpressionStatement", "src": "10699:415:32"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10574, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10569, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10566, "src": "10633:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"expression": {"expression": {"id": 10570, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10545, "src": "10637:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10571, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 81171, "src": "10637:21:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$81216_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 10572, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 81208, "src": "10637:34:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$81277_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 10573, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "10637:41:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "10633:45:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 10596, "initializationExpression": {"assignments": [10566], "declarations": [{"constant": false, "id": 10566, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 10596, "src": "10618:9:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10565, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "10618:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10568, "initialValue": {"hexValue": "31", "id": 10567, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10630:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "nodeType": "VariableDeclarationStatement", "src": "10618:13:32"}, "loopExpression": {"expression": {"id": 10576, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "10680:3:32", "subExpression": {"id": 10575, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10566, "src": "10680:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10577, "nodeType": "ExpressionStatement", "src": "10680:3:32"}, "nodeType": "ForStatement", "src": "10613:512:32"}]}, "documentation": {"id": 10539, "nodeType": "StructuredDocumentation", "src": "9479:121:32", "text": "@notice Special method to get previous markets, normal usage would not reference previous markets\n in this way"}, "id": 10598, "implemented": true, "kind": "function", "modifiers": [], "name": "_getPreviousMarkets", "nodeType": "FunctionDefinition", "parameters": {"id": 10549, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10541, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10598, "src": "9643:18:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10540, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9643:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 10543, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 10598, "src": "9671:17:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10542, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9671:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 10545, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 10598, "src": "9698:29:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 10544, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81182, "src": "9698:15:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 10548, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 10598, "src": "9737:41:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 10546, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81294, "src": "9737:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 10547, "nodeType": "ArrayTypeName", "src": "9737:18:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}], "src": "9633:151:32"}, "returnParameters": {"id": 10550, "nodeType": "ParameterList", "parameters": [], "src": "9798:0:32"}, "scope": 11392, "src": "9605:1526:32", "stateMutability": "view", "virtual": false, "visibility": "private"}, {"body": {"id": 10676, "nodeType": "Block", "src": "11401:1075:32", "statements": [{"assignments": [10615], "declarations": [{"constant": false, "id": 10615, "mutability": "mutable", "name": "primeCashWithholding", "nodeType": "VariableDeclaration", "scope": 10676, "src": "11411:27:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10614, "name": "int256", "nodeType": "ElementaryTypeName", "src": "11411:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10616, "nodeType": "VariableDeclarationStatement", "src": "11411:27:32"}, {"condition": {"id": 10617, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10609, "src": "11453:11:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 10652, "nodeType": "Block", "src": "11565:359:32", "statements": [{"expression": {"arguments": [{"id": 10632, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10600, "src": "11602:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 10633, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10605, "src": "11610:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10631, "name": "_settleNTokenPortfolio", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10538, "src": "11579:22:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$81182_memory_ptr_$_t_uint256_$returns$__$", "typeString": "function (struct nTokenPortfolio memory,uint256)"}}, "id": 10634, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11579:41:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10635, "nodeType": "ExpressionStatement", "src": "11579:41:32"}, {"expression": {"arguments": [{"id": 10637, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10607, "src": "11654:10:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 10638, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10605, "src": "11666:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10639, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10600, "src": "11677:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 10640, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10603, "src": "11685:15:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}], "id": 10636, "name": "_getPreviousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10598, "src": "11634:19:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_struct$_nTokenPortfolio_$81182_memory_ptr_$_t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr_$returns$__$", "typeString": "function (uint256,uint256,struct nTokenPortfolio memory,struct MarketParameters memory[] memory) view"}}, "id": 10641, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11634:67:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10642, "nodeType": "ExpressionStatement", "src": "11634:67:32"}, {"expression": {"id": 10650, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 10643, "name": "primeCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10615, "src": "11804:20:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10646, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10600, "src": "11878:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 10647, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10603, "src": "11886:15:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"id": 10648, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10605, "src": "11903:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10644, "name": "nTokenMintAction", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20288, "src": "11827:16:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenMintAction_$20288_$", "typeString": "type(library nTokenMintAction)"}}, "id": 10645, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getNTokenNegativefCashWithholding", "nodeType": "MemberAccess", "referencedDeclaration": 20287, "src": "11827:50:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_struct$_nTokenPortfolio_$81182_memory_ptr_$_t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr_$_t_uint256_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory[] memory,uint256) view returns (int256)"}}, "id": 10649, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11827:86:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "11804:109:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10651, "nodeType": "ExpressionStatement", "src": "11804:109:32"}]}, "id": 10653, "nodeType": "IfStatement", "src": "11449:475:32", "trueBody": {"id": 10630, "nodeType": "Block", "src": "11466:93:32", "statements": [{"expression": {"id": 10628, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10618, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10600, "src": "11480:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10620, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 81177, "src": "11480:26:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"id": 10625, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10605, "src": "11537:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10623, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43368, "src": "11516:8:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$43368_$", "typeString": "type(library DateTime)"}}, "id": 10624, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getTimeUTC0", "nodeType": "MemberAccess", "referencedDeclaration": 42788, "src": "11516:20:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 10626, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11516:31:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10622, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "11509:6:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint40_$", "typeString": "type(uint40)"}, "typeName": {"id": 10621, "name": "uint40", "nodeType": "ElementaryTypeName", "src": "11509:6:32", "typeDescriptions": {}}}, "id": 10627, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "11509:39:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint40", "typeString": "uint40"}}, "src": "11480:68:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10629, "nodeType": "ExpressionStatement", "src": "11480:68:32"}]}}, {"expression": {"id": 10660, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 10654, "name": "netPrimeCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10612, "src": "12051:21:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 10658, "name": "primeCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10615, "src": "12103:20:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 10655, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10600, "src": "12075:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10656, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 81175, "src": "12075:18:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10657, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "subNoNeg", "nodeType": "MemberAccess", "referencedDeclaration": 66074, "src": "12075:27:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10659, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12075:49:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "12051:73:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10661, "nodeType": "ExpressionStatement", "src": "12051:73:32"}, {"expression": {"id": 10666, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10662, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10600, "src": "12179:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10664, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 81175, "src": "12179:18:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 10665, "name": "primeCashWithholding", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10615, "src": "12200:20:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "12179:41:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10667, "nodeType": "ExpressionStatement", "src": "12179:41:32"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 10671, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10669, "name": "netPrimeCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10612, "src": "12362:21:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 10670, "name": "MIN_CASH_REQUIRED", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10151, "src": "12386:17:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "12362:41:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10668, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "12354:7:32", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10672, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12354:50:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10673, "nodeType": "ExpressionStatement", "src": "12354:50:32"}, {"expression": {"id": 10674, "name": "netPrimeCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10612, "src": "12448:21:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 10613, "id": 10675, "nodeType": "Return", "src": "12441:28:32"}]}, "id": 10677, "implemented": true, "kind": "function", "modifiers": [], "name": "_calculateNetPrimeCashAvailable", "nodeType": "FunctionDefinition", "parameters": {"id": 10610, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10600, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 10677, "src": "11187:29:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 10599, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81182, "src": "11187:15:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}, {"constant": false, "id": 10603, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 10677, "src": "11226:41:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 10601, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81294, "src": "11226:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 10602, "nodeType": "ArrayTypeName", "src": "11226:18:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}, {"constant": false, "id": 10605, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 10677, "src": "11277:17:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10604, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "11277:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 10607, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10677, "src": "11304:17:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10606, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "11304:6:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 10609, "mutability": "mutable", "name": "isFirstInit", "nodeType": "VariableDeclaration", "scope": 10677, "src": "11331:16:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 10608, "name": "bool", "nodeType": "ElementaryTypeName", "src": "11331:4:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "11177:176:32"}, "returnParameters": {"id": 10613, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10612, "mutability": "mutable", "name": "netPrimeCashAvailable", "nodeType": "VariableDeclaration", "scope": 10677, "src": "11371:28:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10611, "name": "int256", "nodeType": "ElementaryTypeName", "src": "11371:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "11370:30:32"}, "scope": 11392, "src": "11137:1339:32", "stateMutability": "nonpayable", "virtual": false, "visibility": "private"}, {"body": {"id": 10721, "nodeType": "Block", "src": "12902:501:32", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10692, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 10689, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10681, "src": "12989:15:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 10690, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "12989:22:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"hexValue": "33", "id": 10691, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13015:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_3_by_1", "typeString": "int_const 3"}, "value": "3"}, "src": "12989:27:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10688, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "12981:7:32", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10693, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12981:36:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10694, "nodeType": "ExpressionStatement", "src": "12981:36:32"}, {"expression": {"arguments": [{"expression": {"baseExpression": {"id": 10697, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10681, "src": "13096:15:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 10699, "indexExpression": {"hexValue": "31", "id": 10698, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13112:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13096:18:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10700, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 81281, "src": "13096:27:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"id": 10701, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10681, "src": "13141:15:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 10703, "indexExpression": {"hexValue": "32", "id": 10702, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13157:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13141:18:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10704, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 81281, "src": "13141:27:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"id": 10705, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10681, "src": "13186:15:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 10707, "indexExpression": {"hexValue": "31", "id": 10706, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13202:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13186:18:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10708, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 81291, "src": "13186:29:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"baseExpression": {"id": 10709, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10681, "src": "13233:15:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 10711, "indexExpression": {"hexValue": "32", "id": 10710, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13249:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "13233:18:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10712, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 81291, "src": "13233:29:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10718, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10713, "name": "referenceTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10683, "src": "13345:13:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10717, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"hexValue": "32", "id": 10714, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13361:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"expression": {"id": 10715, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 81077, "src": "13365:9:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$81077_$", "typeString": "type(library Constants)"}}, "id": 10716, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 80887, "src": "13365:17:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13361:21:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13345:37:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 10695, "name": "CashGroup", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 42730, "src": "13047:9:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_CashGroup_$42730_$", "typeString": "type(library CashGroup)"}}, "id": 10696, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "interpolateOracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 42097, "src": "13047:31:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256,uint256,uint256,uint256,uint256) pure returns (uint256)"}}, "id": 10719, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13047:349:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 10687, "id": 10720, "nodeType": "Return", "src": "13028:368:32"}]}, "documentation": {"id": 10678, "nodeType": "StructuredDocumentation", "src": "12482:263:32", "text": "@notice The six month implied rate is zero if there have never been any markets initialized\n otherwise the market will be the interpolation between the old 6 month and 1 year markets\n which are now sitting at 3 month and 9 month time to maturity"}, "id": 10722, "implemented": true, "kind": "function", "modifiers": [], "name": "_getSixMonthImpliedRate", "nodeType": "FunctionDefinition", "parameters": {"id": 10684, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10681, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 10722, "src": "12792:41:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 10679, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81294, "src": "12792:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 10680, "nodeType": "ArrayTypeName", "src": "12792:18:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}, {"constant": false, "id": 10683, "mutability": "mutable", "name": "referenceTime", "nodeType": "VariableDeclaration", "scope": 10722, "src": "12843:21:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10682, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "12843:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "12782:88:32"}, "returnParameters": {"id": 10687, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10686, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 10722, "src": "12893:7:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10685, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "12893:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "12892:9:32"}, "scope": 11392, "src": "12750:653:32", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 10808, "nodeType": "Block", "src": "13881:1489:32", "statements": [{"assignments": [10735], "declarations": [{"constant": false, "id": 10735, "mutability": "mutable", "name": "longMaturity", "nodeType": "VariableDeclaration", "scope": 10808, "src": "13891:20:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10734, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13891:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10738, "initialValue": {"expression": {"id": 10736, "name": "longMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10729, "src": "13914:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10737, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 81281, "src": "13914:19:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "13891:42:32"}, {"assignments": [10740], "declarations": [{"constant": false, "id": 10740, "mutability": "mutable", "name": "longRate", "nodeType": "VariableDeclaration", "scope": 10808, "src": "13943:16:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10739, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13943:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10743, "initialValue": {"expression": {"id": 10741, "name": "longMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10729, "src": "13962:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10742, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 81291, "src": "13962:21:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "13943:40:32"}, {"assignments": [10745], "declarations": [{"constant": false, "id": 10745, "mutability": "mutable", "name": "newMaturity", "nodeType": "VariableDeclaration", "scope": 10808, "src": "14054:19:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10744, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "14054:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10751, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10750, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 10746, "name": "longMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10729, "src": "14076:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10747, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 81281, "src": "14076:19:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"expression": {"id": 10748, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 81077, "src": "14098:9:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$81077_$", "typeString": "type(library Constants)"}}, "id": 10749, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 80887, "src": "14098:17:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14076:39:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "14054:61:32"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10755, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10753, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10725, "src": "14133:13:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"id": 10754, "name": "longMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10735, "src": "14149:12:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14133:28:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10752, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "14125:7:32", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10756, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14125:37:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10757, "nodeType": "ExpressionStatement", "src": "14125:37:32"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10760, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10758, "name": "longRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10740, "src": "14343:8:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"id": 10759, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10727, "src": "14355:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14343:21:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 10806, "nodeType": "Block", "src": "14639:725:32", "statements": [{"assignments": [10781], "declarations": [{"constant": false, "id": 10781, "mutability": "mutable", "name": "diff", "nodeType": "VariableDeclaration", "scope": 10806, "src": "14813:12:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10780, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "14813:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10796, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10794, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10792, "name": "longMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10735, "src": "14998:12:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10793, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10725, "src": "15013:13:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14998:28:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10789, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10787, "name": "newMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10745, "src": "14892:11:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10788, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10725, "src": "14906:13:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14892:27:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10784, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10782, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10727, "src": "14845:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10783, "name": "longRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10740, "src": "14857:8:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14845:20:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 10785, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "14844:22:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10786, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 66455, "src": "14844:47:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 10790, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14844:76:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10791, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 66476, "src": "14844:153:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 10795, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14844:183:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "14813:214:32"}, {"expression": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10799, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10797, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10727, "src": "15314:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 10798, "name": "diff", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10781, "src": "15326:4:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "15314:16:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseExpression": {"hexValue": "31", "id": 10803, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "15352:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "id": 10804, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "Conditional", "src": "15314:39:32", "trueExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10802, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10800, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10727, "src": "15333:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10801, "name": "diff", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10781, "src": "15345:4:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "15333:16:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 10733, "id": 10805, "nodeType": "Return", "src": "15307:46:32"}]}, "id": 10807, "nodeType": "IfStatement", "src": "14339:1025:32", "trueBody": {"id": 10779, "nodeType": "Block", "src": "14366:267:32", "statements": [{"expression": {"arguments": [{"id": 10776, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10727, "src": "14612:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10773, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10771, "name": "longMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10735, "src": "14557:12:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10772, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10725, "src": "14572:13:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14557:28:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10768, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10766, "name": "newMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10745, "src": "14451:11:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10767, "name": "shortMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10725, "src": "14465:13:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14451:27:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10763, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10761, "name": "longRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10740, "src": "14404:8:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10762, "name": "shortRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10727, "src": "14415:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "14404:20:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 10764, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "14403:22:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10765, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 66455, "src": "14403:47:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 10769, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14403:76:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10770, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 66476, "src": "14403:153:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 10774, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14403:183:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 10775, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 66401, "src": "14403:208:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 10777, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "14403:219:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 10733, "id": 10778, "nodeType": "Return", "src": "14380:242:32"}]}}]}, "documentation": {"id": 10723, "nodeType": "StructuredDocumentation", "src": "13409:296:32", "text": "@notice Returns the linear interpolation between two market rates. The formula is\n slope = (longMarket.oracleRate - shortMarket.oracleRate) / (longMarket.maturity - shortMarket.maturity)\n interpolatedRate = slope * (assetMaturity - shortMarket.maturity) + shortMarket.oracleRate"}, "id": 10809, "implemented": true, "kind": "function", "modifiers": [], "name": "_interpolateFutureRate", "nodeType": "FunctionDefinition", "parameters": {"id": 10730, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10725, "mutability": "mutable", "name": "shortMaturity", "nodeType": "VariableDeclaration", "scope": 10809, "src": "13751:21:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10724, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13751:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 10727, "mutability": "mutable", "name": "shortRate", "nodeType": "VariableDeclaration", "scope": 10809, "src": "13782:17:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10726, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13782:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 10729, "mutability": "mutable", "name": "longMarket", "nodeType": "VariableDeclaration", "scope": 10809, "src": "13809:34:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 10728, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81294, "src": "13809:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "src": "13741:108:32"}, "returnParameters": {"id": 10733, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10732, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 10809, "src": "13872:7:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10731, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "13872:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "13871:9:32"}, "scope": 11392, "src": "13710:1660:32", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 10869, "nodeType": "Block", "src": "15662:766:32", "statements": [{"assignments": [10826], "declarations": [{"constant": false, "id": 10826, "mutability": "mutable", "name": "primeCashToMarket", "nodeType": "VariableDeclaration", "scope": 10869, "src": "15756:24:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10825, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15756:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10835, "initialValue": {"arguments": [{"expression": {"id": 10832, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 81077, "src": "15839:9:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$81077_$", "typeString": "type(library Constants)"}}, "id": 10833, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "DEPOSIT_PERCENT_BASIS", "nodeType": "MemberAccess", "referencedDeclaration": 81027, "src": "15839:31:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"arguments": [{"id": 10829, "name": "depositShare", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10814, "src": "15821:12:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10827, "name": "netPrimeCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10812, "src": "15795:21:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10828, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 65935, "src": "15795:25:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10830, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15795:39:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10831, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 65965, "src": "15795:43:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10834, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "15795:76:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "15756:115:32"}, {"expression": {"id": 10840, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10836, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10818, "src": "15881:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10838, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalPrimeCash", "nodeType": "MemberAccess", "referencedDeclaration": 81285, "src": "15881:24:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 10839, "name": "primeCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10826, "src": "15908:17:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "15881:44:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10841, "nodeType": "ExpressionStatement", "src": "15881:44:32"}, {"expression": {"id": 10846, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 10842, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10818, "src": "15935:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10844, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalLiquidity", "nodeType": "MemberAccess", "referencedDeclaration": 81287, "src": "15935:24:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 10845, "name": "primeCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10826, "src": "15962:17:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "15935:44:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10847, "nodeType": "ExpressionStatement", "src": "15935:44:32"}, {"expression": {"arguments": [{"expression": {"expression": {"id": 10853, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10820, "src": "16112:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10854, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 81169, "src": "16112:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$81264_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10855, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currencyId", "nodeType": "MemberAccess", "referencedDeclaration": 81257, "src": "16112:27:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 10856, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10818, "src": "16153:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 10857, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 81281, "src": "16153:18:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10858, "name": "assetType", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10816, "src": "16185:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10859, "name": "primeCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10826, "src": "16246:17:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"id": 10848, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10820, "src": "16068:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10851, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 81171, "src": "16068:21:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$81216_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 10852, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "addAsset", "nodeType": "MemberAccess", "referencedDeclaration": 52083, "src": "16068:30:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PortfolioState_$81216_memory_ptr_$_t_uint16_$_t_uint256_$_t_uint256_$_t_int256_$returns$__$bound_to$_t_struct$_PortfolioState_$81216_memory_ptr_$", "typeString": "function (struct PortfolioState memory,uint16,uint256,uint256,int256) pure"}}, "id": 10860, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16068:205:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10861, "nodeType": "ExpressionStatement", "src": "16068:205:32"}, {"expression": {"arguments": [{"id": 10866, "name": "primeCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10826, "src": "16403:17:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"expression": {"expression": {"id": 10862, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10820, "src": "16356:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10863, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 81169, "src": "16356:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$81264_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10864, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "primeRate", "nodeType": "MemberAccess", "referencedDeclaration": 81261, "src": "16356:26:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PrimeRate_$81698_memory_ptr", "typeString": "struct PrimeRate memory"}}, "id": 10865, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "convertToUnderlying", "nodeType": "MemberAccess", "referencedDeclaration": 50432, "src": "16356:46:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_PrimeRate_$81698_memory_ptr_$_t_int256_$returns$_t_int256_$bound_to$_t_struct$_PrimeRate_$81698_memory_ptr_$", "typeString": "function (struct PrimeRate memory,int256) pure returns (int256)"}}, "id": 10867, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "16356:65:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 10824, "id": 10868, "nodeType": "Return", "src": "16349:72:32"}]}, "documentation": {"id": 10810, "nodeType": "StructuredDocumentation", "src": "15376:40:32", "text": "@dev This is here to clear the stack"}, "id": 10870, "implemented": true, "kind": "function", "modifiers": [], "name": "_setLiquidityAmount", "nodeType": "FunctionDefinition", "parameters": {"id": 10821, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10812, "mutability": "mutable", "name": "netPrimeCashAvailable", "nodeType": "VariableDeclaration", "scope": 10870, "src": "15459:28:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10811, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15459:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10814, "mutability": "mutable", "name": "depositShare", "nodeType": "VariableDeclaration", "scope": 10870, "src": "15497:19:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10813, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15497:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10816, "mutability": "mutable", "name": "assetType", "nodeType": "VariableDeclaration", "scope": 10870, "src": "15526:17:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10815, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "15526:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 10818, "mutability": "mutable", "name": "newMarket", "nodeType": "VariableDeclaration", "scope": 10870, "src": "15553:33:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 10817, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81294, "src": "15553:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 10820, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 10870, "src": "15596:29:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 10819, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81182, "src": "15596:15:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "src": "15449:182:32"}, "returnParameters": {"id": 10824, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10823, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 10870, "src": "15654:6:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10822, "name": "int256", "nodeType": "ElementaryTypeName", "src": "15654:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "15653:8:32"}, "scope": 11392, "src": "15421:1007:32", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 10909, "nodeType": "Block", "src": "17028:297:32", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10887, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 10881, "name": "utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10875, "src": "17046:11:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"arguments": [{"expression": {"id": 10884, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 81077, "src": "17068:9:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$81077_$", "typeString": "type(library Constants)"}}, "id": 10885, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RATE_PRECISION", "nodeType": "MemberAccess", "referencedDeclaration": 80925, "src": "17068:24:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 10883, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "17060:7:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 10882, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "17060:7:32", "typeDescriptions": {}}}, "id": 10886, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17060:33:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "17046:47:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10880, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "17038:7:32", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10888, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17038:56:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10889, "nodeType": "ExpressionStatement", "src": "17038:56:32"}, {"assignments": [10891], "declarations": [{"constant": false, "id": 10891, "mutability": "mutable", "name": "_utilization", "nodeType": "VariableDeclaration", "scope": 10909, "src": "17104:19:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10890, "name": "int256", "nodeType": "ElementaryTypeName", "src": "17104:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10896, "initialValue": {"arguments": [{"id": 10894, "name": "utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10875, "src": "17133:11:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10893, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "17126:6:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_int256_$", "typeString": "type(int256)"}, "typeName": {"id": 10892, "name": "int256", "nodeType": "ElementaryTypeName", "src": "17126:6:32", "typeDescriptions": {}}}, "id": 10895, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17126:19:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "17104:41:32"}, {"expression": {"components": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 10906, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 10899, "name": "_utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10891, "src": "17260:12:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 10897, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10873, "src": "17233:22:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 10898, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 65935, "src": "17233:26:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256,int256) pure returns (int256)"}}, "id": 10900, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17233:40:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "/", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 10904, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 10901, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 81077, "src": "17277:9:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$81077_$", "typeString": "type(library Constants)"}}, "id": 10902, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "RATE_PRECISION", "nodeType": "MemberAccess", "referencedDeclaration": 80925, "src": "17277:24:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 10903, "name": "_utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10891, "src": "17304:12:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "17277:39:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 10905, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "17276:41:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "17233:84:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "id": 10907, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "17232:86:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "functionReturnParameters": 10879, "id": 10908, "nodeType": "Return", "src": "17225:93:32"}]}, "documentation": {"id": 10871, "nodeType": "StructuredDocumentation", "src": "16434:71:32", "text": "@notice Calculates the fCash amount given the cash and utilization:"}, "id": 10910, "implemented": true, "kind": "function", "modifiers": [], "name": "_calculatefCashAmountFromUtilization", "nodeType": "FunctionDefinition", "parameters": {"id": 10876, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10873, "mutability": "mutable", "name": "underlyingCashToMarket", "nodeType": "VariableDeclaration", "scope": 10910, "src": "16932:29:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10872, "name": "int256", "nodeType": "ElementaryTypeName", "src": "16932:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, {"constant": false, "id": 10875, "mutability": "mutable", "name": "utilization", "nodeType": "VariableDeclaration", "scope": 10910, "src": "16971:19:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10874, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "16971:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "16922:75:32"}, "returnParameters": {"id": 10879, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10878, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 10910, "src": "17020:6:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10877, "name": "int256", "nodeType": "ElementaryTypeName", "src": "17020:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "17019:8:32"}, "scope": 11392, "src": "16877:448:32", "stateMutability": "pure", "virtual": false, "visibility": "private"}, {"body": {"id": 10922, "nodeType": "Block", "src": "17709:66:32", "statements": [{"expression": {"arguments": [{"id": 10919, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10913, "src": "17757:10:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 10916, "name": "nTokenMintAction", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20288, "src": "17719:16:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenMintAction_$20288_$", "typeString": "type(library nTokenMintAction)"}}, "id": 10918, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sweepCashIntoMarkets", "nodeType": "MemberAccess", "referencedDeclaration": 19476, "src": "17719:37:32", "typeDescriptions": {"typeIdentifier": "t_function_delegatecall_nonpayable$_t_uint16_$returns$__$", "typeString": "function (uint16)"}}, "id": 10920, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "17719:49:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10921, "nodeType": "ExpressionStatement", "src": "17719:49:32"}]}, "documentation": {"id": 10911, "nodeType": "StructuredDocumentation", "src": "17331:315:32", "text": "@notice Sweeps nToken cash balance into markets after accounting for cash withholding. Can be\n done after fCash residuals are purchased to ensure that markets have maximum liquidity.\n @param currencyId currency of markets to initialize\n @dev emit:CashSweepIntoMarkets\n @dev auth:none"}, "functionSelector": "bb6dd58e", "id": 10923, "implemented": true, "kind": "function", "modifiers": [], "name": "sweepCashIntoMarkets", "nodeType": "FunctionDefinition", "parameters": {"id": 10914, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10913, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 10923, "src": "17681:17:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10912, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "17681:6:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}], "src": "17680:19:32"}, "returnParameters": {"id": 10915, "nodeType": "ParameterList", "parameters": [], "src": "17709:0:32"}, "scope": 11392, "src": "17651:124:32", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 11334, "nodeType": "Block", "src": "18149:9316:32", "statements": [{"assignments": [10932], "declarations": [{"constant": false, "id": 10932, "mutability": "mutable", "name": "blockTime", "nodeType": "VariableDeclaration", "scope": 11334, "src": "18159:17:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10931, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "18159:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 10935, "initialValue": {"expression": {"id": 10933, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "18179:5:32", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 10934, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "18179:15:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "18159:35:32"}, {"assignments": [10937], "declarations": [{"constant": false, "id": 10937, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 11334, "src": "18204:29:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 10936, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81182, "src": "18204:15:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "id": 10938, "nodeType": "VariableDeclarationStatement", "src": "18204:29:32"}, {"expression": {"arguments": [{"id": 10942, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10926, "src": "18278:10:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "expression": {"id": 10939, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "18243:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10941, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "loadNTokenPortfolioStateful", "nodeType": "MemberAccess", "referencedDeclaration": 47805, "src": "18243:34:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$81182_memory_ptr_$_t_uint16_$returns$__$bound_to$_t_struct$_nTokenPortfolio_$81182_memory_ptr_$", "typeString": "function (struct nTokenPortfolio memory,uint16)"}}, "id": 10943, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18243:46:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10944, "nodeType": "ExpressionStatement", "src": "18243:46:32"}, {"assignments": [10948], "declarations": [{"constant": false, "id": 10948, "mutability": "mutable", "name": "previousMarkets", "nodeType": "VariableDeclaration", "scope": 11334, "src": "18299:41:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters[]"}, "typeName": {"baseType": {"id": 10946, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81294, "src": "18299:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 10947, "nodeType": "ArrayTypeName", "src": "18299:18:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}, "visibility": "internal"}], "id": 10956, "initialValue": {"arguments": [{"expression": {"expression": {"id": 10952, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "18378:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10953, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 81169, "src": "18378:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$81264_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10954, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 81259, "src": "18378:31:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10951, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "18355:22:32", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (struct MarketParameters memory[] memory)"}, "typeName": {"baseType": {"id": 10949, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81294, "src": "18359:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_storage_ptr", "typeString": "struct MarketParameters"}}, "id": 10950, "nodeType": "ArrayTypeName", "src": "18359:18:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_storage_$dyn_storage_ptr", "typeString": "struct MarketParameters[]"}}}, "id": 10955, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18355:55:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "18299:111:32"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10962, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"expression": {"id": 10958, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "18508:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10959, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 81169, "src": "18508:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$81264_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10960, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 81259, "src": "18508:31:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 10961, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "18543:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "18508:36:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10957, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "18500:7:32", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10963, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18500:45:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10964, "nodeType": "ExpressionStatement", "src": "18500:45:32"}, {"condition": {"id": 10965, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10928, "src": "18641:11:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 10976, "nodeType": "IfStatement", "src": "18637:97:32", "trueBody": {"id": 10975, "nodeType": "Block", "src": "18654:80:32", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 10972, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"expression": {"expression": {"id": 10967, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "18676:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10968, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 81171, "src": "18676:21:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$81216_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 10969, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 81208, "src": "18676:34:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$81277_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 10970, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "18676:41:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 10971, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "18721:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "18676:46:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10966, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "18668:7:32", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 10973, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18668:55:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 10974, "nodeType": "ExpressionStatement", "src": "18668:55:32"}]}}, {"assignments": [10978], "declarations": [{"constant": false, "id": 10978, "mutability": "mutable", "name": "netPrimeCashAvailable", "nodeType": "VariableDeclaration", "scope": 11334, "src": "18744:28:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 10977, "name": "int256", "nodeType": "ElementaryTypeName", "src": "18744:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 10986, "initialValue": {"arguments": [{"id": 10980, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "18820:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, {"id": 10981, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10948, "src": "18840:15:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"id": 10982, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10932, "src": "18869:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 10983, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10926, "src": "18892:10:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 10984, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10928, "src": "18916:11:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}, {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 10979, "name": "_calculateNetPrimeCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10677, "src": "18775:31:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_nTokenPortfolio_$81182_memory_ptr_$_t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr_$_t_uint256_$_t_uint16_$_t_bool_$returns$_t_int256_$", "typeString": "function (struct nTokenPortfolio memory,struct MarketParameters memory[] memory,uint256,uint16,bool) returns (int256)"}}, "id": 10985, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "18775:162:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "18744:193:32"}, {"assignments": [10988], "declarations": [{"constant": false, "id": 10988, "mutability": "mutable", "name": "parameters", "nodeType": "VariableDeclaration", "scope": 11334, "src": "18948:38:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}, "typeName": {"id": 10987, "name": "GovernanceParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 10168, "src": "18948:20:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_storage_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters"}}, "visibility": "internal"}], "id": 10995, "initialValue": {"arguments": [{"id": 10990, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10926, "src": "19026:10:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"expression": {"id": 10991, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "19038:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 10992, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 81169, "src": "19038:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$81264_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 10993, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 81259, "src": "19038:31:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 10989, "name": "_getGovernanceParameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10285, "src": "19001:24:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint16_$_t_uint256_$returns$_t_struct$_GovernanceParameters_$10168_memory_ptr_$", "typeString": "function (uint16,uint256) returns (struct InitializeMarketsAction.GovernanceParameters memory)"}}, "id": 10994, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19001:69:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "nodeType": "VariableDeclarationStatement", "src": "18948:122:32"}, {"assignments": [10997], "declarations": [{"constant": false, "id": 10997, "mutability": "mutable", "name": "newMarket", "nodeType": "VariableDeclaration", "scope": 11334, "src": "19081:33:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 10996, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81294, "src": "19081:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}], "id": 10998, "nodeType": "VariableDeclarationStatement", "src": "19081:33:32"}, {"assignments": [11000], "declarations": [{"constant": false, "id": 11000, "mutability": "mutable", "name": "oracleRate", "nodeType": "VariableDeclaration", "scope": 11334, "src": "19177:18:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10999, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19177:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11001, "nodeType": "VariableDeclarationStatement", "src": "19177:18:32"}, {"body": {"id": 11296, "nodeType": "Block", "src": "19267:7581:32", "statements": [{"expression": {"id": 11029, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11014, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10997, "src": "19325:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11016, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 81281, "src": "19325:18:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11026, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11024, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "19429:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"hexValue": "31", "id": 11025, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "19433:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "19429:5:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11022, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43368, "src": "19404:8:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$43368_$", "typeString": "type(library DateTime)"}}, "id": 11023, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getTradedMarket", "nodeType": "MemberAccess", "referencedDeclaration": 42860, "src": "19404:24:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 11027, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19404:31:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"id": 11019, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10932, "src": "19372:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11017, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43368, "src": "19346:8:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$43368_$", "typeString": "type(library DateTime)"}}, "id": 11018, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 42764, "src": "19346:25:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 11020, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19346:36:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11021, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 66401, "src": "19346:40:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 11028, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19346:103:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "19325:124:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11030, "nodeType": "ExpressionStatement", "src": "19325:124:32"}, {"assignments": [11032], "declarations": [{"constant": false, "id": 11032, "mutability": "mutable", "name": "underlyingCashToMarket", "nodeType": "VariableDeclaration", "scope": 11296, "src": "19464:29:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11031, "name": "int256", "nodeType": "ElementaryTypeName", "src": "19464:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 11046, "initialValue": {"arguments": [{"id": 11034, "name": "netPrimeCashAvailable", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10978, "src": "19553:21:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"baseExpression": {"expression": {"id": 11035, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10988, "src": "19596:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11036, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "depositShares", "nodeType": "MemberAccess", "referencedDeclaration": 10158, "src": "19596:24:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 11038, "indexExpression": {"id": 11037, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "19621:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "19596:27:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11042, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 11039, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 81077, "src": "19645:9:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$81077_$", "typeString": "type(library Constants)"}}, "id": 11040, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "MIN_LIQUIDITY_TOKEN_INDEX", "nodeType": "MemberAccess", "referencedDeclaration": 80988, "src": "19645:35:32", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"id": 11041, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "19683:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "19645:39:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11043, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10997, "src": "19736:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 11044, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "19767:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}], "id": 11033, "name": "_setLiquidityAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10870, "src": "19512:19:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_int256_$_t_uint256_$_t_struct$_MarketParameters_$81294_memory_ptr_$_t_struct$_nTokenPortfolio_$81182_memory_ptr_$returns$_t_int256_$", "typeString": "function (int256,int256,uint256,struct MarketParameters memory,struct nTokenPortfolio memory) pure returns (int256)"}}, "id": 11045, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "19512:279:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "19464:327:32"}, {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 11077, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 11065, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 11057, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11047, "name": "isFirstInit", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10928, "src": "20341:11:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 11055, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11050, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11048, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "20463:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "31", "id": 11049, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20468:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "20463:6:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11054, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 11051, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10948, "src": "20473:15:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 11052, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "20473:22:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "32", "id": 11053, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20499:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "src": "20473:27:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "20463:37:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 11056, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "20462:39:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "20341:160:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11063, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11058, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "20607:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"expression": {"expression": {"expression": {"id": 11059, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "20612:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11060, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 81171, "src": "20612:21:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$81216_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 11061, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storedAssets", "nodeType": "MemberAccess", "referencedDeclaration": 81208, "src": "20612:34:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_PortfolioAsset_$81277_memory_ptr_$dyn_memory_ptr", "typeString": "struct PortfolioAsset memory[] memory"}}, "id": 11062, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "20612:41:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "20607:46:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 11064, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "20606:48:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "20341:313:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 11075, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11068, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11066, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "20787:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "31", "id": 11067, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20792:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "20787:6:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11074, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"baseExpression": {"id": 11069, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10948, "src": "20797:15:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 11071, "indexExpression": {"hexValue": "32", "id": 11070, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20813:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "20797:18:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11072, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 81291, "src": "20797:29:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 11073, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "20830:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "20797:34:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "20787:44:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 11076, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "20786:46:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "20341:491:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 11281, "nodeType": "Block", "src": "21585:5069:32", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11120, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11118, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "21847:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 11119, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "21852:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "21847:6:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11131, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11129, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "22127:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "31", "id": 11130, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "22132:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "22127:6:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 11200, "nodeType": "Block", "src": "23098:1740:32", "statements": [{"assignments": [11161], "declarations": [{"constant": false, "id": 11161, "mutability": "mutable", "name": "shortMarketMaturity", "nodeType": "VariableDeclaration", "scope": 11200, "src": "23881:27:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11160, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "23881:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11172, "initialValue": {"arguments": [{"arguments": [{"id": 11169, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "24001:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11167, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43368, "src": "23976:8:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$43368_$", "typeString": "type(library DateTime)"}}, "id": 11168, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getTradedMarket", "nodeType": "MemberAccess", "referencedDeclaration": 42860, "src": "23976:24:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 11170, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23976:27:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"id": 11164, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10932, "src": "23961:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11162, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43368, "src": "23935:8:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$43368_$", "typeString": "type(library DateTime)"}}, "id": 11163, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 42764, "src": "23935:25:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 11165, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23935:36:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11166, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 66401, "src": "23935:40:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 11171, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "23935:69:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "23881:123:32"}, {"expression": {"id": 11181, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11173, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11000, "src": "24026:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11175, "name": "shortMarketMaturity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11161, "src": "24087:19:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 11176, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11000, "src": "24404:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"baseExpression": {"id": 11177, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10948, "src": "24518:15:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 11179, "indexExpression": {"id": 11178, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "24534:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "24518:18:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}], "id": 11174, "name": "_interpolateFutureRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10809, "src": "24039:22:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_struct$_MarketParameters_$81294_memory_ptr_$returns$_t_uint256_$", "typeString": "function (uint256,uint256,struct MarketParameters memory) pure returns (uint256)"}}, "id": 11180, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "24039:519:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "24026:532:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11182, "nodeType": "ExpressionStatement", "src": "24026:532:32"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11189, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11183, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11000, "src": "24659:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"baseExpression": {"expression": {"id": 11184, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10988, "src": "24672:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11185, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10167, "src": "24672:29:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$81418_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 11187, "indexExpression": {"id": 11186, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "24702:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "24672:32:32", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$81418_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 11188, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "kinkRate1", "nodeType": "MemberAccess", "referencedDeclaration": 81407, "src": "24672:42:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "24659:55:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11199, "nodeType": "IfStatement", "src": "24655:165:32", "trueBody": {"id": 11198, "nodeType": "Block", "src": "24716:104:32", "statements": [{"expression": {"id": 11196, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11190, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11000, "src": "24742:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"baseExpression": {"expression": {"id": 11191, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10988, "src": "24755:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11192, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10167, "src": "24755:29:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$81418_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 11194, "indexExpression": {"id": 11193, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "24785:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "24755:32:32", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$81418_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 11195, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "kinkRate1", "nodeType": "MemberAccess", "referencedDeclaration": 81407, "src": "24755:42:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "24742:55:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11197, "nodeType": "ExpressionStatement", "src": "24742:55:32"}]}}]}, "id": 11201, "nodeType": "IfStatement", "src": "22123:2715:32", "trueBody": {"id": 11159, "nodeType": "Block", "src": "22135:957:32", "statements": [{"expression": {"id": 11140, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11132, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11000, "src": "22651:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11134, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10948, "src": "22713:15:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, {"arguments": [{"id": 11137, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10932, "src": "22780:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11135, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43368, "src": "22754:8:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$43368_$", "typeString": "type(library DateTime)"}}, "id": 11136, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 42764, "src": "22754:25:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 11138, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22754:36:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11133, "name": "_getSixMonthImpliedRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10722, "src": "22664:23:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (struct MarketParameters memory[] memory,uint256) pure returns (uint256)"}}, "id": 11139, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "22664:148:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "22651:161:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11141, "nodeType": "ExpressionStatement", "src": "22651:161:32"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11148, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11142, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11000, "src": "22913:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"baseExpression": {"expression": {"id": 11143, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10988, "src": "22926:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11144, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10167, "src": "22926:29:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$81418_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 11146, "indexExpression": {"id": 11145, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "22956:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "22926:32:32", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$81418_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 11147, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "kinkRate1", "nodeType": "MemberAccess", "referencedDeclaration": 81407, "src": "22926:42:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "22913:55:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11158, "nodeType": "IfStatement", "src": "22909:165:32", "trueBody": {"id": 11157, "nodeType": "Block", "src": "22970:104:32", "statements": [{"expression": {"id": 11155, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11149, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11000, "src": "22996:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"baseExpression": {"expression": {"id": 11150, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10988, "src": "23009:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11151, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10167, "src": "23009:29:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$81418_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 11153, "indexExpression": {"id": 11152, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "23039:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "23009:32:32", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$81418_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 11154, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "kinkRate1", "nodeType": "MemberAccess", "referencedDeclaration": 81407, "src": "23009:42:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "22996:55:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11156, "nodeType": "ExpressionStatement", "src": "22996:55:32"}]}}]}}, "id": 11202, "nodeType": "IfStatement", "src": "21843:2995:32", "trueBody": {"id": 11128, "nodeType": "Block", "src": "21855:262:32", "statements": [{"expression": {"id": 11126, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11121, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11000, "src": "22056:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"baseExpression": {"id": 11122, "name": "previousMarkets", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10948, "src": "22069:15:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_MarketParameters_$81294_memory_ptr_$dyn_memory_ptr", "typeString": "struct MarketParameters memory[] memory"}}, "id": 11124, "indexExpression": {"hexValue": "31", "id": 11123, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "22085:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "22069:18:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11125, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 81291, "src": "22069:29:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "22056:42:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11127, "nodeType": "ExpressionStatement", "src": "22056:42:32"}]}}, {"assignments": [11204], "declarations": [{"constant": false, "id": 11204, "mutability": "mutable", "name": "utilization", "nodeType": "VariableDeclaration", "scope": 11281, "src": "25152:19:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11203, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "25152:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11212, "initialValue": {"arguments": [{"id": 11210, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11000, "src": "25238:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"baseExpression": {"expression": {"id": 11205, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10988, "src": "25174:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11206, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10167, "src": "25174:29:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$81418_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 11208, "indexExpression": {"id": 11207, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "25204:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "25174:32:32", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$81418_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 11209, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "getUtilizationFromInterestRate", "nodeType": "MemberAccess", "referencedDeclaration": 44677, "src": "25174:63:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_InterestRateParameters_$81418_memory_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_InterestRateParameters_$81418_memory_ptr_$", "typeString": "function (struct InterestRateParameters memory,uint256) pure returns (uint256)"}}, "id": 11211, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25174:75:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "25152:97:32"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11220, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11213, "name": "utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11204, "src": "25739:11:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"baseExpression": {"expression": {"id": 11214, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10988, "src": "25753:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11215, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "leverageThresholds", "nodeType": "MemberAccess", "referencedDeclaration": 10161, "src": "25753:29:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 11217, "indexExpression": {"id": 11216, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "25783:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "25753:32:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11218, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "toUint", "nodeType": "MemberAccess", "referencedDeclaration": 66133, "src": "25753:39:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (uint256)"}}, "id": 11219, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25753:41:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "25739:55:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11248, "nodeType": "IfStatement", "src": "25735:323:32", "trueBody": {"id": 11247, "nodeType": "Block", "src": "25796:262:32", "statements": [{"expression": {"id": 11228, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11221, "name": "utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11204, "src": "25818:11:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"baseExpression": {"expression": {"id": 11222, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10988, "src": "25832:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11223, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "leverageThresholds", "nodeType": "MemberAccess", "referencedDeclaration": 10161, "src": "25832:29:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 11225, "indexExpression": {"id": 11224, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "25862:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "25832:32:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11226, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "toUint", "nodeType": "MemberAccess", "referencedDeclaration": 66133, "src": "25832:39:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (uint256)"}}, "id": 11227, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25832:41:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "25818:55:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11229, "nodeType": "ExpressionStatement", "src": "25818:55:32"}, {"expression": {"id": 11238, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 11230, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11000, "src": "25895:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11236, "name": "utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11204, "src": "25957:11:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"baseExpression": {"expression": {"id": 11231, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10988, "src": "25908:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11232, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10167, "src": "25908:29:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$81418_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 11234, "indexExpression": {"id": 11233, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "25938:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "25908:32:32", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$81418_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 11235, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "getInterestRate", "nodeType": "MemberAccess", "referencedDeclaration": 44579, "src": "25908:48:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_InterestRateParameters_$81418_memory_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_InterestRateParameters_$81418_memory_ptr_$", "typeString": "function (struct InterestRateParameters memory,uint256) pure returns (uint256)"}}, "id": 11237, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25908:61:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "25895:74:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11239, "nodeType": "ExpressionStatement", "src": "25895:74:32"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11243, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11241, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11000, "src": "25999:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "!=", "rightExpression": {"hexValue": "30", "id": 11242, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "26013:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "25999:15:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4f7261636c652072617465206f766572666c6f77", "id": 11244, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "26016:22:32", "typeDescriptions": {"typeIdentifier": "t_stringliteral_23d0a49e299abba1ef8dfb174e16735ce5b23ca44b6c0498417f6fe3d740d7b1", "typeString": "literal_string \"Oracle rate overflow\""}, "value": "Oracle rate overflow"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_23d0a49e299abba1ef8dfb174e16735ce5b23ca44b6c0498417f6fe3d740d7b1", "typeString": "literal_string \"Oracle rate overflow\""}], "id": 11240, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "25991:7:32", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 11245, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "25991:48:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11246, "nodeType": "ExpressionStatement", "src": "25991:48:32"}]}}, {"expression": {"id": 11256, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11249, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10997, "src": "26076:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11251, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 81283, "src": "26076:20:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 11253, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11032, "src": "26136:22:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"id": 11254, "name": "utilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11204, "src": "26160:11:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11252, "name": "_calculatefCashAmountFromUtilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10910, "src": "26099:36:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (int256,uint256) pure returns (int256)"}}, "id": 11255, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "26099:73:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "26076:96:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11257, "nodeType": "ExpressionStatement", "src": "26076:96:32"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 11261, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 11258, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10997, "src": "26383:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11259, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 81283, "src": "26383:20:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "31", "id": 11260, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "26406:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "26383:24:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11268, "nodeType": "IfStatement", "src": "26379:54:32", "trueBody": {"expression": {"id": 11266, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11262, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10997, "src": "26409:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11264, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 81283, "src": "26409:20:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"hexValue": "31", "id": 11265, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "26432:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "26409:24:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11267, "nodeType": "ExpressionStatement", "src": "26409:24:32"}}, {"expression": {"id": 11273, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11269, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10997, "src": "26452:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11271, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 81291, "src": "26452:20:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 11272, "name": "oracleRate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11000, "src": "26475:10:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "26452:33:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11274, "nodeType": "ExpressionStatement", "src": "26452:33:32"}, {"expression": {"id": 11279, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11275, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10997, "src": "26600:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11277, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "previousTradeTime", "nodeType": "MemberAccess", "referencedDeclaration": 81293, "src": "26600:27:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 11278, "name": "blockTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10932, "src": "26630:9:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "26600:39:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11280, "nodeType": "ExpressionStatement", "src": "26600:39:32"}]}, "id": 11282, "nodeType": "IfStatement", "src": "20320:6334:32", "trueBody": {"id": 11117, "nodeType": "Block", "src": "20847:732:32", "statements": [{"assignments": [11079], "declarations": [{"constant": false, "id": 11079, "mutability": "mutable", "name": "fCashAmount", "nodeType": "VariableDeclaration", "scope": 11117, "src": "21075:18:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 11078, "name": "int256", "nodeType": "ElementaryTypeName", "src": "21075:6:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "id": 11087, "initialValue": {"arguments": [{"id": 11081, "name": "underlyingCashToMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11032, "src": "21133:22:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, {"baseExpression": {"expression": {"id": 11082, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10988, "src": "21157:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11083, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "proportions", "nodeType": "MemberAccess", "referencedDeclaration": 10164, "src": "21157:22:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 11085, "indexExpression": {"id": 11084, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "21180:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "21157:25:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 11080, "name": "_calculatefCashAmountFromUtilization", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10910, "src": "21096:36:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$_t_uint256_$returns$_t_int256_$", "typeString": "function (int256,uint256) pure returns (int256)"}}, "id": 11086, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21096:87:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "VariableDeclarationStatement", "src": "21075:108:32"}, {"expression": {"id": 11092, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11088, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10997, "src": "21202:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11090, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 81283, "src": "21202:20:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 11091, "name": "fCashAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11079, "src": "21225:11:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "21202:34:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11093, "nodeType": "ExpressionStatement", "src": "21202:34:32"}, {"expression": {"id": 11107, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11094, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10997, "src": "21254:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11096, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 81291, "src": "21254:20:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"baseExpression": {"expression": {"id": 11102, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10988, "src": "21326:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11103, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "proportions", "nodeType": "MemberAccess", "referencedDeclaration": 10164, "src": "21326:22:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 11105, "indexExpression": {"id": 11104, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "21349:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "21326:25:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"baseExpression": {"expression": {"id": 11097, "name": "parameters", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10988, "src": "21277:10:32", "typeDescriptions": {"typeIdentifier": "t_struct$_GovernanceParameters_$10168_memory_ptr", "typeString": "struct InitializeMarketsAction.GovernanceParameters memory"}}, "id": 11098, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "interestRateParams", "nodeType": "MemberAccess", "referencedDeclaration": 10167, "src": "21277:29:32", "typeDescriptions": {"typeIdentifier": "t_array$_t_struct$_InterestRateParameters_$81418_memory_ptr_$dyn_memory_ptr", "typeString": "struct InterestRateParameters memory[] memory"}}, "id": 11100, "indexExpression": {"id": 11099, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "21307:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "21277:32:32", "typeDescriptions": {"typeIdentifier": "t_struct$_InterestRateParameters_$81418_memory_ptr", "typeString": "struct InterestRateParameters memory"}}, "id": 11101, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "getInterestRate", "nodeType": "MemberAccess", "referencedDeclaration": 44579, "src": "21277:48:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_struct$_InterestRateParameters_$81418_memory_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_InterestRateParameters_$81418_memory_ptr_$", "typeString": "function (struct InterestRateParameters memory,uint256) pure returns (uint256)"}}, "id": 11106, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21277:75:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "21254:98:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11108, "nodeType": "ExpressionStatement", "src": "21254:98:32"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11113, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 11110, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10997, "src": "21512:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11111, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 81291, "src": "21512:20:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 11112, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "21535:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "21512:24:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "494d3a20696d706c6965642072617465206661696c6564", "id": 11114, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "21538:25:32", "typeDescriptions": {"typeIdentifier": "t_stringliteral_f67a3c8a35da69c45d1ed45fabcbc3676eda7020663e1b262f347036fe2c14e4", "typeString": "literal_string \"IM: implied rate failed\""}, "value": "IM: implied rate failed"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_f67a3c8a35da69c45d1ed45fabcbc3676eda7020663e1b262f347036fe2c14e4", "typeString": "literal_string \"IM: implied rate failed\""}], "id": 11109, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "21504:7:32", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 11115, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "21504:60:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11116, "nodeType": "ExpressionStatement", "src": "21504:60:32"}]}}, {"expression": {"id": 11288, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 11283, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10997, "src": "26730:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11285, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "lastImpliedRate", "nodeType": "MemberAccess", "referencedDeclaration": 81289, "src": "26730:25:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 11286, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10997, "src": "26758:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11287, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "oracleRate", "nodeType": "MemberAccess", "referencedDeclaration": 81291, "src": "26758:20:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "26730:48:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11289, "nodeType": "ExpressionStatement", "src": "26730:48:32"}, {"expression": {"arguments": [{"id": 11291, "name": "newMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10997, "src": "26807:9:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, {"id": 11292, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10926, "src": "26818:10:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 11293, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "26830:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}], "id": 11290, "name": "finalizeMarket", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11379, "src": "26792:14:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$81294_memory_ptr_$_t_uint16_$_t_struct$_nTokenPortfolio_$81182_memory_ptr_$returns$__$", "typeString": "function (struct MarketParameters memory,uint16,struct nTokenPortfolio memory)"}}, "id": 11294, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "26792:45:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11295, "nodeType": "ExpressionStatement", "src": "26792:45:32"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11010, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 11006, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "19225:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"expression": {"id": 11007, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "19229:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11008, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashGroup", "nodeType": "MemberAccess", "referencedDeclaration": 81169, "src": "19229:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_CashGroupParameters_$81264_memory_ptr", "typeString": "struct CashGroupParameters memory"}}, "id": 11009, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxMarketIndex", "nodeType": "MemberAccess", "referencedDeclaration": 81259, "src": "19229:31:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "19225:35:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 11297, "initializationExpression": {"assignments": [11003], "declarations": [{"constant": false, "id": 11003, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 11297, "src": "19210:9:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11002, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "19210:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11005, "initialValue": {"hexValue": "30", "id": 11004, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "19222:1:32", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "19210:13:32"}, "loopExpression": {"expression": {"id": 11012, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "19262:3:32", "subExpression": {"id": 11011, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11003, "src": "19262:1:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 11013, "nodeType": "ExpressionStatement", "src": "19262:3:32"}, "nodeType": "ForStatement", "src": "19205:7643:32"}, {"assignments": [null, null, 11299, null], "declarations": [null, null, {"constant": false, "id": 11299, "mutability": "mutable", "name": "assetArrayLength", "nodeType": "VariableDeclaration", "scope": 11334, "src": "26962:22:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}, "typeName": {"id": 11298, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "26962:5:32", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "visibility": "internal"}, null], "id": 11306, "initialValue": {"arguments": [{"expression": {"id": 11303, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "27065:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11304, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 81181, "src": "27065:19:32", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "expression": {"expression": {"id": 11300, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "27031:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11301, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "portfolioState", "nodeType": "MemberAccess", "referencedDeclaration": 81171, "src": "27031:21:32", "typeDescriptions": {"typeIdentifier": "t_struct$_PortfolioState_$81216_memory_ptr", "typeString": "struct PortfolioState memory"}}, "id": 11302, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "storeAssets", "nodeType": "MemberAccess", "referencedDeclaration": 52396, "src": "27031:33:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_PortfolioState_$81216_memory_ptr_$_t_address_$returns$_t_bool_$_t_bytes32_$_t_uint8_$_t_uint40_$bound_to$_t_struct$_PortfolioState_$81216_memory_ptr_$", "typeString": "function (struct PortfolioState memory,address) returns (bool,bytes32,uint8,uint40)"}}, "id": 11305, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27031:54:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_bool_$_t_bytes32_$_t_uint8_$_t_uint40_$", "typeString": "tuple(bool,bytes32,uint8,uint40)"}}, "nodeType": "VariableDeclarationStatement", "src": "26885:200:32"}, {"expression": {"arguments": [{"expression": {"id": 11310, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "27150:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11311, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 81181, "src": "27150:19:32", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 11312, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10926, "src": "27183:10:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 11313, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "27207:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11314, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "cashBalance", "nodeType": "MemberAccess", "referencedDeclaration": 81175, "src": "27207:18:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 11307, "name": "BalanceHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 37474, "src": "27095:14:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BalanceHandler_$37474_$", "typeString": "type(library BalanceHandler)"}}, "id": 11309, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setBalanceStorageForNToken", "nodeType": "MemberAccess", "referencedDeclaration": 36831, "src": "27095:41:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint16_$_t_int256_$returns$__$", "typeString": "function (address,uint16,int256)"}}, "id": 11315, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27095:140:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11316, "nodeType": "ExpressionStatement", "src": "27095:140:32"}, {"expression": {"arguments": [{"expression": {"id": 11320, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "27305:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11321, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 81181, "src": "27305:19:32", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 11322, "name": "assetArrayLength", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11299, "src": "27338:16:32", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, {"expression": {"id": 11323, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10937, "src": "27368:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11324, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 81177, "src": "27368:26:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint8", "typeString": "uint8"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11317, "name": "nTokenHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 47854, "src": "27245:13:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenHandler_$47854_$", "typeString": "type(library nTokenHandler)"}}, "id": 11319, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "setArrayLengthAndInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 47287, "src": "27245:46:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint8_$_t_uint256_$returns$__$", "typeString": "function (address,uint8,uint256)"}}, "id": 11325, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27245:159:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11326, "nodeType": "ExpressionStatement", "src": "27245:159:32"}, {"eventCall": {"arguments": [{"arguments": [{"id": 11330, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10926, "src": "27446:10:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 11329, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "27439:6:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint16_$", "typeString": "type(uint16)"}, "typeName": {"id": 11328, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "27439:6:32", "typeDescriptions": {}}}, "id": 11331, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27439:18:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}], "id": 11327, "name": "MarketsInitialized", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 10155, "src": "27420:18:32", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_uint16_$returns$__$", "typeString": "function (uint16)"}}, "id": 11332, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27420:38:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11333, "nodeType": "EmitStatement", "src": "27415:43:32"}]}, "documentation": {"id": 10924, "nodeType": "StructuredDocumentation", "src": "17781:290:32", "text": "@notice Initialize the market for a given currency id, done once a quarter\n @param currencyId currency of markets to initialize\n @param isFirstInit true if this is the first time the markets have been initialized\n @dev emit:MarketsInitialized\n @dev auth:none"}, "functionSelector": "d0e064c0", "id": 11335, "implemented": true, "kind": "function", "modifiers": [], "name": "initializeMarkets", "nodeType": "FunctionDefinition", "parameters": {"id": 10929, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10926, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 11335, "src": "18103:17:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 10925, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "18103:6:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 10928, "mutability": "mutable", "name": "isFirstInit", "nodeType": "VariableDeclaration", "scope": 11335, "src": "18122:16:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 10927, "name": "bool", "nodeType": "ElementaryTypeName", "src": "18122:4:32", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "18102:37:32"}, "returnParameters": {"id": 10930, "nodeType": "ParameterList", "parameters": [], "src": "18149:0:32"}, "scope": 11392, "src": "18076:9389:32", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 11378, "nodeType": "Block", "src": "27616:452:32", "statements": [{"assignments": [11345], "declarations": [{"constant": false, "id": 11345, "mutability": "mutable", "name": "settlementDate", "nodeType": "VariableDeclaration", "scope": 11378, "src": "27682:22:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11344, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "27682:7:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 11354, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 11353, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"expression": {"id": 11348, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "27733:5:32", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 11349, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "27733:15:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11346, "name": "DateTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43368, "src": "27707:8:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_DateTime_$43368_$", "typeString": "type(library DateTime)"}}, "id": 11347, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "getReferenceTime", "nodeType": "MemberAccess", "referencedDeclaration": 42764, "src": "27707:25:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 11350, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27707:42:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"expression": {"id": 11351, "name": "Constants", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 81077, "src": "27752:9:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_Constants_$81077_$", "typeString": "type(library Constants)"}}, "id": 11352, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "QUARTER", "nodeType": "MemberAccess", "referencedDeclaration": 80887, "src": "27752:17:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "27707:62:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "27682:87:32"}, {"expression": {"arguments": [{"id": 11358, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11339, "src": "27816:10:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"id": 11359, "name": "settlementDate", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11345, "src": "27828:14:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 11355, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11337, "src": "27779:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11357, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "setMarketStorageForInitialize", "nodeType": "MemberAccess", "referencedDeclaration": 45994, "src": "27779:36:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_MarketParameters_$81294_memory_ptr_$_t_uint256_$_t_uint256_$returns$__$bound_to$_t_struct$_MarketParameters_$81294_memory_ptr_$", "typeString": "function (struct MarketParameters memory,uint256,uint256)"}}, "id": 11360, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27779:64:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 11361, "nodeType": "ExpressionStatement", "src": "27779:64:32"}, {"expression": {"arguments": [{"expression": {"id": 11365, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11341, "src": "27902:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11366, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 81181, "src": "27902:19:32", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 11367, "name": "currencyId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11339, "src": "27935:10:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, {"expression": {"id": 11368, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11337, "src": "27959:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11369, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maturity", "nodeType": "MemberAccess", "referencedDeclaration": 81281, "src": "27959:15:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 11370, "name": "nToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11341, "src": "27988:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio memory"}}, "id": 11371, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastInitializedTime", "nodeType": "MemberAccess", "referencedDeclaration": 81177, "src": "27988:26:32", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"arguments": [], "expression": {"argumentTypes": [], "expression": {"expression": {"id": 11372, "name": "market", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 11337, "src": "28028:6:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters memory"}}, "id": 11373, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "totalfCash", "nodeType": "MemberAccess", "referencedDeclaration": 81283, "src": "28028:17:32", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11374, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "neg", "nodeType": "MemberAccess", "referencedDeclaration": 66031, "src": "28028:21:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$", "typeString": "function (int256) pure returns (int256)"}}, "id": 11375, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "28028:23:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint16", "typeString": "uint16"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_int256", "typeString": "int256"}], "expression": {"id": 11362, "name": "BitmapAssetsHandler", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 51750, "src": "27854:19:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_BitmapAssetsHandler_$51750_$", "typeString": "type(library BitmapAssetsHandler)"}}, "id": 11364, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "addifCashAsset", "nodeType": "MemberAccess", "referencedDeclaration": 51448, "src": "27854:34:32", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint16_$_t_uint256_$_t_uint256_$_t_int256_$returns$_t_int256_$", "typeString": "function (address,uint16,uint256,uint256,int256) returns (int256)"}}, "id": 11376, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "27854:207:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 11377, "nodeType": "ExpressionStatement", "src": "27854:207:32"}]}, "id": 11379, "implemented": true, "kind": "function", "modifiers": [], "name": "finalizeMarket", "nodeType": "FunctionDefinition", "parameters": {"id": 11342, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11337, "mutability": "mutable", "name": "market", "nodeType": "VariableDeclaration", "scope": 11379, "src": "27504:30:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_memory_ptr", "typeString": "struct MarketParameters"}, "typeName": {"id": 11336, "name": "MarketParameters", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81294, "src": "27504:16:32", "typeDescriptions": {"typeIdentifier": "t_struct$_MarketParameters_$81294_storage_ptr", "typeString": "struct MarketParameters"}}, "visibility": "internal"}, {"constant": false, "id": 11339, "mutability": "mutable", "name": "currencyId", "nodeType": "VariableDeclaration", "scope": 11379, "src": "27544:17:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}, "typeName": {"id": 11338, "name": "uint16", "nodeType": "ElementaryTypeName", "src": "27544:6:32", "typeDescriptions": {"typeIdentifier": "t_uint16", "typeString": "uint16"}}, "visibility": "internal"}, {"constant": false, "id": 11341, "mutability": "mutable", "name": "nToken", "nodeType": "VariableDeclaration", "scope": 11379, "src": "27571:29:32", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_memory_ptr", "typeString": "struct nTokenPortfolio"}, "typeName": {"id": 11340, "name": "nTokenPortfolio", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 81182, "src": "27571:15:32", "typeDescriptions": {"typeIdentifier": "t_struct$_nTokenPortfolio_$81182_storage_ptr", "typeString": "struct nTokenPortfolio"}}, "visibility": "internal"}], "src": "27494:112:32"}, "returnParameters": {"id": 11343, "nodeType": "ParameterList", "parameters": [], "src": "27616:0:32"}, "scope": 11392, "src": "27471:597:32", "stateMutability": "nonpayable", "virtual": false, "visibility": "internal"}, {"body": {"id": 11390, "nodeType": "Block", "src": "28210:49:32", "statements": [{"expression": {"arguments": [{"id": 11387, "name": "nTokenMintAction", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 20288, "src": "28235:16:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_nTokenMintAction_$20288_$", "typeString": "type(library nTokenMintAction)"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_type$_t_contract$_nTokenMintAction_$20288_$", "typeString": "type(library nTokenMintAction)"}], "id": 11386, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "28227:7:32", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": {"id": 11385, "name": "address", "nodeType": "ElementaryTypeName", "src": "28227:7:32", "typeDescriptions": {}}}, "id": 11388, "isConstant": false, "isLValue": false, "isPure": true, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "28227:25:32", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "functionReturnParameters": 11384, "id": 11389, "nodeType": "Return", "src": "28220:32:32"}]}, "documentation": {"id": 11380, "nodeType": "StructuredDocumentation", "src": "28074:77:32", "text": "@notice Get a list of deployed library addresses (sorted by library name)"}, "functionSelector": "c4c96dae", "id": 11391, "implemented": true, "kind": "function", "modifiers": [], "name": "getLibInfo", "nodeType": "FunctionDefinition", "parameters": {"id": 11381, "nodeType": "ParameterList", "parameters": [], "src": "28175:2:32"}, "returnParameters": {"id": 11384, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 11383, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 11391, "src": "28201:7:32", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 11382, "name": "address", "nodeType": "ElementaryTypeName", "src": "28201:7:32", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}], "src": "28200:9:32"}, "scope": 11392, "src": "28156:103:32", "stateMutability": "pure", "virtual": false, "visibility": "external"}], "scope": 11393, "src": "2170:26091:32"}], "src": "41:28221:32"}, "bytecode": "615ed862000027600b82828239805160001a60731461001a57fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063bb6dd58e14610050578063c4c96dae14610072578063d0e064c014610090575b600080fd5b81801561005c57600080fd5b5061007061006b366004615bd9565b6100b0565b005b61007a61011a565b6040516100879190615c8a565b60405180910390f35b81801561009c57600080fd5b506100706100ab366004615bf3565b610132565b604051635db6eac760e11b815273__nTokenMintAction______________________9063bb6dd58e906100e7908490600401615e7d565b60006040518083038186803b1580156100ff57600080fd5b505af4158015610113573d6000803e3d6000fd5b5050505050565b73__nTokenMintAction______________________90565b4261013b6159c4565b61014581856105d7565b80516020015160009067ffffffffffffffff8111801561016457600080fd5b5060405190808252806020026020018201604052801561019e57816020015b61018b615a0d565b8152602001906001900390816101835790505b508251602001519091506101b157600080fd5b83156101c85760208201515151156101c857600080fd5b60006101d783838689896105f0565b905060006101ed8785600001516020015161066c565b90506101f7615a0d565b6000805b86516020015181101561054b57610226610217826001016107d0565b6102208a610879565b9061089a565b602084015283518051600091610259918891908590811061024357fe5b602002602001015184600260ff1601878c6108b3565b905089806102735750816001148015610273575086516002145b806102845750602088015151518210155b806102b257508160011480156102b25750866002815181106102a257fe5b602002602001015160c001516000145b156103595760006102da82876040015185815181106102cd57fe5b6020026020010151610914565b905080856040018181525050610327866040015184815181106102f957fe5b60200260200101518760600151858151811061031157fe5b602002602001015161094990919063ffffffff16565b60c086018190526103535760405162461bcd60e51b815260040161034a90615e46565b60405180910390fd5b5061052d565b8161037e578660018151811061036b57fe5b602002602001015160c00151925061045f565b81600114156103e257610399876103948b610879565b610a09565b9250846060015182815181106103ab57fe5b6020026020010151604001518310156103dd57846060015182815181106103ce57fe5b60200260200101516040015192505b61045f565b60006103f96103f0846107d0565b6102208c610879565b905061041981858a868151811061040c57fe5b6020026020010151610a8f565b93508560600151838151811061042b57fe5b60200260200101516040015184101561045d578560600151838151811061044e57fe5b60200260200101516040015193505b505b600061048b848760600151858151811061047557fe5b6020026020010151610b1790919063ffffffff16565b90506104ad866020015184815181106104a057fe5b6020026020010151610bb2565b8111156104fc576104c7866020015184815181106104a057fe5b90506104dd818760600151858151811061031157fe5b9350836104fc5760405162461bcd60e51b815260040161034a90615d3e565b6105068282610914565b604086018190526001131561051d57600160408601525b5060c0840183905260e084018990525b60c084015160a0850152610542848c8a610bc5565b506001016101fb565b5060006105698760c001518860200151610c0b90919063ffffffff16565b50925050506105818760c001518b8960600151610e4b565b6105948760c00151828960800151610e5b565b7fcffeff9accc9171f01fec36e09a1a06f0160ce50a8c4c0a2adff9cec562adf088a6040516105c39190615e7d565b60405180910390a150505050505050505050565b6105e18282610ece565b6105ea81610f6a565b90915250565b60008082156106135761060285610f89565b64ffffffffff16608088015261063b565b61061d8786610fa5565b61062d8461ffff1686898961107a565b61063887878761110a565b90505b606087015161064a9082611245565b6060880182905291506103e8821361066157600080fd5b505b95945050505050565b610674615a55565b61067c615a55565b61068a8461ffff1684611261565b6020830152815260006106a161ffff861685611296565b9050805167ffffffffffffffff811180156106bb57600080fd5b506040519080825280602002602001820160405280156106e5578160200160208202803683370190505b50604083015260005b8151811015610729576107068282815181106104a057fe5b8360400151828151811061071657fe5b60209081029190910101526001016106ee565b50610733856112c7565b8367ffffffffffffffff8111801561074a57600080fd5b5060405190808252806020026020018201604052801561078457816020015b610771615a7d565b8152602001906001900390816107695790505b50606083015260015b8481116107c45761079e8682611316565b836060015160018303815181106107b157fe5b602090810291909101015260010161078d565b50909150505b92915050565b600081600114156107e557506276a700610874565b81600214156107f8575062ed4e00610874565b816003141561080c57506301da9c00610874565b816004141561082057506303b53800610874565b816005141561083457506309450c00610874565b8160061415610848575063128a1800610874565b816007141561085c57506325143000610874565b60405162461bcd60e51b815260040161034a90615d9b565b919050565b60006276a70082101561088b57600080fd5b6276a700825b06909103919050565b6000828201838110156108ac57600080fd5b9392505050565b6000806108ce6305f5e1006108c88989611330565b9061137e565b6060850181905260808501819052835151602080870151908601519293506108f992919088856113af565b82516040015161090990826114b2565b979650505050505050565b6000633b9aca00821061092657600080fd5b81633b9aca008190036109398583611330565b8161094057fe5b05949350505050565b60008083608001511161095b57600080fd5b633b9aca0082111561096c57600080fd5b825182116109985782516040840151610991919061098b9085906114de565b90611505565b90506107ca565b826020015182116109d05760408301518351602085015160608601516109919392610220928190039161098b918803908590036114de565b6108ac83606001516102208560200151633b9aca000361098b8760600151886080015103886020015188036114de90919063ffffffff16565b6000600383511015610a1a57600080fd5b6108ac83600181518110610a2a57fe5b60200260200101516020015184600281518110610a4357fe5b60200260200101516020015185600181518110610a5c57fe5b602002602001015160c0015186600281518110610a7557fe5b602090810291909101015160c0015162ed4e008701611524565b602081015160c0820151600091906276a7008201828710610aaf57600080fd5b858210610ad857610ace8661022089860361098b8387038c87036114de565b93505050506108ac565b6000610aee88850361098b858a038b86036114de565b9050808711610afe576001610b02565b8087035b9450505050506108ac565b5050509392505050565b600080836080015111610b2957600080fd5b82604001518211610b4b5760408301518351610991919061098b9085906114de565b82606001518211610b835782516040840151606085015160208601516109919392610220928190039161098b918803908590036114de565b6020830151606084015160808501516108ac9291610220918190039061098b908703633b9aca008590036114de565b600080821215610bc157600080fd5b5090565b60006276a700610bd442610879565b019050610be68461ffff851683611582565b6101138260c001518486602001518560800151610c0689604001516115e9565b6115f7565b6000808080808080805b895151811015610c9c5760008a600001518281518110610c3157fe5b60200260200101519050600380811115610c4757fe5b8160a001516003811115610c5757fe5b1415610c6257600080fd5b60028160a001516003811115610c7457fe5b14158015610c8457506060810151155b15610c9357610c938b83611753565b50600101610c15565b5060005b895151811015610d3f5760008a600001518281518110610cbc57fe5b6020026020010151905060026003811115610cd357fe5b8160a001516003811115610ce357fe5b1415610cf757608081015160009055610d36565b60018160a001516003811115610d0957fe5b1415610d2257608081015180610d1f83826118a3565b50505b610d2e818686866119d2565b919650945092505b50600101610ca0565b5060608901516000610d4f611a40565b6001600160a01b038b1660009081526020829052604081209192505b8c6020015151811015610e195760008d602001518281518110610d8a57fe5b60200260200101519050806060015160001415610da75750610e11565b60028160a001516003811115610db957fe5b14158015610dd7575060038160a001516003811115610dd457fe5b14155b610de057600080fd5b610dec818989896119d2565b91995097509550610e0981848760088110610e0357fe5b016118a3565b600185019450505b600101610d6b565b506010831115610e2857600080fd5b64ffffffffff841115610e3a57600080fd5b50939a929950975095509350505050565b610e56838383611a4d565b505050565b63ffffffff8110610e6b57600080fd5b6000610e75611ac1565b6001600160a01b039094166000908152602094909452506040909220805460ff909216600160501b0260ff60501b1963ffffffff909416600160301b0269ffffffff000000000000199093169290921792909216179055565b610edb8161ffff16611ace565b6001600160a01b031660c0830181905260009081908190610efb90611af4565b94509450945050506000610f128660c00151611b5d565b505060808701859052604087018190526001600160d81b0319831660a088015260c0870151909150610f4690846000611bbe565b602087015260c0860151610f5a9086611c51565b6060909601959095525050505050565b610f72615ac2565b6000610f7d83611caa565b90506108ac8382611cbc565b600062015180821015610f9b57600080fd5b6201518082610891565b6000610fb082610879565b905080836080015110610fc257600080fd5b600080610fcf8585611cff565b915091506000806000610ffd8860c001518960000151600001518a608001518a8c6000015160400151611e2e565b9194509250905061100e8385611f86565b60608901519093506110209086611f86565b6060890181905260c08901518951805160409091015161104593909291908787611f9c565b6060890181905260001261105857600080fd5b61106181612067565b64ffffffffff1660809098019790975250505050505050565b6000611089836000015161207b565b9050600061109685610879565b905060015b60208501515151811015611101576110f98786602001516000015183815181106110c157fe5b60200260200101516020015188600087878a88815181106110de57fe5b602002602001015161208f909695949392919063ffffffff16565b60010161109b565b50505050505050565b6000806111278560c0015186600001516000015161ffff166120c6565b60a0860151855191925060011a620f42400290600090156111545761114f856276a7006120fb565b611156565b845b9050600061116384612110565b90505b801561122957600061117c896080015183612135565b905060006111938a6000015160200151838a6121e8565b9050806112095760c08a01518a51516000916111b39161ffff168561228d565b90506000811215611207578a516000906111ce9085886122d2565b9050808711156111e0575060006111ed565b6111ea81886120fb565b90505b6112036111fc83868d856123b2565b8a90612405565b9850505b505b6112158684600061241b565b955061122086612110565b92505050611166565b8751604001516112399086612466565b98975050505050505050565b60006112518383612405565b905060008112156107ca57600080fd5b606080600061126e612488565b60008681526020829052604090209091506112898186612495565b9097909650945050505050565b606060006112a26125db565b60008581526020829052604090209091506112bd8185612495565b9695505050505050565b60006112d16125e8565b61ffff831660009081526020919091526040812091506112ef6125f5565b61ffff93909316600090815260209390935250604090912081548155600191820154910155565b61131e615a7d565b6108ac838361132b6125f5565b612602565b8181026000198314156113605781158061135257508282828161134f57fe5b05145b61135b57600080fd5b6107ca565b82158061137557508183828161137257fe5b05145b6107ca57600080fd5b6000816000191480156113945750600160ff1b83145b1561139e57600080fd5b8183816113a757fe5b059392505050565b84516113be9085858585612659565b156113c857610113565b6040850151156113f55760006113e5866020015186868686612659565b905080156113f35750610113565b505b6113fe82612775565b1561141157600081121561141157600080fd5b6001600160571b0319811280159061143057506001600160571b038113155b61143957600080fd5b8460200151518560400151141561145d57611457856020015161278b565b60208601525b6000856020015186604001518151811061147357fe5b60209081029190910181015161ffff9690961686528501939093526040808501929092526060840152600060a090930192909252500180516001019052565b60006108ac6ec097ce7bc90715b34b9f10000000006108c885600001518561133090919063ffffffff16565b6000826114ed575060006107ca565b828202828482816114fa57fe5b04146108ac57600080fd5b600080821161151357600080fd5b81838161151c57fe5b049392505050565b600081861061153257600080fd5b84821061153e57600080fd5b8383106115645761155d8461022088880361098b8388038b88036114de565b9050610663565b61155d61157b87870361098b8688038a87036114de565b85906120fb565b600061158c612844565b60008481526020828152604080832088830151845282528083208684529091529081902090860151606087015160a088015160c089015160e08a015195965093946115db948694939291612851565b610113818660800151612962565b60006107ca60001983611330565b600080611608878761ffff166120c6565b905060006116146129a8565b6001600160a01b03891660009081526020828152604080832061ffff8c16845282528083208a845290915281209192508061164f888a6129b5565b915091508061165d57600080fd5b6116678583612abd565b156116ea578254600f90810b900b60006116818983611f86565b905061168c81612aed565b8554600f9190910b6001600160801b03166001600160801b03199091161785556116b98d8d8d8585612b17565b806116cd576116ca8785600061241b565b96505b6116dc8d8d61ffff1689612bec565b965061066395505050505050565b8615611744576116f987612aed565b8354600f9190910b6001600160801b03166001600160801b03199091161783556117278b8b8b60008b612b17565b6117338583600161241b565b94506117448b8b61ffff1687612bec565b50949998505050505050505050565b815151811061176157600080fd5b600082606001511161177257600080fd5b60008260000151828151811061178457fe5b602002602001015190506002600381111561179b57fe5b8160a0015160038111156117ab57fe5b141580156117c9575060038160a0015160038111156117c657fe5b14155b6117d257600080fd5b606083018051600019019052600080805b855151811015611845576000866000015182815181106117ff57fe5b6020026020010151905082816080015111801561182c575060028160a00151600381111561182957fe5b14155b1561183c57806080015192508193505b506001016117e3565b508184141561185e575050600260a0919091015261189f565b60008560000151838151811061187057fe5b602090810291909101015160808581018051918301805190915252600160a09182015260029401939093525050505b5050565b815161ffff16158015906118c057508151613fff61ffff90911611155b6118c957600080fd5b816020015160001080156118e65750602082015164ffffffffff10155b6118ef57600080fd5b8160400151600010801561190857506040820151600810155b61191157600080fd5b60608201516001600160571b031913801590611938575060608201516001600160571b0312155b61194157600080fd5b8151815460208401516040850151606090950151600a0b6001600160581b0316600160401b0272ffffffffffffffffffffff00000000000000001960ff909616600160381b0267ff000000000000001964ffffffffff909316620100000266ffffffffff00001961ffff90961661ffff19909516949094179490941692909217169190911792909216919091179055565b6000806000806119e188612c46565b90508415806119ef57508085115b156119f8578094505b8680611a08575060008860600151125b965061ffff861615611a1957600080fd5b50509451939560f09490941b6001600160f01b03191660109390931c929092179350919050565b6000806107ca600d612cad565b6000811215611a5b57600080fd5b6000611a65612cc6565b6001600160a01b03851660009081526020828152604080832061ffff881684529091529020909150611a9683612cd3565b8154600a9190910b6001600160581b0316600160a81b026001600160a81b0390911617905550505050565b6000806107ca6002612cad565b600080611ad9612cfc565b6000938452602052505060409020546001600160a01b031690565b600080600080600080611b05611ac1565b6001600160a01b039097166000908152602097909752505060409094205461ffff81169563ffffffff62010000830481169650600160301b830416945060ff600160501b8304169350600160581b90910460d81b9150565b600080600080611b6b612d09565b6001600160a01b0395909516600090815260209590955250506040909220546bffffffffffffffffffffffff811693600160601b82046001600160801b03169350600160e01b90910463ffffffff169150565b611bc6615aee565b611bce615aee565b60ff8416611bdd5790506108ac565b611be78585612d16565b815260ff841660608201528267ffffffffffffffff81118015611c0957600080fd5b50604051908082528060200260200182016040528015611c4357816020015b611c30615b16565b815260200190600190039081611c285790505b506020820152949350505050565b600080611c5c612cc6565b6001600160a01b03851660009081526020828152604080832061ffff8816845290915281208054600160a81b9004600a90810b900b9450919250831215611ca257600080fd5b505092915050565b611cb2615b5a565b6107ca8242612d22565b611cc4615ac2565b6000611cd38461ffff16612de8565b6040805160808101825261ffff96909616865260ff821660208701528501939093525050606082015290565b600080611d0a615a0d565b60208501515160005b8151811015611e24576000828281518110611d2a57fe5b60200260200101519050611d418160400151612775565b611d4a57600080fd5b6000611d5582612c46565b905087811115611d6457600080fd5b611d7c85836000015161ffff16846020015184612e05565b50600080611d97836060015187612e1990919063ffffffff16565b92509050611da58882611f86565b97505087826020015111611dec5760c0890151825160208401518b5160400151600093611dd8939192909190868e612ec1565b9050611de48782611f86565b965050611e0b565b611e098960c00151836000015184602001518c60800151856115f7565b505b6020890151611e1a9084611753565b5050600101611d13565b5050509250929050565b600080600080611e42898961ffff166120c6565b9050611e4d86610f89565b915086821015611e5c57600080fd5b6000611e6888846129b5565b50905080611e7e57600080945094505050611f7b565b6000611e8983612110565b90505b8015801590611e9b5750818111155b15611f06576000611eac8a83612135565b90506000611ebd8d8d848d8d612eff565b90506000811315611ed957611ed28882611f86565b9750611ee6565b611ee38782611f86565b96505b611ef28584600061241b565b9450611efd85612110565b92505050611e8c565b60005b8115611f67576000611f1b8b84612135565b9050600080611f2a88846129b5565b9150915080611f3857600080fd5b611f448483600161241b565b9350611f528786600061241b565b9650611f5d87612110565b9450505050611f09565b611f768c8c61ffff1683612bec565b505050505b955095509592505050565b818101828112156000831215146107ca57600080fd5b600080611fb383611fad8787611f86565b90611f86565b9050611fbf8882612f97565b91508360001315611fcf57600080fd5b6000831315611fdd57600080fd5b8460001215611ff757611ff08585611f86565b9350612004565b6120018584611f86565b92505b600084612010856115e9565b121561201d575082612029565b612026856115e9565b90505b600081121561205b576020890151895160009161204b916108c8908590611330565b905061205989898385612fd6565b505b50509695505050505050565b600064ffffffffff821115610bc157600080fd5b6060015161012c60089190911c60ff160290565b61209c8787878685613118565b6120b58760e001518860a001518960c0015185886131d3565b60c090970196909652505050505050565b6000806120d161325b565b6001600160a01b038516600090815260209182526040808220868352909252205491505092915050565b60008282111561210a57600080fd5b50900390565b60008161211f57506000610874565b61212882613268565b60ff036001019050919050565b60008161214157600080fd5b61010082111561215057600080fd5b600061215b84610f89565b90506000605a841161217657506201518083020190506107ca565b6087841161219e575060591983016207e900908102908206909103016276a7000190506107ca565b60c384116121c75750608619830162278d00908102908206909103016301da9c000190506107ca565b5060c21983016276a70090810290820690910301630b1fa8000190506107ca565b60008084116122095760405162461bcd60e51b815260040161034a90615d6c565b600784111561222a5760405162461bcd60e51b815260040161034a90615deb565b6276a70083061561223d575060006108ac565b600061224883610879565b905060015b85811161228157612267612260826107d0565b839061089a565b851415612279576001925050506108ac565b60010161224d565b50600095945050505050565b6000806122986129a8565b6001600160a01b03861660009081526020918252604080822087835283528082208683529092522054600f90810b900b9150509392505050565b60008060006122e686602001518686613301565b9150915060006122f58761207b565b90508161231557865161230e9061ffff16878388613390565b9350610b0d565b600061232086610879565b90506000612330612260866107d0565b905060006123488a6000015161ffff1683868b613390565b905060008087600114156123665750506040808b0151015188612395565b61237c61237560018a036107d0565b869061089a565b90506123928c6000015161ffff1682888d613390565b91505b6123a2818584868f611524565b9c9b505050505050505050505050565b6000846123c1575060006123fd565b60006123cd85856120fb565b905060006123db828561342f565b9050633b9aca008113156123ee57600080fd5b6123f8878261349c565b925050505b949350505050565b808203828113156000831215146107ca57600080fd5b60006001831015801561243057506101008311155b61243957600080fd5b81156124525750600160ff1b60001983011c83176108ac565b50600160ff1b60001983011c1983166108ac565b81516000906108ac906108c8846ec097ce7bc90715b34b9f1000000000611330565b6000806107ca6004612cad565b6060806000808467ffffffffffffffff811180156124b257600080fd5b506040519080825280602002602001820160405280156124dc578160200160208202803683370190505b50905060008567ffffffffffffffff811180156124f857600080fd5b50604051908082528060200260200182016040528015612522578160200160208202803683370190505b50905060005b868110156125cc578784600e811061253c57fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff1683828151811061256a57fe5b60209081029190910101526001909301928784600e811061258757fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff168282815181106125b557fe5b602090810291909101015260019384019301612528565b509093509150505b9250929050565b6000806107ca6005612cad565b6000806107ca601c612cad565b6000806107ca601b612cad565b61260a615a7d565b6000612615846134b5565b61ffff86166000908152602085905260408120919250906004861061263b57600161263e565b60005b60ff166002811061264b57fe5b015490506112bd82826134ee565b6000805b865181101561276857600087828151811061267457fe5b6020026020010151905084816040015114158061269d57508661ffff16816000015161ffff1614155b806126ac575085816020015114155b156126b75750612760565b60028160a0015160038111156126c957fe5b141580156126e7575060038160a0015160038111156126e457fe5b14155b6126f057600080fd5b60608101516000906127029086611f86565b905061270d86612775565b1561272057600081121561272057600080fd5b6001600160571b0319811280159061273f57506001600160571b038113155b61274857600080fd5b6060820152600160a090910181905291506106639050565b60010161265d565b5060009695505050505050565b6000600282108015906107ca5750506008101590565b6060600082516000146127a25782516002026127a5565b60015b905060008167ffffffffffffffff811180156127c057600080fd5b506040519080825280602002602001820160405280156127fa57816020015b6127e7615b16565b8152602001906001900390816127df5790505b50905060005b845181101561283c5784818151811061281557fe5b602002602001015182828151811061282957fe5b6020908102919091010152600101612800565b509392505050565b6000806107ca600a612cad565b6000851215801561286957506001600160501b038513155b61287257600080fd5b6000841215801561288a57506001600160501b038413155b61289357600080fd5b8260001080156128a7575063ffffffff8311155b6128b057600080fd5b8160001080156128c4575063ffffffff8211155b6128cd57600080fd5b63ffffffff8111156128de57600080fd5b85546001600160501b0319166001600160501b039586161769ffffffffffffffffffff60501b1916600160501b94909516939093029390931763ffffffff60a01b1916600160a01b63ffffffff928316021763ffffffff60c01b1916600160c01b93821693909302929092176001600160e01b0316600160e01b9190921602179055565b6000811215801561297a57506001600160501b038113155b61298357600080fd5b60019190910180546001600160501b0319166001600160501b03909216919091179055565b6000806107ca600c612cad565b60008060006129c385610f89565b9050620151808406156129dd5760008092509250506125d4565b8381106129f15760008092509250506125d4565b6201518081850304605a8111612a0e579250600191506125d49050565b6101688111612a4d576000620151806207e900840604820160591901905060068104605a0160068281612a3d57fe5b06600014945094505050506125d4565b6108708111612a7d5760006201518062278d00840604820161016719019050601e8104608701601e8281612a3d57fe5b611de28111612aad576000620151806276a700840604820161086f19019050605a810460c301605a8281612a3d57fe5b5061010095600095509350505050565b600060018210158015612ad257506101008211155b612adb57600080fd5b50600019011b600160ff1b9081161490565b600060016001607f1b03198212801590612b0e575060016001607f1b038213155b610bc157600080fd5b6000612b23838361360d565b905080612b305750610113565b6000612b3a613694565b61ffff87166000908152602082815260408083208984529091528120549192506001600160501b03909116810390612b728285612405565b90506000811315612b8257600080fd5b612b9b612b96612b91836115e9565b610bb2565b6136a1565b61ffff89166000908152602085815260408083208b8452909152902080546001600160501b0319166001600160501b0392909216919091179055612be1898989876136b7565b505050505050505050565b6014612bf782613741565b1115612c155760405162461bcd60e51b815260040161034a90615dc2565b6000612c1f61325b565b6001600160a01b039094166000908152602094855260408082209482529390945250912055565b6000808260400151118015612c6057506040820151600810155b612c6957600080fd5b6040820151600210612c8057506020810151610874565b6000612c9260018460400151036107d0565b60208401519091506108ac906276a7009061022090846120fb565b6000620f4240826026811115612cbf57fe5b0192915050565b6000806107ca6006612cad565b60006001600160571b03198212801590612b0e57506001600160571b03821315610bc157600080fd5b6000806107ca6003612cad565b6000806107ca6011612cad565b606061283c8383613811565b612d2a615b5a565b6000612d3584613832565b90508281600001511015612d7457600080612d4f866138fa565b9050612d5d86848388613977565b9093509150612d6d868385613a1b565b5050612d81565b80518314612d8157600080fd5b6040518060600160405280612daf612daa8460a001518560c001516114de90919063ffffffff16565b613c4c565b8152602001612dd2612daa8460a001518560e001516114de90919063ffffffff16565b8152602001826060015181525091505092915050565b600080612df3613c62565b60009384526020525050604090205490565b612e13848484600185613118565b50505050565b60008082612e2c575060009050806125d4565b60008313612e3957600080fd5b612e5884608001516108c885876060015161133090919063ffffffff16565b9150612e7984608001516108c885876040015161133090919063ffffffff16565b6080850151909150612e8b9084611245565b60808501526040840151612e9f9082611245565b60408501526060840151612eb39083611245565b60608501526125d484613c6f565b600080612ecf868685613cc7565b90506000612ede898387613cf0565b90935090506001600160a01b0388161561205b5761205b8888888885613d58565b600080612f0a6129a8565b6001600160a01b03881660009081526020828152604080832061ffff8b1684528252808320898452909152902054909150600f90810b900b612f5084898989858a612ec1565b6001600160a01b0390981660009081526020928352604080822061ffff90991682529783528781209681529590915250505091902080546001600160801b03191690555090565b600080821215612fd057612fcb6001612fc585602001516108c887600001518761133090919063ffffffff16565b90612405565b6108ac565b50919050565b6000612fe0613e4a565b61ffff8516600090815260209190915260409020805490915064ffffffffff16421461300b57600080fd5b8054600160f81b900460ff1661302057600080fd5b600181015460009061303b906001600160581b031685611f86565b825490915060009061305d90600160281b90046001600160581b031685611f86565b9050816009191280156130705750600082125b1561307a57600091505b8060091912801561308b5750600081125b15613094575060005b6130a56130a083610bb2565b613e57565b6001840180546affffffffffffffffffffff19166001600160581b03929092169190911790556130d76130a082610bb2565b83546001600160581b0391909116600160281b026fffffffffffffffffffffff00000000001990911617835561310f87878688613e6d565b61110183613f81565b6000613122612844565b6000868152602082815260408083208884528252808320868452825291829020808a5290890187905280546001600160501b03808216938b0193909352600160501b810490921660608a015263ffffffff600160a01b8304811660a08b0152600160c01b8304811660c08b0152600160e01b90920490911660e08901529091508084156131c15760018201546001600160501b031660808901526131c9565b600060808901525b5050505050505050565b60008083116131e157600080fd5b818611156131f0575083610663565b60006131fc83886120fb565b90508381111561320f5785915050610663565b600061321b8286614046565b9050600061322d633b9aca00836120fb565b905061324e633b9aca0061098b6132448a856114de565b6102208c876114de565b9998505050505050505050565b6000806107ca600b612cad565b60008161327457600080fd5b600160801b821061328757608091821c91015b600160401b821061329a57604091821c91015b64010000000082106132ae57602091821c91015b6201000082106132c057601091821c91015b61010082106132d157600891821c91015b601082106132e157600491821c91015b600482106132f157600291821c91015b6002821061087457600101919050565b6000806000851161331157600080fd5b600785111561331f57600080fd5b600061332a84610879565b905060015b86811161338257600061334b613344836107d0565b849061089a565b90508681141561336357509250600091506133889050565b8681111561337957509250600191506133889050565b5060010161332f565b50600080fd5b935093915050565b60008061339b612844565b905060006276a7006133ac85610879565b6000898152602085815260408083208b84528252808320949093018083529390522080549192509063ffffffff600160a01b8204811691600160c01b8104821691600160e01b90910416816134135760405162461bcd60e51b815260040161034a90615d0e565b6134208184848c8c6131d3565b9b9a5050505050505050505050565b60008061344c6134476301da9c0061098b86886114de565b61405f565b905061345e81621dcd6560491b61407d565b905061347161346c826140d0565b6140f2565b905061348381621dcd6560491b614147565b905060006134908261417d565b60070b95945050505050565b60006108ac6134ab8484611330565b633b9aca0061137e565b6000816000106134c457600080fd5b60078211156134d257600080fd5b600482106134e357600482036134e5565b815b60080292915050565b6134f6615a7d565b6064633b9aca008360ff86166020811061350c57fe5b1a028161351557fe5b0481526064633b9aca008360ff86166001016020811061353157fe5b1a028161353a57fe5b0481602001818152505061355f8260028560ff16016020811061355957fe5b1a614186565b60808201819052610100908360ff86166003016020811061357c57fe5b1a028161358557fe5b0460408201526080810151610100908360ff8616600401602081106135a657fe5b1a02816135af57fe5b0460608201526207a1208260ff8516600501602081106135cb57fe5b1a0260a0820152622625a08260ff8516600601602081106135e857fe5b1a0260c08201528160ff84166007016020811061360157fe5b1a60e082015292915050565b60008183148061362a57506000831215801561362a575060008212155b15613637575060006107ca565b600083131580156136485750816000125b156136545750816107ca565b600082131580156136655750826000125b1561367357610991826115e9565b60008313158015613685575060008213155b1561004b576109918383612405565b6000806107ca6020612cad565b60006001600160501b03821115610bc157600080fd5b6000806136c58585856141ba565b9150915060008060008512156136dd578791506136e0565b50865b806001600160a01b0316826001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161372f929190615cdb565b60405180910390a45050505050505050565b600181901c7f5555555555555555555555555555555555555555555555555555555555555555908116911601600281901c7f3333333333333333333333333333333333333333333333333333333333333333908116911601600481901c7f07070707070707070707070707070707070707070707070707070707070707079190911601600881901c7e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f908116911601601081901c01602081901c01604081901c01608081901c60ff90811691160190565b60608061381e848461429f565b9150613829826143b7565b90509250929050565b61383a615b7b565b6000613844613e4a565b61ffff93841660009081526020918252604090819020805464ffffffffff81168652600160281b81046001600160581b03908116948701949094526001820154841692860192909252600160d81b820463ffffffff166060860152600160801b9091049091166080840152600201546001600160501b0380821660a0850152600160501b8204811660c0850152600160a01b82041660e0840152600160f01b900460ff1661012c02909216610100820152919050565b60008061390683614578565b6001600160a01b031663ef81f2166040518163ffffffff1660e01b81526004016040805180830381600087803b15801561393f57600080fd5b505af1158015613953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fd9190615c2d565b61397f615b7b565b600080600061398f8886896145a8565b60c08b019290925260e08a0192909252602089015191935091506139b3908361089a565b60208801526080870151600090156139e15760808801516139de906139d889826120fb565b906146b3565b90505b613a016139f6670de0b6b3a76400008361089a565b60a08a0151906146ca565b60a089015250506080860194909452505082529092909150565b6000613a25613e4a565b60008561ffff1681526020019081526020016000209050613a498260000151612067565b815464ffffffffff191664ffffffffff9190911617815560a0820151613a6e906136a1565b6002820180546001600160501b0319166001600160501b039290921691909117905560c0820151613a9e906136a1565b81600201600a6101000a8154816001600160501b0302191690836001600160501b03160217905550613ad38260e001516136a1565b8160020160146101000a8154816001600160501b0302191690836001600160501b03160217905550613b088260200151613e57565b81546001600160581b0391909116600160281b026fffffffffffffffffffffff0000000000199091161781556040820151613b4290613e57565b6001820180546affffffffffffffffffffff19166001600160581b03929092169190911790556080820151613b7690613e57565b81546001600160581b0391909116600160801b026affffffffffffffffffffff60801b199091161781556060820151613bae906146e7565b815463ffffffff91909116600160d81b0263ffffffff60d81b199091161781558215613bfa576000613bdf84613c4c565b9050613beb85826146fa565b613bf8610fee8683614731565b505b8361ffff167fef25641e225e493886510ca1ad6584fa7b442b9fea820a29d1de3ce27d270fd28360a001518460c001518560e00151604051613c3e93929190615e8c565b60405180910390a250505050565b60006001600160ff1b03821115610bc157600080fd5b6000806107ca6009612cad565b6000613c7a826147b1565b905060008160000160189054906101000a900463ffffffff169050613cb982846040015185606001518660a001518563ffffffff168860e00151612851565b610e56828460800151612962565b613ccf615b5a565b6000613cdb85856147b5565b90925090508061283c57610663858585614848565b600080613cfd8484612466565b9150613d098483612f97565b9050600082121561338857613d4e6001612fc587600001516108c88960200151613d488a602001516108c88c600001518b61133090919063ffffffff16565b90611330565b9150935093915050565b6000613d6485856149e1565b90506000831215613d7657600160401b175b60006001600160a01b038716337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6284613dae886149ff565b604051613dbc929190615d00565b60405180910390a46000613dd36000841287614a20565b9050806001600160a01b03166323de66516105e789613df1876149ff565b6040518463ffffffff1660e01b8152600401613e0f93929190615c9e565b600060405180830381600087803b158015613e2957600080fd5b505af1158015613e3d573d6000803e3d6000fd5b5050505050505050505050565b6000806107ca601d612cad565b60006001600160581b03821115610bc157600080fd5b6000613e77614a80565b61ffff8516600090815260209190915260408120546001600160a01b03169150613e9f614a8d565b61ffff8616600090815260209190915260409081902054905163ad1c095d60e01b81526001600160a01b039091169150819063ad1c095d90613ee79089908790600401615cc2565b600060405180830381600087803b158015613f0157600080fd5b505af1158015613f15573d6000803e3d6000fd5b505060405163ad1c095d60e01b81526001600160a01b038516925063ad1c095d9150613f479089908890600401615cc2565b600060405180830381600087803b158015613f6157600080fd5b505af1158015613f75573d6000803e3d6000fd5b50505050505050505050565b80546002820154600091613fbd91600160281b9091046001600160581b031690613d48906001600160501b03600160501b820481169116611330565b60018301546002840154919250600091613ff7916001600160581b031690613d48906001600160501b03600160a01b820481169116611330565b835490915060009061402e9060016001600160581b03600160801b909204821601166ec097ce7bc90715b34b9f1000000000611330565b90508061403b8484612405565b1315612e1357600080fd5b60006108ac61405984633b9aca006114de565b83611505565b6000677fffffffffffffff82111561407657600080fd5b5060401b90565b600081600f0b6000141561409057600080fd5b600082600f0b604085600f0b901b816140a557fe5b05905060016001607f1b031981128015906140c7575060016001607f1b038113155b6108ac57600080fd5b6000600f82900b60016001607f1b031914156140eb57600080fd5b5060000390565b6000600160461b82600f0b1261410757600080fd5b683fffffffffffffffff1982600f0b121561412457506000610874565b6107ca608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d614a9a565b6000600f83810b9083900b0260401d60016001607f1b031981128015906140c7575060016001607f1b038113156108ac57600080fd5b600f0b60401d90565b60008160ff166096106141a15760ff8216622625a0026107ca565b5060951960ff919091160162e4e1c00263165a0bc00190565b6040805160028082526060828101909352829160009181602001602082028036833701905050905060006141ee87876149e1565b905080826000815181106141fe57fe5b602002602001018181525050600160401b81178260018151811061421e57fe5b602090810291909101015260408051600280825260608201909252600091816020016020820280368337019050509050614257866149ff565b8160008151811061426457fe5b602002602001018181525050614279866149ff565b8160018151811061428657fe5b6020908102919091010152919791965090945050505050565b606060088260ff1611156142b257600080fd5b60006142bc611a40565b6001600160a01b038516600090815260208290526040812091925060ff851667ffffffffffffffff811180156142f157600080fd5b5060405190808252806020026020018201604052801561432b57816020015b614318615b16565b8152602001906001900390816143105790505b50905060005b8560ff1681101561066157600083826008811061434a57fe5b019050600083838151811061435b57fe5b602090810291909101810151835461ffff8116825264ffffffffff620100008204169282019290925260ff600160381b8304166040820152600160401b909104600a90810b900b60608201526080019190915250600101614331565b80516060908067ffffffffffffffff811180156143d357600080fd5b506040519080825280602002602001820160405280156143fd578160200160208202803683370190505b50915060005b8181101561445a57600084828151811061441957fe5b6020026020010151905061443a81600001518260200151836040015161554a565b84838151811061444657fe5b602090810291909101015250600101614403565b5060015b8181101561457157805b6000811180156144a0575083818151811061447f57fe5b602002602001015184600183038151811061449657fe5b6020026020010151115b15614568578381815181106144b157fe5b60200260200101518460018303815181106144c857fe5b60200260200101518560018403815181106144df57fe5b602002602001018684815181106144f257fe5b602002602001018281525082815250505084818151811061450f57fe5b602002602001015185600183038151811061452657fe5b602002602001015186600184038151811061453d57fe5b6020026020010187848151811061455057fe5b60209081029190910101919091525260001901614468565b5060010161445e565b5050919050565b600080614583615573565b61ffff939093166000908152602093909352505060409020546001600160a01b031690565b6000806000806000806145bb8988615580565b895190955091935091506000906145e2906145d7908b906120fb565b633b9aca00906114de565b905061461c6146116301da9c006145f985856114de565b8161460057fe5b670de0b6b3a764000091900461089a565b60e08a0151906146ca565b965061463e6146336301da9c006145f987856114de565b60c08a0151906146ca565b9550818314156146555750600093506146aa915050565b600061467761466c6301da9c006145f987866114de565b60e08b0151906146ca565b9050600061468589836120fb565b90506146a28861098b838d604001516114de90919063ffffffff16565b965050505050505b93509350935093565b60006108ac61405984670de0b6b3a76400006114de565b60006108ac6146d984846114de565b670de0b6b3a7640000611505565b600063ffffffff821115610bc157600080fd5b600081121561470857600080fd5b6000614716610fee84611c51565b90506147228183611f86565b9050610e56610fee8483611a4d565b600061473b614a80565b61ffff8416600090815260209190915260409081902054905163ad1c095d60e01b81526001600160a01b039091169150819063ad1c095d906147839087908690600401615cc2565b600060405180830381600087803b15801561479d57600080fd5b505af11580156131c9573d6000803e3d6000fd5b5190565b6147bd615b5a565b6000806147c861561b565b61ffff861660009081526020828152604080832088845290915290208054600160f01b900460ff169350909150821561483f5780546001600160501b03600160a01b820481169161481a9116826114de565b8552815461483890600160501b90046001600160501b0316826114de565b6020860152505b50509250929050565b614850615b5a565b61485a8483612d22565b9050600061486785613832565b9050600061487361561b565b61ffff871660009081526020828152604080832089845290915290209091508561489c57600080fd5b825185146148a957600080fd5b846000106148b657600080fd5b848611156148c357600080fd5b83516000126148d157600080fd5b83602001516000126148e257600080fd5b6148ef8360a001516136a1565b81546001600160501b0391909116600160a01b0269ffffffffffffffffffff60a01b1990911617815560c0830151614926906136a1565b81546001600160501b0319166001600160501b039190911617815560e083015161494f906136a1565b815460ff60f01b196001600160501b0392909216600160501b0269ffffffffffffffffffff60501b199091161716600160f01b178155614990878786615628565b858761ffff167f29fd83c1093c9721d6046038c76b6bddf0dc0c5dac3ecbfa23f8eb994ec61613866000015187602001516040516149cf929190615d00565b60405180910390a35050509392505050565b67ffff000000000000603083901b16600882901b1760011792915050565b600080821215614a1957614a12826115e9565b9050610874565b5080610874565b600082614a5257614a2f614a80565b61ffff8316600090815260209190915260409020546001600160a01b03166108ac565b614a5a614a8d565b61ffff8316600090815260209190915260409020546001600160a01b0316905092915050565b6000806107ca6021612cad565b6000806107ca6022612cad565b6000600160461b82600f0b12614aaf57600080fd5b683fffffffffffffffff1982600f0b1215614acc57506000610874565b6001607f1b60006780000000000000008416600f0b1315614afe5770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315614b2b577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315614b58577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b1315614b855770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b1315614bb2577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b1315614bdf57700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b1315614c0c5770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600083600160381b16600f0b1315614c3557700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b1315614c615770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b1315614c8d577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b1315614cb957700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b1315614ce5577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b1315614d1157700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b1315614d3d5770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b1315614d69577001000162e525ee054754457d59952920260260801c5b600083600160301b16600f0b1315614d925770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b1315614dbd577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b1315614de857700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b1315614e135770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b1315614e3e57700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b1315614e695770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315614e94577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b1315614ebf57700100000162e430e5a18f6119e3c02282a50260801c5b600083600160281b16600f0b1315614ee8577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b1315614f1257700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b1315614f3c5770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b1315614f66577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b1315614f905770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315614fba577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b1315614fe457700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b131561500e5770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b131561503857700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b13156150615770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b131561508a577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b13156150b357700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b13156150dc577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b131561510557700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b131561512e5770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b1315615157577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b13156151805770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b13156151a8577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b13156151d057700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b13156151f85770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b131561522057700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b13156152485770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315615270577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b131561529857700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b13156152c0577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b13156152e757700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b131561530e5770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b1315615335577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b131561535c5770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315615383577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b13156153aa57700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156153d15770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b13156153f857700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b131561541e5770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b1315615444577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b131561546a57700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b1315615490577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b13156154b657700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156154dc5770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315615502577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b13156155285770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b038111156107ca57600080fd5b67ffff000000000000603084901b1665ffffffffff00600884901b161760ff8216179392505050565b6000806107ca601f612cad565b6000806000806000856020015111156155cd576155ca6155b18660c0015187602001516114de90919063ffffffff16565b60e087015160408801516155c4916114de565b90614046565b90505b60006155d887615780565b90506155e48183610949565b945081156155fb576155f8818660016157b3565b93505b6020860151156156125761560f858361582b565b92505b50509250925092565b6000806107ca601e612cad565b6000615632613694565b61ffff851660009081526020828152604080832087845290915281208054929350916001600160501b03169003615667615a0d565b6156778161ffff89168880612e05565b6080810151156156995760405162461bcd60e51b815260040161034a90615e1b565b60006156ad866156a8856115e9565b612466565b905060006156c36156be8886615844565b6115e9565b90506156d36105e78a8385612fd6565b84546001600160501b03600160501b82048116600090810392600160a01b9004909116908212806157045750806000125b156157485760006157158a84612466565b905060006157238383611f86565b90508060001215615738576157388d826146fa565b6157458d8d8685856158a0565b50505b50505061ffff909716600090815260209485526040808220978252969094525050509190912080546001600160f01b03191690555050565b615788615a7d565b60006157926125f5565b61ffff84166000908152602091909152604081205491506108ac90826134ee565b6000806157d2606461098b8760e00151876114de90919063ffffffff16565b90508460a001518110156157e7575060a08401515b8460c001518111156157fa575060c08401515b82156158115761580a848261089a565b915061283c565b83811161582057808403610663565b506000949350505050565b60006108ac61583a84846114de565b633b9aca00611505565b6000816000131580156158575750600a82125b15615864575060006107ca565b6000821261587157600080fd5b6108ac6001612fc585602001516108c86ec097ce7bc90715b34b9f10000000008761133090919063ffffffff16565b6000600160401b6158b187876149e1565b17905060006105e7337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62846158e5896149ff565b6040516158f3929190615d00565b60405180910390a46159086105e78785614731565b6000821315615921576159216105e7610fee8885615929565b505050505050565b6000615933614a80565b61ffff8416600090815260209190915260408120546001600160a01b0316915082121561595e579293925b806001600160a01b03166323de66518686615978866149ff565b6040518463ffffffff1660e01b815260040161599693929190615c9e565b600060405180830381600087803b1580156159b057600080fd5b505af1158015612be1573d6000803e3d6000fd5b6040518060e001604052806159d7615ac2565b81526020016159e4615aee565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b60405180610100016040528060008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160808101825260008082526020820152908101615ae1615b5a565b8152600060209091015290565b6040518060800160405280606081526020016060815260200160008152602001600081525090565b6040518060c00160405280600061ffff1681526020016000815260200160008152602001600081526020016000815260200160006003811115615b5557fe5b905290565b60405180606001604052806000815260200160008152602001600081525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803561ffff8116811461087457600080fd5b600060208284031215615bea578081fd5b6108ac82615bc7565b60008060408385031215615c05578081fd5b615c0e83615bc7565b915060208301358015158114615c22578182fd5b809150509250929050565b60008060408385031215615c3f578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b83811015615c7f57815187529582019590820190600101615c63565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b600060408252615cee6040830185615c50565b82810360208401526106638185615c50565b918252602082015260400190565b60208082526016908201527513585c9ad95d081b9bdd081a5b9a5d1a585b1a5e995960521b604082015260600190565b6020808252601490820152734f7261636c652072617465206f766572666c6f7760601b604082015260600190565b60208082526015908201527410d1ce881b9bc81b585c9ad95d1cc81b1a5cdd1959605a1b604082015260600190565b6020808252600d908201526c092dcecc2d8d2c840d2dcc8caf609b1b604082015260600190565b6020808252600f908201526e4f766572206d61782061737365747360881b604082015260600190565b60208082526016908201527510d1ce881b585c9ad95d081a5b99195e08189bdd5b9960521b604082015260600190565b6020808252601190820152704d75737420696e6974206d61726b65747360781b604082015260600190565b60208082526017908201527f494d3a20696d706c6965642072617465206661696c6564000000000000000000604082015260600190565b61ffff91909116815260200190565b928352602083019190915260408201526060019056fea2646970667358221220f3f6f31530a0cb0968856e4b2640697c8fe597ca32c859acfa6fe318d53dfb0264736f6c63430007060033", "bytecodeSha1": "3124df4c29f9d2b3616b8d6dfa93699c11bdc056", "compiler": {"evm_version": "istanbul", "optimizer": {"enabled": true, "runs": 200}, "version": "0.7.6+commit.7338295f"}, "contractName": "InitializeMarketsAction", "coverageMap": {"branches": {"106": {"ABDKMath64x64.div": {"659": [6751, 6757, true], "660": [6817, 6836, false], "661": [6840, 6859, true]}, "ABDKMath64x64.exp": {"663": [21409, 21433, true], "664": [21457, 21482, false]}, "ABDKMath64x64.exp_2": {"667": [14708, 14732, true], "668": [14756, 14781, false], "669": [14873, 14899, false], "670": [14977, 15003, false], "671": [15081, 15107, false], "672": [15185, 15211, false], "673": [15289, 15314, false], "674": [15392, 15417, false], "675": [15495, 15520, false], "676": [15598, 15623, false], "677": [15701, 15725, false], "678": [15803, 15827, false], "679": [15905, 15929, false], "680": [16007, 16031, false], "681": [16109, 16132, false], "682": [16210, 16233, false], "683": [16311, 16334, false], "684": [16412, 16435, false], "685": [16513, 16535, false], "686": [16613, 16635, false], "687": [16713, 16735, false], "688": [16813, 16835, false], "689": [16913, 16934, false], "690": [17012, 17033, false], "691": [17111, 17132, false], "692": [17210, 17231, false], "693": [17309, 17329, false], "694": [17407, 17427, false], "695": [17505, 17525, false], "696": [17603, 17623, false], "697": [17701, 17720, false], "698": [17798, 17817, false], "699": [17895, 17914, false], "700": [17992, 18011, false], "701": [18089, 18107, false], "702": [18185, 18203, false], "703": [18281, 18299, false], "704": [18377, 18395, false], "705": [18473, 18490, false], "706": [18568, 18585, false], "707": [18663, 18680, false], "708": [18758, 18775, false], "709": [18853, 18869, false], "710": [18947, 18963, false], "711": [19041, 19057, false], "712": [19135, 19151, false], "713": [19229, 19244, false], "714": [19322, 19337, false], "715": [19415, 19430, false], "716": [19508, 19523, false], "717": [19601, 19615, false], "718": [19693, 19707, false], "719": [19785, 19799, false], "720": [19877, 19891, false], "721": [19969, 19982, false], "722": [20060, 20073, false], "723": [20151, 20164, false], "724": [20242, 20255, false], "725": [20333, 20345, false], "726": [20423, 20435, false], "727": [20513, 20525, false], "728": [20603, 20615, false], "729": [20693, 20704, false], "730": [20782, 20793, false], "731": [20871, 20882, false], "732": [20960, 20971, false], "733": [21096, 21125, true]}, "ABDKMath64x64.fromUInt": {"658": [2004, 2027, true]}, "ABDKMath64x64.mul": {"665": [4307, 4326, false], "666": [4330, 4349, true]}, "ABDKMath64x64.neg": {"662": [8667, 8681, true]}}, "107": {"Bitmap.getMSB": {"747": [2267, 2273, true], "748": [2315, 2355, false], "749": [2428, 2452, false], "750": [2523, 2539, false], "751": [2610, 2622, false], "752": [2693, 2703, false], "753": [2772, 2781, false], "754": [2850, 2858, false], "755": [2927, 2935, false]}, "Bitmap.getNextBitNum": {"741": [3349, 3363, false]}, "Bitmap.isBitSet": {"745": [815, 825, false], "746": [829, 841, true]}, "Bitmap.setBit": {"742": [442, 452, false], "743": [456, 468, true], "744": [513, 518, false]}}, "108": {}, "109": {"SafeInt256.abs": {"942": [1734, 1739, false]}, "SafeInt256.add": {"927": [1528, 1556, true]}, "SafeInt256.div": {"925": [1125, 1132, false], "926": [1136, 1152, true]}, "SafeInt256.mul": {"920": [514, 521, false], "921": [532, 538, true], "922": [542, 552, true], "923": [577, 583, true], "924": [587, 597, true]}, "SafeInt256.negChange": {"933": [3785, 3797, true], "934": [3802, 3812, false], "935": [3816, 3824, false], "936": [3849, 3859, false], "937": [3863, 3870, false], "938": [4077, 4085, false], "939": [4089, 4098, false], "940": [4311, 4321, false], "941": [4325, 4333, false]}, "SafeInt256.sub": {"928": [1402, 1430, true]}, "SafeInt256.subNoNeg": {"919": [1902, 1908, true]}, "SafeInt256.toInt128": {"929": [3180, 3209, false], "930": [3213, 3242, true]}, "SafeInt256.toInt88": {"931": [2980, 3008, false], "932": [3012, 3040, true]}, "SafeInt256.toUint": {"918": [2490, 2496, true]}}, "110": {"SafeUint256.add": {"943": [485, 491, true]}, "SafeUint256.div": {"946": [1883, 1888, true]}, "SafeUint256.mul": {"944": [1237, 1243, false], "945": [1298, 1308, true]}, "SafeUint256.sub": {"948": [873, 879, true]}, "SafeUint256.toInt": {"950": [4748, 4778, true]}, "SafeUint256.toUint32": {"952": [3344, 3365, true]}, "SafeUint256.toUint40": {"947": [3483, 3504, true]}, "SafeUint256.toUint80": {"949": [4043, 4064, true]}, "SafeUint256.toUint88": {"951": [4182, 4203, true]}}, "156": {}, "163": {}, "165": {}, "167": {}, "171": {}, "172": {}, "173": {}, "174": {}, "175": {}, "177": {}, "183": {}, "185": {}, "22": {}, "32": {"InitializeMarketsAction._calculateNetPrimeCashAvailable": {"647": [11453, 11464, false], "648": [12362, 12403, true]}, "InitializeMarketsAction._calculatefCashAmountFromUtilization": {"649": [17046, 17093, true]}, "InitializeMarketsAction._getSixMonthImpliedRate": {"650": [12989, 13016, true]}, "InitializeMarketsAction._interpolateFutureRate": {"651": [14133, 14161, true], "652": [14343, 14364, false], "653": [15314, 15330, true]}, "InitializeMarketsAction._settleNTokenLiquidityTokens": {"655": [4972, 5018, true], "656": [5195, 5218, true], "657": [5863, 5890, false]}, "InitializeMarketsAction._settleNTokenPortfolio": {"654": [7575, 7617, true]}, "InitializeMarketsAction.initializeMarkets": {"634": [18641, 18652, false], "635": [18676, 18722, true], "636": [20341, 20352, true], "637": [20463, 20469, false], "638": [20473, 20500, true], "639": [20787, 20793, false], "640": [20797, 20831, false], "641": [21847, 21853, false], "642": [22127, 22133, false], "643": [22913, 22968, false], "644": [24659, 24714, false], "645": [25739, 25794, false], "646": [25999, 26014, true]}}, "42": {"nTokenMintAction.getNTokenNegativefCashWithholding": {"958": [18644, 18671, true], "959": [19250, 19263, false], "960": [19606, 19618, false], "961": [20378, 20407, false]}}, "6": {}, "63": {}, "67": {}, "68": {}, "69": {}, "72": {}, "73": {}, "74": {"Emitter._getPrimeProxy": {"796": [7317, 7323, true]}, "Emitter.emitChangefCashLiquidity": {"794": [8436, 8453, false]}, "Emitter.emitSettlefCash": {"795": [10143, 10159, false]}, "Emitter.emitSettlefCashDebtInReserve": {"797": [11392, 11406, false]}, "Emitter.emitTransferPrimeCash": {"798": [14200, 14221, false]}}, "75": {"BalanceHandler._setPositiveCashBalance": {"738": [16421, 16440, true]}, "BalanceHandler.getPositiveCashBalance": {"739": [16017, 16033, true]}, "BalanceHandler.incrementFeeToReserve": {"740": [14254, 14262, true]}}, "76": {}, "77": {}, "78": {}, "79": {}, "83": {"CashGroup.calculateOracleRate": {"764": [9206, 9219, false], "765": [9821, 9837, false]}, "CashGroup.interpolateOracleRate": {"761": [6246, 6275, true], "762": [6349, 6377, true], "763": [6613, 6634, false]}}, "84": {"DateTime.getBitNumFromMaturity": {"784": [4235, 4264, false], "785": [4339, 4364, false], "786": [4632, 4670, false], "787": [4732, 4771, false], "788": [5614, 5654, false], "789": [6064, 6106, false]}, "DateTime.getMarketIndex": {"790": [3179, 3197, true], "791": [3216, 3267, true], "792": [3539, 3565, false], "793": [3682, 3707, false]}, "DateTime.getMaturityFromBitNum": {"775": [6974, 6985, true], "776": [7057, 7070, true], "777": [7222, 7257, false], "778": [7339, 7375, false], "779": [7719, 7757, false]}, "DateTime.getReferenceTime": {"773": [449, 479, true]}, "DateTime.getTimeUTC0": {"774": [692, 713, true]}, "DateTime.getTradedMarket": {"766": [1038, 1048, false], "767": [1088, 1098, false], "768": [1142, 1152, false], "769": [1189, 1199, false], "770": [1240, 1250, false], "771": [1291, 1301, false], "772": [1343, 1353, false]}, "DateTime.isValidMarketMaturity": {"780": [1689, 1707, true], "781": [1751, 1802, true], "782": [1844, 1877, false], "783": [2027, 2076, false]}}, "86": {"InterestRateCurve._getMarketIndexOffset": {"810": [2342, 2357, true], "811": [2376, 2424, true], "812": [2450, 2465, true]}, "InterestRateCurve._getfCashInterestRateParams": {"806": [2825, 2840, true]}, "InterestRateCurve.calculateMaxRate": {"813": [3278, 3321, true]}, "InterestRateCurve.getInterestRate": {"799": [12816, 12836, true], "800": [13167, 13215, true], "801": [13231, 13271, false], "802": [13487, 13527, false]}, "InterestRateCurve.getPostFeeInterestRate": {"814": [17672, 17701, false], "815": [17746, 17775, false], "816": [17821, 17829, false], "817": [18157, 18185, true]}, "InterestRateCurve.getUtilizationFromInterestRate": {"803": [15122, 15142, true], "804": [15158, 15192, false], "805": [15403, 15437, false]}, "InterestRateCurve.updateRateOracle": {"807": [10920, 10944, true], "808": [11092, 11118, false], "809": [11284, 11315, false]}}, "87": {"Market._setMarketStorage": {"818": [9078, 9093, false], "819": [9097, 9127, true], "820": [9182, 9201, false], "821": [9205, 9239, true], "822": [9298, 9317, false], "823": [9321, 9356, true], "824": [9416, 9430, false], "825": [9434, 9464, true], "826": [9545, 9582, true]}, "Market._setTotalLiquidity": {"827": [8639, 8658, false], "828": [8662, 8696, true]}, "Market.getOracleRate": {"831": [5216, 5230, true]}, "Market.removeLiquidity": {"829": [2185, 2204, false], "830": [2237, 2255, true]}}, "88": {}, "89": {"nTokenHandler.setArrayLengthAndInitializedTime": {"957": [6148, 6195, true]}}, "90": {}, "91": {"PrimeCashExchangeRate._checkInvariant": {"892": [15720, 15750, true]}, "PrimeCashExchangeRate._getScalarIncrease": {"893": [22954, 22999, false]}, "PrimeCashExchangeRate._setPrimeCashFactorsOnAccrue": {"891": [10758, 10782, false]}, "PrimeCashExchangeRate._updatePrimeCashScalars": {"890": [25607, 25641, false]}, "PrimeCashExchangeRate.getPrimeCashRateStateful": {"882": [27870, 27904, false], "883": [28314, 28349, true]}, "PrimeCashExchangeRate.getPrimeInterestRates": {"894": [19775, 19803, false], "895": [20525, 20540, false], "896": [20978, 21006, false]}, "PrimeCashExchangeRate.updateTotalPrimeDebt": {"884": [11945, 11980, true], "885": [12436, 12447, true], "886": [13270, 13293, false], "887": [13297, 13318, false], "888": [13355, 13380, false], "889": [13384, 13407, false]}, "PrimeCashExchangeRate.updateTotalfCashDebtOutstanding": {"880": [17650, 17668, false], "881": [18160, 18177, true]}}, "92": {"PrimeRateLib._convertSettledfCash": {"904": [6964, 6990, false]}, "PrimeRateLib._setPrimeSettlementRate": {"905": [19148, 19199, true], "906": [19243, 19278, true], "907": [19320, 19333, true], "908": [19376, 19397, true], "909": [19450, 19469, true], "910": [19517, 19534, true]}, "PrimeRateLib._settleTotalfCashDebts": {"911": [20702, 20728, true], "912": [22056, 22078, true], "913": [22082, 22104, false], "914": [22378, 22392, false]}, "PrimeRateLib.convertSettledfCash": {"902": [5443, 5464, false]}, "PrimeRateLib.convertToStorageInSettlement": {"897": [11521, 11545, true], "898": [11564, 11588, true], "899": [11604, 11633, false], "900": [11886, 11933, false], "901": [12292, 12316, false]}, "PrimeRateLib.convertToStorageValue": {"903": [7750, 7784, true]}, "PrimeRateLib.convertUnderlyingToDebtStorage": {"915": [15793, 15808, false], "916": [15812, 15827, false], "917": [15855, 15869, true]}}, "93": {"BitmapAssetsHandler.addifCashAsset": {"756": [3991, 3998, true], "757": [4059, 4088, false], "758": [4585, 4603, false], "759": [4810, 4823, false]}, "BitmapAssetsHandler.setAssetsBitmap": {"760": [1441, 1499, true]}}, "94": {"PortfolioHandler._extendNewAssetArray": {"878": [5812, 5833, true]}, "PortfolioHandler._loadAssetArray": {"879": [17741, 17771, true]}, "PortfolioHandler._mergeAssetIntoArray": {"869": [1791, 1819, true], "870": [1839, 1869, true], "871": [1889, 1915, false], "872": [2114, 2160, false], "873": [2180, 2234, true], "874": [2434, 2474, false], "875": [2502, 2518, true], "876": [2615, 2645, false], "877": [2649, 2679, true]}, "PortfolioHandler._storeAsset": {"857": [12095, 12115, false], "858": [12119, 12163, true], "859": [12224, 12242, false], "860": [12246, 12280, true], "861": [12338, 12357, false], "862": [12361, 12415, true], "863": [12468, 12501, false], "864": [12505, 12538, true]}, "PortfolioHandler._updatePortfolioContext": {"865": [11414, 11433, true], "866": [11437, 11468, false], "867": [11593, 11640, true]}, "PortfolioHandler.addAsset": {"842": [3490, 3676, false], "843": [3708, 3744, false], "844": [3975, 3981, false], "845": [4164, 4204, false], "846": [4228, 4241, true], "847": [4329, 4356, false], "848": [4360, 4387, true], "849": [4502, 4569, false]}, "PortfolioHandler.buildPortfolioState": {"868": [16123, 16144, false]}, "PortfolioHandler.deleteAsset": {"850": [13155, 13197, true], "851": [13245, 13281, true], "852": [13432, 13486, false], "853": [13502, 13564, true], "854": [14040, 14069, false], "855": [14073, 14115, false], "856": [14243, 14270, false]}, "PortfolioHandler.storeAssets": {"832": [7755, 7809, true], "833": [7885, 7931, false], "834": [7935, 7954, false], "835": [8281, 8327, false], "836": [8565, 8611, false], "837": [9829, 9848, false], "838": [9897, 9943, false], "839": [9963, 10017, true], "840": [10578, 10602, true], "841": [10664, 10698, true]}}, "96": {"SettleBitmapAssets.settleBitmappedCashGroup": {"953": [2309, 2339, true], "954": [2683, 2701, false], "955": [3243, 3263, false], "956": [3911, 3918, true]}}, "98": {"AssetHandler.getPresentfCashValue": {"734": [2996, 3009, false], "735": [3318, 3360, true]}, "AssetHandler.getSettlementDate": {"736": [1337, 1356, false], "737": [1360, 1414, true]}}}, "statements": {"106": {"ABDKMath64x64.div": {"479": [6742, 6758], "480": [6808, 6860]}, "ABDKMath64x64.exp": {"483": [21400, 21434], "484": [21484, 21492], "485": [21512, 21600]}, "ABDKMath64x64.exp_2": {"541": [14699, 14733], "542": [14783, 14791], "543": [14907, 14967], "544": [15011, 15071], "545": [15115, 15175], "546": [15219, 15279], "547": [15322, 15382], "548": [15425, 15485], "549": [15528, 15588], "550": [15631, 15691], "551": [15733, 15793], "552": [15835, 15895], "553": [15937, 15997], "554": [16039, 16099], "555": [16140, 16200], "556": [16241, 16301], "557": [16342, 16402], "558": [16443, 16503], "559": [16543, 16603], "560": [16643, 16703], "561": [16743, 16803], "562": [16843, 16903], "563": [16942, 17002], "564": [17041, 17101], "565": [17140, 17200], "566": [17239, 17299], "567": [17337, 17397], "568": [17435, 17495], "569": [17533, 17593], "570": [17631, 17691], "571": [17728, 17788], "572": [17825, 17885], "573": [17922, 17982], "574": [18019, 18079], "575": [18115, 18175], "576": [18211, 18271], "577": [18307, 18367], "578": [18403, 18463], "579": [18498, 18558], "580": [18593, 18653], "581": [18688, 18748], "582": [18783, 18843], "583": [18877, 18937], "584": [18971, 19031], "585": [19065, 19125], "586": [19159, 19219], "587": [19252, 19312], "588": [19345, 19405], "589": [19438, 19498], "590": [19531, 19591], "591": [19623, 19683], "592": [19715, 19775], "593": [19807, 19867], "594": [19899, 19959], "595": [19990, 20050], "596": [20081, 20141], "597": [20172, 20232], "598": [20263, 20323], "599": [20353, 20413], "600": [20443, 20503], "601": [20533, 20593], "602": [20623, 20683], "603": [20712, 20772], "604": [20801, 20861], "605": [20890, 20950], "606": [20979, 21039], "607": [21046, 21081], "608": [21087, 21126]}, "ABDKMath64x64.fromUInt": {"477": [1995, 2028], "478": [2034, 2057]}, "ABDKMath64x64.mul": {"486": [4298, 4350]}, "ABDKMath64x64.neg": {"481": [8658, 8682], "482": [8688, 8697]}, "ABDKMath64x64.toInt": {"487": [1672, 1694]}}, "107": {"Bitmap.getMSB": {"377": [2259, 2274], "378": [2371, 2380], "379": [2394, 2404], "380": [2468, 2476], "381": [2490, 2499], "382": [2555, 2563], "383": [2577, 2586], "384": [2638, 2646], "385": [2660, 2669], "386": [2719, 2726], "387": [2740, 2748], "388": [2797, 2804], "389": [2818, 2826], "390": [2874, 2881], "391": [2895, 2903], "392": [2937, 2945]}, "Bitmap.getNextBitNum": {"251": [3365, 3373], "252": [3384, 3424]}, "Bitmap.isBitSet": {"322": [807, 842], "323": [881, 946]}, "Bitmap.setBit": {"279": [434, 469], "280": [534, 580], "281": [611, 658]}, "Bitmap.totalBitsSet": {"424": [1117, 1273], "425": [1283, 1439], "426": [1449, 1536], "427": [1546, 1702], "428": [1712, 1729], "429": [1739, 1756], "430": [1766, 1784], "431": [1794, 1831]}}, "108": {}, "109": {"SafeInt256.abs": {"538": [1741, 1754], "539": [1769, 1777]}, "SafeInt256.add": {"235": [1520, 1557]}, "SafeInt256.div": {"134": [1115, 1154], "135": [1262, 1271]}, "SafeInt256.mul": {"131": [491, 500], "132": [523, 553], "133": [568, 598]}, "SafeInt256.mulInRatePrecision": {"404": [2354, 2401]}, "SafeInt256.neg": {"158": [1636, 1653]}, "SafeInt256.negChange": {"416": [3827, 3835], "417": [4044, 4056], "418": [4275, 4290], "419": [4566, 4588]}, "SafeInt256.sub": {"278": [1394, 1431]}, "SafeInt256.subNoNeg": {"124": [1871, 1884], "125": [1894, 1909]}, "SafeInt256.toInt128": {"324": [3171, 3243]}, "SafeInt256.toInt88": {"335": [2971, 3041]}, "SafeInt256.toUint": {"78": [2482, 2497], "79": [2507, 2524]}}, "110": {"SafeUint256.add": {"56": [477, 492], "57": [502, 510]}, "SafeUint256.div": {"150": [1875, 1889], "151": [1899, 1911]}, "SafeUint256.divInRatePrecision": {"476": [2589, 2645]}, "SafeUint256.divInScalarPrecision": {"514": [2913, 2962]}, "SafeUint256.mul": {"148": [1245, 1253], "149": [1290, 1309]}, "SafeUint256.mulInRatePrecision": {"625": [2750, 2806]}, "SafeUint256.mulInScalarPrecision": {"515": [3069, 3118]}, "SafeUint256.sub": {"249": [865, 880], "250": [890, 902]}, "SafeUint256.toInt": {"461": [4739, 4779]}, "SafeUint256.toUint32": {"516": [3336, 3366]}, "SafeUint256.toUint40": {"244": [3475, 3505]}, "SafeUint256.toUint80": {"420": [4035, 4065]}, "SafeUint256.toUint88": {"472": [4174, 4204]}}, "156": {}, "163": {}, "165": {}, "167": {}, "171": {}, "172": {}, "173": {}, "174": {}, "175": {}, "177": {}, "183": {}, "185": {}, "22": {}, "32": {"InitializeMarketsAction._calculateNetPrimeCashAvailable": {"29": [11480, 11548], "30": [11579, 11620], "31": [11634, 11701], "32": [11804, 11913], "33": [12051, 12124], "34": [12179, 12220], "35": [12354, 12404], "36": [12441, 12469]}, "InitializeMarketsAction._calculatefCashAmountFromUtilization": {"62": [17038, 17094], "63": [17225, 17318]}, "InitializeMarketsAction._getGovernanceParameters": {"37": [3256, 3404], "38": [3608, 3663], "39": [3737, 3785], "40": [3718, 3721], "41": [3955, 4016], "42": [4026, 4098], "43": [4207, 4352], "44": [4188, 4191], "45": [4373, 4386]}, "InitializeMarketsAction._getPreviousMarkets": {"116": [10699, 11114], "117": [10680, 10683]}, "InitializeMarketsAction._getSixMonthImpliedRate": {"69": [12981, 13017], "70": [13028, 13396]}, "InitializeMarketsAction._interpolateFutureRate": {"71": [14125, 14162], "72": [14380, 14622], "73": [15307, 15353]}, "InitializeMarketsAction._setLiquidityAmount": {"58": [15881, 15925], "59": [15935, 15979], "60": [16068, 16273], "61": [16349, 16421]}, "InitializeMarketsAction._settleNTokenLiquidityTokens": {"214": [4964, 5019], "215": [5187, 5219], "216": [5237, 5318], "217": [5425, 5484], "218": [5502, 5546], "219": [6191, 6256], "220": [6295, 6537], "221": [6566, 6602], "222": [4842, 4845]}, "InitializeMarketsAction._settleNTokenPortfolio": {"110": [7567, 7618], "111": [8583, 8650], "112": [8721, 8779], "113": [8922, 9205], "114": [9288, 9319], "115": [9413, 9466]}, "InitializeMarketsAction.finalizeMarket": {"80": [27779, 27843], "81": [27854, 28061]}, "InitializeMarketsAction.getLibInfo": {"1": [28220, 28252]}, "InitializeMarketsAction.initializeMarkets": {"2": [18243, 18289], "3": [18500, 18545], "4": [18668, 18723], "5": [19325, 19449], "6": [21202, 21236], "7": [21254, 21352], "8": [21504, 21564], "9": [22056, 22098], "10": [22651, 22812], "11": [22996, 23051], "12": [24026, 24558], "13": [24742, 24797], "14": [25818, 25873], "15": [25895, 25969], "16": [25991, 26039], "17": [26076, 26172], "18": [26409, 26433], "19": [26452, 26485], "20": [26600, 26639], "21": [26730, 26778], "22": [26792, 26837], "23": [19262, 19265], "24": [27095, 27235], "25": [27245, 27404], "26": [27415, 27458]}, "InitializeMarketsAction.sweepCashIntoMarkets": {"0": [17719, 17768]}}, "42": {"nTokenMintAction.getNTokenNegativefCashWithholding": {"118": [20435, 20449], "119": [20504, 20549], "120": [20594, 20765], "121": [20870, 20919], "122": [20933, 20970], "123": [20991, 21068]}}, "6": {}, "63": {}, "67": {}, "68": {}, "69": {"LibStorage._getStorageSlot": {"334": [16003, 16048]}}, "72": {}, "73": {}, "74": {"Emitter._fCashPair": {"489": [7756, 7767], "490": [7777, 7810], "491": [7873, 7906], "492": [7916, 7949], "493": [7960, 7980]}, "Emitter._getPrimeProxy": {"540": [7310, 7484]}, "Emitter._posfCashId": {"537": [6446, 6658]}, "Emitter.emitBorrowOrRepayPrimeDebt": {"473": [15785, 15838], "474": [15848, 15903]}, "Emitter.emitChangefCashLiquidity": {"421": [8455, 8469], "422": [8495, 8507], "423": [8528, 8581]}, "Emitter.emitMintOrBurnPrimeCash": {"520": [13791, 13838]}, "Emitter.emitSettlefCash": {"469": [10161, 10190], "470": [10200, 10285], "471": [10432, 10522]}, "Emitter.emitSettlefCashDebtInReserve": {"629": [10963, 11075], "630": [11295, 11378], "631": [11506, 11604]}, "Emitter.emitTransferPrimeCash": {"632": [14223, 14246], "633": [14256, 14322]}}, "75": {"BalanceHandler._setPositiveCashBalance": {"195": [16413, 16441], "196": [16662, 16715]}, "BalanceHandler.getPositiveCashBalance": {"210": [15888, 15928], "211": [16009, 16034]}, "BalanceHandler.incrementFeeToReserve": {"517": [14246, 14263], "518": [14409, 14445], "519": [14455, 14527]}, "BalanceHandler.setBalanceStorageForNToken": {"97": [13562, 13625]}}, "76": {}, "77": {}, "78": {}, "79": {}, "83": {"CashGroup._getCashGroupStorageBytes": {"341": [10749, 10773]}, "CashGroup.buildCashGroup": {"213": [15051, 15259]}, "CashGroup.buildCashGroupStateful": {"107": [15951, 15995]}, "CashGroup.calculateOracleRate": {"269": [9235, 9323], "270": [9985, 10033], "271": [9942, 9967], "272": [10131, 10207], "273": [10226, 10416], "274": [10445, 10539]}, "CashGroup.getRateOracleTimeWindow": {"245": [4969, 5067]}, "CashGroup.interpolateOracleRate": {"152": [6238, 6276], "153": [6341, 6378], "154": [6650, 6894], "155": [7237, 7573]}}, "84": {"DateTime.getBitNumFromMaturity": {"315": [4266, 4283], "316": [4366, 4383], "317": [4686, 4711], "318": [5258, 5593], "319": [5874, 6043], "320": [6329, 6504], "321": [6650, 6669]}, "DateTime.getMarketIndex": {"393": [3171, 3198], "394": [3208, 3268], "395": [3567, 3584], "396": [3709, 3725], "397": [3381, 3384], "398": [3746, 3754]}, "DateTime.getMaturityFromBitNum": {"253": [6966, 6986], "254": [7049, 7071], "255": [7273, 7318], "256": [7627, 7698], "257": [7391, 7613], "258": [7939, 8012], "259": [7773, 7925], "260": [8212, 8289], "261": [8043, 8198]}, "DateTime.getReferenceTime": {"54": [441, 480], "55": [490, 540]}, "DateTime.getTimeUTC0": {"108": [684, 714], "109": [724, 760]}, "DateTime.getTradedMarket": {"46": [1050, 1074], "47": [1100, 1128], "48": [1154, 1175], "49": [1201, 1226], "50": [1252, 1277], "51": [1303, 1329], "52": [1355, 1381], "53": [1392, 1415]}, "DateTime.isValidMarketMaturity": {"262": [1681, 1733], "263": [1743, 1829], "264": [1879, 1891], "265": [2078, 2089], "266": [2004, 2007], "267": [2110, 2122]}}, "86": {"InterestRateCurve._getMarketIndexOffset": {"405": [2334, 2358], "406": [2368, 2425], "407": [2435, 2502]}, "InterestRateCurve._getfCashInterestRateParams": {"289": [2859, 2904]}, "InterestRateCurve.calculateMaxRate": {"488": [3271, 3543]}, "InterestRateCurve.getActiveInterestRateParameters": {"130": [7530, 7681]}, "InterestRateCurve.getInterestRate": {"64": [12808, 12837], "65": [13159, 13216], "66": [13345, 13466], "67": [13768, 14100], "68": [14345, 14683]}, "InterestRateCurve.getPostFeeInterestRate": {"621": [17703, 17732], "622": [17777, 17806], "623": [17949, 18002], "624": [18135, 18222]}, "InterestRateCurve.getPrimeCashInterestRateParameters": {"620": [8250, 8306]}, "InterestRateCurve.getUtilizationFromInterestRate": {"74": [15114, 15143], "75": [15267, 15382], "76": [15695, 16021], "77": [16632, 16964]}, "InterestRateCurve.setActiveInterestRateParameters": {"128": [9615, 9648], "129": [9658, 9691]}, "InterestRateCurve.unpackInterestRateParams": {"408": [3848, 4012], "409": [4022, 4186], "410": [4196, 4261], "411": [4443, 4522], "412": [4532, 4611], "413": [4670, 4772], "414": [4782, 4891], "415": [4901, 4972]}, "InterestRateCurve.updateRateOracle": {"373": [10912, 10945], "374": [11120, 11143], "375": [11317, 11340], "376": [11717, 11874]}}, "87": {"Market._loadMarketStorage": {"364": [6311, 6336], "365": [6346, 6372], "366": [6382, 6426], "367": [6436, 6488], "368": [6498, 6552], "369": [6562, 6606], "370": [6616, 6674], "371": [6719, 6771], "372": [6802, 6827]}, "Market._setMarketStorage": {"303": [9070, 9128], "304": [9174, 9240], "305": [9290, 9357], "306": [9408, 9465], "307": [9511, 9583], "308": [9639, 9684], "309": [9694, 9747], "310": [9757, 9812], "311": [9822, 9867], "312": [9877, 9936]}, "Market._setMarketStorageForLiquidity": {"462": [7396, 7620], "463": [7631, 7687]}, "Market._setTotalLiquidity": {"313": [8631, 8697], "314": [8754, 8807]}, "Market.getOracleRate": {"399": [5208, 5257], "400": [5268, 5496]}, "Market.loadMarketWithSettlementDate": {"246": [11142, 11222], "247": [11233, 11459]}, "Market.loadSettlementMarket": {"342": [11658, 11728]}, "Market.removeLiquidity": {"343": [2206, 2219], "344": [2229, 2256], "345": [2301, 2381], "346": [2391, 2463], "347": [2474, 2544], "348": [2554, 2607], "349": [2617, 2682], "350": [2693, 2730]}, "Market.setMarketStorageForInitialize": {"156": [8197, 8422], "157": [8433, 8489]}}, "88": {}, "89": {"nTokenHandler._getParameters": {"283": [10864, 10887], "284": [10901, 10908], "285": [10922, 10945], "286": [10959, 10966], "287": [10845, 10848], "288": [10987, 11010]}, "nTokenHandler.getDepositParameters": {"126": [7010, 7097]}, "nTokenHandler.getInitializationParameters": {"127": [10368, 10459]}, "nTokenHandler.getNTokenContext": {"198": [1556, 1587], "199": [1597, 1662], "200": [1672, 1721], "201": [1731, 1774], "202": [1784, 1821]}, "nTokenHandler.loadNTokenPortfolioNoCashGroup": {"101": [11540, 11587], "102": [12085, 12133], "103": [12143, 12183], "104": [12193, 12223], "105": [12234, 12382], "106": [12393, 12484]}, "nTokenHandler.loadNTokenPortfolioStateful": {"27": [12659, 12709], "28": [12719, 12782]}, "nTokenHandler.nTokenAddress": {"197": [2092, 2116]}, "nTokenHandler.setArrayLengthAndInitializedTime": {"98": [6112, 6196], "99": [6397, 6454], "100": [6464, 6502]}}, "90": {"nTokenSupply.getStoredNTokenSupplyFactors": {"203": [1174, 1213], "204": [1426, 1491], "205": [1501, 1556]}}, "91": {"PrimeCashExchangeRate._checkInvariant": {"475": [15712, 15751]}, "PrimeCashExchangeRate._getScalarIncrease": {"509": [21849, 21955], "510": [22317, 22570], "511": [22581, 22829], "512": [23015, 23079], "513": [24002, 24090]}, "PrimeCashExchangeRate._setPrimeCashFactorsOnAccrue": {"450": [10168, 10214], "451": [10224, 10274], "452": [10284, 10326], "453": [10336, 10374], "454": [10454, 10504], "455": [10514, 10560], "456": [10570, 10636], "457": [10646, 10696], "458": [10861, 10922], "459": [10936, 11015], "460": [11036, 11149]}, "PrimeCashExchangeRate._updatePrimeCashScalars": {"443": [24663, 24850], "444": [24995, 25068], "445": [25853, 26010], "446": [26039, 26180], "447": [26194, 26249], "448": [26309, 26341], "449": [26352, 26388]}, "PrimeCashExchangeRate.getPrimeCashFactors": {"434": [1879, 1914], "435": [1924, 1963], "436": [1973, 2008], "437": [2018, 2057], "438": [2067, 2122], "439": [2132, 2171], "440": [2181, 2212], "441": [2222, 2249], "442": [2259, 2322]}, "PrimeCashExchangeRate.getPrimeCashHoldingsOracle": {"508": [3771, 3786]}, "PrimeCashExchangeRate.getPrimeCashRateStateful": {"337": [28047, 28190], "338": [28204, 28275], "339": [28306, 28350], "340": [28404, 28656]}, "PrimeCashExchangeRate.getPrimeInterestRates": {"610": [19909, 20057], "611": [20194, 20247], "612": [20643, 20719], "613": [21022, 21093]}, "PrimeCashExchangeRate.updateTotalPrimeDebt": {"356": [11937, 11981], "357": [12428, 12448], "358": [13320, 13341], "359": [13409, 13432], "360": [13443, 13499], "361": [13509, 13569], "362": [13580, 13677], "363": [13687, 13705]}, "PrimeCashExchangeRate.updateTotalfCashDebtOutstanding": {"325": [17670, 17677], "326": [18152, 18178], "327": [18188, 18271], "328": [19050, 19128]}}, "92": {"PrimeRateLib._convertSettledfCash": {"466": [6225, 6303], "467": [6313, 6403], "468": [7156, 7530]}, "PrimeRateLib._getPrimeSettlementRate": {"521": [18052, 18077], "522": [18263, 18344], "523": [18358, 18435]}, "PrimeRateLib._setPrimeSettlementRate": {"524": [18689, 18763], "525": [19140, 19200], "526": [19235, 19279], "527": [19312, 19334], "528": [19368, 19398], "529": [19442, 19470], "530": [19509, 19535], "531": [19575, 19641], "532": [19651, 19709], "533": [19719, 19773], "534": [19783, 19807], "535": [19818, 19866], "536": [19877, 20016]}, "PrimeRateLib._settleTotalfCashDebts": {"614": [20625, 20684], "615": [20694, 20750], "616": [21291, 21439], "617": [22412, 22472], "618": [22502, 22646], "619": [22719, 22753]}, "PrimeRateLib.buildPrimeRateSettlementStateful": {"464": [17372, 17431], "465": [17468, 17529]}, "PrimeRateLib.buildPrimeRateStateful": {"212": [16351, 16433]}, "PrimeRateLib.convertFromUnderlying": {"282": [15101, 15185]}, "PrimeRateLib.convertSettledfCash": {"351": [5192, 5337], "352": [5480, 5604]}, "PrimeRateLib.convertToStorageInSettlement": {"236": [9090, 9156], "237": [11513, 11546], "238": [11556, 11589], "239": [11649, 11721], "240": [11752, 11824], "241": [12007, 12049], "242": [12139, 12187], "243": [12435, 12618]}, "PrimeRateLib.convertToStorageValue": {"355": [7727, 8092]}, "PrimeRateLib.convertToUnderlying": {"147": [14756, 14839]}, "PrimeRateLib.convertUnderlyingToDebtStorage": {"626": [15829, 15837], "627": [15847, 15870], "628": [16027, 16109]}}, "93": {"BitmapAssetsHandler.addifCashAsset": {"159": [3983, 3999], "160": [4295, 4340], "161": [4355, 4501], "162": [4623, 4672], "163": [4701, 4751], "164": [4765, 4785], "165": [4937, 4977], "166": [4992, 5237], "167": [5252, 5300], "168": [5314, 5364], "169": [5385, 5400]}, "BitmapAssetsHandler.getAssetsBitmap": {"248": [1254, 1287]}, "BitmapAssetsHandler.getifCashNotional": {"268": [2001, 2053]}, "BitmapAssetsHandler.setAssetsBitmap": {"329": [1433, 1519], "330": [1638, 1679]}}, "94": {"PortfolioHandler._extendNewAssetArray": {"300": [6012, 6043], "301": [5993, 5996], "302": [6064, 6084]}, "PortfolioHandler._loadAssetArray": {"494": [17733, 17772], "495": [18370, 18412], "496": [18426, 18464], "497": [18478, 18518], "498": [18532, 18570], "499": [18584, 18608], "500": [18118, 18121]}, "PortfolioHandler._mergeAssetIntoArray": {"290": [1930, 1938], "291": [2089, 2248], "292": [2494, 2519], "293": [2607, 2680], "294": [2739, 2767], "295": [2781, 2826], "296": [2841, 2852], "297": [1694, 1697], "298": [2873, 2885]}, "PortfolioHandler._sortId": {"609": [16500, 16687]}, "PortfolioHandler._sortInPlace": {"501": [16862, 16889], "502": [17057, 17124], "503": [16927, 16930], "504": [17351, 17394], "505": [17412, 17467], "506": [17485, 17488], "507": [17516, 17519]}, "PortfolioHandler._storeAsset": {"182": [12087, 12164], "183": [12216, 12281], "184": [12330, 12416], "185": [12460, 12539], "186": [12589, 12639], "187": [12649, 12695], "188": [12705, 12752], "189": [12762, 12807]}, "PortfolioHandler._updatePortfolioContext": {"190": [11484, 11515], "191": [11535, 11574], "192": [11585, 11641], "193": [11696, 11829], "194": [11840, 11899]}, "PortfolioHandler.addAsset": {"136": [3687, 3694], "137": [3983, 3990], "138": [4220, 4242], "139": [4321, 4388], "140": [4585, 4658], "141": [5040, 5072], "142": [5082, 5110], "143": [5120, 5150], "144": [5160, 5188], "145": [5198, 5248], "146": [5258, 5295]}, "PortfolioHandler.buildPortfolioState": {"206": [16146, 16158], "207": [16169, 16235], "208": [16245, 16287], "209": [16297, 16350]}, "PortfolioHandler.deleteAsset": {"170": [13147, 13198], "171": [13237, 13282], "172": [13411, 13574], "173": [13613, 13650], "174": [14135, 14164], "175": [14182, 14204], "176": [13947, 13950], "177": [14391, 14444], "178": [14458, 14465], "179": [14781, 14956], "180": [14966, 15017], "181": [15027, 15080]}, "PortfolioHandler.getSortedPortfolio": {"336": [15293, 15363]}, "PortfolioHandler.getSortedPortfolioWithIds": {"432": [15547, 15598], "433": [15608, 15634]}, "PortfolioHandler.storeAssets": {"82": [7747, 7810], "83": [7974, 8004], "84": [7515, 7518], "85": [8871, 8903], "86": [9080, 9315], "87": [8183, 8186], "88": [9850, 9858], "89": [9872, 10031], "90": [10083, 10298], "91": [10313, 10365], "92": [10379, 10402], "93": [9735, 9738], "94": [10570, 10603], "95": [10656, 10699], "96": [10749, 10901]}}, "96": {"SettleBitmapAssets._settlefCashAsset": {"353": [4986, 5121], "354": [5132, 5175]}, "SettleBitmapAssets.settleBitmappedCashGroup": {"223": [2172, 2219], "224": [2301, 2340], "225": [2703, 2731], "226": [3283, 3346], "227": [3385, 3448], "228": [3532, 3573], "229": [3587, 3622], "230": [3903, 3919], "231": [3962, 4007], "232": [4078, 4119], "233": [4133, 4168], "234": [4189, 4256]}}, "98": {"AssetHandler.getDiscountFactor": {"401": [2406, 2476], "402": [2486, 2543], "403": [2553, 2623]}, "AssetHandler.getPresentfCashValue": {"275": [3011, 3019], "276": [3310, 3361], "277": [3421, 3471]}, "AssetHandler.getSettlementDate": {"331": [1329, 1415], "332": [1590, 1611], "333": [1914, 1976]}, "AssetHandler.isLiquidityToken": {"299": [924, 1055]}}}}, "dependencies": ["ABDKMath64x64", "AccountContextHandler", "AggregatorInterface", "AggregatorV2V3Interface", "AggregatorV3Interface", "AssetHandler", "BalanceHandler", "Bitmap", "BitmapAssetsHandler", "CErc20Interface", "CTokenInterface", "CashGroup", "CompoundHandler", "Constants", "DateTime", "Deployments", "Emitter", "FloatingPoint", "GenericToken", "IBeacon", "IEIP20NonStandard", "IERC20", "IPrimeCashHoldingsOracle", "IRewarder", "ITransferEmitter", "IUpgradeableBeacon", "Incentives", "InterestRateCurve", "LibStorage", "Market", "MigrateIncentives", "PortfolioHandler", "PrimeCashExchangeRate", "PrimeRateLib", "SafeInt256", "OpenZeppelin/openzeppelin-contracts@3.4.2-solc-0.7/SafeMath", "SafeUint256", "SettleBitmapAssets", "TokenHandler", "WETH9", "nTokenCalculations", "nTokenHandler", "nTokenMintAction", "nTokenSupply"], "deployedBytecode": "730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063bb6dd58e14610050578063c4c96dae14610072578063d0e064c014610090575b600080fd5b81801561005c57600080fd5b5061007061006b366004615bd9565b6100b0565b005b61007a61011a565b6040516100879190615c8a565b60405180910390f35b81801561009c57600080fd5b506100706100ab366004615bf3565b610132565b604051635db6eac760e11b815273__$892f367d396be2b92d3b049e6e62920984$__9063bb6dd58e906100e7908490600401615e7d565b60006040518083038186803b1580156100ff57600080fd5b505af4158015610113573d6000803e3d6000fd5b5050505050565b73__$892f367d396be2b92d3b049e6e62920984$", "deployedSourceMap": "2170:26091:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17651:124;;;;;;;;;;-1:-1:-1;17651:124:32;;;;;:::i;:::-;;:::i;:::-;;28156:103;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;18076:9389;;;;;;;;;;-1:-1:-1;18076:9389:32;;;;;:::i;:::-;;:::i;17651:124::-;17719:49;;-1:-1:-1;;;17719:49:32;;:16;;:37;;:49;;17757:10;;17719:49;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17651:124;:::o;28156:103::-;28227:25;28156:103;:::o;18076:9389::-;18179:15;18204:29;;:::i;:::-;18243:46;:6;18278:10;18243:34;:46::i;:::-;18378:16;;:31;;;18299:41;;18355:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;18508:16:32;;:31;;;18299:111;;-1:-1:-1;18500:45:32;;;;;;18641:11;18637:97;;;18676:21;;;;:34;:41;:46;18668:55;;;;;;18744:28;18775:162;18820:6;18840:15;18869:9;18892:10;18916:11;18775:31;:162::i;:::-;18744:193;;18948:38;19001:69;19026:10;19038:6;:16;;;:31;;;19001:24;:69::i;:::-;18948:122;;19081:33;;:::i;:::-;19177:18;;19205:7643;19229:16;;:31;;;19225:35;;19205:7643;;;19346:103;19404:31;19429:1;19433;19429:5;19404:24;:31::i;:::-;19346:36;19372:9;19346:25;:36::i;:::-;:40;;:103::i;:::-;19325:18;;;:124;19596:24;;:27;;19464:29;;19512:279;;19553:21;;19596:24;19621:1;;19596:27;;;;;;;;;;;;19683:1;5645::67;19645:39:32;;;19736:9;19767:6;19512:19;:279::i;:::-;19464:327;;20341:11;:160;;;;20463:1;20468;20463:6;:37;;;;;20473:15;:22;20499:1;20473:27;20463:37;20341:313;;;-1:-1:-1;20612:21:32;;;;:34;:41;20607:46;;;20341:313;:491;;;;20787:1;20792;20787:6;:44;;;;;20797:15;20813:1;20797:18;;;;;;;;;;;;;;:29;;;20830:1;20797:34;20787:44;20320:6334;;;21075:18;21096:87;21133:22;21157:10;:22;;;21180:1;21157:25;;;;;;;;;;;;;;21096:36;:87::i;:::-;21075:108;;21225:11;21202:9;:20;;:34;;;;;21277:75;21326:10;:22;;;21349:1;21326:25;;;;;;;;;;;;;;21277:10;:29;;;21307:1;21277:32;;;;;;;;;;;;;;:48;;:75;;;;:::i;:::-;21254:20;;;:98;;;21504:60;;;;-1:-1:-1;;;21504:60:32;;;;;;;:::i;:::-;;;;;;;;;20320:6334;;;;21847:6;21843:2995;;22069:15;22085:1;22069:18;;;;;;;;;;;;;;:29;;;22056:42;;21843:2995;;;22127:1;22132;22127:6;22123:2715;;;22664:148;22713:15;22754:36;22780:9;22754:25;:36::i;:::-;22664:23;:148::i;:::-;22651:161;;22926:10;:29;;;22956:1;22926:32;;;;;;;;;;;;;;:42;;;22913:10;:55;22909:165;;;23009:10;:29;;;23039:1;23009:32;;;;;;;;;;;;;;:42;;;22996:55;;22909:165;22123:2715;;;23881:27;23935:69;23976:27;24001:1;23976:24;:27::i;:::-;23935:36;23961:9;23935:25;:36::i;:69::-;23881:123;;24039:519;24087:19;24404:10;24518:15;24534:1;24518:18;;;;;;;;;;;;;;24039:22;:519::i;:::-;24026:532;;24672:10;:29;;;24702:1;24672:32;;;;;;;;;;;;;;:42;;;24659:10;:55;24655:165;;;24755:10;:29;;;24785:1;24755:32;;;;;;;;;;;;;;:42;;;24742:55;;24655:165;22123:2715;;25152:19;25174:75;25238:10;25174;:29;;;25204:1;25174:32;;;;;;;;;;;;;;:63;;:75;;;;:::i;:::-;25152:97;;25753:41;:10;:29;;;25783:1;25753:32;;;;;;;;;;;;;;:39;:41::i;:::-;25739:11;:55;25735:323;;;25832:41;:10;:29;;;25862:1;25832:32;;;;;;;:41;25818:55;;25908:61;25957:11;25908:10;:29;;;25938:1;25908:32;;;;;;;:61;25895:74;-1:-1:-1;25999:15:32;25991:48;;;;-1:-1:-1;;;25991:48:32;;;;;;;:::i;:::-;26099:73;26136:22;26160:11;26099:36;:73::i;:::-;26076:20;;;:96;;;26406:1;-1:-1:-1;26379:54:32;;;26432:1;26409:20;;;:24;26379:54;-1:-1:-1;26452:20:32;;;:33;;;26600:27;;;:39;;;20320:6334;26758:20;;;;26730:25;;;:48;26792:45;26758:9;26818:10;26830:6;26792:14;:45::i;:::-;-1:-1:-1;19262:3:32;;19205:7643;;;;26962:22;27031:54;27065:6;:19;;;27031:6;:21;;;:33;;:54;;;;:::i;:::-;26885:200;;;;;27095:140;27150:6;:19;;;27183:10;27207:6;:18;;;27095:41;:140::i;:::-;27245:159;27305:6;:19;;;27338:16;27368:6;:26;;;27245:46;:159::i;:::-;27420:38;27446:10;27420:38;;;;;;:::i;:::-;;;;;;;;18076:9389;;;;;;;;;;:::o;12541:248:89:-;12659:50;12690:6;12698:10;12659:30;:50::i;:::-;12738:44;12771:10;12738:32;:44::i;:::-;12719:63;;;-1:-1:-1;12541:248:89:o;11137:1339:32:-;11371:28;11411:27;11453:11;11449:475;;;11516:31;11537:9;11516:20;:31::i;:::-;11480:68;;:26;;;:68;11449:475;;;11579:41;11602:6;11610:9;11579:22;:41::i;:::-;11634:67;11654:10;11634:67;;11666:9;11677:6;11685:15;11634:19;:67::i;:::-;11827:86;11878:6;11886:15;11903:9;11827:50;:86::i;:::-;11804:109;;11449:475;12075:18;;;;:49;;12103:20;12075:27;:49::i;:::-;12179:18;;;:41;;;12051:73;-1:-1:-1;2803:5:32;12362:41;;12354:50;;;;;;12441:28;11137:1339;;;;;;;;:::o;3059:1334::-;3169:27;;:::i;:::-;3212:34;;:::i;:::-;3308:96;3356:10;3308:96;;3380:14;3308:34;:96::i;:::-;3279:25;;;3256:148;;;3257:20;3446:69;;;;3500:14;3446:41;:69::i;:::-;3415:100;;3643:12;:19;3629:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3629:34:32;-1:-1:-1;3608:18:32;;;:55;3678:9;3673:123;3697:12;:19;3693:1;:23;3673:123;;;3761:24;:12;3774:1;3761:15;;;;;;;:24;3737:6;:18;;;3756:1;3737:21;;;;;;;;;;;;;;;;;:48;3718:3;;3673:123;;;;3955:61;4005:10;3955:49;:61::i;:::-;4083:14;4054:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;4026:25:32;;;:72;4164:1;4147:216;4172:14;4167:1;:19;4147:216;;4242:110;4309:10;4337:1;4242:49;:110::i;:::-;4207:6;:25;;;4237:1;4233;:5;4207:32;;;;;;;;;;;;;;;;;:145;4188:3;;4147:216;;;-1:-1:-1;4380:6:32;;-1:-1:-1;;3059:1334:32;;;;;:::o;952:470:84:-;1015:7;1038:5;1047:1;1038:10;1034:40;;;-1:-1:-1;3204:9:67;1050:24:84;;1034:40;1088:5;1097:1;1088:10;1084:44;;;-1:-1:-1;1107:21:84;1100:28;;1084:44;1142:5;1151:1;1142:10;1138:37;;;-1:-1:-1;3252:11:67;1154:21:84;;1138:37;1189:5;1198:1;1189:10;1185:41;;;-1:-1:-1;1208:18:84;1201:25;;1185:41;1240:5;1249:1;1240:10;1236:41;;;-1:-1:-1;1259:18:84;1252:25;;1236:41;1291:5;1300:1;1291:10;1287:42;;;-1:-1:-1;1310:19:84;1303:26;;1287:42;1343:5;1352:1;1343:10;1339:42;;;-1:-1:-1;1362:19:84;1355:26;;1339:42;1392:23;;-1:-1:-1;;;1392:23:84;;;;;;;:::i;952:470::-;;;;:::o;354:193::-;422:7;3204:9:67;449:30:84;;;441:39;;;;;;3204:9:67;510::84;:29;;497:43;;;;354:193;-1:-1:-1;354:193:84:o;373:144:110:-;431:7;462:5;;;485:6;;;;477:15;;;;;;509:1;373:144;-1:-1:-1;;;373:144:110:o;15421:1007:32:-;15654:6;;15795:76;6560:3:67;15795:39:32;:21;15821:12;15795:25;:39::i;:::-;:43;;:76::i;:::-;15881:24;;;:44;;;15935:24;;;:44;;;16112:16;;:27;16153:18;;;;;16068:21;;;;15756:115;;-1:-1:-1;16068:205:32;;:21;16112:27;16185:9;15756:115;16068:30;:205::i;:::-;16356:16;;:26;;;:65;;16403:17;16356:46;:65::i;:::-;16349:72;15421:1007;-1:-1:-1;;;;;;;15421:1007:32:o;16877:448::-;17020:6;4075:3:67;17046:11:32;:47;17038:56;;;;;;17133:11;4075:3:67;17277:39:32;;;17233:40;:22;17133:11;17233:26;:40::i;:::-;:84;;;;;;;16877:448;-1:-1:-1;;;;16877:448:32:o;12522:2178:86:-;12653:26;12835:1;12816:8;:16;;;:20;12808:29;;;;;;4075:3:67;13167:11:86;:48;;13159:57;;;;;;13246:25;;13231:40;;13227:1467;;13440:25;;13399:18;;;;13366:100;;13440:25;13366:52;;:11;;:32;:52::i;:::-;:73;;:100::i;:::-;13345:121;;13227:1467;;;13502:8;:25;;;13487:11;:40;13483:1211;;14081:18;;;;13998:25;;13970;;;;13873:18;;;;13789:311;;14081:18;13789:235;;13970:53;;;;13789:124;;13790:39;;;13873;;;13789:83;:124::i;13483:1211::-;14366:317;14664:8;:18;;;14366:241;14581:8;:25;;;4075:3:67;14545:61:86;14366:122;14469:8;:18;;;14450:8;:16;;;:37;14381:8;:25;;;14367:11;:39;14366:83;;:122;;;;:::i;12750:653:32:-;12893:7;13015:1;12989:15;:22;:27;;12981:36;;;;;;13047:349;13096:15;13112:1;13096:18;;;;;;;;;;;;;;:27;;;13141:15;13157:1;13141:18;;;;;;;;;;;;;;:27;;;13186:15;13202:1;13186:18;;;;;;;;;;;;;;:29;;;13233:15;13249:1;13233:18;;;;;;;;;;;;;;;;;;:29;;;13361:21;13345:37;;13047:31;:349::i;13710:1660::-;13914:19;;;;13962:21;;;;13872:7;;13914:19;3204:9:67;14076:39:32;;14133:28;;;14125:37;;;;;;14355:9;14343:8;:21;14339:1025;;14403:219;14612:9;14403:183;14557:28;;;14403:76;14404:20;;;14451:27;;;14403:47;:76::i;:219::-;14380:242;;;;;;;14339:1025;14813:12;14844:183;14998:28;;;14844:76;14845:20;;;14892:27;;;14844:47;:76::i;:183::-;14813:214;;15326:4;15314:9;:16;:39;;15352:1;15314:39;;;15345:4;15333:9;:16;15314:39;15307:46;;;;;;;;14339:1025;13710:1660;;;;;;;;:::o;14819:2162:86:-;14966:19;15141:1;15122:8;:16;;;:20;15114:29;;;;;;15174:8;:18;;;15158:12;:34;15154:1821;;15363:18;;;;15315:25;;15281:101;;15363:18;15281:60;;:12;;:33;:60::i;15154:1821::-;15419:8;:18;;;15403:12;:34;15399:1576;;15995:25;;15919:18;;;;15898;;;;15787:25;;;;15709:312;;15995:25;15709:229;;15898:39;;;;15709:132;;15710:33;;;15787:53;;;15709:77;:132::i;15399:1576::-;16938:25;;;;16862:18;;;;16843:16;;;;16646:318;;16938:25;16646:235;;16843:37;;;;16646:140;;16647:33;;4075:3:67;16724:61:86;;;16646:77;:140::i;2414:117:109:-;2463:7;2495:1;2490;:6;;2482:15;;;;;;-1:-1:-1;2522:1:109;2414:117::o;27471:597:32:-;27682:22;3204:9:67;27707:42:32;27733:15;27707:25;:42::i;:::-;:62;;-1:-1:-1;27779:64:32;:6;:64;;;27707:62;27779:36;:64::i;:::-;27854:207;27902:6;:19;;;27935:10;27959:6;:15;;;27988:6;:26;;;28028:23;:6;:17;;;:21;:23::i;:::-;27854:34;:207::i;6720:4188:94:-;6843:4;;;;;;;;7455:574;7479:27;;:34;7475:38;;7455:574;;;7534:27;7564:14;:27;;;7592:1;7564:30;;;;;;;;;;;;;;7534:60;;7777:32;7755:54;;;;;;;;:5;:18;;;:54;;;;;;;;;;7747:63;;;;;;7907:24;7885:5;:18;;;:46;;;;;;;;;;:69;;;;-1:-1:-1;7935:14:94;;;;:19;7885:69;7881:138;;;7974:30;7986:14;8002:1;7974:11;:30::i;:::-;-1:-1:-1;7515:3:94;;7455:574;;;;8128:9;8123:1217;8147:27;;:34;8143:38;;8123:1217;;;8202:27;8232:14;:27;;;8260:1;8232:30;;;;;;;;;;;;;;8202:60;;8303:24;8281:46;;;;;;;;:5;:18;;;:46;;;;;;;;;8277:1053;;;8414:17;;;;8392:19;8480:25;;8458:65;;;8587:24;8565:5;:18;;;:46;;;;;;;;;8561:361;;;8721:17;;;;;8871:32;8721:5;:17;8871:11;:32::i;:::-;8561:361;;;9135:180;9180:5;9207:7;9236:25;9283:14;9135:23;:180::i;:::-;9080:235;;-1:-1:-1;9080:235:94;-1:-1:-1;9080:235:94;-1:-1:-1;8277:1053:94;-1:-1:-1;8183:3:94;;8123:1217;;;-1:-1:-1;9405:32:94;;;;9376:26;9540:37;:35;:37::i;:::-;-1:-1:-1;;;;;9654:14:94;;9587:64;9654:14;;;;;;;;;;9447:130;;-1:-1:-1;9678:735:94;9702:14;:24;;;:31;9698:1;:35;9678:735;;;9754:27;9784:14;:24;;;9809:1;9784:27;;;;;;;;;;;;;;9754:57;;9829:5;:14;;;9847:1;9829:19;9825:33;;;9850:8;;;9825:33;9919:24;9897:5;:18;;;:46;;;;;;;;;;:120;;;;-1:-1:-1;9985:32:94;9963:5;:18;;;:54;;;;;;;;;;9897:120;9872:159;;;;;;10138:160;10179:5;10202:7;10227:25;10270:14;10138:23;:160::i;:::-;10083:215;;-1:-1:-1;10083:215:94;-1:-1:-1;10083:215:94;-1:-1:-1;10313:52:94;10325:5;10332:12;10345:18;10332:32;;;;;;;;10313:11;:52::i;:::-;10401:1;10379:23;;;;9678:735;;9735:3;;9678:735;;;;10600:2;10578:18;:24;;10570:33;;;;;;10682:16;10664:34;;;10656:43;;;;;;-1:-1:-1;10770:7:94;;10791:25;;-1:-1:-1;10791:25:94;-1:-1:-1;10836:18:94;-1:-1:-1;6720:4188:94;-1:-1:-1;;;;6720:4188:94:o;13415:217:75:-;13562:63;13586:13;13601:10;13613:11;13562:23;:63::i;:::-;13415:217;;;:::o;5951:558:89:-;6179:16;6148:47;;6112:84;;;;;;6240:47;6290:36;:34;:36::i;:::-;-1:-1:-1;;;;;6368:19:89;;;6336:29;6368:19;;;;;;;;-1:-1:-1;6368:19:89;;;;6397:57;;6464:38;;;;-1:-1:-1;;;6464:38:89;-1:-1:-1;;;;6397:57:89;;;;-1:-1:-1;;;6397:57:89;-1:-1:-1;;6397:57:89;;;;;;;6464:38;;;;;;;5951:558::o;11406:1085::-;11562:25;11576:10;11562:25;;:13;:25::i;:::-;-1:-1:-1;;;;;11540:47:89;:19;;;:47;;;11701:27;;;;;;11808:37;;:16;:37::i;:::-;11624:221;;;;;;;;11897:19;12012:62;12054:6;:19;;;12012:41;:62::i;:::-;-1:-1:-1;;12085:26:89;;;:48;;;12143:18;;;:40;;;-1:-1:-1;;;;;;12193:30:89;;:17;;;:30;12308:19;;;;11883:191;;-1:-1:-1;12258:124:89;;12341:16;-1:-1:-1;12258:36:89;:124::i;:::-;12234:21;;;:148;12452:19;;;;12414:70;;12473:10;12414:37;:70::i;:::-;12393:18;;;;:91;;;;-1:-1:-1;;;;;11406:1085:89:o;15738:264:83:-;15823:26;;:::i;:::-;15865;15894:47;15930:10;15894:35;:47::i;:::-;15865:76;;15958:37;15973:10;15985:9;15958:14;:37::i;607:160:84:-;665:7;2986:5:67;692:4:84;:21;;684:30;;;;;;2986:5:67;739:4:84;:20;;6625:2848:32;7497:21;7521:36;7547:9;7521:25;:36::i;:::-;7497:60;;7604:13;7575:6;:26;;;:42;7567:51;;;;;;7885:20;7907:27;7938:47;7967:6;7975:9;7938:28;:47::i;:::-;7884:101;;;;8162:26;8190;8218:21;8255:254;8316:6;:19;;;8353:6;:16;;;:27;;;8398:6;:26;;;8442:9;8469:6;:16;;;:26;;;8255:43;:254::i;:::-;8161:348;;-1:-1:-1;8161:348:32;-1:-1:-1;8161:348:32;-1:-1:-1;8605:45:32;8161:348;8629:20;8605:23;:45::i;:::-;8742:18;;;;8583:67;;-1:-1:-1;8742:37:32;;8765:13;8742:22;:37::i;:::-;8721:18;;;:58;;;9012:19;;;;9045:16;;:27;;8943:26;;;;;:262;;:26;;9012:19;9045:27;9143:19;9176;8943:55;:262::i;:::-;8922:18;;;:283;;;9317:1;-1:-1:-1;9288:31:32;;;;;;9442:24;:13;:22;:24::i;:::-;9413:53;;:26;;;;:53;;;;-1:-1:-1;;;;;;;6625:2848:32:o;9605:1526::-;9808:28;9839:42;:6;:16;;;:40;:42::i;:::-;9808:73;;9979:22;10004:36;10030:9;10004:25;:36::i;:::-;9979:61;-1:-1:-1;10630:1:32;10613:512;10637:21;;;;:34;:41;10633:45;;10613:512;;;10699:415;10764:10;10869:6;:21;;;:34;;;10904:1;10869:37;;;;;;;;;;;;;;:46;;;10933:9;11025:5;11048:20;11086:14;10699:15;10715:1;10699:18;;;;;;;;;;;;;;:47;;:415;;;;;;;;;:::i;:::-;10680:3;;10613:512;;;;9605:1526;;;;;;:::o;17453:3622:42:-;17642:27;17681:20;17704:85;17740:6;:19;;;17761:6;:16;;;:27;;;17704:85;;:35;:85::i;:::-;18064:17;;;;18644:22;;17681:108;;-1:-1:-1;6857:1:67;18064:52:42;4775:16:67;18050:97:42;;18011:24;;18644:27;:74;;18686:32;:9;3204::67;18686:13:42;:32::i;:::-;18644:74;;;18674:9;18644:74;18614:104;;18729:14;18746:28;:12;:26;:28::i;:::-;18729:45;;18784:2197;18791:11;;18784:2197;;18902:16;18921:66;18952:6;:26;;;18980:6;18921:30;:66::i;:::-;18902:85;;19001:18;19022:146;19070:6;:16;;;:31;;;19119:8;19145:9;19022:30;:146::i;:::-;19001:167;;19250:13;19245:1553;;19384:19;;;;19429:16;;:27;19283:15;;19321:191;;;;19482:8;19321:37;:191::i;:::-;19283:229;;19617:1;19606:8;:12;19602:1182;;;20284:16;;20263:18;;20284:67;;20321:8;20331:19;20284:36;:67::i;:::-;20263:88;;20397:10;20378:16;:29;20374:198;;;-1:-1:-1;20448:1:42;20374:198;;;20517:32;:10;20532:16;20517:14;:32::i;:::-;20504:45;;20374:198;20617:148;20667:76;20701:8;20711;20721:9;20732:10;20667:33;:76::i;:::-;20617:20;;:24;:148::i;:::-;20594:171;;19602:1182;;19245:1553;;20885:34;:12;20905:6;20913:5;20885:19;:34::i;:::-;20870:49;;20942:28;:12;:26;:28::i;:::-;20933:37;;18784:2197;;;;;20998:16;;:26;;;:70;;21047:20;20998:48;:70::i;:::-;20991:77;17453:3622;-1:-1:-1;;;;;;;;17453:3622:42:o;1790:176:109:-;1851:8;1875:9;1879:1;1882;1875:3;:9::i;:::-;1871:13;;1907:1;1902;:6;;1894:15;;;;;6603:501:89;6724:29;6755:34;6805:67;6875:36;:34;:36::i;:::-;6921:59;6983:17;;;;;;;;;;6805:106;;-1:-1:-1;7048:49:89;6983:17;7082:14;7048;:49::i;:::-;7010:87;;;;-1:-1:-1;6603:501:89;-1:-1:-1;;;;;6603:501:89:o;9899:567::-;10027:27;10070:67;10140:33;:31;:33::i;:::-;10183:56;10242:17;;;;;;;;;;10070:103;;-1:-1:-1;10413:46:89;10242:17;10444:14;10413;:46::i;:::-;10368:91;9899:567;-1:-1:-1;;;;;;9899:567:89:o;9202:496:86:-;9417:30;9450:42;:40;:42::i;:::-;:54;;;;;;;;;;;;;;;;-1:-1:-1;9549:44:86;:42;:44::i;:::-;:56;;;;;;;;;;;;;;-1:-1:-1;9549:56:86;;;;9634:14;;9615:33;;9689:1;9677:14;;;;9658:16;;:33;9202:496::o;7361:327::-;7487:31;;:::i;:::-;7537:144;7578:10;7602:11;7627:44;:42;:44::i;:::-;7537:27;:144::i;415:190:109:-;495:5;;;-1:-1:-1;;514:7:109;;510:88;;;532:6;;;:20;;;551:1;546;542;:5;;;;;;:10;532:20;523:30;;;;;;510:88;;;577:6;;;:20;;;596:1;591;587;:5;;;;;;:10;577:20;568:30;;;;;1039:239;1095:8;1125:1;-1:-1:-1;;1125:7:109;:27;;;;;-1:-1:-1;;;1136:1:109;:16;1125:27;1123:30;1115:39;;;;;;1270:1;1266;:5;;;;;;;1039:239;-1:-1:-1;;;1039:239:109:o;3232:2070:94:-;3528:27;;3490:186;;3573:10;3601:8;3627:9;3654:8;3490:20;:186::i;:::-;3431:263;;;3687:7;;3431:263;3708:32;;;;:36;3704:296;;3760:11;3774:183;3812:14;:24;;;3854:10;3882:8;3908:9;3935:8;3774:20;:183::i;:::-;3760:197;;3975:6;3971:19;;;3983:7;;;3971:19;3704:296;;4164:40;4194:9;4164:29;:40::i;:::-;4160:152;;;4240:1;4228:8;:13;;4220:22;;;;;;-1:-1:-1;;;;;;4329:27:94;;;;;:58;;-1:-1:-1;;;;;;4360:27:94;;;4329:58;4321:67;;;;;;4538:14;:24;;;:31;4502:14;:32;;;:67;4498:171;;;4612:46;4633:14;:24;;;4612:20;:46::i;:::-;4585:24;;;:73;4498:171;4939:30;4972:14;:24;;;4997:14;:32;;;4972:58;;;;;;;;;;;;;;;;;;;5040:32;;;;;;;5082:17;;:28;;;;5120:18;;;;:30;;;;5160:17;;;:28;-1:-1:-1;5198:21:94;;;;:50;;;;-1:-1:-1;5258:32:94;:37;;5294:1;5258:37;;;3232:2070::o;14618:228:92:-;14738:6;14763:76;4255:4:67;14763:37:92;14784:2;:15;;;14763:16;:20;;:37;;;;:::i;1156:178:110:-;1214:7;1237:6;1233:20;;-1:-1:-1;1252:1:110;1245:8;;1233:20;1275:5;;;1279:1;1275;:5;:1;1298:5;;;;;:10;1290:19;;;;;1798:120;1856:7;1887:1;1883;:5;1875:14;;;;;;1910:1;1906;:5;;;;;;;1798:120;-1:-1:-1;;;1798:120:110:o;6014:1576:83:-;6219:7;6262:13;6246;:29;6238:38;;;;;;6365:12;6349:13;:28;6341:37;;;;;;6625:9;6613:8;:21;6609:975;;6673:221;6884:9;6673:185;6829:28;;;6673:78;6674:20;;;6721:29;;;6673:47;:78::i;:221::-;6650:244;;;;6609:975;7260:313;7358:197;7526:28;;;7358:82;7359:20;;;7410:29;;;7358:51;:82::i;:197::-;7260:9;;:13;:313::i;7700:796:87:-;7956:100;8059:29;:27;:29::i;:::-;8098:35;8136:17;;;;;;;;;;;8154:15;;;;8136:34;;;;;;;:50;;;;;;;;;;8255:17;;;;8286:21;;;;8321:22;;;;8357:17;;;;8388:24;;;;7956:132;;-1:-1:-1;8136:50:87;;8197:225;;8136:50;;8255:17;8286:21;8321:22;8197:17;:225::i;:::-;8433:56;8452:13;8467:6;:21;;;8433:18;:56::i;1570:90:109:-;1616:8;1643:10;-1:-1:-1;;1651:1:109;1643:3;:10::i;3387:2020:93:-;3570:6;3588:20;3611:36;3627:7;3636:10;3611:36;;:15;:36::i;:::-;3588:59;;3657:99;3759:35;:33;:35::i;:::-;-1:-1:-1;;;;;3838:14:93;;3804:31;3838:14;;;;;;;;;;;:26;;;;;;;;;;:36;;;;;;;;3657:137;;-1:-1:-1;3804:31:93;3917:56;3948:14;3865:8;3917:30;:56::i;:::-;3884:89;;;;3991:7;3983:16;;;;;;4059:29;:12;4081:6;4059:21;:29::i;:::-;4055:741;;;4197:18;;;;;;4172:43;;:22;4252:29;:8;4172:43;4252:12;:29::i;:::-;4229:52;;4316:24;:13;:22;:24::i;:::-;4295:45;;;;;;;-1:-1:-1;;;;;4295:45:93;-1:-1:-1;;;;;;4295:45:93;;;;;;4355:146;4426:7;4435:10;4447:8;4457:15;4474:13;4355:53;:146::i;:::-;4585:18;4581:106;;4638:34;:12;4658:6;4666:5;4638:19;:34::i;:::-;4623:49;;4581:106;4701:50;4717:7;4726:10;4701:50;;4738:12;4701:15;:50::i;:::-;4772:13;-1:-1:-1;4765:20:93;;-1:-1:-1;;;;;;4765:20:93;4055:741;4810:13;;4806:569;;4958:19;:8;:17;:19::i;:::-;4937:40;;;;;;;-1:-1:-1;;;;;4937:40:93;-1:-1:-1;;;;;;4937:40:93;;;;;;4992:245;5063:7;5088:10;5116:8;4937:18;5215:8;4992:53;:245::i;:::-;5267:33;:12;5287:6;5295:4;5267:19;:33::i;:::-;5252:48;;5314:50;5330:7;5339:10;5314:50;;5351:12;5314:15;:50::i;:::-;-1:-1:-1;5392:8:93;;3387:2020;-1:-1:-1;;;;;;;;;3387:2020:93:o;13049:2038:94:-;13163:27;;:34;13155:42;;13147:51;;;;;;13280:1;13245:14;:32;;;:36;13237:45;;;;;;13329:35;13367:14;:27;;;13395:5;13367:34;;;;;;;;;;;;;;13329:72;;13462:24;13432:54;;;;;;;;:13;:26;;;:54;;;;;;;;;;:132;;;;-1:-1:-1;13532:32:94;13502:13;:26;;;:62;;;;;;;;;;13432:132;13411:163;;;;;;13613:32;;;:37;;-1:-1:-1;;13613:37:94;;;-1:-1:-1;;;13891:338:94;13911:27;;:34;13907:38;;13891:338;;;13966:23;13992:14;:27;;;14020:1;13992:30;;;;;;;;;;;;;;13966:56;;14056:13;14040:1;:13;;;:29;:75;;;;-1:-1:-1;14091:24:94;14073:1;:14;;;:42;;;;;;;;;;14040:75;14036:183;;;14151:1;:13;;;14135:29;;14203:1;14182:22;;14036:183;-1:-1:-1;13947:3:94;;13891:338;;;;14252:18;14243:5;:27;14239:236;;;-1:-1:-1;;14420:24:94;14391:26;;;;;:53;14458:7;;14239:236;14688:33;14724:14;:27;;;14752:18;14724:47;;;;;;;;;;;;;;;;;;14884:25;;;;;;14923:23;;;;;14781:175;;;;14993:24;14966;;;;:51;15056:24;15027:26;;:53;;;;-1:-1:-1;;;13049:2038:94;;;:::o;11952:862::-;12099:16;;12095:20;;;;;;:68;;-1:-1:-1;12119:16:94;;6330:6:67;12119:44:94;;;;;;12095:68;12087:77;;;;;;12228:5;:14;;;12224:1;:18;:56;;;;-1:-1:-1;12246:14:94;;;;12264:16;-1:-1:-1;12246:34:94;12224:56;12216:65;;;;;;12342:5;:15;;;12338:1;:19;:77;;;;-1:-1:-1;12361:15:94;;;;5704:1:67;-1:-1:-1;12361:54:94;12338:77;12330:86;;;;;;12487:14;;;;-1:-1:-1;;;;;;12468:33:94;;;;:70;;-1:-1:-1;12505:14:94;;;;-1:-1:-1;;;;;;12505:33:94;12468:70;12460:79;;;;;;12622:16;;12589:50;;12680:14;;;;12736:15;;;;12792:14;;;;;12762:45;;-1:-1:-1;;;;;12762:45:94;-1:-1:-1;;;12762:45:94;-1:-1:-1;;12705:47:94;;;;-1:-1:-1;;;12705:47:94;-1:-1:-1;;12649:46:94;;;;;;-1:-1:-1;;12589:50:94;;;;-1:-1:-1;;12589:50:94;;;;;;;12649:46;;;;;;;;12705:47;;;;;12762:45;;;;;;;;;;11952:862::o;10989:917::-;11221:4;11239:7;11260;11292:22;11317:25;:5;:23;:25::i;:::-;11292:50;-1:-1:-1;11414:19:94;;;:54;;;11454:14;11437;:31;11414:54;11410:116;;;11501:14;11484:31;;11410:116;11545:7;:29;;;;11573:1;11556:5;:14;;;:18;11545:29;11535:39;-1:-1:-1;11593:47:94;;;;11585:56;;;;;;-1:-1:-1;;11803:16:94;;11848:7;;11825:3;11787:41;;;;-1:-1:-1;;;;;;11787:41:94;11767:2;11738:31;;;;11737:92;;;;;-1:-1:-1;11884:14:94;11848:7;-1:-1:-1;10989:917:94:o;6879:263:69:-;6946:77;7039:12;7054:41;7070:24;7054:15;:41::i;16302:420:75:-;16439:1;16421:14;:19;;16413:28;;;;;;16475:68;16546:30;:28;:30::i;:::-;-1:-1:-1;;;;;16626:14:75;;16586:37;16626:14;;;;;;;;;;;:26;;;;;;;;;;16475:101;;-1:-1:-1;16691:24:75;:14;:22;:24::i;:::-;16662:53;;;;;;;-1:-1:-1;;;;;16662:53:75;-1:-1:-1;;;16662:53:75;-1:-1:-1;;;;;16662:53:75;;;;;;-1:-1:-1;;;;16302:420:75:o;3012:232:69:-;3078:47;3142:12;3157:40;3173:23;3157:15;:40::i;1904:219:89:-;1970:20;2002:41;2046:36;:34;:36::i;:::-;2099:17;;;;;;-1:-1:-1;;2099:17:89;;;;-1:-1:-1;;;;;2099:17:89;;1904:219::o;1091:737::-;1199:17;1230:35;1279:27;1320:22;1356:17;1398:47;1448:36;:34;:36::i;:::-;-1:-1:-1;;;;;1526:19:89;;;1494:29;1526:19;;;;;;;;-1:-1:-1;;1526:19:89;;;;1569:18;;;;;1627:35;;;;;;;-1:-1:-1;;;;1694:27:89;;;;-1:-1:-1;1750:24:89;-1:-1:-1;;;1750:24:89;;;;-1:-1:-1;;;;1797:24:89;;;;;;-1:-1:-1;1091:737:89:o;734:829:90:-;854:19;887:32;933:27;985:58;1046:40;:38;:40::i;:::-;-1:-1:-1;;;;;1145:19:90;;;;1096:46;1145:19;;;;;;;;-1:-1:-1;;1145:19:90;;;;1188:25;;;;;-1:-1:-1;;;1453:38:90;;-1:-1:-1;;;;;1453:38:90;;-1:-1:-1;;;;1523:33:90;;;;;;-1:-1:-1;734:829:90:o;15903:477:94:-;16049:21;;:::i;:::-;16082:27;;:::i;:::-;16123:21;;;16119:39;;16153:5;-1:-1:-1;16146:12:94;;16119:39;16190:45;16209:7;16218:16;16190:18;:45::i;:::-;16169:66;;16245:42;;;:23;;;:42;16336:13;16315:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;16297:15:94;;;:53;:15;15903:477;-1:-1:-1;;;;15903:477:94:o;15558:483:75:-;15671:18;15701:68;15772:30;:28;:30::i;:::-;-1:-1:-1;;;;;15852:14:75;;15812:37;15852:14;;;;;;;;;;;:26;;;;;;;;;;15902;;-1:-1:-1;;;15902:26:75;;;;;;15888:40;;;-1:-1:-1;15701:101:75;;-1:-1:-1;16017:16:75;;;16009:25;;;;;;15558:483;;;;;;:::o;16240:200:92:-;16323:16;;:::i;:::-;16358:75;16405:10;16417:15;16358:46;:75::i;14779:487:83:-;14881:26;;:::i;:::-;14924:12;14939:37;14965:10;14939:37;;:25;:37::i;:::-;15070:189;;;;;;;;;;;;;;;15017:22;;;15070:189;;;;;;;;;;-1:-1:-1;;15070:189:83;;;;;14779:487::o;4399:2220:32:-;4527:20;4549:27;4588:30;;:::i;:::-;4667:21;;;;:34;4628:36;4801:1812;4821:12;:19;4817:1;:23;4801:1812;;;4861:27;4891:12;4904:1;4891:15;;;;;;;;;;;;;;4861:45;;4972:46;5002:5;:15;;;4972:29;:46::i;:::-;4964:55;;;;;;5051:18;5072:37;5103:5;5072:30;:37::i;:::-;5051:58;;5209:9;5195:10;:23;;5187:32;;;;;;5237:81;5265:6;5273:5;:16;;;5237:81;;5291:5;:14;;;5307:10;5237:27;:81::i;:::-;4801:1812;5347:12;5391:16;5446:38;5469:5;:14;;;5446:6;:22;;:38;;;;:::i;:::-;5425:59;-1:-1:-1;5425:59:32;-1:-1:-1;5518:28:32;:13;5425:59;5518:17;:28::i;:::-;5502:44;;4801:1812;5881:9;5863:5;:14;;;:27;5859:693;;6084:19;;;;6105:16;;6123:14;;;;6016:16;;:26;;;5990:23;;6016:157;;:26;;6084:19;;6105:16;6139:5;6146:9;6016:46;:157::i;:::-;5990:183;-1:-1:-1;6214:42:32;:20;5990:183;6214:24;:42::i;:::-;6191:65;;5859:693;;;;6295:242;6351:6;:19;;;6392:5;:16;;;6430:5;:14;;;6466:6;:26;;;6514:5;6295:34;:242::i;:::-;;5859:693;6566:21;;;;:36;;6600:1;6566:33;:36::i;:::-;-1:-1:-1;;4842:3:32;;4801:1812;;;;4399:2220;;;;;;;:::o;1462:2801:96:-;1673:26;1701;1729:21;1762:14;1779:56;1815:7;1824:10;1779:56;;:35;:56::i;:::-;1762:73;;2188:31;2209:9;2188:20;:31::i;:::-;2172:47;;2326:13;2309;:30;;2301:39;;;;;;2569:21;2609:60;2640:13;2655;2609:30;:60::i;:::-;-1:-1:-1;2568:101:96;-1:-1:-1;2683:18:96;2679:52;;2711:1;2714;2703:28;;;;;;;;2679:52;2800:18;2821:22;:6;:20;:22::i;:::-;2800:43;;2853:780;2860:15;;;;;:46;;;2893:13;2879:10;:27;;2860:46;2853:780;;;2922:16;2941:57;2972:13;2987:10;2941:30;:57::i;:::-;2922:76;;3012:23;3038:77;3056:7;3065:10;3077:8;3087:9;3098:16;3038:17;:77::i;:::-;3012:103;;3262:1;3243:16;:20;3239:224;;;3305:41;:19;3329:16;3305:23;:41::i;:::-;3283:63;;3239:224;;;3407:41;:19;3431:16;3407:23;:41::i;:::-;3385:63;;3239:224;3541:32;:6;3555:10;3567:5;3541:13;:32::i;:::-;3532:41;;3600:22;:6;:20;:22::i;:::-;3587:35;;2853:780;;;;;3643:17;3670:509;3677:15;;3670:509;;3708:16;3727:57;3758:13;3773:10;3727:30;:57::i;:::-;3708:76;;3799:17;3818:12;3834:55;3865:13;3880:8;3834:30;:55::i;:::-;3798:91;;;;3911:7;3903:16;;;;;;3974:33;:9;3991;4002:4;3974:16;:33::i;:::-;3962:45;-1:-1:-1;4087:32:96;:6;4101:10;4113:5;4087:13;:32::i;:::-;4078:41;;4146:22;:6;:20;:22::i;:::-;4133:35;;3670:509;;;;;;4189:67;4225:7;4234:10;4189:67;;4246:9;4189:35;:67::i;:::-;1462:2801;;;;;;;;;;;;;;:::o;1444:120:109:-;1533:5;;;1528:16;;;;1500:8;1549:6;;;1528:28;1520:37;;;;;8584:4051:92;8841:27;;9005:75;9060:19;9005:50;:25;9035:19;9005:29;:50::i;:::-;:54;;:75::i;:::-;8979:101;;9113:43;9135:2;9139:16;9113:21;:43::i;:::-;9090:66;;11526:19;11521:1;:24;;11513:33;;;;;;11587:1;11564:19;:24;;11556:33;;;;;;11608:25;11604:1;:29;11600:235;;;11671:50;:25;11701:19;11671:29;:50::i;:::-;11649:72;;11600:235;;;11774:50;:25;11804:19;11774:29;:50::i;:::-;11752:72;;11600:235;11845:27;11914:19;11886:25;:19;:23;:25::i;:::-;:47;11882:316;;;-1:-1:-1;12030:19:92;11882:316;;;12162:25;:19;:23;:25::i;:::-;12139:48;;11882:316;12315:1;12292:20;:24;12288:341;;;12406:13;;;;12385:15;;12332:25;;12360:60;;:41;;:20;;:24;:41::i;:60::-;12332:88;;12435:183;12495:7;12520:10;12548:18;12584:20;12435:42;:183::i;:::-;12288:341;;8584:4051;;;;;;;;;;:::o;3405:133:110:-;3457:6;3488:16;3483:21;;;3475:30;;;;;4763:311:83;4998:14;;;2851:3:67;1646:1:83;4998:41;;;;4976:66;;:91;;4763:311::o;10854:612:87:-;11142:80;11161:6;11169:10;11181:8;11191:14;11207;11142:18;:80::i;:::-;11253:206;11301:6;:24;;;11339:6;:22;;;11375:6;:17;;;11406:20;11440:9;11253:34;:206::i;:::-;11233:17;;;;:226;;;;-1:-1:-1;;;;;;10854:612:87:o;1028:266:93:-;1113:20;1145:61;1209:35;:33;:35::i;:::-;-1:-1:-1;;;;;1261:14:93;;;;;;;;;;;;;;:26;;;;;;;;;-1:-1:-1;;1028:266:93;;;;:::o;788:121:110:-;846:7;878:1;873;:6;;865:15;;;;;;-1:-1:-1;897:5:110;;;788:121::o;3198:233:107:-;3260:14;3349;3345:28;;-1:-1:-1;3372:1:107;3365:8;;3345:28;3397:23;3412:6;3397;:23::i;:::-;3391:3;:29;3423:1;3391:33;3384:40;;3198:233;;;:::o;6830:1476:84:-;6943:7;6974:11;6966:20;;;;;;7067:3;7057:6;:13;;7049:22;;;;;;7135:21;7159:22;7171:9;7159:11;:22::i;:::-;7135:46;;7191:16;3844:2:67;7222:6:84;:35;7218:1082;;-1:-1:-1;2986:5:67;7296:22:84;;7280:38;;-1:-1:-1;7273:45:84;;7218:1082;3897:3:67;7339:6:84;:36;7335:965;;-1:-1:-1;;;7646:34:84;;3107:7:67;7645:53:84;;;7582:30;;;7418:195;;;7634:64;7450:40;7634:64;;-1:-1:-1;7627:71:84;;7335:965;3953:3:67;7719:6:84;:38;7715:585;;-1:-1:-1;;;7958:35:84;;3154:8:67;7957:55:84;;;7893:31;;;7800:125;;;7946:66;7832:41;7946:66;;-1:-1:-1;7939:73:84;;7715:585;-1:-1:-1;;;8231:37:84;;3204:9:67;8230:59:84;;;8164:33;;;8070:128;;;8219:70;8102:42;8219:70;;-1:-1:-1;8212:77:84;;1520:609;1665:4;1706:1;1689:14;:18;1681:52;;;;-1:-1:-1;;;1681:52:84;;;;;;;:::i;:::-;2610:1:67;1751:14:84;:51;;1743:86;;;;-1:-1:-1;;;1743:86:84;;;;;;;:::i;:::-;3204:9:67;1844:8:84;:28;:33;1840:51;;-1:-1:-1;1886:5:84;1879:12;;1840:51;1901:12;1916:36;1942:9;1916:25;:36::i;:::-;1901:51;-1:-1:-1;1980:1:84;1963:137;1988:14;1983:1;:19;1963:137;;2039:37;2048:27;2073:1;2048:24;:27::i;:::-;2039:4;;:8;:37::i;:::-;2027:8;:49;2023:66;;;2085:4;2078:11;;;;;;2023:66;2004:3;;1963:137;;;-1:-1:-1;2117:5:84;;1520:609;-1:-1:-1;;;;;1520:609:84:o;1692:368:93:-;1827:15;1854:99;1956:35;:33;:35::i;:::-;-1:-1:-1;;;;;2008:14:93;;;;;;;;;;;;;;:26;;;;;;;;:36;;;;;;;:45;;;;;2001:52;;;-1:-1:-1;;1692:368:93;;;;;:::o;8812:1744:83:-;8969:18;9000:19;9021:18;9055:70;9079:9;:24;;;9105:8;9115:9;9055:23;:70::i;:::-;8999:126;;;;9135:18;9156:34;9180:9;9156:23;:34::i;:::-;9135:55;;9206:13;9201:1349;;9269:20;;9248:75;;;;9291:8;9301:10;9313:9;9248:20;:75::i;:::-;9235:88;;9201:1349;;;9354:21;9378:36;9404:9;9378:25;:36::i;:::-;9354:60;;9529:20;9552:56;9570:37;9595:11;9570:24;:37::i;9552:56::-;9529:79;;9622:16;9657:79;9678:9;:20;;;9657:79;;9700:12;9714:10;9726:9;9657:20;:79::i;:::-;9622:114;;9751:17;9782:21;9821:11;9836:1;9821:16;9817:614;;;-1:-1:-1;;9997:19:83;;;;;:36;;9958:9;9817:614;;;10147:60;10165:41;10204:1;10190:11;:15;10165:24;:41::i;:::-;10147:13;;:17;:60::i;:::-;10131:76;;10238:178;10280:9;:20;;;10238:178;;10322:13;10357:10;10389:9;10238:20;:178::i;:::-;10226:190;;9817:614;10458:81;10480:13;10495:12;10509:9;10520:8;10530;10458:21;:81::i;:::-;10445:94;8812:1744;-1:-1:-1;;;;;;;;;;;;8812:1744:83:o;2809:669:98:-;2974:6;2996:13;2992:27;;-1:-1:-1;3018:1:98;3011:8;;2992:27;3172:22;3197:23;:8;3210:9;3197:12;:23::i;:::-;3172:48;;3230:21;3254:45;3272:14;3288:10;3254:17;:45::i;:::-;3230:69;;4075:3:67;3318:14:98;:42;;3310:51;;;;;;3428:43;:8;3456:14;3428:27;:43::i;:::-;3421:50;;;;2809:669;;;;;;;:::o;1284:154:109:-;1407:5;;;1402:16;;;;1340:8;1423:6;;;1402:28;1394:37;;;;;303:372:107;415:7;451:1;442:5;:10;;:26;;;;;465:3;456:5;:12;;442:26;434:35;;;;;;513:5;509:160;;;-1:-1:-1;;;;;;569:9:107;;551:28;541:39;;534:46;;509:160;-1:-1:-1;;;;;;647:9:107;;629:28;627:31;618:40;;611:47;;14960:232:92;15169:15;;15083:6;;15108:77;;:56;:17;4255:4:67;15108:21:92;:56::i;3736:251:69:-;3802:67;3885:12;3900:40;3916:23;3900:15;:40::i;10472:545:89:-;10612:15;10629;10656:13;10683:22;10721:14;10708:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10708:28:89;;10683:53;;10746:22;10784:14;10771:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10771:28:89;;10746:53;;10814:9;10809:168;10829:14;10825:1;:18;10809:168;;;10876:4;10881:5;10876:11;;;;;;;;;;;;;;;;;;;;;;;;;;;10864:23;;:6;10871:1;10864:9;;;;;;;;;;;;;;;;;:23;10901:7;;;;;10934:4;10901:7;10934:11;;;;;;;;;;;;;;;;;;;;;;;;;;;10922:23;;:6;10929:1;10922:9;;;;;;;;;;;;;;;;;:23;10959:7;;;;;10845:3;10809:168;;;-1:-1:-1;10995:6:89;;-1:-1:-1;11003:6:89;-1:-1:-1;;10472:545:89;;;;;;:::o;4124:255:69:-;4187:67;4270:12;4285:47;4301:30;4285:15;:47::i;12196:249::-;12269:44;12330:12;12345:53;12361:36;12345:15;:53::i;11791:253::-;11866:44;11927:12;11942:55;11958:38;11942:15;:55::i;2515:396:86:-;2690:31;;:::i;:::-;2733:12;2748:34;2770:11;2748:21;:34::i;:::-;2807:17;;;2792:12;2807:17;;;;;;;;;;2733:49;;-1:-1:-1;2792:12:86;2839:1;2825:15;;:23;;2847:1;2825:23;;;2843:1;2825:23;2807:42;;;;;;;;;;;2792:57;;2866:38;2891:6;2899:4;2866:24;:38::i;1428:1464:94:-;1635:4;;1651:1212;1675:10;:17;1671:1;:21;1651:1212;;;1713:27;1743:10;1754:1;1743:13;;;;;;;;;;;;;;1713:43;;1810:9;1791:5;:15;;;:28;;:78;;;;1859:10;1839:30;;:5;:16;;;:30;;;;1791:78;:124;;;;1907:8;1889:5;:14;;;:26;;1791:124;1770:168;;;1930:8;;;1770:168;2136:24;2114:5;:18;;;:46;;;;;;;;;;:120;;;;-1:-1:-1;2202:32:94;2180:5;:18;;;:54;;;;;;;;;;2114:120;2089:159;;;;;;2326:14;;;;2305:18;;2326:28;;2345:8;2326:18;:28::i;:::-;2305:49;;2434:40;2464:9;2434:29;:40::i;:::-;2430:163;;;2517:1;2502:11;:16;;2494:25;;;;;;-1:-1:-1;;;;;;2615:30:94;;;;;:64;;-1:-1:-1;;;;;;2649:30:94;;;2615:64;2607:73;;;;;;2739:14;;;:28;2802:24;2781:18;;;;:45;;;2802:24;-1:-1:-1;2841:11:94;;-1:-1:-1;2841:11:94;1651:1212;1694:3;;1651:1212;;;-1:-1:-1;2880:5:94;;1428:1464;-1:-1:-1;;;;;;1428:1464:94:o;840:222:98:-;908:4;5645:1:67;943:48:98;;;;;:112;;-1:-1:-1;;5704:1:67;-1:-1:-1;1007:48:98;;840:222::o;5443:648:94:-;5554:23;5792:17;5812:9;:16;5832:1;5812:21;:48;;5840:9;:16;5859:1;5840:20;5812:48;;;5836:1;5812:48;5792:68;;5870:37;5931:9;5910:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;5870:71;;5956:9;5951:103;5975:9;:16;5971:1;:20;5951:103;;;6031:9;6041:1;6031:12;;;;;;;;;;;;;;6012:13;6026:1;6012:16;;;;;;;;;;;;;;;;;:31;5993:3;;5951:103;;;-1:-1:-1;6071:13:94;5443:648;-1:-1:-1;;;5443:648:94:o;5841:257:69:-;5900:87;6003:12;6018:33;6034:16;6018:15;:33::i;8820:1123:87:-;9092:1;9078:10;:15;;:49;;;;-1:-1:-1;;;;;;9097:30:87;;;9078:49;9070:58;;;;;;9200:1;9182:14;:19;;:57;;;;-1:-1:-1;;;;;;9205:34:87;;;9182:57;9174:66;;;;;;9302:15;9298:1;:19;:58;;;;-1:-1:-1;9340:16:87;9321:35;;;9298:58;9290:67;;;;;;9420:10;9416:1;:14;:48;;;;-1:-1:-1;9448:16:87;9434:30;;;9416:48;9408:57;;;;;;9566:16;9545:37;;;9511:72;;;;;;9639:45;;-1:-1:-1;;;;;;9639:45:87;-1:-1:-1;;;;;9639:45:87;;;;-1:-1:-1;;;;9694:53:87;-1:-1:-1;;;9694:53:87;;;;;;;;;;;;-1:-1:-1;;;;9757:55:87;-1:-1:-1;;;9757:55:87;;;;;;-1:-1:-1;;;;9822:45:87;-1:-1:-1;;;9822:45:87;;;;;;;;;;;-1:-1:-1;;;;;9877:59:87;-1:-1:-1;;;9877:59:87;;;;;;;;8820:1123::o;8502:312::-;8657:1;8639:14;:19;;:57;;;;-1:-1:-1;;;;;;8662:34:87;;;8639:57;8631:66;;;;;;8754:28;;;;;:53;;-1:-1:-1;;;;;;8754:53:87;-1:-1:-1;;;;;8754:53:87;;;;;;;;;8502:312::o;6524:269:69:-;6589:87;6692:12;6707:39;6723:22;6707:15;:39::i;3977:2699:84:-;4092:7;4101:4;4121:21;4145:22;4157:9;4145:11;:22::i;:::-;4121:46;-1:-1:-1;2986:5:67;4235:8:84;:24;:29;4231:52;;4274:1;4277:5;4266:17;;;;;;;4231:52;4356:8;4339:13;:25;4335:48;;4374:1;4377:5;4366:17;;;;;;;4335:48;2986:5:67;4508:24:84;;;4507:42;3571:2:67;4632:38:84;;4628:1887;;4694:10;-1:-1:-1;4706:4:84;;-1:-1:-1;4686:25:84;;-1:-1:-1;4686:25:84;4628:1887;3623:3:67;4732:10:84;:39;4728:1787;;5044:20;2986:5:67;3107:7;5164:30:84;;5163:68;5083:148;;-1:-1:-1;;5083:148:84;;-1:-1:-1;3363:1:67;5083:148:84;5480:37;3844:2:67;5452:65:84;3363:1:67;5536:12:84;:37;;;;;;5578:1;5535:44;5258:335;;;;;;;;;4728:1787;3677:4:67;5614:10:84;:40;5610:905;;5670:20;2986:5:67;3154:8;5791:31:84;;5790:69;5709:150;;-1:-1:-1;;5709:150:84;;-1:-1:-1;3412:2:67;5709:150:84;5928:38;3897:3:67;5899:67:84;3412:2:67;5985:12:84;:38;;;;5610:905;3734:4:67;6064:10:84;:42;6060:455;;6122:20;2986:5:67;3204:9;6244:33:84;;6243:71;6161:153;;-1:-1:-1;;6161:153:84;;-1:-1:-1;3464:2:67;6161:153:84;6385:40;3953:3:67;6354:71:84;3464:2:67;6444:12:84;:40;;;;6060:455;-1:-1:-1;6658:3:84;;6663:5;;-1:-1:-1;3977:2699:84;-1:-1:-1;;;;3977:2699:84:o;719:234:107:-;791:4;824:1;815:5;:10;;:26;;;;;838:3;829:5;:12;;815:26;807:35;;;;;;-1:-1:-1;;;901:9:107;890:21;-1:-1:-1;;;889:39:107;;;888:58;;719:234::o;3102:197:109:-;3153:6;-1:-1:-1;;;;;;3180:29:109;-1:-1:-1;3180:29:109;;;:62;;-1:-1:-1;;;;;;3213:29:109;;;3180:62;3171:72;;;;;17355:1780:91;17567:20;17590:46;:18;17619:16;17590:28;:46::i;:::-;17567:69;-1:-1:-1;17650:18:91;17646:31;;17670:7;;;17646:31;17687:75;17765:41;:39;:41::i;:::-;17886:17;;;17859:16;17886:17;;;;;;;;;;;:27;;;;;;;;:42;17687:119;;-1:-1:-1;;;;;;17886:42:91;;;17878:51;;;18114:28;17878:51;18128:13;18114;:28::i;:::-;18092:50;;18176:1;18160:12;:17;;18152:26;;;;;;18233:38;:27;:18;:12;:16;:18::i;:::-;:25;:27::i;:::-;:36;:38::i;:::-;18188:17;;;;;;;;;;;;;;;:27;;;;;;;;:83;;-1:-1:-1;;;;;;18188:83:91;-1:-1:-1;;;;;18188:83:91;;;;;;;;;;19050:78;19083:7;18188:17;:27;19114:13;19050:32;:78::i;:::-;17355:1780;;;;;;;;;:::o;1300:386:93:-;2802:2:67;1441:27:93;:12;:25;:27::i;:::-;:58;;1433:86;;;;-1:-1:-1;;;1433:86:93;;;;;;;:::i;:::-;1529:61;1593:35;:33;:35::i;:::-;-1:-1:-1;;;;;1638:14:93;;;;;;;;;;;;;;;:26;;;;;;;-1:-1:-1;1638:26:93;;:41;1300:386::o;1231:752:98:-;1310:7;1355:1;1337:5;:15;;;:19;:77;;;;-1:-1:-1;1360:15:98;;;;5704:1:67;-1:-1:-1;1360:54:98;1337:77;1329:86;;;;;;1534:15;;;;5645:1:67;-1:-1:-1;1530:81:98;;-1:-1:-1;1597:14:98;;;;1590:21;;1530:81;1622:20;1645:45;1688:1;1670:5;:15;;;:19;1645:24;:45::i;:::-;1921:14;;;;1622:68;;-1:-1:-1;1921:55:98;;3204:9:67;;1921:32:98;;1622:68;1921:18;:32::i;15726:329:69:-;15818:12;494:7;16018:9;16010:18;;;;;;;;:38;;15726:329;-1:-1:-1;;15726:329:69:o;4475:240::-;4535:68;4619:12;4634:34;4650:17;4634:15;:34::i;2904:192:109:-;2954:5;-1:-1:-1;;;;;;2980:28:109;-1:-1:-1;2980:28:109;;;:60;;-1:-1:-1;;;;;;3012:28:109;;;2971:70;;;;;3305:225:69;3371:41;3428:12;3443:40;3459:23;3443:15;:40::i;7504:250::-;7574:58;7648:12;7663:44;7679:27;7663:15;:44::i;15151:219:94:-;15251:30;15311:52;15337:7;15346:16;15311:25;:52::i;27590:1073:91:-;27702:21;;:::i;:::-;27735:31;27769;27789:10;27769:19;:31::i;:::-;27735:65;;27895:9;27870:7;:22;;;:34;27866:528;;;27920:28;27962:30;27995:38;28022:10;27995:26;:38::i;:::-;27962:71;;28081:109;28122:10;28134:7;28143:22;28167:9;28081:23;:109::i;:::-;28047:143;;-1:-1:-1;28047:143:91;-1:-1:-1;28204:71:91;28233:10;28047:143;;28204:28;:71::i;:::-;27866:528;;;;;28314:22;;:35;;28306:44;;;;;;28411:245;;;;;;;;28449:58;:50;28474:7;:24;;;28449:7;:20;;;:24;;:50;;;;:::i;:::-;:56;:58::i;:::-;28411:245;;;;28533:56;:48;28556:7;:24;;;28533:7;:18;;;:22;;:48;;;;:::i;:56::-;28411:245;;;;28621:7;:24;;;28411:245;;;28404:252;;27590:1073;;;;;:::o;10562:218:83:-;10639:12;10663:41;10707:32;:30;:32::i;:::-;10756:17;;;;;;-1:-1:-1;;10756:17:83;;;;;10562:218::o;11472:263:87:-;11658:70;11677:6;11685:10;11697:8;11707:4;11713:14;11658:18;:70::i;:::-;11472:263;;;;:::o;2021:716::-;2135:16;;2185:19;2181:38;;-1:-1:-1;2214:1:87;;-1:-1:-1;2214:1:87;2206:13;;2181:38;2254:1;2237:14;:18;2229:27;;;;;;2313:68;2359:6;:21;;;2313:41;2339:14;2313:6;:21;;;:25;;:41;;;;:::i;:68::-;2301:80;;2399:64;2441:6;:21;;;2399:37;2421:14;2399:6;:17;;;:21;;:37;;;;:::i;:64::-;2498:21;;;;2391:72;;-1:-1:-1;2498:46:87;;2529:14;2498:30;:46::i;:::-;2474:21;;;:70;2574:17;;;;:33;;2601:5;2574:26;:33::i;:::-;2554:17;;;:53;2641:21;;;;:41;;2672:9;2641:30;:41::i;:::-;2617:21;;;:65;2693:37;2617:6;2693:29;:37::i;4768:853:92:-;4998:29;5039:33;5075:65;5108:10;5120:8;5130:9;5075:32;:65::i;:::-;5039:101;;5151:31;5245:92;5279:16;5297;5315:12;5245:20;:92::i;:::-;5192:145;;-1:-1:-1;5192:145:92;-1:-1:-1;;;;;;5443:21:92;;;5439:176;;5480:124;5521:7;5530:10;5542:8;5552:12;5566:24;5480:23;:124::i;4401:781:96:-;4599:29;4640:99;4742:35;:33;:35::i;:::-;-1:-1:-1;;;;;4805:14:96;;4787:15;4805:14;;;;;;;;;;;:26;;;;;;;;;;:36;;;;;;;;:45;4640:137;;-1:-1:-1;4805:45:96;;;;4787:63;;5011:110;:16;4811:7;4820:10;4832:8;4787:63;5102:9;5011:36;:110::i;:::-;-1:-1:-1;;;;;5139:14:96;;;;;;;;;;;;;;;:26;;;;;;;;;;;;:36;;;;;;;-1:-1:-1;;;5139:36:96;;;5132:43;;-1:-1:-1;;;;;;5132:43:96;;;-1:-1:-1;4986:135:96;4401:781::o;7553:546:92:-;7688:27;7783:1;7750:29;:34;;:342;;8016:76;8090:1;8016:69;8071:2;:13;;;8016:50;8050:2;:15;;;8016:29;:33;;:50;;;;:::i;:69::-;:73;;:76::i;:::-;7750:342;;;-1:-1:-1;7799:29:92;7727:365;-1:-1:-1;7553:546:92:o;11597:2115:91:-;11776:33;11812:32;:30;:32::i;:::-;:44;;;;;;;;;;;;;;;11945:16;;11812:44;;-1:-1:-1;11945:16:91;;11965:15;11945:35;11937:44;;;;;;12436:11;;-1:-1:-1;;;12436:11:91;;;;12428:20;;;;;;12501:16;;;;12459:24;;12486:70;;-1:-1:-1;;;;;12501:16:91;12537:18;12486:50;:70::i;:::-;13026:18;;12459:97;;-1:-1:-1;12982:26:91;;13011:74;;-1:-1:-1;;;13026:18:91;;-1:-1:-1;;;;;13026:18:91;13064:20;13011:52;:74::i;:::-;12982:103;;13276:17;-1:-1:-1;;13270:23:91;:48;;;;;13317:1;13297:17;:21;13270:48;13266:75;;;13340:1;13320:21;;13266:75;13361:19;-1:-1:-1;;13355:25:91;:52;;;;;13406:1;13384:19;:23;13355:52;13351:81;;;-1:-1:-1;13431:1:91;13351:81;13462:37;:26;:17;:24;:26::i;:::-;:35;:37::i;:::-;13443:16;;;:56;;-1:-1:-1;;13443:56:91;-1:-1:-1;;;;;13443:56:91;;;;;;;;;;13530:39;:28;:19;:26;:28::i;:39::-;13509:60;;-1:-1:-1;;;;;13509:60:91;;;;-1:-1:-1;;;13509:60:91;-1:-1:-1;;13509:60:91;;;;;;13580:97;13615:7;13624:10;13636:20;13658:18;13580:34;:97::i;:::-;13687:18;13703:1;13687:15;:18::i;5683:1161:87:-;5987:100;6090:29;:27;:29::i;:::-;6129:35;6167:17;;;;;;;;;;;:27;;;;;;;;:43;;;;;;;;;6311:25;;;6346:15;;;:26;;;6402:24;;-1:-1:-1;;;;;6402:24:87;;;6382:17;;;:44;;;;-1:-1:-1;;;6460:28:87;;;;;6436:21;;;:52;6523:29;-1:-1:-1;;;6523:29:87;;;;6498:22;;;:54;-1:-1:-1;;;6582:24:87;;;;6562:17;;;:44;-1:-1:-1;;;6643:31:87;;;;;;6616:24;;;:58;5987:132;;-1:-1:-1;6167:43:87;6685:153;;;;6743:28;;;;-1:-1:-1;;;;;6743:28:87;6719:21;;;:52;6685:153;;;6826:1;6802:21;;;:25;6685:153;5683:1161;;;;;;;;:::o;10665:1216:86:-;10879:21;10943:1;10920:20;:24;10912:33;;;;;;11109:9;11092:14;:26;11088:55;;;-1:-1:-1;11127:16:86;11120:23;;11088:55;11154:16;11173:29;:9;11187:14;11173:13;:29::i;:::-;11154:48;;11295:20;11284:8;:31;11280:60;;;11324:16;11317:23;;;;;11280:60;11400:23;11426:49;:8;11454:20;11426:27;:49::i;:::-;11400:75;-1:-1:-1;11539:20:86;11562:54;4075:3:67;11400:75:86;11562:37;:54::i;:::-;11539:77;-1:-1:-1;11745:129:86;4075:3:67;11746:71:86;11788:28;:10;11539:77;11788:14;:28::i;:::-;11746:37;:16;11767:15;11746:20;:37::i;11745:129::-;11717:157;10665:1216;-1:-1:-1;;;;;;;;;10665:1216:86:o;6174:243:69:-;6239:61;6316:12;6331:39;6347:22;6331:15;:39::i;1927:1056:107:-;1977:11;2267:6;2259:15;;;;;;-1:-1:-1;;;2315:1:107;:40;2311:104;;2377:3;2371:9;;;;2394:10;2311:104;-1:-1:-1;;;2428:1:107;:24;2424:86;;2474:2;2468:8;;;;2490:9;2424:86;2528:11;2523:1;:16;2519:78;;2561:2;2555:8;;;;2577:9;2519:78;2615:7;2610:1;:12;2606:74;;2644:2;2638:8;;;;2660:9;2606:74;2698:5;2693:1;:10;2689:70;;2725:1;2719:7;;;;2740:8;2689:70;2777:4;2772:1;:9;2768:69;;2803:1;2797:7;;;;2818:8;2768:69;2855:3;2850:1;:8;2846:68;;2880:1;2874:7;;;;2895:8;2846:68;2932:3;2927:1;:8;2923:22;;2944:1;2937:8;1927:1056;;;:::o;3008:753:84:-;3146:7;3155:4;3196:1;3179:14;:18;3171:27;;;;;;2610:1:67;3216:14:84;:51;;3208:60;;;;;;3278:12;3293:36;3319:9;3293:25;:36::i;:::-;3278:51;-1:-1:-1;3357:1:84;3340:396;3365:14;3360:1;:19;3340:396;;3400:22;3425:37;3434:27;3459:1;3434:24;:27::i;:::-;3425:4;;:8;:37::i;:::-;3400:62;;3557:8;3539:14;:26;3535:49;;;-1:-1:-1;3575:1:84;-1:-1:-1;3578:5:84;;-1:-1:-1;3567:17:84;;-1:-1:-1;3567:17:84;3535:49;3699:8;3682:14;:25;3678:47;;;-1:-1:-1;3717:1:84;-1:-1:-1;3720:4:84;;-1:-1:-1;3709:16:84;;-1:-1:-1;3709:16:84;3678:47;-1:-1:-1;3381:3:84;;3340:396;;;;3746:8;;;3008:753;;;;;;;:::o;4112:1391:87:-;4283:7;4302:100;4405:29;:27;:29::i;:::-;4302:132;-1:-1:-1;4444:22:87;3204:9:67;4469:36:87;4495:9;4469:25;:36::i;:::-;4535:35;4573:17;;;;;;;;;;;:27;;;;;;;;4469:56;;;;4573:43;;;;;;;4653:29;;4469:56;;-1:-1:-1;4573:43:87;4653:29;-1:-1:-1;;;4653:29:87;;;;;-1:-1:-1;;;4713:24:87;;;;;-1:-1:-1;;;4775:31:87;;;;5216:14;5208:49;;;;-1:-1:-1;;;5208:49:87;;;;;;;:::i;:::-;5287:209;5339:17;5374:15;5407:10;5435:20;5473:9;5287:34;:209::i;:::-;5268:228;4112:1391;-1:-1:-1;;;;;;;;;;;4112:1391:87:o;2152:573:98:-;2270:6;;2322:74;2345:50;3252:11:67;2345:30:98;:10;2360:14;2345;:30::i;:50::-;2322:22;:74::i;:::-;2292:104;;2417:59;2435:8;-1:-1:-1;;;2417:17:98;:59::i;:::-;2406:70;;2497:46;2515:27;2533:8;2515:17;:27::i;:::-;2497:17;:46::i;:::-;2486:57;;2564:59;2582:8;-1:-1:-1;;;2564:17:98;:59::i;:::-;2553:70;;2633:21;2657:29;2677:8;2657:19;:29::i;:::-;2633:53;;;2152:573;-1:-1:-1;;;;;2152:573:98:o;2265:143:109:-;2336:6;2361:40;2365:9;2369:1;2372;2365:3;:9::i;:::-;4075:3:67;2361::109;:40::i;2236:273:86:-;2310:12;2346:11;2342:1;:15;2334:24;;;;;;2610:1:67;2376:11:86;:48;;2368:57;;;;;;2464:1;2450:11;:15;:47;;2496:1;2482:11;:15;2450:47;;;2468:11;2450:47;2501:1;2444:58;;2236:273;-1:-1:-1;;2236:273:86:o;3556:1423::-;3663:31;;:::i;:::-;2190:3:67;4075;3883:4:86;3888:32;;;3883:38;;;;;;;;3869:90;:143;;;;;;3848:164;;2190:3:67;4075;4057:4:86;4062:32;;;1023:1;4062:32;4057:38;;;;;;;;4043:90;:143;;;;;;4022:1;:18;;:164;;;;;4208:53;4231:4;1081:1;4236:6;:22;;;4231:28;;;;;;;;4208:16;:53::i;:::-;4196:9;;;:65;;;4519:3;;4471:4;4476:25;;;1139:1;4476:25;4471:31;;;;;;;;4457:59;:65;;;;;;4443:11;;;:79;4596:9;;;;4608:3;;4560:4;4565:25;;;1197:1;4565:25;4560:31;;;;;;;;4546:59;:65;;;;;;4532:11;;;:79;4637:15:67;4699:4:86;4704:26;;;4637:1:67;4704:26:86;4699:32;;;;;;;;4685:87;4670:12;;;:102;5129:16:67;4811:4:86;4816:26;;;1313:1;4816:26;4811:32;;;;;;;;4797:94;4782:12;;;:109;4934:4;4805:39;4939:30;;1371:1;4939:30;4934:36;;;;;;;;4901:16;;;:71;:1;3556:1423;-1:-1:-1;;3556:1423:86:o;3651:1015:109:-;3719:6;3794:3;3785:5;:12;:40;;;;3811:1;3802:5;:10;;:22;;;;;3823:1;3816:3;:8;;3802:22;3781:54;;;-1:-1:-1;3834:1:109;3827:8;;3781:54;3858:1;3849:5;:10;;:21;;;;;3867:3;3863:1;:7;3849:21;3845:754;;;-1:-1:-1;4051:5:109;4044:12;;3845:754;4084:1;4077:3;:8;;:21;;;;;4093:5;4089:1;:9;4077:21;4073:526;;;4282:8;4286:3;4282;:8::i;4073:526::-;4320:1;4311:5;:10;;:22;;;;;4332:1;4325:3;:8;;4311:22;4307:292;;;4573:15;4577:5;4584:3;4573;:15::i;13609:278:69:-;13681:75;13773:12;13788:52;13804:35;13788:15;:52::i;3965:133:110:-;4017:6;-1:-1:-1;;;;;4043:21:110;;;4035:30;;;;;8148:440:74;8292:20;8314:23;8341:47;8352:10;8364:8;8374:13;8341:10;:47::i;:::-;8291:97;;;;8398:12;8412:10;8452:1;8436:13;:17;8432:75;;;8462:7;8455:14;;8432:75;;;-1:-1:-1;8500:7:74;8432:75;8565:2;-1:-1:-1;;;;;8533:48:74;8559:4;-1:-1:-1;;;;;8533:48:74;8547:10;-1:-1:-1;;;;;8533:48:74;;8569:3;8574:6;8533:48;;;;;;;:::i;:::-;;;;;;;;8148:440;;;;;;;;:::o;1000:838:107:-;1202:1;1197:6;;;1206:66;1197:75;;;1122:70;;1121:152;1368:1;1363:6;;;1372:66;1363:75;;;1288:70;;1287:152;1534:1;1529:6;;;1458:66;1454:70;;;;1453:83;1631:1;1626:6;;;1635:66;1626:75;;;1551:70;;1550:152;1726:2;1721:7;;;1716:13;1753:2;1748:7;;;1743:13;1781:2;1776:7;;;1770:14;1820:3;1815:8;;;1826:4;1815:15;;;1802:8;;1801:30;;1000:838::o;15376:265:94:-;15483:30;15515:20;15556:42;15572:7;15581:16;15556:15;:42::i;:::-;15547:51;;15614:20;15627:6;15614:12;:20::i;:::-;15608:26;;15376:265;;;;;:::o;1667:662:91:-;1752:25;;:::i;:::-;1789:33;1825:32;:30;:32::i;:::-;:44;;;;;;;;;;;;;;;;;1898:16;;;;;1879:35;;-1:-1:-1;;;1945:18:91;;-1:-1:-1;;;;;1945:18:91;;;1924;;;:39;;;;1898:16;1992;;;;;1973;;;:35;;;;-1:-1:-1;;;2039:18:91;;;;2018;;;:39;-1:-1:-1;;;2096:26:91;;;;;;2067;;;:55;2153:18;;;-1:-1:-1;;;;;2153:18:91;;;2132;;;:39;-1:-1:-1;;;2198:14:91;;;;2181;;;:31;-1:-1:-1;;;2237:12:91;;;2222;;;:27;-1:-1:-1;;;2284:26:91;;;;2313:9;2284:38;2259:63;;;1898:16;2259:22;;:63;1879:35;:1;-1:-1:-1;1667:662:91:o;4442:255::-;4515:7;4542:25;4571:38;4598:10;4571:26;:38::i;:::-;-1:-1:-1;;;;;4571:83:91;;:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;24353:2042::-;24547:23;;:::i;:::-;24572:7;24591:28;24629:24;24802:48;24821:10;24833:9;24844:5;24802:18;:48::i;:::-;24707:18;;;24663:187;;;;24677:16;;;24663:187;;;;25020:22;;;;24663:187;;-1:-1:-1;24663:187:91;-1:-1:-1;25020:48:91;;24663:187;25020:26;:48::i;:::-;24995:22;;;:73;25607:30;;;;25558;;25607:34;25603:422;;25979:30;;;;25878:132;;:58;:22;25979:30;25878:26;:58::i;:::-;:100;;:132::i;:::-;25853:157;;25603:422;26064:116;26125:54;4164:4:67;26156:22:91;26125:30;:54::i;:::-;26064:22;;;;;:60;:116::i;:::-;26039:22;;;:141;-1:-1:-1;;26194:30:91;;;:55;;;;-1:-1:-1;;26309:32:91;;26039:22;;26367:20;;-1:-1:-1;24353:2042:91:o;9916:1240::-;10078:33;10114:32;:30;:32::i;:::-;:44;10147:10;10114:44;;;;;;;;;;;;;10078:80;;10187:27;:1;:16;;;:25;:27::i;:::-;10168:46;;-1:-1:-1;;10168:46:91;;;;;;;;;10245:18;;;;:29;;:27;:29::i;:::-;10224:18;;;:50;;-1:-1:-1;;;;;;10224:50:91;-1:-1:-1;;;;;10224:50:91;;;;;;;;;;10301:14;;;;:25;;:23;:25::i;:::-;10284:1;:14;;;:42;;;;;-1:-1:-1;;;;;10284:42:91;;;;;-1:-1:-1;;;;;10284:42:91;;;;;;10351:23;:1;:12;;;:21;:23::i;:::-;10336:1;:12;;;:38;;;;;-1:-1:-1;;;;;10336:38:91;;;;;-1:-1:-1;;;;;10336:38:91;;;;;;10475:29;:1;:18;;;:27;:29::i;:::-;10454:50;;-1:-1:-1;;;;;10454:50:91;;;;-1:-1:-1;;;10454:50:91;-1:-1:-1;;10454:50:91;;;;;;10533:16;;;;:27;;:25;:27::i;:::-;10514:16;;;:46;;-1:-1:-1;;10514:46:91;-1:-1:-1;;;;;10514:46:91;;;;;;;;;;10599:26;;;;:37;;:35;:37::i;:::-;10570:66;;-1:-1:-1;;;;;10570:66:91;;;;-1:-1:-1;;;10570:66:91;-1:-1:-1;;;;10570:66:91;;;;;;10667:18;;;;:29;;:27;:29::i;:::-;10646:50;;;;;;;-1:-1:-1;;;10646:50:91;-1:-1:-1;;;;10646:50:91;;;;;;10758:24;;10754:272;;10798:18;10819:28;:20;:26;:28::i;:::-;10798:49;;10861:61;10898:10;10910:11;10861:36;:61::i;:::-;10936:79;1176:42:67;10991:10:91;11003:11;10936:31;:79::i;:::-;10754:272;;11079:10;11041:108;;;11091:1;:18;;;11111:1;:14;;;11127:1;:12;;;11041:108;;;;;;;;:::i;:::-;;;;;;;;9916:1240;;;;:::o;4672:163:110:-;4721:6;-1:-1:-1;;;;;4748:1:110;:30;;4739:40;;;;;5536:217:69;5598:41;5655:12;5670:36;5686:19;5670:15;:36::i;7113:581:87:-;7203:35;7241:32;7266:6;7241:24;:32::i;:::-;7203:70;;7335:23;7361:13;:24;;;;;;;;;;;;7335:50;;7396:224;7427:13;7454:6;:17;;;7485:6;:21;;;7520:6;:22;;;7556:16;7396:224;;7586:6;:24;;;7396:17;:224::i;:::-;7631:56;7650:13;7665:6;:21;;;7631:18;:56::i;17175:371:92:-;17321:19;;:::i;:::-;17352:10;17386:45;17410:10;17422:8;17386:23;:45::i;:::-;17372:59;;-1:-1:-1;17372:59:92;-1:-1:-1;17372:59:92;17442:98;;17473:56;17497:10;17509:8;17519:9;17473:23;:56::i;5917:1630::-;6090:29;6121:31;6250:53;6272:16;6290:12;6250:21;:53::i;:::-;6225:78;;6340:63;6362:16;6380:22;6340:21;:63::i;:::-;6313:90;;6989:1;6964:22;:26;6960:581;;;7181:349;7528:1;7181:226;7377:16;:29;;;7181:174;7327:16;:27;;;7181:124;7277:16;:27;;;7181:74;7225:16;:29;;;7181:22;:43;;:74;;;;:::i;:124::-;:145;;:174::i;:349::-;7156:374;;5917:1630;;;;;;:::o;9783:746:74:-;10083:10;10096:33;10108:10;10120:8;10096:11;:33::i;:::-;10083:46;;10158:1;10143:12;:16;10139:51;;;-1:-1:-1;;;10166:24:74;10139:51;10249:1;-1:-1:-1;;;;;10205:80:74;;10220:10;10205:80;10253:2;10265:18;:12;:16;:18::i;:::-;10205:80;;;;;;;:::i;:::-;;;;;;;;10349:22;10374:48;10408:1;10389:16;:20;10411:10;10374:14;:48::i;:::-;10349:73;;10432:5;-1:-1:-1;;;;;10432:18:74;;1394:42:67;10481:7:74;10498:22;:16;:20;:22::i;:::-;10432:90;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9783:746;;;;;;;:::o;12517:242:69:-;12580:57;12654:12;12669:43;12685:26;12669:15;:43::i;4104:133:110:-;4156:6;-1:-1:-1;;;;;4182:21:110;;;4174:30;;;;;15416:494:74;15577:26;15623:35;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;-1:-1:-1;;;;;15623:47:74;;-1:-1:-1;15727:35:74;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;;;15785:53;;-1:-1:-1;;;15785:53:74;;-1:-1:-1;;;;;15727:47:74;;;;-1:-1:-1;15727:47:74;;15785:24;;:53;;15810:7;;15819:18;;15785:53;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;15848:55:74;;-1:-1:-1;;;15848:55:74;;-1:-1:-1;;;;;15848:24:74;;;-1:-1:-1;15848:24:74;;-1:-1:-1;15848:55:74;;15873:7;;15882:20;;15848:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15416:494;;;;;;:::o;15208:575:91:-;15358:18;;15334;;;;15291:13;;15307:70;;-1:-1:-1;;;15358:18:91;;;-1:-1:-1;;;;;15358:18:91;;15307:46;;-1:-1:-1;;;;;;;;15314:14:91;;;;;15334:18;15307:26;:46::i;:70::-;15450:16;;;;15426:18;;;;15291:86;;-1:-1:-1;15387:11:91;;15401:66;;-1:-1:-1;;;;;15450:16:91;;15401:44;;-1:-1:-1;;;;;;;;15408:12:91;;;;;15426:18;15401:24;:44::i;:66::-;15632:26;;15387:80;;-1:-1:-1;15605:17:91;;15625:77;;15661:1;-1:-1:-1;;;;;;;;15632:26:91;;;;;:30;15625:38;4255:4:67;15625:42:91;:77::i;:::-;15605:97;-1:-1:-1;15605:97:91;15720:16;:6;15731:4;15720:10;:16::i;:::-;:30;;15712:39;;;;;2497:155:110;2570:7;2596:49;2600:41;2604:1;4075:3:67;2600::110;:41::i;:::-;2643:1;2596:3;:49::i;1928:134:106:-;1981:6;2009:18;2004:1;:23;;1995:33;;;;;;-1:-1:-1;2054:2:106;2049:7;;1928:134::o;6671:222::-;6728:6;6751:1;:6;;6756:1;6751:6;;6742:16;;;;;;6764:13;6801:1;6780:22;;6795:2;6789:1;6781:10;;:16;;6780:22;;;;;;;-1:-1:-1;;;;;;;6817:19:106;;;;;:42;;-1:-1:-1;;;;;;6840:19:106;;;6817:42;6808:52;;;;;8597:105;8644:6;8667:14;;;;-1:-1:-1;;;;;;8667:14:106;;8658:24;;;;;;-1:-1:-1;8695:2:106;;;8597:105::o;21339:266::-;21386:6;-1:-1:-1;;;21409:1:106;:24;;;21400:34;;;;;;-1:-1:-1;;21457:1:106;:25;;;21453:39;;;-1:-1:-1;21491:1:106;21484:8;;21453:39;21519:81;21595:3;21551:1;21543:10;;21556:35;21543:48;:55;;21519:5;:81::i;4186:197::-;4243:6;4273:13;:9;;;:13;;;;;4290:2;4273:19;-1:-1:-1;;;;;;4307:19:106;;;;;:42;;-1:-1:-1;;;;;;4330:19:106;;;4298:52;;;;;1610:89;1686:7;;1691:2;1686:7;;1610:89::o;2917:633:86:-;2985:7;3310:11;3278:43;;4985:3:67;3278:43:86;:265;;3495:48;;;5129:16:67;3495:48:86;3278:265;;;-1:-1:-1;;;3392:43:86;;;;;;5210:17:67;3391:88:86;5048:22:67;3337:142:86;;2917:633::o;7497:490:74:-;7674:16;;;7688:1;7674:16;;;7605;7674;;;;;;7605;;7651:20;;7674:16;;;;;;;;;;;;-1:-1:-1;7674:16:74;7651:39;;7700:10;7713:33;7725:10;7737:8;7713:11;:33::i;:::-;7700:46;;7765:2;7756:3;7760:1;7756:6;;;;;;;;;;;;;:11;;;;;-1:-1:-1;;;7786:2:74;:24;7777:3;7781:1;7777:6;;;;;;;;;;;;;;;;;:33;7847:16;;;7861:1;7847:16;;;;;;;;;7821:23;;7847:16;;;;;;;;;;;;-1:-1:-1;7847:16:74;7821:42;;7893:12;:6;:10;:12::i;:::-;7873:6;7880:1;7873:9;;;;;;;;;;;;;:33;;;;;7936:12;:6;:10;:12::i;:::-;7916:6;7923:1;7916:9;;;;;;;;;;;;;;;;;:33;7968:3;;;;-1:-1:-1;7497:490:74;;-1:-1:-1;;;;;7497:490:74:o;17542:1107:94:-;17644:23;851:1;17741:6;:30;;;;17733:39;;;;;;17783:90;17876:37;:35;:37::i;:::-;-1:-1:-1;;;;;17990:14:94;;17923:64;17990:14;;;;;;;;;;17783:130;;-1:-1:-1;18047:28:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;18014:61;;18091:9;18086:533;18110:6;18106:10;;:1;:10;18086:533;;;18137:42;18182:12;18195:1;18182:15;;;;;;;;18137:60;;18211:27;18241:6;18248:1;18241:9;;;;;;;;;;;;;;;;;;;18389:23;;;;;18370:42;;18443:21;;;;;18426:14;;;:38;;;;18496:22;-1:-1:-1;;;18496:22:94;;;18478:15;;;:40;-1:-1:-1;;;18549:21:94;;;;;;;18532:38;;:14;;;:38;18584:17;;:24;;;;-1:-1:-1;18389:23:94;18118:3;18086:533;;16700:836;16839:13;;16790:20;;16839:13;16868:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16868:21:94;;16862:27;;16904:9;16899:236;16919:6;16915:1;:10;16899:236;;;16946:27;16976:6;16983:1;16976:9;;;;;;;;;;;;;;16946:39;;17066:58;17074:5;:16;;;17092:5;:14;;;17108:5;:15;;;17066:7;:58::i;:::-;17057:3;17061:1;17057:6;;;;;;;;;;;;;;;;;:67;-1:-1:-1;16927:3:94;;16899:236;;;-1:-1:-1;17189:1:94;17200:330;17211:6;17207:1;:10;17200:330;;;17245:1;17260:243;17271:1;17267;:5;:28;;;;;17289:3;17293:1;17289:6;;;;;;;;;;;;;;17276:3;17284:1;17280;:5;17276:10;;;;;;;;;;;;;;:19;17267:28;17260:243;;;17375:3;17379:1;17375:6;;;;;;;;;;;;;;17383:3;17391:1;17387;:5;17383:10;;;;;;;;;;;;;;17352:3;17360:1;17356;:5;17352:10;;;;;;;;;;;;;17364:3;17368:1;17364:6;;;;;;;;;;;;;17351:43;;;;;;;;;;17442:6;17449:1;17442:9;;;;;;;;;;;;;;17453:6;17464:1;17460;:5;17453:13;;;;;;;;;;;;;;17413:6;17424:1;17420;:5;17413:13;;;;;;;;;;;;;17428:6;17435:1;17428:9;;;;;;;;;;;;;;;;;17412:55;;;;;-1:-1:-1;;17485:3:94;17260:243;;;-1:-1:-1;17516:3:94;;17200:330;;;16700:836;;;;;:::o;3560:233:91:-;3638:24;3674:33;3710:39;:37;:39::i;:::-;:51;;;;;;;;;;;;;;-1:-1:-1;;3710:51:91;;;3778:8;-1:-1:-1;;;;;3778:8:91;;3560:233::o;21467:2630::-;21625:25;21660:23;21693:28;21731:24;21772:28;21810:29;21915:40;21937:10;21949:5;21915:21;:40::i;:::-;22284:20;;21849:106;;-1:-1:-1;21849:106:91;;-1:-1:-1;21849:106:91;-1:-1:-1;22183:33:91;;22219:87;;22270:35;;:9;;:13;:35::i;:::-;4075:3:67;;22219:50:91;:87::i;:::-;22183:123;-1:-1:-1;22337:233:91;22388:172;3252:11:67;22477:52:91;:21;22183:123;22477:25;:52::i;:::-;:69;;;;;4164:4:67;;22477:69:91;;22388:30;:172::i;:::-;22337:16;;;;;:37;:233::i;:::-;22317:253;-1:-1:-1;22599:230:91;22652:167;3252:11:67;22741:47:91;:16;22762:25;22741:20;:47::i;22652:167::-;22599:18;;;;;:39;:230::i;:::-;22581:248;;22978:21;22954:20;:45;22950:140;;;-1:-1:-1;23059:1:91;;-1:-1:-1;23015:64:91;;-1:-1:-1;;23015:64:91;22950:140;23227:23;23253:232;23304:171;3252:11:67;23393:51:91;:20;23418:25;23393:24;:51::i;23304:171::-;23253:16;;;;;:37;:232::i;:::-;23227:258;-1:-1:-1;23495:26:91;23524:38;:17;23227:258;23524:21;:38::i;:::-;23495:67;;24025:65;24074:15;24025:44;24050:18;24025:5;:20;;;:24;;:44;;;;:::i;:65::-;24002:88;;21467:2630;;;;;;;;;;;;;:::o;2819:150:110:-;2894:7;2920:42;2924:34;2928:1;4164:4:67;2924:3:110;:34::i;2975:150::-;3050:7;3076:42;3080:9;3084:1;3087;3080:3;:9::i;:::-;4164:4:67;3076:3:110;:42::i;3266:133::-;3318:6;3349:16;3344:21;;;3336:30;;;;;14165:369:75;14261:1;14254:3;:8;;14246:17;;;;;;14320:19;14342:57;1176:42:67;14388:10:75;14342:22;:57::i;:::-;14320:79;-1:-1:-1;14424:21:75;14320:79;14441:3;14424:16;:21::i;:::-;14409:36;;14455:72;1176:42:67;14502:10:75;14514:12;14455:23;:72::i;13564:281:74:-;13687:26;13733:35;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;;;13791;;-1:-1:-1;;;13791:47:74;;-1:-1:-1;;;;;13733:47:74;;;;-1:-1:-1;13733:47:74;;13791:24;;:47;;13816:7;;13825:12;;13791:47;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6850:257:87;7014:18;;7051:50::o;17668:784:92:-;17782:19;;:::i;:::-;17803:10;17825:92;17920:36;:34;:36::i;:::-;18015:17;;;17966:46;18015:17;;;;;;;;;;;:27;;;;;;;;18060:17;;-1:-1:-1;;;18060:17:92;;;;;-1:-1:-1;18015:17:92;;-1:-1:-1;18169:277:92;;;;18221:28;;-1:-1:-1;;;;;;;;18221:28:92;;;;;18288:55;;18296:24;18221:28;18288:37;:55::i;:::-;18263:81;;18389:22;;18381:53;;-1:-1:-1;;;18389:22:92;;-1:-1:-1;;;;;18389:22:92;18417:16;18381:35;:53::i;:::-;18358:13;;;:77;-1:-1:-1;18169:277:92;17668:784;;;;;;;:::o;18458:1565::-;18594:19;;:::i;:::-;18694:69;18741:10;18753:9;18694:46;:69::i;:::-;18689:74;;18814:31;18848:53;18890:10;18848:41;:53::i;:::-;18814:87;;18912:92;19007:36;:34;:36::i;:::-;19102:17;;;19053:46;19102:17;;;;;;;;;;;:27;;;;;;;;18912:131;;-1:-1:-1;19148:51:92;19140:60;;;;;;19243:22;;:35;;19235:44;;;;;;19324:9;19320:1;:13;19312:22;;;;;;19388:9;19376:8;:21;;19368:30;;;;;;19454:15;;;19450:19;19442:28;;;;;;19521:2;:13;;;19517:1;:17;19509:26;;;;;;19606:35;:7;:24;;;:33;:35::i;:::-;19575:66;;-1:-1:-1;;;;;19575:66:92;;;;-1:-1:-1;;;19575:66:92;-1:-1:-1;;;;19575:66:92;;;;;;19678:20;;;;:31;;:29;:31::i;:::-;19651:58;;-1:-1:-1;;;;;;19651:58:92;-1:-1:-1;;;;;19651:58:92;;;;;;;19744:18;;;;:29;;:27;:29::i;:::-;19719:54;;-1:-1:-1;;;;;;;;;19719:54:92;;;;-1:-1:-1;;;19719:54:92;-1:-1:-1;;;;19719:54:92;;;;19783:24;-1:-1:-1;;;19783:24:92;;;19818:48;19841:10;19853:8;19863:2;19818:22;:48::i;:::-;19942:8;19918:10;19882:134;;;19964:2;:15;;;19993:2;:13;;;19882:134;;;;;;;:::i;:::-;;;;;;;;18458:1565;;;;;;;;:::o;6343:322:74:-;6475:47;2790:2;6475:47;;;;2733:1;6539:36;;;6474:102;5498:1:67;6474:174:74;6343:322;;;;:::o;1666:118:109:-;1712:6;1738:1;1734;:5;1730:47;;;1748:6;1752:1;1748:3;:6::i;:::-;1741:13;;;;1730:47;-1:-1:-1;1776:1:109;1769:8;;7204:287:74;7282:16;7317:6;:167;;7436:35;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7436:47:74;7317:167;;;7356:35;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7356:47:74;7310:174;;7204:287;;;;:::o;13959:225:69:-;14025:41;14083:12;14098:39;14114:22;14098:15;:39::i;14190:225::-;14256:41;14314:12;14329:39;14345:22;14329:15;:39::i;14636:6524:106:-;14685:6;-1:-1:-1;;;14708:1:106;:24;;;14699:34;;;;;;-1:-1:-1;;14756:1:106;:25;;;14752:39;;;-1:-1:-1;14790:1:106;14783:8;;14752:39;-1:-1:-1;;;14811:14:106;14877:18;14873:22;;:26;;;14869:98;;;14925:35;14916:44;14964:3;14916:51;14869:98;15002:1;14977;14981:18;14977:22;:26;;;14973:98;;;15029:35;15020:44;15068:3;15020:51;14973:98;15106:1;15081;15085:18;15081:22;:26;;;15077:98;;;15133:35;15124:44;15172:3;15124:51;15077:98;15210:1;15185;15189:18;15185:22;:26;;;15181:98;;;15237:35;15228:44;15276:3;15228:51;15181:98;15313:1;15289;15293:17;15289:21;:25;;;15285:97;;;15340:35;15331:44;15379:3;15331:51;15285:97;15416:1;15392;15396:17;15392:21;:25;;;15388:97;;;15443:35;15434:44;15482:3;15434:51;15388:97;15519:1;15495;15499:17;15495:21;:25;;;15491:97;;;15546:35;15537:44;15585:3;15537:51;15491:97;15622:1;15598;-1:-1:-1;;;15598:21:106;:25;;;15594:97;;;15649:35;15640:44;15688:3;15640:51;15594:97;15724:1;15701;15705:16;15701:20;:24;;;15697:96;;;15751:35;15742:44;15790:3;15742:51;15697:96;15826:1;15803;15807:16;15803:20;:24;;;15799:96;;;15853:35;15844:44;15892:3;15844:51;15799:96;15928:1;15905;15909:16;15905:20;:24;;;15901:96;;;15955:35;15946:44;15994:3;15946:51;15901:96;16030:1;16007;16011:16;16007:20;:24;;;16003:96;;;16057:35;16048:44;16096:3;16048:51;16003:96;16131:1;16109;16113:15;16109:19;:23;;;16105:95;;;16158:35;16149:44;16197:3;16149:51;16105:95;16232:1;16210;16214:15;16210:19;:23;;;16206:95;;;16259:35;16250:44;16298:3;16250:51;16206:95;16333:1;16311;16315:15;16311:19;:23;;;16307:95;;;16360:35;16351:44;16399:3;16351:51;16307:95;16434:1;16412;-1:-1:-1;;;16412:19:106;:23;;;16408:95;;;16461:35;16452:44;16500:3;16452:51;16408:95;16534:1;16513;16517:14;16513:18;:22;;;16509:94;;;16561:35;16552:44;16600:3;16552:51;16509:94;16634:1;16613;16617:14;16613:18;:22;;;16609:94;;;16661:35;16652:44;16700:3;16652:51;16609:94;16734:1;16713;16717:14;16713:18;:22;;;16709:94;;;16761:35;16752:44;16800:3;16752:51;16709:94;16834:1;16813;16817:14;16813:18;:22;;;16809:94;;;16861:35;16852:44;16900:3;16852:51;16809:94;16933:1;16913;16917:13;16913:17;:21;;;16909:93;;;16960:35;16951:44;16999:3;16951:51;16909:93;17032:1;17012;17016:13;17012:17;:21;;;17008:93;;;17059:35;17050:44;17098:3;17050:51;17008:93;17131:1;17111;17115:13;17111:17;:21;;;17107:93;;;17158:35;17149:44;17197:3;17149:51;17107:93;17230:1;17210;-1:-1:-1;;;17210:17:106;:21;;;17206:93;;;17257:35;17248:44;17296:3;17248:51;17206:93;17328:1;17309;17313:12;17309:16;:20;;;17305:92;;;17355:35;17346:44;17394:3;17346:51;17305:92;17426:1;17407;17411:12;17407:16;:20;;;17403:92;;;17453:35;17444:44;17492:3;17444:51;17403:92;17524:1;17505;17509:12;17505:16;:20;;;17501:92;;;17551:35;17542:44;17590:3;17542:51;17501:92;17622:1;17603;17607:12;17603:16;:20;;;17599:92;;;17649:35;17640:44;17688:3;17640:51;17599:92;17719:1;17701;17705:11;17701:15;:19;;;17697:91;;;17746:35;17737:44;17785:3;17737:51;17697:91;17816:1;17798;17802:11;17798:15;:19;;;17794:91;;;17843:35;17834:44;17882:3;17834:51;17794:91;17913:1;17895;17899:11;17895:15;:19;;;17891:91;;;17940:35;17931:44;17979:3;17931:51;17891:91;18010:1;17992;17996:11;17992:15;:19;;;17988:91;;;18037:35;18028:44;18076:3;18028:51;17988:91;18106:1;18089;18093:10;18089:14;:18;;;18085:90;;;18133:35;18124:44;18172:3;18124:51;18085:90;18202:1;18185;18189:10;18185:14;:18;;;18181:90;;;18229:35;18220:44;18268:3;18220:51;18181:90;18298:1;18281;18285:10;18281:14;:18;;;18277:90;;;18325:35;18316:44;18364:3;18316:51;18277:90;18394:1;18377;18381:10;18377:14;:18;;;18373:90;;;18421:35;18412:44;18460:3;18412:51;18373:90;18489:1;18473;18477:9;18473:13;:17;;;18469:89;;;18516:35;18507:44;18555:3;18507:51;18469:89;18584:1;18568;18572:9;18568:13;:17;;;18564:89;;;18611:35;18602:44;18650:3;18602:51;18564:89;18679:1;18663;18667:9;18663:13;:17;;;18659:89;;;18706:35;18697:44;18745:3;18697:51;18659:89;18774:1;18758;18762:9;18758:13;:17;;;18754:89;;;18801:35;18792:44;18840:3;18792:51;18754:89;18868:1;18853;18857:8;18853:12;:16;;;18849:88;;;18895:35;18886:44;18934:3;18886:51;18849:88;18962:1;18947;18951:8;18947:12;:16;;;18943:88;;;18989:35;18980:44;19028:3;18980:51;18943:88;19056:1;19041;19045:8;19041:12;:16;;;19037:88;;;19083:35;19074:44;19122:3;19074:51;19037:88;19150:1;19135;19139:8;19135:12;:16;;;19131:88;;;19177:35;19168:44;19216:3;19168:51;19131:88;19243:1;19229;19233:7;19229:11;:15;;;19225:87;;;19270:35;19261:44;19309:3;19261:51;19225:87;19336:1;19322;19326:7;19322:11;:15;;;19318:87;;;19363:35;19354:44;19402:3;19354:51;19318:87;19429:1;19415;19419:7;19415:11;:15;;;19411:87;;;19456:35;19447:44;19495:3;19447:51;19411:87;19522:1;19508;19512:7;19508:11;:15;;;19504:87;;;19549:35;19540:44;19588:3;19540:51;19504:87;19614:1;19601;19605:6;19601:10;:14;;;19597:86;;;19641:35;19632:44;19680:3;19632:51;19597:86;19706:1;19693;19697:6;19693:10;:14;;;19689:86;;;19733:35;19724:44;19772:3;19724:51;19689:86;19798:1;19785;19789:6;19785:10;:14;;;19781:86;;;19825:35;19816:44;19864:3;19816:51;19781:86;19890:1;19877;19881:6;19877:10;:14;;;19873:86;;;19917:35;19908:44;19956:3;19908:51;19873:86;19981:1;19969;19973:5;19969:9;:13;;;19965:85;;;20008:35;19999:44;20047:3;19999:51;19965:85;20072:1;20060;20064:5;20060:9;:13;;;20056:85;;;20099:35;20090:44;20138:3;20090:51;20056:85;20163:1;20151;20155:5;20151:9;:13;;;20147:85;;;20190:35;20181:44;20229:3;20181:51;20147:85;20254:1;20242;20246:5;20242:9;:13;;;20238:85;;;20281:35;20272:44;20320:3;20272:51;20238:85;20344:1;20333;20337:4;20333:8;:12;;;20329:84;;;20371:35;20362:44;20410:3;20362:51;20329:84;20434:1;20423;20427:4;20423:8;:12;;;20419:84;;;20461:35;20452:44;20500:3;20452:51;20419:84;20524:1;20513;20517:4;20513:8;:12;;;20509:84;;;20551:35;20542:44;20590:3;20542:51;20509:84;20614:1;20603;20607:4;20603:8;:12;;;20599:84;;;20641:35;20632:44;20680:3;20632:51;20599:84;20703:1;20693;20697:3;20693:7;:11;;;20689:83;;;20730:35;20721:44;20769:3;20721:51;20689:83;20792:1;20782;20786:3;20782:7;:11;;;20778:83;;;20819:35;20810:44;20858:3;20810:51;20778:83;20881:1;20871;20875:3;20871:7;:11;;;20867:83;;;20908:35;20899:44;20947:3;20899:51;20867:83;20970:1;20960;20964:3;20960:7;:11;;;20956:83;;;20997:35;20988:44;21036:3;20988:51;20956:83;21072:7;;;;21077:2;21072:7;21066:2;:14;21057:24;;21046:35;-1:-1:-1;;;;;21096:29:106;;;21087:39;;;;;16386:308:94;16529:34;16561:2;16529:34;;;;16584:39;16622:1;16584:39;;;;16528:96;16651:25;;;16528:149;16386:308;;;;;:::o;13251:257:69:-;13321:57;13395:12;13410:51;13426:34;13410:15;:51::i;19141:1969:91:-;19278:28;19316:29;19355:24;19742:19;19802:1;19775:7;:24;;;:28;19771:297;;;19923:134;20006:50;20035:7;:20;;;20006:7;:24;;;:28;;:50;;;;:::i;:::-;19950:18;;;;19923:22;;;;:46;;:26;:46::i;:::-;:82;;:134::i;:::-;19909:148;;19771:297;20077:31;20111:64;20164:10;20111:52;:64::i;:::-;20077:98;-1:-1:-1;20217:30:91;20077:98;20235:11;20217:17;:30::i;:::-;20194:53;-1:-1:-1;20525:15:91;;20521:209;;20667:52;:1;20692:20;20714:4;20667:24;:52::i;:::-;20643:76;;20521:209;20978:24;;;;:28;20974:130;;21041:52;:20;21081:11;21041:39;:52::i;:::-;21022:71;;20974:130;19141:1969;;;;;;;:::o;12844:273:69:-;12911:80;13008:12;13023:47;13039:30;13023:15;:47::i;20029:2731:92:-;20179:75;20257:41;:39;:41::i;:::-;20342:17;;;20308:31;20342:17;;;;;;;;;;;:27;;;;;;;;20406:16;;20179:119;;-1:-1:-1;20342:27:92;-1:-1:-1;;;;;20406:16:92;20398:25;;20585:30;;:::i;:::-;20625:59;:6;:59;;;20665:8;;20625:27;:59::i;:::-;20702:21;;;;:26;20694:56;;;;-1:-1:-1;;;20694:56:92;;;;;;;:::i;:::-;20921:27;20951:54;20973:14;20989:15;:9;:13;:15::i;:::-;20951:21;:54::i;:::-;20921:84;;21015:25;21043:63;:57;21074:14;21090:9;21043:30;:57::i;:::-;:61;:63::i;:::-;21015:91;;21291:148;1394:42:67;21377:10:92;21389:18;21409:20;21291:42;:148::i;:::-;21927:34;;-1:-1:-1;;;;;;;;21927:34:92;;;;21891:25;21919:43;;;;-1:-1:-1;;;22007:34:92;;;;;;22056:22;;;:48;;;22086:18;22082:1;:22;22056:48;22052:605;;;22120:29;22152:57;22174:14;22190:18;22152:21;:57::i;:::-;22120:89;-1:-1:-1;22294:17:92;22314:46;:18;22120:89;22314:22;:46::i;:::-;22294:66;;22382:10;22378:1;:14;22374:113;;;22412:60;22449:10;22461;22412:36;:60::i;:::-;22502:144;22556:10;22568:8;22578:18;22598:22;22622:10;22502:36;:144::i;:::-;22052:605;;;-1:-1:-1;;;22726:17:92;;;;;;;;;;;;;;;;:27;;;;;;;-1:-1:-1;;;22726:27:92;;;;22719:34;;-1:-1:-1;;;;;;22719:34:92;;;-1:-1:-1;;20029:2731:92:o;8023:290:86:-;8123:31;;:::i;:::-;8166:12;8181:44;:42;:44::i;:::-;:56;;;;;;;;;;;;;;;:59;;-1:-1:-1;8257:49:86;;8181:59;8257:24;:49::i;17342:897::-;17510:27;17549:15;17567:91;2190:3:67;17567:47:86;17590:8;:23;;;17567:18;:22;;:47;;;;:::i;:91::-;17549:109;;17682:8;:19;;;17672:7;:29;17668:64;;;-1:-1:-1;17713:19:86;;;;17668:64;17756:8;:19;;;17746:7;:29;17742:64;;;-1:-1:-1;17787:19:86;;;;17742:64;17821:8;17817:416;;;17971:31;:18;17994:7;17971:22;:31::i;:::-;17949:53;;17817:416;;;18167:18;18157:7;:28;:65;;18214:7;18193:18;:28;18157:65;;;-1:-1:-1;18188:1:86;;17342:897;-1:-1:-1;;;;17342:897:86:o;2658:155:110:-;2731:7;2757:49;2761:9;2765:1;2768;2761:3;:9::i;:::-;4075:3:67;2757::110;:49::i;15553:563:92:-;15678:6;15798:10;15793:1;:15;;:34;;;;;15825:2;15812:10;:15;15793:34;15789:48;;;-1:-1:-1;15836:1:92;15829:8;;15789:48;15868:1;15855:10;:14;15847:23;;;;;;16034:75;16107:1;16034:68;16088:2;:13;;;16034:49;4255:4:67;16034:10:92;:14;;:49;;;;:::i;10674:947:74:-;10885:10;-1:-1:-1;;;10898:33:74;10910:10;10922:8;10898:11;:33::i;:::-;:55;;-1:-1:-1;11033:1:74;1394:42:67;10983:10:74;10968:107;10898:55;11049:24;:18;:22;:24::i;:::-;10968:107;;;;;;;:::i;:::-;;;;;;;;11295:83;1394:42:67;11349:10:74;11361:16;11295:23;:83::i;:::-;11405:1;11392:10;:14;11388:227;;;11506:98;1394:42:67;1176;11581:10:74;11593;11506:21;:98::i;:::-;10674:947;;;;;;:::o;13851:478::-;13986:26;14032:35;:33;:35::i;:::-;:47;;;;;;;;;;;;;;;;-1:-1:-1;;;;;14032:47:74;;-1:-1:-1;14200:21:74;;14196:50;;;14243:2;;14237:4;14196:50;14256:9;-1:-1:-1;;;;;14256:22:74;;14279:4;14285:2;14297:23;:17;:21;:23::i;:::-;14256:66;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:161:198:-;83:20;;143:6;132:18;;122:29;;112:2;;165:1;162;155:12;180:196;;291:2;279:9;270:7;266:23;262:32;259:2;;;312:6;304;297:22;259:2;340:30;360:9;340:30;:::i;381:367::-;;;506:2;494:9;485:7;481:23;477:32;474:2;;;527:6;519;512:22;474:2;555:30;575:9;555:30;:::i;:::-;545:40;;635:2;624:9;620:18;607:32;682:5;675:13;668:21;661:5;658:32;648:2;;709:6;701;694:22;648:2;737:5;727:15;;;464:284;;;;;:::o;753:255::-;;;893:2;881:9;872:7;868:23;864:32;861:2;;;914:6;906;899:22;861:2;-1:-1:-1;;942:16:198;;998:2;983:18;;;977:25;942:16;;977:25;;-1:-1:-1;851:157:198:o;1013:443::-;;1110:5;1104:12;1137:6;1132:3;1125:19;1163:4;1192:2;1187:3;1183:12;1176:19;;1229:2;1222:5;1218:14;1250:3;1262:169;1276:6;1273:1;1270:13;1262:169;;;1337:13;;1325:26;;1371:12;;;;1406:15;;;;1298:1;1291:9;1262:169;;;-1:-1:-1;1447:3:198;;1080:376;-1:-1:-1;;;;;1080:376:198:o;1461:211::-;-1:-1:-1;;;;;1633:32:198;;;;1615:51;;1603:2;1588:18;;1570:102::o;1677:375::-;-1:-1:-1;;;;;1935:15:198;;;1917:34;;1987:15;;;;1982:2;1967:18;;1960:43;2034:2;2019:18;;2012:34;;;;1867:2;1852:18;;1834:218::o;2057:272::-;-1:-1:-1;;;;;2247:32:198;;;;2229:51;;2311:2;2296:18;;2289:34;2217:2;2202:18;;2184:145::o;2334:477::-;;2591:2;2580:9;2573:21;2617:62;2675:2;2664:9;2660:18;2652:6;2617:62;:::i;:::-;2727:9;2719:6;2715:22;2710:2;2699:9;2695:18;2688:50;2755;2798:6;2790;2755:50;:::i;2816:244::-;2986:25;;;3042:2;3027:18;;3020:34;2974:2;2959:18;;2941:119::o;3065:346::-;3267:2;3249:21;;;3306:2;3286:18;;;3279:30;-1:-1:-1;;;3340:2:198;3325:18;;3318:52;3402:2;3387:18;;3239:172::o;3416:344::-;3618:2;3600:21;;;3657:2;3637:18;;;3630:30;-1:-1:-1;;;3691:2:198;3676:18;;3669:50;3751:2;3736:18;;3590:170::o;3765:345::-;3967:2;3949:21;;;4006:2;3986:18;;;3979:30;-1:-1:-1;;;4040:2:198;4025:18;;4018:51;4101:2;4086:18;;3939:171::o;4115:337::-;4317:2;4299:21;;;4356:2;4336:18;;;4329:30;-1:-1:-1;;;4390:2:198;4375:18;;4368:43;4443:2;4428:18;;4289:163::o;4457:339::-;4659:2;4641:21;;;4698:2;4678:18;;;4671:30;-1:-1:-1;;;4732:2:198;4717:18;;4710:45;4787:2;4772:18;;4631:165::o;4801:346::-;5003:2;4985:21;;;5042:2;5022:18;;;5015:30;-1:-1:-1;;;5076:2:198;5061:18;;5054:52;5138:2;5123:18;;4975:172::o;5152:341::-;5354:2;5336:21;;;5393:2;5373:18;;;5366:30;-1:-1:-1;;;5427:2:198;5412:18;;5405:47;5484:2;5469:18;;5326:167::o;5498:347::-;5700:2;5682:21;;;5739:2;5719:18;;;5712:30;5778:25;5773:2;5758:18;;5751:53;5836:2;5821:18;;5672:173::o;5850:196::-;6032:6;6020:19;;;;6002:38;;5990:2;5975:18;;5957:89::o;6497:319::-;6699:25;;;6755:2;6740:18;;6733:34;;;;6798:2;6783:18;;6776:34;6687:2;6672:18;;6654:162::o", "language": "Solidity", "natspec": {"kind": "dev", "methods": {"getLibInfo()": {"notice": "Get a list of deployed library addresses (sorted by library name)"}, "initializeMarkets(uint16,bool)": {"details": "emit:MarketsInitializedauth:none", "notice": "Initialize the market for a given currency id, done once a quarter", "params": {"currencyId": "currency of markets to initialize", "isFirstInit": "true if this is the first time the markets have been initialized"}}, "sweepCashIntoMarkets(uint16)": {"details": "emit:CashSweepIntoMarketsauth:none", "notice": "Sweeps nToken cash balance into markets after accounting for cash withholding. Can be done after fCash residuals are purchased to ensure that markets have maximum liquidity.", "params": {"currencyId": "currency of markets to initialize"}}}, "notice": "Initialize markets is called once every quarter to setup the new markets. Only the nToken account can initialize markets, and this method will be called on behalf of that account. In this action the following will occur:  - nToken Liquidity Tokens will be settled  - Any ifCash assets will be settled  - If nToken liquidity tokens are settled with negative net ifCash, enough cash will be withheld at the PV    to purchase offsetting positions  - fCash positions are written to storage  - For each market, calculate the proportion of fCash to cash given:     - previous oracle rates     - rate anchor set by governance     - percent of cash to deposit into the market set by governance  - Set new markets and add liquidity tokens to portfolio", "version": 1}, "offset": [2170, 28261], "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBB6DD58E EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xC4C96DAE EQ PUSH2 0x72 JUMPI DUP1 PUSH4 0xD0E064C0 EQ PUSH2 0x90 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0x6B CALLDATASIZE PUSH1 0x4 PUSH2 0x5BD9 JUMP JUMPDEST PUSH2 0xB0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7A PUSH2 0x11A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x87 SWAP2 SWAP1 PUSH2 0x5C8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0xAB CALLDATASIZE PUSH1 0x4 PUSH2 0x5BF3 JUMP JUMPDEST PUSH2 0x132 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5DB6EAC7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xBB6DD58E SWAP1 PUSH2 0xE7 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x5E7D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x113 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH20 0x0 SWAP1 JUMP JUMPDEST TIMESTAMP PUSH2 0x13B PUSH2 0x59C4 JUMP JUMPDEST PUSH2 0x145 DUP2 DUP6 PUSH2 0x5D7 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x0 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x18B PUSH2 0x5A0D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x183 JUMPI SWAP1 POP JUMPDEST POP DUP3 MLOAD PUSH1 0x20 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x20 DUP3 ADD MLOAD MLOAD MLOAD ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D7 DUP4 DUP4 DUP7 DUP10 DUP10 PUSH2 0x5F0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1ED DUP8 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x66C JUMP JUMPDEST SWAP1 POP PUSH2 0x1F7 PUSH2 0x5A0D JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP7 MLOAD PUSH1 0x20 ADD MLOAD DUP2 LT ISZERO PUSH2 0x54B JUMPI PUSH2 0x226 PUSH2 0x217 DUP3 PUSH1 0x1 ADD PUSH2 0x7D0 JUMP JUMPDEST PUSH2 0x220 DUP11 PUSH2 0x879 JUMP JUMPDEST SWAP1 PUSH2 0x89A JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE DUP4 MLOAD DUP1 MLOAD PUSH1 0x0 SWAP2 PUSH2 0x259 SWAP2 DUP9 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x243 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x2 PUSH1 0xFF AND ADD DUP8 DUP13 PUSH2 0x8B3 JUMP JUMPDEST SWAP1 POP DUP10 DUP1 PUSH2 0x273 JUMPI POP DUP2 PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x273 JUMPI POP DUP7 MLOAD PUSH1 0x2 EQ JUMPDEST DUP1 PUSH2 0x284 JUMPI POP PUSH1 0x20 DUP9 ADD MLOAD MLOAD MLOAD DUP3 LT ISZERO JUMPDEST DUP1 PUSH2 0x2B2 JUMPI POP DUP2 PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x2B2 JUMPI POP DUP7 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x2A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 PUSH2 0x2DA DUP3 DUP8 PUSH1 0x40 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x914 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x327 DUP7 PUSH1 0x40 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x311 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x949 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD DUP2 SWAP1 MSTORE PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5E46 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x52D JUMP JUMPDEST DUP2 PUSH2 0x37E JUMPI DUP7 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x36B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD SWAP3 POP PUSH2 0x45F JUMP JUMPDEST DUP2 PUSH1 0x1 EQ ISZERO PUSH2 0x3E2 JUMPI PUSH2 0x399 DUP8 PUSH2 0x394 DUP12 PUSH2 0x879 JUMP JUMPDEST PUSH2 0xA09 JUMP JUMPDEST SWAP3 POP DUP5 PUSH1 0x60 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3AB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP4 LT ISZERO PUSH2 0x3DD JUMPI DUP5 PUSH1 0x60 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3CE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD SWAP3 POP JUMPDEST PUSH2 0x45F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F9 PUSH2 0x3F0 DUP5 PUSH2 0x7D0 JUMP JUMPDEST PUSH2 0x220 DUP13 PUSH2 0x879 JUMP JUMPDEST SWAP1 POP PUSH2 0x419 DUP2 DUP6 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x40C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xA8F JUMP JUMPDEST SWAP4 POP DUP6 PUSH1 0x60 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x42B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 LT ISZERO PUSH2 0x45D JUMPI DUP6 PUSH1 0x60 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x44E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH2 0x48B DUP5 DUP8 PUSH1 0x60 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x475 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xB17 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x4AD DUP7 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4A0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xBB2 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x4FC JUMPI PUSH2 0x4C7 DUP7 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4A0 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x4DD DUP2 DUP8 PUSH1 0x60 ADD MLOAD DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x311 JUMPI INVALID JUMPDEST SWAP4 POP DUP4 PUSH2 0x4FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5D3E JUMP JUMPDEST PUSH2 0x506 DUP3 DUP3 PUSH2 0x914 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 SGT ISZERO PUSH2 0x51D JUMPI PUSH1 0x1 PUSH1 0x40 DUP7 ADD MSTORE JUMPDEST POP PUSH1 0xC0 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0xE0 DUP5 ADD DUP10 SWAP1 MSTORE JUMPDEST PUSH1 0xC0 DUP5 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0x542 DUP5 DUP13 DUP11 PUSH2 0xBC5 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1FB JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x569 DUP8 PUSH1 0xC0 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0xC0B SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP SWAP3 POP POP POP PUSH2 0x581 DUP8 PUSH1 0xC0 ADD MLOAD DUP12 DUP10 PUSH1 0x60 ADD MLOAD PUSH2 0xE4B JUMP JUMPDEST PUSH2 0x594 DUP8 PUSH1 0xC0 ADD MLOAD DUP3 DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0xE5B JUMP JUMPDEST PUSH32 0xCFFEFF9ACCC9171F01FEC36E09A1A06F0160CE50A8C4C0A2ADFF9CEC562ADF08 DUP11 PUSH1 0x40 MLOAD PUSH2 0x5C3 SWAP2 SWAP1 PUSH2 0x5E7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x5E1 DUP3 DUP3 PUSH2 0xECE JUMP JUMPDEST PUSH2 0x5EA DUP2 PUSH2 0xF6A JUMP JUMPDEST SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 ISZERO PUSH2 0x613 JUMPI PUSH2 0x602 DUP6 PUSH2 0xF89 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND PUSH1 0x80 DUP9 ADD MSTORE PUSH2 0x63B JUMP JUMPDEST PUSH2 0x61D DUP8 DUP7 PUSH2 0xFA5 JUMP JUMPDEST PUSH2 0x62D DUP5 PUSH2 0xFFFF AND DUP7 DUP10 DUP10 PUSH2 0x107A JUMP JUMPDEST PUSH2 0x638 DUP8 DUP8 DUP8 PUSH2 0x110A JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD PUSH2 0x64A SWAP1 DUP3 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x60 DUP9 ADD DUP3 SWAP1 MSTORE SWAP2 POP PUSH2 0x3E8 DUP3 SGT PUSH2 0x661 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x674 PUSH2 0x5A55 JUMP JUMPDEST PUSH2 0x67C PUSH2 0x5A55 JUMP JUMPDEST PUSH2 0x68A DUP5 PUSH2 0xFFFF AND DUP5 PUSH2 0x1261 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE PUSH1 0x0 PUSH2 0x6A1 PUSH2 0xFFFF DUP7 AND DUP6 PUSH2 0x1296 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x6BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6E5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x729 JUMPI PUSH2 0x706 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4A0 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x716 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x6EE JUMP JUMPDEST POP PUSH2 0x733 DUP6 PUSH2 0x12C7 JUMP JUMPDEST DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x784 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x771 PUSH2 0x5A7D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x769 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 JUMPDEST DUP5 DUP2 GT PUSH2 0x7C4 JUMPI PUSH2 0x79E DUP7 DUP3 PUSH2 0x1316 JUMP JUMPDEST DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x7B1 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x78D JUMP JUMPDEST POP SWAP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 EQ ISZERO PUSH2 0x7E5 JUMPI POP PUSH3 0x76A700 PUSH2 0x874 JUMP JUMPDEST DUP2 PUSH1 0x2 EQ ISZERO PUSH2 0x7F8 JUMPI POP PUSH3 0xED4E00 PUSH2 0x874 JUMP JUMPDEST DUP2 PUSH1 0x3 EQ ISZERO PUSH2 0x80C JUMPI POP PUSH4 0x1DA9C00 PUSH2 0x874 JUMP JUMPDEST DUP2 PUSH1 0x4 EQ ISZERO PUSH2 0x820 JUMPI POP PUSH4 0x3B53800 PUSH2 0x874 JUMP JUMPDEST DUP2 PUSH1 0x5 EQ ISZERO PUSH2 0x834 JUMPI POP PUSH4 0x9450C00 PUSH2 0x874 JUMP JUMPDEST DUP2 PUSH1 0x6 EQ ISZERO PUSH2 0x848 JUMPI POP PUSH4 0x128A1800 PUSH2 0x874 JUMP JUMPDEST DUP2 PUSH1 0x7 EQ ISZERO PUSH2 0x85C JUMPI POP PUSH4 0x25143000 PUSH2 0x874 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5D9B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x76A700 DUP3 LT ISZERO PUSH2 0x88B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x76A700 DUP3 JUMPDEST MOD SWAP1 SWAP2 SUB SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x8CE PUSH4 0x5F5E100 PUSH2 0x8C8 DUP10 DUP10 PUSH2 0x1330 JUMP JUMPDEST SWAP1 PUSH2 0x137E JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP6 ADD DUP2 SWAP1 MSTORE DUP4 MLOAD MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD SWAP1 DUP7 ADD MLOAD SWAP3 SWAP4 POP PUSH2 0x8F9 SWAP3 SWAP2 SWAP1 DUP9 DUP6 PUSH2 0x13AF JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x909 SWAP1 DUP3 PUSH2 0x14B2 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x3B9ACA00 DUP3 LT PUSH2 0x926 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH4 0x3B9ACA00 DUP2 SWAP1 SUB PUSH2 0x939 DUP6 DUP4 PUSH2 0x1330 JUMP JUMPDEST DUP2 PUSH2 0x940 JUMPI INVALID JUMPDEST SDIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x80 ADD MLOAD GT PUSH2 0x95B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x3B9ACA00 DUP3 GT ISZERO PUSH2 0x96C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP3 GT PUSH2 0x998 JUMPI DUP3 MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x991 SWAP2 SWAP1 PUSH2 0x98B SWAP1 DUP6 SWAP1 PUSH2 0x14DE JUMP JUMPDEST SWAP1 PUSH2 0x1505 JUMP JUMPDEST SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD DUP3 GT PUSH2 0x9D0 JUMPI PUSH1 0x40 DUP4 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x991 SWAP4 SWAP3 PUSH2 0x220 SWAP3 DUP2 SWAP1 SUB SWAP2 PUSH2 0x98B SWAP2 DUP9 SUB SWAP1 DUP6 SWAP1 SUB PUSH2 0x14DE JUMP JUMPDEST PUSH2 0x8AC DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0x220 DUP6 PUSH1 0x20 ADD MLOAD PUSH4 0x3B9ACA00 SUB PUSH2 0x98B DUP8 PUSH1 0x60 ADD MLOAD DUP9 PUSH1 0x80 ADD MLOAD SUB DUP9 PUSH1 0x20 ADD MLOAD DUP9 SUB PUSH2 0x14DE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP4 MLOAD LT ISZERO PUSH2 0xA1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8AC DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xA2A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0xA43 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xA5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0xA75 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0xC0 ADD MLOAD PUSH3 0xED4E00 DUP8 ADD PUSH2 0x1524 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x0 SWAP2 SWAP1 PUSH3 0x76A700 DUP3 ADD DUP3 DUP8 LT PUSH2 0xAAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP3 LT PUSH2 0xAD8 JUMPI PUSH2 0xACE DUP7 PUSH2 0x220 DUP10 DUP7 SUB PUSH2 0x98B DUP4 DUP8 SUB DUP13 DUP8 SUB PUSH2 0x14DE JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x8AC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAEE DUP9 DUP6 SUB PUSH2 0x98B DUP6 DUP11 SUB DUP12 DUP7 SUB PUSH2 0x14DE JUMP JUMPDEST SWAP1 POP DUP1 DUP8 GT PUSH2 0xAFE JUMPI PUSH1 0x1 PUSH2 0xB02 JUMP JUMPDEST DUP1 DUP8 SUB JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x8AC JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x80 ADD MLOAD GT PUSH2 0xB29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x40 ADD MLOAD DUP3 GT PUSH2 0xB4B JUMPI PUSH1 0x40 DUP4 ADD MLOAD DUP4 MLOAD PUSH2 0x991 SWAP2 SWAP1 PUSH2 0x98B SWAP1 DUP6 SWAP1 PUSH2 0x14DE JUMP JUMPDEST DUP3 PUSH1 0x60 ADD MLOAD DUP3 GT PUSH2 0xB83 JUMPI DUP3 MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH2 0x991 SWAP4 SWAP3 PUSH2 0x220 SWAP3 DUP2 SWAP1 SUB SWAP2 PUSH2 0x98B SWAP2 DUP9 SUB SWAP1 DUP6 SWAP1 SUB PUSH2 0x14DE JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH2 0x8AC SWAP3 SWAP2 PUSH2 0x220 SWAP2 DUP2 SWAP1 SUB SWAP1 PUSH2 0x98B SWAP1 DUP8 SUB PUSH4 0x3B9ACA00 DUP6 SWAP1 SUB PUSH2 0x14DE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x76A700 PUSH2 0xBD4 TIMESTAMP PUSH2 0x879 JUMP JUMPDEST ADD SWAP1 POP PUSH2 0xBE6 DUP5 PUSH2 0xFFFF DUP6 AND DUP4 PUSH2 0x1582 JUMP JUMPDEST PUSH2 0x113 DUP3 PUSH1 0xC0 ADD MLOAD DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0xC06 DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0x15E9 JUMP JUMPDEST PUSH2 0x15F7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 JUMPDEST DUP10 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xC9C JUMPI PUSH1 0x0 DUP11 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC31 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0xC47 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xC57 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xC62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xC74 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0xC84 JUMPI POP PUSH1 0x60 DUP2 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0xC93 JUMPI PUSH2 0xC93 DUP12 DUP4 PUSH2 0x1753 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xC15 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP10 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xD3F JUMPI PUSH1 0x0 DUP11 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xCBC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCD3 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCE3 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xCF7 JUMPI PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 SSTORE PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD09 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xD22 JUMPI PUSH1 0x80 DUP2 ADD MLOAD DUP1 PUSH2 0xD1F DUP4 DUP3 PUSH2 0x18A3 JUMP JUMPDEST POP POP JUMPDEST PUSH2 0xD2E DUP2 DUP7 DUP7 DUP7 PUSH2 0x19D2 JUMP JUMPDEST SWAP2 SWAP7 POP SWAP5 POP SWAP3 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xCA0 JUMP JUMPDEST POP PUSH1 0x60 DUP10 ADD MLOAD PUSH1 0x0 PUSH2 0xD4F PUSH2 0x1A40 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP JUMPDEST DUP13 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xE19 JUMPI PUSH1 0x0 DUP14 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD8A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x60 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xDA7 JUMPI POP PUSH2 0xE11 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xDB9 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0xDD7 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xDD4 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0xDE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDEC DUP2 DUP10 DUP10 DUP10 PUSH2 0x19D2 JUMP JUMPDEST SWAP2 SWAP10 POP SWAP8 POP SWAP6 POP PUSH2 0xE09 DUP2 DUP5 DUP8 PUSH1 0x8 DUP2 LT PUSH2 0xE03 JUMPI INVALID JUMPDEST ADD PUSH2 0x18A3 JUMP JUMPDEST PUSH1 0x1 DUP6 ADD SWAP5 POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xD6B JUMP JUMPDEST POP PUSH1 0x10 DUP4 GT ISZERO PUSH2 0xE28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH5 0xFFFFFFFFFF DUP5 GT ISZERO PUSH2 0xE3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP4 SWAP11 SWAP3 SWAP10 POP SWAP8 POP SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xE56 DUP4 DUP4 DUP4 PUSH2 0x1A4D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 LT PUSH2 0xE6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE75 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP5 SWAP1 SWAP5 MSTORE POP PUSH1 0x40 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x50 SHL MUL PUSH1 0xFF PUSH1 0x50 SHL NOT PUSH4 0xFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0x30 SHL MUL PUSH10 0xFFFFFFFF000000000000 NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP3 SWAP1 SWAP3 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xEDB DUP2 PUSH2 0xFFFF AND PUSH2 0x1ACE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xC0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH2 0xEFB SWAP1 PUSH2 0x1AF4 JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP POP POP PUSH1 0x0 PUSH2 0xF12 DUP7 PUSH1 0xC0 ADD MLOAD PUSH2 0x1B5D JUMP JUMPDEST POP POP PUSH1 0x80 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP8 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD8 SHL SUB NOT DUP4 AND PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0xF46 SWAP1 DUP5 PUSH1 0x0 PUSH2 0x1BBE JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0xC0 DUP7 ADD MLOAD PUSH2 0xF5A SWAP1 DUP7 PUSH2 0x1C51 JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP7 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0xF72 PUSH2 0x5AC2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF7D DUP4 PUSH2 0x1CAA JUMP JUMPDEST SWAP1 POP PUSH2 0x8AC DUP4 DUP3 PUSH2 0x1CBC JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15180 DUP3 LT ISZERO PUSH2 0xF9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x15180 DUP3 PUSH2 0x891 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB0 DUP3 PUSH2 0x879 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH1 0x80 ADD MLOAD LT PUSH2 0xFC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xFCF DUP6 DUP6 PUSH2 0x1CFF JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xFFD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP11 PUSH1 0x80 ADD MLOAD DUP11 DUP13 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x1E2E JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH2 0x100E DUP4 DUP6 PUSH2 0x1F86 JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x1020 SWAP1 DUP7 PUSH2 0x1F86 JUMP JUMPDEST PUSH1 0x60 DUP10 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP10 ADD MLOAD DUP10 MLOAD DUP1 MLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MLOAD PUSH2 0x1045 SWAP4 SWAP1 SWAP3 SWAP2 SWAP1 DUP8 DUP8 PUSH2 0x1F9C JUMP JUMPDEST PUSH1 0x60 DUP10 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SLT PUSH2 0x1058 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1061 DUP2 PUSH2 0x2067 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND PUSH1 0x80 SWAP1 SWAP9 ADD SWAP8 SWAP1 SWAP8 MSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1089 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x207B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1096 DUP6 PUSH2 0x879 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x1101 JUMPI PUSH2 0x10F9 DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x10C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x0 DUP8 DUP8 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x10DE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x208F SWAP1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x109B JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1127 DUP6 PUSH1 0xC0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND PUSH2 0x20C6 JUMP JUMPDEST PUSH1 0xA0 DUP7 ADD MLOAD DUP6 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 BYTE PUSH3 0xF4240 MUL SWAP1 PUSH1 0x0 SWAP1 ISZERO PUSH2 0x1154 JUMPI PUSH2 0x114F DUP6 PUSH3 0x76A700 PUSH2 0x20FB JUMP JUMPDEST PUSH2 0x1156 JUMP JUMPDEST DUP5 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1163 DUP5 PUSH2 0x2110 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 ISZERO PUSH2 0x1229 JUMPI PUSH1 0x0 PUSH2 0x117C DUP10 PUSH1 0x80 ADD MLOAD DUP4 PUSH2 0x2135 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1193 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP4 DUP11 PUSH2 0x21E8 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1209 JUMPI PUSH1 0xC0 DUP11 ADD MLOAD DUP11 MLOAD MLOAD PUSH1 0x0 SWAP2 PUSH2 0x11B3 SWAP2 PUSH2 0xFFFF AND DUP6 PUSH2 0x228D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x1207 JUMPI DUP11 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x11CE SWAP1 DUP6 DUP9 PUSH2 0x22D2 JUMP JUMPDEST SWAP1 POP DUP1 DUP8 GT ISZERO PUSH2 0x11E0 JUMPI POP PUSH1 0x0 PUSH2 0x11ED JUMP JUMPDEST PUSH2 0x11EA DUP2 DUP9 PUSH2 0x20FB JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x1203 PUSH2 0x11FC DUP4 DUP7 DUP14 DUP6 PUSH2 0x23B2 JUMP JUMPDEST DUP11 SWAP1 PUSH2 0x2405 JUMP JUMPDEST SWAP9 POP POP JUMPDEST POP JUMPDEST PUSH2 0x1215 DUP7 DUP5 PUSH1 0x0 PUSH2 0x241B JUMP JUMPDEST SWAP6 POP PUSH2 0x1220 DUP7 PUSH2 0x2110 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1166 JUMP JUMPDEST DUP8 MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x1239 SWAP1 DUP7 PUSH2 0x2466 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1251 DUP4 DUP4 PUSH2 0x2405 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 PUSH2 0x126E PUSH2 0x2488 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x1289 DUP2 DUP7 PUSH2 0x2495 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x12A2 PUSH2 0x25DB JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x12BD DUP2 DUP6 PUSH2 0x2495 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12D1 PUSH2 0x25E8 JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 POP PUSH2 0x12EF PUSH2 0x25F5 JUMP JUMPDEST PUSH2 0xFFFF SWAP4 SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP2 SLOAD DUP2 SSTORE PUSH1 0x1 SWAP2 DUP3 ADD SLOAD SWAP2 ADD SSTORE JUMP JUMPDEST PUSH2 0x131E PUSH2 0x5A7D JUMP JUMPDEST PUSH2 0x8AC DUP4 DUP4 PUSH2 0x132B PUSH2 0x25F5 JUMP JUMPDEST PUSH2 0x2602 JUMP JUMPDEST DUP2 DUP2 MUL PUSH1 0x0 NOT DUP4 EQ ISZERO PUSH2 0x1360 JUMPI DUP2 ISZERO DUP1 PUSH2 0x1352 JUMPI POP DUP3 DUP3 DUP3 DUP2 PUSH2 0x134F JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x135B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7CA JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0x1375 JUMPI POP DUP2 DUP4 DUP3 DUP2 PUSH2 0x1372 JUMPI INVALID JUMPDEST SDIV EQ JUMPDEST PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT EQ DUP1 ISZERO PUSH2 0x1394 JUMPI POP PUSH1 0x1 PUSH1 0xFF SHL DUP4 EQ JUMPDEST ISZERO PUSH2 0x139E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x13A7 JUMPI INVALID JUMPDEST SDIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP5 MLOAD PUSH2 0x13BE SWAP1 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2659 JUMP JUMPDEST ISZERO PUSH2 0x13C8 JUMPI PUSH2 0x113 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD ISZERO PUSH2 0x13F5 JUMPI PUSH1 0x0 PUSH2 0x13E5 DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 DUP7 DUP7 PUSH2 0x2659 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x13F3 JUMPI POP PUSH2 0x113 JUMP JUMPDEST POP JUMPDEST PUSH2 0x13FE DUP3 PUSH2 0x2775 JUMP JUMPDEST ISZERO PUSH2 0x1411 JUMPI PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x1411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x1430 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x1439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD MLOAD DUP6 PUSH1 0x40 ADD MLOAD EQ ISZERO PUSH2 0x145D JUMPI PUSH2 0x1457 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x278B JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x1473 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH2 0xFFFF SWAP7 SWAP1 SWAP7 AND DUP7 MSTORE DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP1 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP ADD DUP1 MLOAD PUSH1 0x1 ADD SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AC PUSH15 0xC097CE7BC90715B34B9F1000000000 PUSH2 0x8C8 DUP6 PUSH1 0x0 ADD MLOAD DUP6 PUSH2 0x1330 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x14ED JUMPI POP PUSH1 0x0 PUSH2 0x7CA JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x14FA JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x151C JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP7 LT PUSH2 0x1532 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP3 LT PUSH2 0x153E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP4 LT PUSH2 0x1564 JUMPI PUSH2 0x155D DUP5 PUSH2 0x220 DUP9 DUP9 SUB PUSH2 0x98B DUP4 DUP9 SUB DUP12 DUP9 SUB PUSH2 0x14DE JUMP JUMPDEST SWAP1 POP PUSH2 0x663 JUMP JUMPDEST PUSH2 0x155D PUSH2 0x157B DUP8 DUP8 SUB PUSH2 0x98B DUP7 DUP9 SUB DUP11 DUP8 SUB PUSH2 0x14DE JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x20FB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158C PUSH2 0x2844 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP4 ADD MLOAD DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SWAP1 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0xA0 DUP9 ADD MLOAD PUSH1 0xC0 DUP10 ADD MLOAD PUSH1 0xE0 DUP11 ADD MLOAD SWAP6 SWAP7 POP SWAP4 SWAP5 PUSH2 0x15DB SWAP5 DUP7 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x2851 JUMP JUMPDEST PUSH2 0x113 DUP2 DUP7 PUSH1 0x80 ADD MLOAD PUSH2 0x2962 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7CA PUSH1 0x0 NOT DUP4 PUSH2 0x1330 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1608 DUP8 DUP8 PUSH2 0xFFFF AND PUSH2 0x20C6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1614 PUSH2 0x29A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP13 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SWAP2 SWAP3 POP DUP1 PUSH2 0x164F DUP9 DUP11 PUSH2 0x29B5 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x165D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1667 DUP6 DUP4 PUSH2 0x2ABD JUMP JUMPDEST ISZERO PUSH2 0x16EA JUMPI DUP3 SLOAD PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x0 PUSH2 0x1681 DUP10 DUP4 PUSH2 0x1F86 JUMP JUMPDEST SWAP1 POP PUSH2 0x168C DUP2 PUSH2 0x2AED JUMP JUMPDEST DUP6 SLOAD PUSH1 0xF SWAP2 SWAP1 SWAP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT SWAP1 SWAP2 AND OR DUP6 SSTORE PUSH2 0x16B9 DUP14 DUP14 DUP14 DUP6 DUP6 PUSH2 0x2B17 JUMP JUMPDEST DUP1 PUSH2 0x16CD JUMPI PUSH2 0x16CA DUP8 DUP6 PUSH1 0x0 PUSH2 0x241B JUMP JUMPDEST SWAP7 POP JUMPDEST PUSH2 0x16DC DUP14 DUP14 PUSH2 0xFFFF AND DUP10 PUSH2 0x2BEC JUMP JUMPDEST SWAP7 POP PUSH2 0x663 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP7 ISZERO PUSH2 0x1744 JUMPI PUSH2 0x16F9 DUP8 PUSH2 0x2AED JUMP JUMPDEST DUP4 SLOAD PUSH1 0xF SWAP2 SWAP1 SWAP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT SWAP1 SWAP2 AND OR DUP4 SSTORE PUSH2 0x1727 DUP12 DUP12 DUP12 PUSH1 0x0 DUP12 PUSH2 0x2B17 JUMP JUMPDEST PUSH2 0x1733 DUP6 DUP4 PUSH1 0x1 PUSH2 0x241B JUMP JUMPDEST SWAP5 POP PUSH2 0x1744 DUP12 DUP12 PUSH2 0xFFFF AND DUP8 PUSH2 0x2BEC JUMP JUMPDEST POP SWAP5 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD MLOAD DUP2 LT PUSH2 0x1761 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x60 ADD MLOAD GT PUSH2 0x1772 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1784 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x179B JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x17AB JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x17C9 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x17C6 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x17D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP4 ADD DUP1 MLOAD PUSH1 0x0 NOT ADD SWAP1 MSTORE PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP6 MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x1845 JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x17FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 DUP2 PUSH1 0x80 ADD MLOAD GT DUP1 ISZERO PUSH2 0x182C JUMPI POP PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1829 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST ISZERO PUSH2 0x183C JUMPI DUP1 PUSH1 0x80 ADD MLOAD SWAP3 POP DUP2 SWAP4 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x17E3 JUMP JUMPDEST POP DUP2 DUP5 EQ ISZERO PUSH2 0x185E JUMPI POP POP PUSH1 0x2 PUSH1 0xA0 SWAP2 SWAP1 SWAP2 ADD MSTORE PUSH2 0x189F JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1870 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x80 DUP6 DUP2 ADD DUP1 MLOAD SWAP2 DUP4 ADD DUP1 MLOAD SWAP1 SWAP2 MSTORE MSTORE PUSH1 0x1 PUSH1 0xA0 SWAP2 DUP3 ADD MSTORE PUSH1 0x2 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP POP JUMPDEST POP POP JUMP JUMPDEST DUP2 MLOAD PUSH2 0xFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x18C0 JUMPI POP DUP2 MLOAD PUSH2 0x3FFF PUSH2 0xFFFF SWAP1 SWAP2 AND GT ISZERO JUMPDEST PUSH2 0x18C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x18E6 JUMPI POP PUSH1 0x20 DUP3 ADD MLOAD PUSH5 0xFFFFFFFFFF LT ISZERO JUMPDEST PUSH2 0x18EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x1908 JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x8 LT ISZERO JUMPDEST PUSH2 0x1911 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT SGT DUP1 ISZERO SWAP1 PUSH2 0x1938 JUMPI POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB SLT ISZERO JUMPDEST PUSH2 0x1941 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 SLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD PUSH1 0xA SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND PUSH1 0x1 PUSH1 0x40 SHL MUL PUSH19 0xFFFFFFFFFFFFFFFFFFFFFF0000000000000000 NOT PUSH1 0xFF SWAP1 SWAP7 AND PUSH1 0x1 PUSH1 0x38 SHL MUL PUSH8 0xFF00000000000000 NOT PUSH5 0xFFFFFFFFFF SWAP1 SWAP4 AND PUSH3 0x10000 MUL PUSH7 0xFFFFFFFFFF0000 NOT PUSH2 0xFFFF SWAP1 SWAP7 AND PUSH2 0xFFFF NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP5 SWAP1 SWAP5 AND SWAP3 SWAP1 SWAP3 OR AND SWAP2 SWAP1 SWAP2 OR SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x19E1 DUP9 PUSH2 0x2C46 JUMP JUMPDEST SWAP1 POP DUP5 ISZERO DUP1 PUSH2 0x19EF JUMPI POP DUP1 DUP6 GT JUMPDEST ISZERO PUSH2 0x19F8 JUMPI DUP1 SWAP5 POP JUMPDEST DUP7 DUP1 PUSH2 0x1A08 JUMPI POP PUSH1 0x0 DUP9 PUSH1 0x60 ADD MLOAD SLT JUMPDEST SWAP7 POP PUSH2 0xFFFF DUP7 AND ISZERO PUSH2 0x1A19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP SWAP5 MLOAD SWAP4 SWAP6 PUSH1 0xF0 SWAP5 SWAP1 SWAP5 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT AND PUSH1 0x10 SWAP4 SWAP1 SWAP4 SHR SWAP3 SWAP1 SWAP3 OR SWAP4 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0xD PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x1A5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1A65 PUSH2 0x2CC6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH2 0x1A96 DUP4 PUSH2 0x2CD3 JUMP JUMPDEST DUP2 SLOAD PUSH1 0xA SWAP2 SWAP1 SWAP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND PUSH1 0x1 PUSH1 0xA8 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB SWAP1 SWAP2 AND OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x2 PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1AD9 PUSH2 0x2CFC JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1B05 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP8 SWAP1 SWAP8 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP5 KECCAK256 SLOAD PUSH2 0xFFFF DUP2 AND SWAP6 PUSH4 0xFFFFFFFF PUSH3 0x10000 DUP4 DIV DUP2 AND SWAP7 POP PUSH1 0x1 PUSH1 0x30 SHL DUP4 DIV AND SWAP5 POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x50 SHL DUP4 DIV AND SWAP4 POP PUSH1 0x1 PUSH1 0x58 SHL SWAP1 SWAP2 DIV PUSH1 0xD8 SHL SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1B6B PUSH2 0x2D09 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SWAP4 PUSH1 0x1 PUSH1 0x60 SHL DUP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP4 POP PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP2 POP JUMP JUMPDEST PUSH2 0x1BC6 PUSH2 0x5AEE JUMP JUMPDEST PUSH2 0x1BCE PUSH2 0x5AEE JUMP JUMPDEST PUSH1 0xFF DUP5 AND PUSH2 0x1BDD JUMPI SWAP1 POP PUSH2 0x8AC JUMP JUMPDEST PUSH2 0x1BE7 DUP6 DUP6 PUSH2 0x2D16 JUMP JUMPDEST DUP2 MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1C09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C43 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1C30 PUSH2 0x5B16 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1C28 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x20 DUP3 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C5C PUSH2 0x2CC6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xA SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP5 POP SWAP2 SWAP3 POP DUP4 SLT ISZERO PUSH2 0x1CA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1CB2 PUSH2 0x5B5A JUMP JUMPDEST PUSH2 0x7CA DUP3 TIMESTAMP PUSH2 0x2D22 JUMP JUMPDEST PUSH2 0x1CC4 PUSH2 0x5AC2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CD3 DUP5 PUSH2 0xFFFF AND PUSH2 0x2DE8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH2 0xFFFF SWAP7 SWAP1 SWAP7 AND DUP7 MSTORE PUSH1 0xFF DUP3 AND PUSH1 0x20 DUP8 ADD MSTORE DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x60 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1D0A PUSH2 0x5A0D JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD MLOAD PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1E24 JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D2A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x1D41 DUP2 PUSH1 0x40 ADD MLOAD PUSH2 0x2775 JUMP JUMPDEST PUSH2 0x1D4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D55 DUP3 PUSH2 0x2C46 JUMP JUMPDEST SWAP1 POP DUP8 DUP2 GT ISZERO PUSH2 0x1D64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D7C DUP6 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP5 PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x2E05 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x1D97 DUP4 PUSH1 0x60 ADD MLOAD DUP8 PUSH2 0x2E19 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP3 POP SWAP1 POP PUSH2 0x1DA5 DUP9 DUP3 PUSH2 0x1F86 JUMP JUMPDEST SWAP8 POP POP DUP8 DUP3 PUSH1 0x20 ADD MLOAD GT PUSH2 0x1DEC JUMPI PUSH1 0xC0 DUP10 ADD MLOAD DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD DUP12 MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x0 SWAP4 PUSH2 0x1DD8 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP7 DUP15 PUSH2 0x2EC1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1DE4 DUP8 DUP3 PUSH2 0x1F86 JUMP JUMPDEST SWAP7 POP POP PUSH2 0x1E0B JUMP JUMPDEST PUSH2 0x1E09 DUP10 PUSH1 0xC0 ADD MLOAD DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP13 PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x15F7 JUMP JUMPDEST POP JUMPDEST PUSH1 0x20 DUP10 ADD MLOAD PUSH2 0x1E1A SWAP1 DUP5 PUSH2 0x1753 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x1D13 JUMP JUMPDEST POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1E42 DUP10 DUP10 PUSH2 0xFFFF AND PUSH2 0x20C6 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E4D DUP7 PUSH2 0xF89 JUMP JUMPDEST SWAP2 POP DUP7 DUP3 LT ISZERO PUSH2 0x1E5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1E68 DUP9 DUP5 PUSH2 0x29B5 JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x1E7E JUMPI PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP POP POP PUSH2 0x1F7B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E89 DUP4 PUSH2 0x2110 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1E9B JUMPI POP DUP2 DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x1F06 JUMPI PUSH1 0x0 PUSH2 0x1EAC DUP11 DUP4 PUSH2 0x2135 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1EBD DUP14 DUP14 DUP5 DUP14 DUP14 PUSH2 0x2EFF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x1ED9 JUMPI PUSH2 0x1ED2 DUP9 DUP3 PUSH2 0x1F86 JUMP JUMPDEST SWAP8 POP PUSH2 0x1EE6 JUMP JUMPDEST PUSH2 0x1EE3 DUP8 DUP3 PUSH2 0x1F86 JUMP JUMPDEST SWAP7 POP JUMPDEST PUSH2 0x1EF2 DUP6 DUP5 PUSH1 0x0 PUSH2 0x241B JUMP JUMPDEST SWAP5 POP PUSH2 0x1EFD DUP6 PUSH2 0x2110 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1E8C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x1F67 JUMPI PUSH1 0x0 PUSH2 0x1F1B DUP12 DUP5 PUSH2 0x2135 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x1F2A DUP9 DUP5 PUSH2 0x29B5 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x1F38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F44 DUP5 DUP4 PUSH1 0x1 PUSH2 0x241B JUMP JUMPDEST SWAP4 POP PUSH2 0x1F52 DUP8 DUP7 PUSH1 0x0 PUSH2 0x241B JUMP JUMPDEST SWAP7 POP PUSH2 0x1F5D DUP8 PUSH2 0x2110 JUMP JUMPDEST SWAP5 POP POP POP POP PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x1F76 DUP13 DUP13 PUSH2 0xFFFF AND DUP4 PUSH2 0x2BEC JUMP JUMPDEST POP POP POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 SLT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FB3 DUP4 PUSH2 0x1FAD DUP8 DUP8 PUSH2 0x1F86 JUMP JUMPDEST SWAP1 PUSH2 0x1F86 JUMP JUMPDEST SWAP1 POP PUSH2 0x1FBF DUP9 DUP3 PUSH2 0x2F97 JUMP JUMPDEST SWAP2 POP DUP4 PUSH1 0x0 SGT ISZERO PUSH2 0x1FCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 SGT ISZERO PUSH2 0x1FDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 PUSH1 0x0 SLT ISZERO PUSH2 0x1FF7 JUMPI PUSH2 0x1FF0 DUP6 DUP6 PUSH2 0x1F86 JUMP JUMPDEST SWAP4 POP PUSH2 0x2004 JUMP JUMPDEST PUSH2 0x2001 DUP6 DUP5 PUSH2 0x1F86 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0x2010 DUP6 PUSH2 0x15E9 JUMP JUMPDEST SLT ISZERO PUSH2 0x201D JUMPI POP DUP3 PUSH2 0x2029 JUMP JUMPDEST PUSH2 0x2026 DUP6 PUSH2 0x15E9 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x205B JUMPI PUSH1 0x20 DUP10 ADD MLOAD DUP10 MLOAD PUSH1 0x0 SWAP2 PUSH2 0x204B SWAP2 PUSH2 0x8C8 SWAP1 DUP6 SWAP1 PUSH2 0x1330 JUMP JUMPDEST SWAP1 POP PUSH2 0x2059 DUP10 DUP10 DUP4 DUP6 PUSH2 0x2FD6 JUMP JUMPDEST POP JUMPDEST POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH5 0xFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 ADD MLOAD PUSH2 0x12C PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR PUSH1 0xFF AND MUL SWAP1 JUMP JUMPDEST PUSH2 0x209C DUP8 DUP8 DUP8 DUP7 DUP6 PUSH2 0x3118 JUMP JUMPDEST PUSH2 0x20B5 DUP8 PUSH1 0xE0 ADD MLOAD DUP9 PUSH1 0xA0 ADD MLOAD DUP10 PUSH1 0xC0 ADD MLOAD DUP6 DUP9 PUSH2 0x31D3 JUMP JUMPDEST PUSH1 0xC0 SWAP1 SWAP8 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x20D1 PUSH2 0x325B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x210A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x211F JUMPI POP PUSH1 0x0 PUSH2 0x874 JUMP JUMPDEST PUSH2 0x2128 DUP3 PUSH2 0x3268 JUMP JUMPDEST PUSH1 0xFF SUB PUSH1 0x1 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2141 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x100 DUP3 GT ISZERO PUSH2 0x2150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x215B DUP5 PUSH2 0xF89 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x5A DUP5 GT PUSH2 0x2176 JUMPI POP PUSH3 0x15180 DUP4 MUL ADD SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x87 DUP5 GT PUSH2 0x219E JUMPI POP PUSH1 0x59 NOT DUP4 ADD PUSH3 0x7E900 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH3 0x76A700 ADD SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST PUSH1 0xC3 DUP5 GT PUSH2 0x21C7 JUMPI POP PUSH1 0x86 NOT DUP4 ADD PUSH3 0x278D00 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH4 0x1DA9C00 ADD SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST POP PUSH1 0xC2 NOT DUP4 ADD PUSH3 0x76A700 SWAP1 DUP2 MUL SWAP1 DUP3 MOD SWAP1 SWAP2 SUB ADD PUSH4 0xB1FA800 ADD SWAP1 POP PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x2209 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5D6C JUMP JUMPDEST PUSH1 0x7 DUP5 GT ISZERO PUSH2 0x222A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5DEB JUMP JUMPDEST PUSH3 0x76A700 DUP4 MOD ISZERO PUSH2 0x223D JUMPI POP PUSH1 0x0 PUSH2 0x8AC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2248 DUP4 PUSH2 0x879 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST DUP6 DUP2 GT PUSH2 0x2281 JUMPI PUSH2 0x2267 PUSH2 0x2260 DUP3 PUSH2 0x7D0 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x89A JUMP JUMPDEST DUP6 EQ ISZERO PUSH2 0x2279 JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x8AC JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x224D JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2298 PUSH2 0x29A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP8 DUP4 MSTORE DUP4 MSTORE DUP1 DUP3 KECCAK256 DUP7 DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x22E6 DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 PUSH2 0x3301 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x22F5 DUP8 PUSH2 0x207B JUMP JUMPDEST SWAP1 POP DUP2 PUSH2 0x2315 JUMPI DUP7 MLOAD PUSH2 0x230E SWAP1 PUSH2 0xFFFF AND DUP8 DUP4 DUP9 PUSH2 0x3390 JUMP JUMPDEST SWAP4 POP PUSH2 0xB0D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2320 DUP7 PUSH2 0x879 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2330 PUSH2 0x2260 DUP7 PUSH2 0x7D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2348 DUP11 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP4 DUP7 DUP12 PUSH2 0x3390 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP8 PUSH1 0x1 EQ ISZERO PUSH2 0x2366 JUMPI POP POP PUSH1 0x40 DUP1 DUP12 ADD MLOAD ADD MLOAD DUP9 PUSH2 0x2395 JUMP JUMPDEST PUSH2 0x237C PUSH2 0x2375 PUSH1 0x1 DUP11 SUB PUSH2 0x7D0 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x89A JUMP JUMPDEST SWAP1 POP PUSH2 0x2392 DUP13 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND DUP3 DUP9 DUP14 PUSH2 0x3390 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH2 0x23A2 DUP2 DUP6 DUP5 DUP7 DUP16 PUSH2 0x1524 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0x23C1 JUMPI POP PUSH1 0x0 PUSH2 0x23FD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23CD DUP6 DUP6 PUSH2 0x20FB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x23DB DUP3 DUP6 PUSH2 0x342F JUMP JUMPDEST SWAP1 POP PUSH4 0x3B9ACA00 DUP2 SGT ISZERO PUSH2 0x23EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x23F8 DUP8 DUP3 PUSH2 0x349C JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 SGT ISZERO PUSH1 0x0 DUP4 SLT ISZERO EQ PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 LT ISZERO DUP1 ISZERO PUSH2 0x2430 JUMPI POP PUSH2 0x100 DUP4 GT ISZERO JUMPDEST PUSH2 0x2439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x2452 JUMPI POP PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP4 ADD SHR DUP4 OR PUSH2 0x8AC JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP4 ADD SHR NOT DUP4 AND PUSH2 0x8AC JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x8AC SWAP1 PUSH2 0x8C8 DUP5 PUSH15 0xC097CE7BC90715B34B9F1000000000 PUSH2 0x1330 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x4 PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x24B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24DC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x24F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2522 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x25CC JUMPI DUP8 DUP5 PUSH1 0xE DUP2 LT PUSH2 0x253C JUMPI INVALID JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x256A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 DUP8 DUP5 PUSH1 0xE DUP2 LT PUSH2 0x2587 JUMPI INVALID JUMPDEST PUSH1 0x8 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 0x4 MUL SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x25B5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x2528 JUMP JUMPDEST POP SWAP1 SWAP4 POP SWAP2 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x5 PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x1C PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x1B PUSH2 0x2CAD JUMP JUMPDEST PUSH2 0x260A PUSH2 0x5A7D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2615 DUP5 PUSH2 0x34B5 JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP SWAP1 PUSH1 0x4 DUP7 LT PUSH2 0x263B JUMPI PUSH1 0x1 PUSH2 0x263E JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xFF AND PUSH1 0x2 DUP2 LT PUSH2 0x264B JUMPI INVALID JUMPDEST ADD SLOAD SWAP1 POP PUSH2 0x12BD DUP3 DUP3 PUSH2 0x34EE JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x2768 JUMPI PUSH1 0x0 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2674 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP5 DUP2 PUSH1 0x40 ADD MLOAD EQ ISZERO DUP1 PUSH2 0x269D JUMPI POP DUP7 PUSH2 0xFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH2 0xFFFF AND EQ ISZERO JUMPDEST DUP1 PUSH2 0x26AC JUMPI POP DUP6 DUP2 PUSH1 0x20 ADD MLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 0x26B7 JUMPI POP PUSH2 0x2760 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x26C9 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x26E7 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x26E4 JUMPI INVALID JUMPDEST EQ ISZERO JUMPDEST PUSH2 0x26F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2702 SWAP1 DUP7 PUSH2 0x1F86 JUMP JUMPDEST SWAP1 POP PUSH2 0x270D DUP7 PUSH2 0x2775 JUMP JUMPDEST ISZERO PUSH2 0x2720 JUMPI PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x2720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x273F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x2748 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SWAP1 SWAP2 ADD DUP2 SWAP1 MSTORE SWAP2 POP PUSH2 0x663 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x265D JUMP JUMPDEST POP PUSH1 0x0 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 LT DUP1 ISZERO SWAP1 PUSH2 0x7CA JUMPI POP POP PUSH1 0x8 LT ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 EQ PUSH2 0x27A2 JUMPI DUP3 MLOAD PUSH1 0x2 MUL PUSH2 0x27A5 JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x27C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x27FA JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x27E7 PUSH2 0x5B16 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x27DF JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x283C JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2815 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2829 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2800 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0xA PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 DUP6 SLT ISZERO DUP1 ISZERO PUSH2 0x2869 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP6 SGT ISZERO JUMPDEST PUSH2 0x2872 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 SLT ISZERO DUP1 ISZERO PUSH2 0x288A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP5 SGT ISZERO JUMPDEST PUSH2 0x2893 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x28A7 JUMPI POP PUSH4 0xFFFFFFFF DUP4 GT ISZERO JUMPDEST PUSH2 0x28B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x0 LT DUP1 ISZERO PUSH2 0x28C4 JUMPI POP PUSH4 0xFFFFFFFF DUP3 GT ISZERO JUMPDEST PUSH2 0x28CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP2 GT ISZERO PUSH2 0x28DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP6 DUP7 AND OR PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x50 SHL NOT AND PUSH1 0x1 PUSH1 0x50 SHL SWAP5 SWAP1 SWAP6 AND SWAP4 SWAP1 SWAP4 MUL SWAP4 SWAP1 SWAP4 OR PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL PUSH4 0xFFFFFFFF SWAP3 DUP4 AND MUL OR PUSH4 0xFFFFFFFF PUSH1 0xC0 SHL NOT AND PUSH1 0x1 PUSH1 0xC0 SHL SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0xE0 SHL SWAP2 SWAP1 SWAP3 AND MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO DUP1 ISZERO PUSH2 0x297A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x2983 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0xC PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x29C3 DUP6 PUSH2 0xF89 JUMP JUMPDEST SWAP1 POP PUSH3 0x15180 DUP5 MOD ISZERO PUSH2 0x29DD JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x25D4 JUMP JUMPDEST DUP4 DUP2 LT PUSH2 0x29F1 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x25D4 JUMP JUMPDEST PUSH3 0x15180 DUP2 DUP6 SUB DIV PUSH1 0x5A DUP2 GT PUSH2 0x2A0E JUMPI SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0x25D4 SWAP1 POP JUMP JUMPDEST PUSH2 0x168 DUP2 GT PUSH2 0x2A4D JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x7E900 DUP5 MOD DIV DUP3 ADD PUSH1 0x59 NOT ADD SWAP1 POP PUSH1 0x6 DUP2 DIV PUSH1 0x5A ADD PUSH1 0x6 DUP3 DUP2 PUSH2 0x2A3D JUMPI INVALID JUMPDEST MOD PUSH1 0x0 EQ SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x25D4 JUMP JUMPDEST PUSH2 0x870 DUP2 GT PUSH2 0x2A7D JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x278D00 DUP5 MOD DIV DUP3 ADD PUSH2 0x167 NOT ADD SWAP1 POP PUSH1 0x1E DUP2 DIV PUSH1 0x87 ADD PUSH1 0x1E DUP3 DUP2 PUSH2 0x2A3D JUMPI INVALID JUMPDEST PUSH2 0x1DE2 DUP2 GT PUSH2 0x2AAD JUMPI PUSH1 0x0 PUSH3 0x15180 PUSH3 0x76A700 DUP5 MOD DIV DUP3 ADD PUSH2 0x86F NOT ADD SWAP1 POP PUSH1 0x5A DUP2 DIV PUSH1 0xC3 ADD PUSH1 0x5A DUP3 DUP2 PUSH2 0x2A3D JUMPI INVALID JUMPDEST POP PUSH2 0x100 SWAP6 PUSH1 0x0 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 LT ISZERO DUP1 ISZERO PUSH2 0x2AD2 JUMPI POP PUSH2 0x100 DUP3 GT ISZERO JUMPDEST PUSH2 0x2ADB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 NOT ADD SHL PUSH1 0x1 PUSH1 0xFF SHL SWAP1 DUP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP3 SLT DUP1 ISZERO SWAP1 PUSH2 0x2B0E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP3 SGT ISZERO JUMPDEST PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2B23 DUP4 DUP4 PUSH2 0x360D JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2B30 JUMPI POP PUSH2 0x113 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B3A PUSH2 0x3694 JUMP JUMPDEST PUSH2 0xFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP1 SWAP2 AND DUP2 SUB SWAP1 PUSH2 0x2B72 DUP3 DUP6 PUSH2 0x2405 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x2B82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B9B PUSH2 0x2B96 PUSH2 0x2B91 DUP4 PUSH2 0x15E9 JUMP JUMPDEST PUSH2 0xBB2 JUMP JUMPDEST PUSH2 0x36A1 JUMP JUMPDEST PUSH2 0xFFFF DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x2BE1 DUP10 DUP10 DUP10 DUP8 PUSH2 0x36B7 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x14 PUSH2 0x2BF7 DUP3 PUSH2 0x3741 JUMP JUMPDEST GT ISZERO PUSH2 0x2C15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5DC2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C1F PUSH2 0x325B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP5 DUP6 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP5 DUP3 MSTORE SWAP4 SWAP1 SWAP5 MSTORE POP SWAP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x40 ADD MLOAD GT DUP1 ISZERO PUSH2 0x2C60 JUMPI POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x8 LT ISZERO JUMPDEST PUSH2 0x2C69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 LT PUSH2 0x2C80 JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x874 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C92 PUSH1 0x1 DUP5 PUSH1 0x40 ADD MLOAD SUB PUSH2 0x7D0 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x8AC SWAP1 PUSH3 0x76A700 SWAP1 PUSH2 0x220 SWAP1 DUP5 PUSH2 0x20FB JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF4240 DUP3 PUSH1 0x26 DUP2 GT ISZERO PUSH2 0x2CBF JUMPI INVALID JUMPDEST ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x6 PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB NOT DUP3 SLT DUP1 ISZERO SWAP1 PUSH2 0x2B0E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x57 SHL SUB DUP3 SGT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x3 PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x11 PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x60 PUSH2 0x283C DUP4 DUP4 PUSH2 0x3811 JUMP JUMPDEST PUSH2 0x2D2A PUSH2 0x5B5A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D35 DUP5 PUSH2 0x3832 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x0 ADD MLOAD LT ISZERO PUSH2 0x2D74 JUMPI PUSH1 0x0 DUP1 PUSH2 0x2D4F DUP7 PUSH2 0x38FA JUMP JUMPDEST SWAP1 POP PUSH2 0x2D5D DUP7 DUP5 DUP4 DUP9 PUSH2 0x3977 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH2 0x2D6D DUP7 DUP4 DUP6 PUSH2 0x3A1B JUMP JUMPDEST POP POP PUSH2 0x2D81 JUMP JUMPDEST DUP1 MLOAD DUP4 EQ PUSH2 0x2D81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x2DAF PUSH2 0x2DAA DUP5 PUSH1 0xA0 ADD MLOAD DUP6 PUSH1 0xC0 ADD MLOAD PUSH2 0x14DE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3C4C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2DD2 PUSH2 0x2DAA DUP5 PUSH1 0xA0 ADD MLOAD DUP6 PUSH1 0xE0 ADD MLOAD PUSH2 0x14DE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x60 ADD MLOAD DUP2 MSTORE POP SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2DF3 PUSH2 0x3C62 JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2E13 DUP5 DUP5 DUP5 PUSH1 0x1 DUP6 PUSH2 0x3118 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH2 0x2E2C JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x25D4 JUMP JUMPDEST PUSH1 0x0 DUP4 SGT PUSH2 0x2E39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2E58 DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x8C8 DUP6 DUP8 PUSH1 0x60 ADD MLOAD PUSH2 0x1330 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH2 0x2E79 DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x8C8 DUP6 DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0x1330 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x2E8B SWAP1 DUP5 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x2E9F SWAP1 DUP3 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x2EB3 SWAP1 DUP4 PUSH2 0x1245 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x25D4 DUP5 PUSH2 0x3C6F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2ECF DUP7 DUP7 DUP6 PUSH2 0x3CC7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2EDE DUP10 DUP4 DUP8 PUSH2 0x3CF0 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND ISZERO PUSH2 0x205B JUMPI PUSH2 0x205B DUP9 DUP9 DUP9 DUP9 DUP6 PUSH2 0x3D58 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2F0A PUSH2 0x29A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH2 0xFFFF DUP12 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH2 0x2F50 DUP5 DUP10 DUP10 DUP10 DUP6 DUP11 PUSH2 0x2EC1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH2 0xFFFF SWAP1 SWAP10 AND DUP3 MSTORE SWAP8 DUP4 MSTORE DUP8 DUP2 KECCAK256 SWAP7 DUP2 MSTORE SWAP6 SWAP1 SWAP2 MSTORE POP POP POP SWAP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND SWAP1 SSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x2FD0 JUMPI PUSH2 0x2FCB PUSH1 0x1 PUSH2 0x2FC5 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x8C8 DUP8 PUSH1 0x0 ADD MLOAD DUP8 PUSH2 0x1330 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x2405 JUMP JUMPDEST PUSH2 0x8AC JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FE0 PUSH2 0x3E4A JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 POP PUSH5 0xFFFFFFFFFF AND TIMESTAMP EQ PUSH2 0x300B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0xF8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3020 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x0 SWAP1 PUSH2 0x303B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND DUP6 PUSH2 0x1F86 JUMP JUMPDEST DUP3 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x305D SWAP1 PUSH1 0x1 PUSH1 0x28 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND DUP6 PUSH2 0x1F86 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x9 NOT SLT DUP1 ISZERO PUSH2 0x3070 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST ISZERO PUSH2 0x307A JUMPI PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 PUSH1 0x9 NOT SLT DUP1 ISZERO PUSH2 0x308B JUMPI POP PUSH1 0x0 DUP2 SLT JUMPDEST ISZERO PUSH2 0x3094 JUMPI POP PUSH1 0x0 JUMPDEST PUSH2 0x30A5 PUSH2 0x30A0 DUP4 PUSH2 0xBB2 JUMP JUMPDEST PUSH2 0x3E57 JUMP JUMPDEST PUSH1 0x1 DUP5 ADD DUP1 SLOAD PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x30D7 PUSH2 0x30A0 DUP3 PUSH2 0xBB2 JUMP JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x28 SHL MUL PUSH16 0xFFFFFFFFFFFFFFFFFFFFFF0000000000 NOT SWAP1 SWAP2 AND OR DUP4 SSTORE PUSH2 0x310F DUP8 DUP8 DUP7 DUP9 PUSH2 0x3E6D JUMP JUMPDEST PUSH2 0x1101 DUP4 PUSH2 0x3F81 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3122 PUSH2 0x2844 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 DUP11 MSTORE SWAP1 DUP10 ADD DUP8 SWAP1 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP1 DUP3 AND SWAP4 DUP12 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x50 SHL DUP2 DIV SWAP1 SWAP3 AND PUSH1 0x60 DUP11 ADD MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP4 DIV DUP2 AND PUSH1 0xA0 DUP12 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 SHL DUP4 DIV DUP2 AND PUSH1 0xC0 DUP12 ADD MSTORE PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP3 DIV SWAP1 SWAP2 AND PUSH1 0xE0 DUP10 ADD MSTORE SWAP1 SWAP2 POP DUP1 DUP5 ISZERO PUSH2 0x31C1 JUMPI PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND PUSH1 0x80 DUP10 ADD MSTORE PUSH2 0x31C9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP10 ADD MSTORE JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x31E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 GT ISZERO PUSH2 0x31F0 JUMPI POP DUP4 PUSH2 0x663 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31FC DUP4 DUP9 PUSH2 0x20FB JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x320F JUMPI DUP6 SWAP2 POP POP PUSH2 0x663 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x321B DUP3 DUP7 PUSH2 0x4046 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x322D PUSH4 0x3B9ACA00 DUP4 PUSH2 0x20FB JUMP JUMPDEST SWAP1 POP PUSH2 0x324E PUSH4 0x3B9ACA00 PUSH2 0x98B PUSH2 0x3244 DUP11 DUP6 PUSH2 0x14DE JUMP JUMPDEST PUSH2 0x220 DUP13 DUP8 PUSH2 0x14DE JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0xB PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3274 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x3287 JUMPI PUSH1 0x80 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT PUSH2 0x329A JUMPI PUSH1 0x40 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x32AE JUMPI PUSH1 0x20 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x32C0 JUMPI PUSH1 0x10 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x32D1 JUMPI PUSH1 0x8 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x32E1 JUMPI PUSH1 0x4 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x32F1 JUMPI PUSH1 0x2 SWAP2 DUP3 SHR SWAP2 ADD JUMPDEST PUSH1 0x2 DUP3 LT PUSH2 0x874 JUMPI PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 GT PUSH2 0x3311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 DUP6 GT ISZERO PUSH2 0x331F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x332A DUP5 PUSH2 0x879 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST DUP7 DUP2 GT PUSH2 0x3382 JUMPI PUSH1 0x0 PUSH2 0x334B PUSH2 0x3344 DUP4 PUSH2 0x7D0 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x89A JUMP JUMPDEST SWAP1 POP DUP7 DUP2 EQ ISZERO PUSH2 0x3363 JUMPI POP SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH2 0x3388 SWAP1 POP JUMP JUMPDEST DUP7 DUP2 GT ISZERO PUSH2 0x3379 JUMPI POP SWAP3 POP PUSH1 0x1 SWAP2 POP PUSH2 0x3388 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x332F JUMP JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x339B PUSH2 0x2844 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x76A700 PUSH2 0x33AC DUP6 PUSH2 0x879 JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 ADD DUP1 DUP4 MSTORE SWAP4 SWAP1 MSTORE KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH4 0xFFFFFFFF PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xC0 SHL DUP2 DIV DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 SWAP2 DIV AND DUP2 PUSH2 0x3413 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5D0E JUMP JUMPDEST PUSH2 0x3420 DUP2 DUP5 DUP5 DUP13 DUP13 PUSH2 0x31D3 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x344C PUSH2 0x3447 PUSH4 0x1DA9C00 PUSH2 0x98B DUP7 DUP9 PUSH2 0x14DE JUMP JUMPDEST PUSH2 0x405F JUMP JUMPDEST SWAP1 POP PUSH2 0x345E DUP2 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x407D JUMP JUMPDEST SWAP1 POP PUSH2 0x3471 PUSH2 0x346C DUP3 PUSH2 0x40D0 JUMP JUMPDEST PUSH2 0x40F2 JUMP JUMPDEST SWAP1 POP PUSH2 0x3483 DUP2 PUSH3 0x1DCD65 PUSH1 0x49 SHL PUSH2 0x4147 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3490 DUP3 PUSH2 0x417D JUMP JUMPDEST PUSH1 0x7 SIGNEXTEND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AC PUSH2 0x34AB DUP5 DUP5 PUSH2 0x1330 JUMP JUMPDEST PUSH4 0x3B9ACA00 PUSH2 0x137E JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 LT PUSH2 0x34C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 DUP3 GT ISZERO PUSH2 0x34D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x34E3 JUMPI PUSH1 0x4 DUP3 SUB PUSH2 0x34E5 JUMP JUMPDEST DUP2 JUMPDEST PUSH1 0x8 MUL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x34F6 PUSH2 0x5A7D JUMP JUMPDEST PUSH1 0x64 PUSH4 0x3B9ACA00 DUP4 PUSH1 0xFF DUP7 AND PUSH1 0x20 DUP2 LT PUSH2 0x350C JUMPI INVALID JUMPDEST BYTE MUL DUP2 PUSH2 0x3515 JUMPI INVALID JUMPDEST DIV DUP2 MSTORE PUSH1 0x64 PUSH4 0x3B9ACA00 DUP4 PUSH1 0xFF DUP7 AND PUSH1 0x1 ADD PUSH1 0x20 DUP2 LT PUSH2 0x3531 JUMPI INVALID JUMPDEST BYTE MUL DUP2 PUSH2 0x353A JUMPI INVALID JUMPDEST DIV DUP2 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x355F DUP3 PUSH1 0x2 DUP6 PUSH1 0xFF AND ADD PUSH1 0x20 DUP2 LT PUSH2 0x3559 JUMPI INVALID JUMPDEST BYTE PUSH2 0x4186 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 SWAP1 DUP4 PUSH1 0xFF DUP7 AND PUSH1 0x3 ADD PUSH1 0x20 DUP2 LT PUSH2 0x357C JUMPI INVALID JUMPDEST BYTE MUL DUP2 PUSH2 0x3585 JUMPI INVALID JUMPDEST DIV PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x100 SWAP1 DUP4 PUSH1 0xFF DUP7 AND PUSH1 0x4 ADD PUSH1 0x20 DUP2 LT PUSH2 0x35A6 JUMPI INVALID JUMPDEST BYTE MUL DUP2 PUSH2 0x35AF JUMPI INVALID JUMPDEST DIV PUSH1 0x60 DUP3 ADD MSTORE PUSH3 0x7A120 DUP3 PUSH1 0xFF DUP6 AND PUSH1 0x5 ADD PUSH1 0x20 DUP2 LT PUSH2 0x35CB JUMPI INVALID JUMPDEST BYTE MUL PUSH1 0xA0 DUP3 ADD MSTORE PUSH3 0x2625A0 DUP3 PUSH1 0xFF DUP6 AND PUSH1 0x6 ADD PUSH1 0x20 DUP2 LT PUSH2 0x35E8 JUMPI INVALID JUMPDEST BYTE MUL PUSH1 0xC0 DUP3 ADD MSTORE DUP2 PUSH1 0xFF DUP5 AND PUSH1 0x7 ADD PUSH1 0x20 DUP2 LT PUSH2 0x3601 JUMPI INVALID JUMPDEST BYTE PUSH1 0xE0 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 EQ DUP1 PUSH2 0x362A JUMPI POP PUSH1 0x0 DUP4 SLT ISZERO DUP1 ISZERO PUSH2 0x362A JUMPI POP PUSH1 0x0 DUP3 SLT ISZERO JUMPDEST ISZERO PUSH2 0x3637 JUMPI POP PUSH1 0x0 PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x0 DUP4 SGT ISZERO DUP1 ISZERO PUSH2 0x3648 JUMPI POP DUP2 PUSH1 0x0 SLT JUMPDEST ISZERO PUSH2 0x3654 JUMPI POP DUP2 PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO DUP1 ISZERO PUSH2 0x3665 JUMPI POP DUP3 PUSH1 0x0 SLT JUMPDEST ISZERO PUSH2 0x3673 JUMPI PUSH2 0x991 DUP3 PUSH2 0x15E9 JUMP JUMPDEST PUSH1 0x0 DUP4 SGT ISZERO DUP1 ISZERO PUSH2 0x3685 JUMPI POP PUSH1 0x0 DUP3 SGT ISZERO JUMPDEST ISZERO PUSH2 0x4B JUMPI PUSH2 0x991 DUP4 DUP4 PUSH2 0x2405 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x20 PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP3 GT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x36C5 DUP6 DUP6 DUP6 PUSH2 0x41BA JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 SLT ISZERO PUSH2 0x36DD JUMPI DUP8 SWAP2 POP PUSH2 0x36E0 JUMP JUMPDEST POP DUP7 JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x372F SWAP3 SWAP2 SWAP1 PUSH2 0x5CDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SHR PUSH32 0x5555555555555555555555555555555555555555555555555555555555555555 SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x2 DUP2 SWAP1 SHR PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333 SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x4 DUP2 SWAP1 SHR PUSH32 0x707070707070707070707070707070707070707070707070707070707070707 SWAP2 SWAP1 SWAP2 AND ADD PUSH1 0x8 DUP2 SWAP1 SHR PUSH31 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F SWAP1 DUP2 AND SWAP2 AND ADD PUSH1 0x10 DUP2 SWAP1 SHR ADD PUSH1 0x20 DUP2 SWAP1 SHR ADD PUSH1 0x40 DUP2 SWAP1 SHR ADD PUSH1 0x80 DUP2 SWAP1 SHR PUSH1 0xFF SWAP1 DUP2 AND SWAP2 AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x381E DUP5 DUP5 PUSH2 0x429F JUMP JUMPDEST SWAP2 POP PUSH2 0x3829 DUP3 PUSH2 0x43B7 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x383A PUSH2 0x5B7B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3844 PUSH2 0x3E4A JUMP JUMPDEST PUSH2 0xFFFF SWAP4 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP7 MSTORE PUSH1 0x1 PUSH1 0x28 SHL DUP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP1 DUP2 AND SWAP5 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP5 AND SWAP3 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xD8 SHL DUP3 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP2 DIV SWAP1 SWAP2 AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB DUP1 DUP3 AND PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x50 SHL DUP3 DIV DUP2 AND PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV AND PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xF0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x12C MUL SWAP1 SWAP3 AND PUSH2 0x100 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3906 DUP4 PUSH2 0x4578 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xEF81F216 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x393F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3953 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x23FD SWAP2 SWAP1 PUSH2 0x5C2D JUMP JUMPDEST PUSH2 0x397F PUSH2 0x5B7B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x398F DUP9 DUP7 DUP10 PUSH2 0x45A8 JUMP JUMPDEST PUSH1 0xC0 DUP12 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xE0 DUP11 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x20 DUP10 ADD MLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x39B3 SWAP1 DUP4 PUSH2 0x89A JUMP JUMPDEST PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0x80 DUP8 ADD MLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x39E1 JUMPI PUSH1 0x80 DUP9 ADD MLOAD PUSH2 0x39DE SWAP1 PUSH2 0x39D8 DUP10 DUP3 PUSH2 0x20FB JUMP JUMPDEST SWAP1 PUSH2 0x46B3 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x3A01 PUSH2 0x39F6 PUSH8 0xDE0B6B3A7640000 DUP4 PUSH2 0x89A JUMP JUMPDEST PUSH1 0xA0 DUP11 ADD MLOAD SWAP1 PUSH2 0x46CA JUMP JUMPDEST PUSH1 0xA0 DUP10 ADD MSTORE POP POP PUSH1 0x80 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE POP POP DUP3 MSTORE SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A25 PUSH2 0x3E4A JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x3A49 DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x2067 JUMP JUMPDEST DUP2 SLOAD PUSH5 0xFFFFFFFFFF NOT AND PUSH5 0xFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x3A6E SWAP1 PUSH2 0x36A1 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x3A9E SWAP1 PUSH2 0x36A1 JUMP JUMPDEST DUP2 PUSH1 0x2 ADD PUSH1 0xA PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x3AD3 DUP3 PUSH1 0xE0 ADD MLOAD PUSH2 0x36A1 JUMP JUMPDEST DUP2 PUSH1 0x2 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x3B08 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x3E57 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x28 SHL MUL PUSH16 0xFFFFFFFFFFFFFFFFFFFFFF0000000000 NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x3B42 SWAP1 PUSH2 0x3E57 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x3B76 SWAP1 PUSH2 0x3E57 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x80 SHL MUL PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x80 SHL NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x3BAE SWAP1 PUSH2 0x46E7 JUMP JUMPDEST DUP2 SLOAD PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xD8 SHL MUL PUSH4 0xFFFFFFFF PUSH1 0xD8 SHL NOT SWAP1 SWAP2 AND OR DUP2 SSTORE DUP3 ISZERO PUSH2 0x3BFA JUMPI PUSH1 0x0 PUSH2 0x3BDF DUP5 PUSH2 0x3C4C JUMP JUMPDEST SWAP1 POP PUSH2 0x3BEB DUP6 DUP3 PUSH2 0x46FA JUMP JUMPDEST PUSH2 0x3BF8 PUSH2 0xFEE DUP7 DUP4 PUSH2 0x4731 JUMP JUMPDEST POP JUMPDEST DUP4 PUSH2 0xFFFF AND PUSH32 0xEF25641E225E493886510CA1AD6584FA7B442B9FEA820A29D1DE3CE27D270FD2 DUP4 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0xC0 ADD MLOAD DUP6 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3C3E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5E8C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP3 GT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x9 PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C7A DUP3 PUSH2 0x47B1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x18 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH2 0x3CB9 DUP3 DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0xA0 ADD MLOAD DUP6 PUSH4 0xFFFFFFFF AND DUP9 PUSH1 0xE0 ADD MLOAD PUSH2 0x2851 JUMP JUMPDEST PUSH2 0xE56 DUP3 DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x2962 JUMP JUMPDEST PUSH2 0x3CCF PUSH2 0x5B5A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CDB DUP6 DUP6 PUSH2 0x47B5 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP1 PUSH2 0x283C JUMPI PUSH2 0x663 DUP6 DUP6 DUP6 PUSH2 0x4848 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3CFD DUP5 DUP5 PUSH2 0x2466 JUMP JUMPDEST SWAP2 POP PUSH2 0x3D09 DUP5 DUP4 PUSH2 0x2F97 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 SLT ISZERO PUSH2 0x3388 JUMPI PUSH2 0x3D4E PUSH1 0x1 PUSH2 0x2FC5 DUP8 PUSH1 0x0 ADD MLOAD PUSH2 0x8C8 DUP10 PUSH1 0x20 ADD MLOAD PUSH2 0x3D48 DUP11 PUSH1 0x20 ADD MLOAD PUSH2 0x8C8 DUP13 PUSH1 0x0 ADD MLOAD DUP12 PUSH2 0x1330 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x1330 JUMP JUMPDEST SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D64 DUP6 DUP6 PUSH2 0x49E1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 SLT ISZERO PUSH2 0x3D76 JUMPI PUSH1 0x1 PUSH1 0x40 SHL OR JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND CALLER PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP5 PUSH2 0x3DAE DUP9 PUSH2 0x49FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DBC SWAP3 SWAP2 SWAP1 PUSH2 0x5D00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x0 PUSH2 0x3DD3 PUSH1 0x0 DUP5 SLT DUP8 PUSH2 0x4A20 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23DE6651 PUSH2 0x5E7 DUP10 PUSH2 0x3DF1 DUP8 PUSH2 0x49FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3E0F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5C9E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3E3D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x1D PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB DUP3 GT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3E77 PUSH2 0x4A80 JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP PUSH2 0x3E9F PUSH2 0x4A8D JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xAD1C095D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 POP DUP2 SWAP1 PUSH4 0xAD1C095D SWAP1 PUSH2 0x3EE7 SWAP1 DUP10 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x5CC2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3F15 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xAD1C095D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP3 POP PUSH4 0xAD1C095D SWAP2 POP PUSH2 0x3F47 SWAP1 DUP10 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x5CC2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3F75 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x0 SWAP2 PUSH2 0x3FBD SWAP2 PUSH1 0x1 PUSH1 0x28 SHL SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND SWAP1 PUSH2 0x3D48 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB PUSH1 0x1 PUSH1 0x50 SHL DUP3 DIV DUP2 AND SWAP2 AND PUSH2 0x1330 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x2 DUP5 ADD SLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x3FF7 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB AND SWAP1 PUSH2 0x3D48 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP2 AND PUSH2 0x1330 JUMP JUMPDEST DUP4 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x402E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x58 SHL SUB PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP3 DIV DUP3 AND ADD AND PUSH15 0xC097CE7BC90715B34B9F1000000000 PUSH2 0x1330 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x403B DUP5 DUP5 PUSH2 0x2405 JUMP JUMPDEST SGT ISZERO PUSH2 0x2E13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8AC PUSH2 0x4059 DUP5 PUSH4 0x3B9ACA00 PUSH2 0x14DE JUMP JUMPDEST DUP4 PUSH2 0x1505 JUMP JUMPDEST PUSH1 0x0 PUSH8 0x7FFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4076 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xF SIGNEXTEND PUSH1 0x0 EQ ISZERO PUSH2 0x4090 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xF SIGNEXTEND PUSH1 0x40 DUP6 PUSH1 0xF SIGNEXTEND SWAP1 SHL DUP2 PUSH2 0x40A5 JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x40C7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO JUMPDEST PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xF DUP3 SWAP1 SIGNEXTEND PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT EQ ISZERO PUSH2 0x40EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x46 SHL DUP3 PUSH1 0xF SIGNEXTEND SLT PUSH2 0x4107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH9 0x3FFFFFFFFFFFFFFFFF NOT DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x4124 JUMPI POP PUSH1 0x0 PUSH2 0x874 JUMP JUMPDEST PUSH2 0x7CA PUSH1 0x80 DUP4 PUSH1 0xF SIGNEXTEND PUSH17 0x171547652B82FE1777D0FFDA0D23A7D12 MUL SWAP1 SAR PUSH2 0x4A9A JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF DUP4 DUP2 SIGNEXTEND SWAP1 DUP4 SWAP1 SIGNEXTEND MUL PUSH1 0x40 SAR PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB NOT DUP2 SLT DUP1 ISZERO SWAP1 PUSH2 0x40C7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 SGT ISZERO PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xF SIGNEXTEND PUSH1 0x40 SAR SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND PUSH1 0x96 LT PUSH2 0x41A1 JUMPI PUSH1 0xFF DUP3 AND PUSH3 0x2625A0 MUL PUSH2 0x7CA JUMP JUMPDEST POP PUSH1 0x95 NOT PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND ADD PUSH3 0xE4E1C0 MUL PUSH4 0x165A0BC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP3 SWAP2 PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x41EE DUP8 DUP8 PUSH2 0x49E1 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x41FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x1 PUSH1 0x40 SHL DUP2 OR DUP3 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x421E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH2 0x4257 DUP7 PUSH2 0x49FF JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4264 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x4279 DUP7 PUSH2 0x49FF JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x4286 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP2 SWAP8 SWAP2 SWAP7 POP SWAP1 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x8 DUP3 PUSH1 0xFF AND GT ISZERO PUSH2 0x42B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x42BC PUSH2 0x1A40 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP3 POP PUSH1 0xFF DUP6 AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x42F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x432B JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x4318 PUSH2 0x5B16 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x4310 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 PUSH1 0xFF AND DUP2 LT ISZERO PUSH2 0x661 JUMPI PUSH1 0x0 DUP4 DUP3 PUSH1 0x8 DUP2 LT PUSH2 0x434A JUMPI INVALID JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x435B JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP4 SLOAD PUSH2 0xFFFF DUP2 AND DUP3 MSTORE PUSH5 0xFFFFFFFFFF PUSH3 0x10000 DUP3 DIV AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xFF PUSH1 0x1 PUSH1 0x38 SHL DUP4 DIV AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 SHL SWAP1 SWAP2 DIV PUSH1 0xA SWAP1 DUP2 SIGNEXTEND SWAP1 SIGNEXTEND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH1 0x1 ADD PUSH2 0x4331 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x43D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x43FD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x445A JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4419 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x443A DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0x554A JUMP JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4446 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x4403 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4571 JUMPI DUP1 JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x44A0 JUMPI POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x447F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4496 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT JUMPDEST ISZERO PUSH2 0x4568 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x44B1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x44C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x1 DUP5 SUB DUP2 MLOAD DUP2 LT PUSH2 0x44DF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x44F2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x450F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x4526 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 PUSH1 0x1 DUP5 SUB DUP2 MLOAD DUP2 LT PUSH2 0x453D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4550 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD SWAP2 SWAP1 SWAP2 MSTORE MSTORE PUSH1 0x0 NOT ADD PUSH2 0x4468 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x445E JUMP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4583 PUSH2 0x5573 JUMP JUMPDEST PUSH2 0xFFFF SWAP4 SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x45BB DUP10 DUP9 PUSH2 0x5580 JUMP JUMPDEST DUP10 MLOAD SWAP1 SWAP6 POP SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x45E2 SWAP1 PUSH2 0x45D7 SWAP1 DUP12 SWAP1 PUSH2 0x20FB JUMP JUMPDEST PUSH4 0x3B9ACA00 SWAP1 PUSH2 0x14DE JUMP JUMPDEST SWAP1 POP PUSH2 0x461C PUSH2 0x4611 PUSH4 0x1DA9C00 PUSH2 0x45F9 DUP6 DUP6 PUSH2 0x14DE JUMP JUMPDEST DUP2 PUSH2 0x4600 JUMPI INVALID JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP2 SWAP1 DIV PUSH2 0x89A JUMP JUMPDEST PUSH1 0xE0 DUP11 ADD MLOAD SWAP1 PUSH2 0x46CA JUMP JUMPDEST SWAP7 POP PUSH2 0x463E PUSH2 0x4633 PUSH4 0x1DA9C00 PUSH2 0x45F9 DUP8 DUP6 PUSH2 0x14DE JUMP JUMPDEST PUSH1 0xC0 DUP11 ADD MLOAD SWAP1 PUSH2 0x46CA JUMP JUMPDEST SWAP6 POP DUP2 DUP4 EQ ISZERO PUSH2 0x4655 JUMPI POP PUSH1 0x0 SWAP4 POP PUSH2 0x46AA SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4677 PUSH2 0x466C PUSH4 0x1DA9C00 PUSH2 0x45F9 DUP8 DUP7 PUSH2 0x14DE JUMP JUMPDEST PUSH1 0xE0 DUP12 ADD MLOAD SWAP1 PUSH2 0x46CA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4685 DUP10 DUP4 PUSH2 0x20FB JUMP JUMPDEST SWAP1 POP PUSH2 0x46A2 DUP9 PUSH2 0x98B DUP4 DUP14 PUSH1 0x40 ADD MLOAD PUSH2 0x14DE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP7 POP POP POP POP POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AC PUSH2 0x4059 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH2 0x14DE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AC PUSH2 0x46D9 DUP5 DUP5 PUSH2 0x14DE JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x1505 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SLT ISZERO PUSH2 0x4708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4716 PUSH2 0xFEE DUP5 PUSH2 0x1C51 JUMP JUMPDEST SWAP1 POP PUSH2 0x4722 DUP2 DUP4 PUSH2 0x1F86 JUMP JUMPDEST SWAP1 POP PUSH2 0xE56 PUSH2 0xFEE DUP5 DUP4 PUSH2 0x1A4D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x473B PUSH2 0x4A80 JUMP JUMPDEST PUSH2 0xFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xAD1C095D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 POP DUP2 SWAP1 PUSH4 0xAD1C095D SWAP1 PUSH2 0x4783 SWAP1 DUP8 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x5CC2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x479D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x31C9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x47BD PUSH2 0x5B5A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x47C8 PUSH2 0x561B JUMP JUMPDEST PUSH2 0xFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xF0 SHL SWAP1 DIV PUSH1 0xFF AND SWAP4 POP SWAP1 SWAP2 POP DUP3 ISZERO PUSH2 0x483F JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB PUSH1 0x1 PUSH1 0xA0 SHL DUP3 DIV DUP2 AND SWAP2 PUSH2 0x481A SWAP2 AND DUP3 PUSH2 0x14DE JUMP JUMPDEST DUP6 MSTORE DUP2 SLOAD PUSH2 0x4838 SWAP1 PUSH1 0x1 PUSH1 0x50 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND DUP3 PUSH2 0x14DE JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE POP JUMPDEST POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x4850 PUSH2 0x5B5A JUMP JUMPDEST PUSH2 0x485A DUP5 DUP4 PUSH2 0x2D22 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4867 DUP6 PUSH2 0x3832 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4873 PUSH2 0x561B JUMP JUMPDEST PUSH2 0xFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP6 PUSH2 0x489C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP6 EQ PUSH2 0x48A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 PUSH1 0x0 LT PUSH2 0x48B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP7 GT ISZERO PUSH2 0x48C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x0 SLT PUSH2 0x48D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x0 SLT PUSH2 0x48E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x48EF DUP4 PUSH1 0xA0 ADD MLOAD PUSH2 0x36A1 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x4926 SWAP1 PUSH2 0x36A1 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP2 SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x494F SWAP1 PUSH2 0x36A1 JUMP JUMPDEST DUP2 SLOAD PUSH1 0xFF PUSH1 0xF0 SHL NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x50 SHL MUL PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0x50 SHL NOT SWAP1 SWAP2 AND OR AND PUSH1 0x1 PUSH1 0xF0 SHL OR DUP2 SSTORE PUSH2 0x4990 DUP8 DUP8 DUP7 PUSH2 0x5628 JUMP JUMPDEST DUP6 DUP8 PUSH2 0xFFFF AND PUSH32 0x29FD83C1093C9721D6046038C76B6BDDF0DC0C5DAC3ECBFA23F8EB994EC61613 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x49CF SWAP3 SWAP2 SWAP1 PUSH2 0x5D00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH8 0xFFFF000000000000 PUSH1 0x30 DUP4 SWAP1 SHL AND PUSH1 0x8 DUP3 SWAP1 SHL OR PUSH1 0x1 OR SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SLT ISZERO PUSH2 0x4A19 JUMPI PUSH2 0x4A12 DUP3 PUSH2 0x15E9 JUMP JUMPDEST SWAP1 POP PUSH2 0x874 JUMP JUMPDEST POP DUP1 PUSH2 0x874 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x4A52 JUMPI PUSH2 0x4A2F PUSH2 0x4A80 JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8AC JUMP JUMPDEST PUSH2 0x4A5A PUSH2 0x4A8D JUMP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x21 PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x22 PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x46 SHL DUP3 PUSH1 0xF SIGNEXTEND SLT PUSH2 0x4AAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH9 0x3FFFFFFFFFFFFFFFFF NOT DUP3 PUSH1 0xF SIGNEXTEND SLT ISZERO PUSH2 0x4ACC JUMPI POP PUSH1 0x0 PUSH2 0x874 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x7F SHL PUSH1 0x0 PUSH8 0x8000000000000000 DUP5 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4AFE JUMPI PUSH17 0x16A09E667F3BCC908B2FB1366EA957D3E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x4000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4B2B JUMPI PUSH17 0x1306FE0A31B7152DE8D5A46305C85EDEC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x2000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4B58 JUMPI PUSH17 0x1172B83C7D517ADCDF7C8C50EB14A791F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x1000000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4B85 JUMPI PUSH17 0x10B5586CF9890F6298B92B71842A98363 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x800000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4BB2 JUMPI PUSH17 0x1059B0D31585743AE7C548EB68CA417FD MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x400000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4BDF JUMPI PUSH17 0x102C9A3E778060EE6F7CACA4F7A29BDE8 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH8 0x200000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4C0C JUMPI PUSH17 0x10163DA9FB33356D84A66AE336DCDFA3F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x38 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4C35 JUMPI PUSH17 0x100B1AFA5ABCBED6129AB13EC11DC9543 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x80000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4C61 JUMPI PUSH17 0x10058C86DA1C09EA1FF19D294CF2F679B MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x40000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4C8D JUMPI PUSH17 0x1002C605E2E8CEC506D21BFC89A23A00F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x20000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4CB9 JUMPI PUSH17 0x100162F3904051FA128BCA9C55C31E5DF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x10000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4CE5 JUMPI PUSH17 0x1000B175EFFDC76BA38E31671CA939725 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x8000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4D11 JUMPI PUSH17 0x100058BA01FB9F96D6CACD4B180917C3D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x4000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4D3D JUMPI PUSH17 0x10002C5CC37DA9491D0985C348C68E7B3 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH7 0x2000000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4D69 JUMPI PUSH17 0x1000162E525EE054754457D5995292026 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x30 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4D92 JUMPI PUSH17 0x10000B17255775C040618BF4A4ADE83FC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x800000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4DBD JUMPI PUSH17 0x1000058B91B5BC9AE2EED81E9B7D4CFAB MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x400000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4DE8 JUMPI PUSH17 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x200000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4E13 JUMPI PUSH17 0x10000162E43F4F831060E02D839A9D16D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x100000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4E3E JUMPI PUSH17 0x100000B1721BCFC99D9F890EA06911763 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x80000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4E69 JUMPI PUSH17 0x10000058B90CF1E6D97F9CA14DBCC1628 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x40000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4E94 JUMPI PUSH17 0x1000002C5C863B73F016468F6BAC5CA2B MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH6 0x20000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4EBF JUMPI PUSH17 0x100000162E430E5A18F6119E3C02282A5 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x28 SHL AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4EE8 JUMPI PUSH17 0x1000000B1721835514B86E6D96EFD1BFE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x8000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4F12 JUMPI PUSH17 0x100000058B90C0B48C6BE5DF846C5B2EF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x4000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4F3C JUMPI PUSH17 0x10000002C5C8601CC6B9E94213C72737A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x2000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4F66 JUMPI PUSH17 0x1000000162E42FFF037DF38AA2B219F06 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x1000000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4F90 JUMPI PUSH17 0x10000000B17217FBA9C739AA5819F44F9 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x800000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4FBA JUMPI PUSH17 0x1000000058B90BFCDEE5ACD3C1CEDC823 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x400000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x4FE4 JUMPI PUSH17 0x100000002C5C85FE31F35A6A30DA1BE50 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x200000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x500E JUMPI PUSH17 0x10000000162E42FF0999CE3541B9FFFCF MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH5 0x100000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5038 JUMPI PUSH17 0x100000000B17217F80F4EF5AADDA45554 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x80000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5061 JUMPI PUSH17 0x10000000058B90BFBF8479BD5A81B51AD MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x40000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x508A JUMPI PUSH17 0x1000000002C5C85FDF84BD62AE30A74CC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x20000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x50B3 JUMPI PUSH17 0x100000000162E42FEFB2FED257559BDAA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x10000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x50DC JUMPI PUSH17 0x1000000000B17217F7D5A7716BBA4A9AE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x8000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5105 JUMPI PUSH17 0x100000000058B90BFBE9DDBAC5E109CCE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x4000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x512E JUMPI PUSH17 0x10000000002C5C85FDF4B15DE6F17EB0D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x2000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5157 JUMPI PUSH17 0x1000000000162E42FEFA494F1478FDE05 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH4 0x1000000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5180 JUMPI PUSH17 0x10000000000B17217F7D20CF927C8E94C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x800000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x51A8 JUMPI PUSH17 0x1000000000058B90BFBE8F71CB4E4B33D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x400000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x51D0 JUMPI PUSH17 0x100000000002C5C85FDF477B662B26945 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x200000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x51F8 JUMPI PUSH17 0x10000000000162E42FEFA3AE53369388C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x100000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5220 JUMPI PUSH17 0x100000000000B17217F7D1D351A389D40 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x80000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5248 JUMPI PUSH17 0x10000000000058B90BFBE8E8B2D3D4EDE MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x40000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5270 JUMPI PUSH17 0x1000000000002C5C85FDF4741BEA6E77E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x20000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5298 JUMPI PUSH17 0x100000000000162E42FEFA39FE95583C2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH3 0x10000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x52C0 JUMPI PUSH17 0x1000000000000B17217F7D1CFB72B45E1 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x8000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x52E7 JUMPI PUSH17 0x100000000000058B90BFBE8E7CC35C3F0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x4000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x530E JUMPI PUSH17 0x10000000000002C5C85FDF473E242EA38 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x2000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5335 JUMPI PUSH17 0x1000000000000162E42FEFA39F02B772C MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x1000 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x535C JUMPI PUSH17 0x10000000000000B17217F7D1CF7D83C1A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x800 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5383 JUMPI PUSH17 0x1000000000000058B90BFBE8E7BDCBE2E MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x400 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x53AA JUMPI PUSH17 0x100000000000002C5C85FDF473DEA871F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x200 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x53D1 JUMPI PUSH17 0x10000000000000162E42FEFA39EF44D91 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x100 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x53F8 JUMPI PUSH17 0x100000000000000B17217F7D1CF79E949 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x80 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x541E JUMPI PUSH17 0x10000000000000058B90BFBE8E7BCE544 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x40 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5444 JUMPI PUSH17 0x1000000000000002C5C85FDF473DE6ECA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x20 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x546A JUMPI PUSH17 0x100000000000000162E42FEFA39EF366F MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x10 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5490 JUMPI PUSH17 0x1000000000000000B17217F7D1CF79AFA MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x8 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x54B6 JUMPI PUSH17 0x100000000000000058B90BFBE8E7BCD6D MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x4 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x54DC JUMPI PUSH17 0x10000000000000002C5C85FDF473DE6B2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x2 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5502 JUMPI PUSH17 0x1000000000000000162E42FEFA39EF358 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 AND PUSH1 0xF SIGNEXTEND SGT ISZERO PUSH2 0x5528 JUMPI PUSH17 0x10000000000000000B17217F7D1CF79AB MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0xF DUP4 DUP2 SIGNEXTEND PUSH1 0x40 SAR PUSH1 0x3F SUB SWAP1 SIGNEXTEND SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x7F SHL SUB DUP2 GT ISZERO PUSH2 0x7CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xFFFF000000000000 PUSH1 0x30 DUP5 SWAP1 SHL AND PUSH6 0xFFFFFFFFFF00 PUSH1 0x8 DUP5 SWAP1 SHL AND OR PUSH1 0xFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x1F PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH1 0x20 ADD MLOAD GT ISZERO PUSH2 0x55CD JUMPI PUSH2 0x55CA PUSH2 0x55B1 DUP7 PUSH1 0xC0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x14DE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xE0 DUP8 ADD MLOAD PUSH1 0x40 DUP9 ADD MLOAD PUSH2 0x55C4 SWAP2 PUSH2 0x14DE JUMP JUMPDEST SWAP1 PUSH2 0x4046 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x55D8 DUP8 PUSH2 0x5780 JUMP JUMPDEST SWAP1 POP PUSH2 0x55E4 DUP2 DUP4 PUSH2 0x949 JUMP JUMPDEST SWAP5 POP DUP2 ISZERO PUSH2 0x55FB JUMPI PUSH2 0x55F8 DUP2 DUP7 PUSH1 0x1 PUSH2 0x57B3 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD ISZERO PUSH2 0x5612 JUMPI PUSH2 0x560F DUP6 DUP4 PUSH2 0x582B JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7CA PUSH1 0x1E PUSH2 0x2CAD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5632 PUSH2 0x3694 JUMP JUMPDEST PUSH2 0xFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB AND SWAP1 SUB PUSH2 0x5667 PUSH2 0x5A0D JUMP JUMPDEST PUSH2 0x5677 DUP2 PUSH2 0xFFFF DUP10 AND DUP9 DUP1 PUSH2 0x2E05 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD ISZERO PUSH2 0x5699 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34A SWAP1 PUSH2 0x5E1B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56AD DUP7 PUSH2 0x56A8 DUP6 PUSH2 0x15E9 JUMP JUMPDEST PUSH2 0x2466 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x56C3 PUSH2 0x56BE DUP9 DUP7 PUSH2 0x5844 JUMP JUMPDEST PUSH2 0x15E9 JUMP JUMPDEST SWAP1 POP PUSH2 0x56D3 PUSH2 0x5E7 DUP11 DUP4 DUP6 PUSH2 0x2FD6 JUMP JUMPDEST DUP5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x50 SHL SUB PUSH1 0x1 PUSH1 0x50 SHL DUP3 DIV DUP2 AND PUSH1 0x0 SWAP1 DUP2 SUB SWAP3 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV SWAP1 SWAP2 AND SWAP1 DUP3 SLT DUP1 PUSH2 0x5704 JUMPI POP DUP1 PUSH1 0x0 SLT JUMPDEST ISZERO PUSH2 0x5748 JUMPI PUSH1 0x0 PUSH2 0x5715 DUP11 DUP5 PUSH2 0x2466 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5723 DUP4 DUP4 PUSH2 0x1F86 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SLT ISZERO PUSH2 0x5738 JUMPI PUSH2 0x5738 DUP14 DUP3 PUSH2 0x46FA JUMP JUMPDEST PUSH2 0x5745 DUP14 DUP14 DUP7 DUP6 DUP6 PUSH2 0x58A0 JUMP JUMPDEST POP POP JUMPDEST POP POP POP PUSH2 0xFFFF SWAP1 SWAP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP5 DUP6 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP8 DUP3 MSTORE SWAP7 SWAP1 SWAP5 MSTORE POP POP POP SWAP2 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT AND SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x5788 PUSH2 0x5A7D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5792 PUSH2 0x25F5 JUMP JUMPDEST PUSH2 0xFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 POP PUSH2 0x8AC SWAP1 DUP3 PUSH2 0x34EE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x57D2 PUSH1 0x64 PUSH2 0x98B DUP8 PUSH1 0xE0 ADD MLOAD DUP8 PUSH2 0x14DE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0xA0 ADD MLOAD DUP2 LT ISZERO PUSH2 0x57E7 JUMPI POP PUSH1 0xA0 DUP5 ADD MLOAD JUMPDEST DUP5 PUSH1 0xC0 ADD MLOAD DUP2 GT ISZERO PUSH2 0x57FA JUMPI POP PUSH1 0xC0 DUP5 ADD MLOAD JUMPDEST DUP3 ISZERO PUSH2 0x5811 JUMPI PUSH2 0x580A DUP5 DUP3 PUSH2 0x89A JUMP JUMPDEST SWAP2 POP PUSH2 0x283C JUMP JUMPDEST DUP4 DUP2 GT PUSH2 0x5820 JUMPI DUP1 DUP5 SUB PUSH2 0x663 JUMP JUMPDEST POP PUSH1 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AC PUSH2 0x583A DUP5 DUP5 PUSH2 0x14DE JUMP JUMPDEST PUSH4 0x3B9ACA00 PUSH2 0x1505 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SGT ISZERO DUP1 ISZERO PUSH2 0x5857 JUMPI POP PUSH1 0xA DUP3 SLT JUMPDEST ISZERO PUSH2 0x5864 JUMPI POP PUSH1 0x0 PUSH2 0x7CA JUMP JUMPDEST PUSH1 0x0 DUP3 SLT PUSH2 0x5871 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8AC PUSH1 0x1 PUSH2 0x2FC5 DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x8C8 PUSH15 0xC097CE7BC90715B34B9F1000000000 DUP8 PUSH2 0x1330 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 SHL PUSH2 0x58B1 DUP8 DUP8 PUSH2 0x49E1 JUMP JUMPDEST OR SWAP1 POP PUSH1 0x0 PUSH2 0x5E7 CALLER PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP5 PUSH2 0x58E5 DUP10 PUSH2 0x49FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x58F3 SWAP3 SWAP2 SWAP1 PUSH2 0x5D00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x5908 PUSH2 0x5E7 DUP8 DUP6 PUSH2 0x4731 JUMP JUMPDEST PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x5921 JUMPI PUSH2 0x5921 PUSH2 0x5E7 PUSH2 0xFEE DUP9 DUP6 PUSH2 0x5929 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5933 PUSH2 0x4A80 JUMP JUMPDEST PUSH2 0xFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP3 SLT ISZERO PUSH2 0x595E JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23DE6651 DUP7 DUP7 PUSH2 0x5978 DUP7 PUSH2 0x49FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5996 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5C9E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x59B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2BE1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x59D7 PUSH2 0x5AC2 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x59E4 PUSH2 0x5AEE JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x5AE1 PUSH2 0x5B5A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x5B55 JUMPI INVALID JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x874 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5BEA JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8AC DUP3 PUSH2 0x5BC7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5C05 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x5C0E DUP4 PUSH2 0x5BC7 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5C22 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5C3F JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5C7F JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5C63 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x5CEE PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x5C50 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x663 DUP2 DUP6 PUSH2 0x5C50 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x13585C9AD95D081B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x4F7261636C652072617465206F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x10D1CE881B9BC81B585C9AD95D1CC81B1A5CDD1959 PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x92DCECC2D8D2C840D2DCC8CAF PUSH1 0x9B SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x4F766572206D617820617373657473 PUSH1 0x88 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x10D1CE881B585C9AD95D081A5B99195E08189BDD5B99 PUSH1 0x52 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x4D75737420696E6974206D61726B657473 PUSH1 0x78 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x494D3A20696D706C6965642072617465206661696C6564000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURN 0xF6 RETURN ISZERO ADDRESS LOG0 0xCB MULMOD PUSH9 0x856E4B2640697C8FE5 SWAP8 0xCA ORIGIN 0xC8 MSIZE 0xAC STATICCALL PUSH16 0xE318D53DFB0264736F6C634300070600 CALLER ", "sha1": "7ee0e076394802cd154ca870b97a21c19784c143", "source": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport {\n    PrimeRate,\n    PortfolioState,\n    MarketParameters,\n    BalanceState,\n    CashGroupParameters,\n    nTokenPortfolio,\n    InterestRateParameters,\n    PortfolioAsset\n} from \"../../global/Types.sol\";\nimport {Constants} from \"../../global/Constants.sol\";\nimport {SafeInt256} from \"../../math/SafeInt256.sol\";\nimport {SafeUint256} from \"../../math/SafeUint256.sol\";\nimport {Bitmap} from \"../../math/Bitmap.sol\";\n\nimport {Market} from \"../../internal/markets/Market.sol\";\nimport {DateTime} from \"../../internal/markets/DateTime.sol\";\nimport {CashGroup} from \"../../internal/markets/CashGroup.sol\";\nimport {InterestRateCurve} from \"../../internal/markets/InterestRateCurve.sol\";\nimport {PrimeRateLib} from \"../../internal/pCash/PrimeRateLib.sol\";\nimport {BalanceHandler} from \"../../internal/balances/BalanceHandler.sol\";\nimport {PortfolioHandler} from \"../../internal/portfolio/PortfolioHandler.sol\";\nimport {BitmapAssetsHandler} from \"../../internal/portfolio/BitmapAssetsHandler.sol\";\nimport {SettleBitmapAssets} from \"../../internal/settlement/SettleBitmapAssets.sol\";\nimport {nTokenHandler} from \"../../internal/nToken/nTokenHandler.sol\";\nimport {AssetHandler} from \"../../internal/valuation/AssetHandler.sol\";\n\nimport {nTokenMintAction} from \"./nTokenMintAction.sol\";\n\n/// @notice Initialize markets is called once every quarter to setup the new markets. Only the nToken account\n/// can initialize markets, and this method will be called on behalf of that account. In this action\n/// the following will occur:\n///  - nToken Liquidity Tokens will be settled\n///  - Any ifCash assets will be settled\n///  - If nToken liquidity tokens are settled with negative net ifCash, enough cash will be withheld at the PV\n///    to purchase offsetting positions\n///  - fCash positions are written to storage\n///  - For each market, calculate the proportion of fCash to cash given:\n///     - previous oracle rates\n///     - rate anchor set by governance\n///     - percent of cash to deposit into the market set by governance\n///  - Set new markets and add liquidity tokens to portfolio\nlibrary InitializeMarketsAction {\n    using Bitmap for bytes32;\n    using SafeUint256 for uint256;\n    using SafeInt256 for int256;\n    using PortfolioHandler for PortfolioState;\n    using Market for MarketParameters;\n    using BalanceHandler for BalanceState;\n    using CashGroup for CashGroupParameters;\n    using PrimeRateLib for PrimeRate;\n    using nTokenHandler for nTokenPortfolio;\n    using InterestRateCurve for InterestRateParameters;\n\n    // Cash balances are always in 8 decimal precision so some minimum amount\n    // of cash is required before we can initialize markets.\n    int256 private constant MIN_CASH_REQUIRED = 1_000;\n\n    event MarketsInitialized(uint16 currencyId);\n\n    struct GovernanceParameters {\n        int256[] depositShares;\n        int256[] leverageThresholds;\n        uint256[] proportions;\n        InterestRateParameters[] interestRateParams;\n    }\n\n    function _getGovernanceParameters(uint16 currencyId, uint256 maxMarketIndex)\n        private\n        returns (GovernanceParameters memory)\n    {\n        GovernanceParameters memory params;\n        (params.depositShares, params.leverageThresholds) = nTokenHandler.getDepositParameters(\n            currencyId,\n            maxMarketIndex\n        );\n\n        int256[] memory _proportions = nTokenHandler.getInitializationParameters(currencyId, maxMarketIndex);\n        // NOTE: this conversion from int256 => uint256 is done for legacy reasons\n        params.proportions = new uint256[](_proportions.length);\n        for (uint256 i = 0; i < _proportions.length; i++) {\n            params.proportions[i] = _proportions[i].toUint();\n        }\n\n        // Copies the next interest rate parameters set by governance into the\n        // \"active\" interest rate parameters for the current quarter.\n        InterestRateCurve.setActiveInterestRateParameters(currencyId);\n        params.interestRateParams = new InterestRateParameters[](maxMarketIndex);\n        // maxMarketIndex is 1-indexed\n        for (uint256 i = 1; i <= maxMarketIndex; i++) {\n            params.interestRateParams[i - 1] = InterestRateCurve.getActiveInterestRateParameters(\n                currencyId,\n                i\n            );\n        }\n\n        return params;\n    }\n\n    function _settleNTokenLiquidityTokens(\n        nTokenPortfolio memory nToken,\n        uint256 blockTime\n    ) internal returns (int256 withdrawnCash, int256 settledCashFromfCash) {\n        MarketParameters memory market;\n        PortfolioAsset[] memory storedAssets = nToken.portfolioState.storedAssets;\n\n        // The nToken portfolio only ever has liquidity tokens sorted in ascending order\n        for (uint256 i; i < storedAssets.length; i++) {\n            PortfolioAsset memory asset = storedAssets[i];\n            // Must be liquidity token type\n            require(AssetHandler.isLiquidityToken(asset.assetType));\n            {\n                uint256 settleDate = AssetHandler.getSettlementDate(asset);\n                // Settlement date is on block time exactly\n                require(settleDate <= blockTime);\n                Market.loadSettlementMarket(market, asset.currencyId, asset.maturity, settleDate);\n            }\n\n            int256 fCash;\n            {\n                int256 primeCash;\n                (primeCash, fCash) = market.removeLiquidity(asset.notional);\n                withdrawnCash = withdrawnCash.add(primeCash);\n            }\n\n            // If the fCash has matured (as it will for the 3 month market), then convert it\n            // to a settled prime cash (positive) balance and return it. We do not net it off\n            // against the portfolio because that would cause an improper totalDebtSupply update\n            if (asset.maturity <= blockTime) {\n                // NOTE: convertSettledfCash will set the prime settlement rate\n                int256 settledPrimeCash = nToken.cashGroup.primeRate.convertSettledfCash(\n                    nToken.tokenAddress, asset.currencyId, asset.maturity, fCash, blockTime\n                );\n                settledCashFromfCash = settledCashFromfCash.add(settledPrimeCash);\n            } else {\n                BitmapAssetsHandler.addifCashAsset(\n                    nToken.tokenAddress,\n                    asset.currencyId,\n                    asset.maturity,\n                    nToken.lastInitializedTime,\n                    fCash\n                );\n            }\n\n            nToken.portfolioState.deleteAsset(i);\n        }\n    }\n\n    function _settleNTokenPortfolio(nTokenPortfolio memory nToken, uint256 blockTime) private {\n        // nToken never has idiosyncratic cash between 90 day intervals but since it also has a\n        // bitmap fCash assets. We don't set the pointer to the settlement date of the liquidity\n        // tokens (1 quarter away), instead we set it to the current block time. This is a bit\n        // esoteric but will ensure that ifCash is never improperly settled.\n\n        // If lastInitializedTime == reference time then this will fail, that is the correct\n        // behavior since initialization begins at lastInitializedTime. That means that markets\n        // cannot be re-initialized during a single block (this is the correct behavior). If\n        // lastInitializedTime >= reference time then the markets have already been initialized\n        // for the quarter.\n        uint256 referenceTime = DateTime.getReferenceTime(blockTime);\n        require(nToken.lastInitializedTime < referenceTime);\n\n        // All liquidity tokens are removed during initialize markets, the nToken will receive\n        // cash and fCash positions as a result. The three month fCash position will settle and\n        // the value from that will be in settledCashFromfCash.\n        (int256 withdrawnCash, int256 settledCashFromfCash) = _settleNTokenLiquidityTokens(nToken, blockTime);\n\n        // Settles any fCash positions in the nToken. Generally speaking, this will result in the\n        // nToken's negative 3 month fCash position being settled.\n        (int256 settledPositiveCash, int256 settledNegativeCash, uint256 blockTimeUTC0) =\n            SettleBitmapAssets.settleBitmappedCashGroup(\n                nToken.tokenAddress,\n                nToken.cashGroup.currencyId,\n                nToken.lastInitializedTime,\n                blockTime,\n                nToken.cashGroup.primeRate\n            );\n\n        // Both of these will be greater than or equal to zero\n        settledPositiveCash = settledPositiveCash.add(settledCashFromfCash);\n\n        // Add all the cash withdrawn from the market first\n        nToken.cashBalance = nToken.cashBalance.add(withdrawnCash);\n\n        // convertToStorageInSettlement will return the final stored balance after all the\n        // settled balances are applied.\n        nToken.cashBalance = nToken.cashGroup.primeRate.convertToStorageInSettlement(\n            nToken.tokenAddress,\n            nToken.cashGroup.currencyId,\n            nToken.cashBalance, // previous cash balance\n            settledPositiveCash,\n            settledNegativeCash\n        );\n\n        // The nToken must always have a strictly positive cash balance\n        require(nToken.cashBalance > 0);\n\n        // The ifCashBitmap has been updated to reference this new settlement time\n        nToken.lastInitializedTime = blockTimeUTC0.toUint40();\n    }\n\n    /// @notice Special method to get previous markets, normal usage would not reference previous markets\n    /// in this way\n    function _getPreviousMarkets(\n        uint256 currencyId,\n        uint256 blockTime,\n        nTokenPortfolio memory nToken,\n        MarketParameters[] memory previousMarkets\n    ) private view {\n        uint256 rateOracleTimeWindow = nToken.cashGroup.getRateOracleTimeWindow();\n        // This will reference the previous settlement date to get the previous markets\n        uint256 settlementDate = DateTime.getReferenceTime(blockTime);\n\n        // Assume that assets are stored in order and include all assets of the previous market\n        // set. This will account for the potential that markets.length is greater than the previous\n        // markets when the maxMarketIndex is increased (increasing the overall number of markets).\n        // We don't fetch the 3 month market (i = 0) because it has settled and will not be used for\n        // the subsequent calculations. Since nTokens never allow liquidity to go to zero then we know\n        // there is always a matching token for each market.\n        for (uint256 i = 1; i < nToken.portfolioState.storedAssets.length; i++) {\n            previousMarkets[i].loadMarketWithSettlementDate(\n                currencyId,\n                // These assets will reference the previous liquidity tokens\n                nToken.portfolioState.storedAssets[i].maturity,\n                blockTime,\n                // No liquidity tokens required for this process\n                false,\n                rateOracleTimeWindow,\n                settlementDate\n            );\n        }\n    }\n\n    function _calculateNetPrimeCashAvailable(\n        nTokenPortfolio memory nToken,\n        MarketParameters[] memory previousMarkets,\n        uint256 blockTime,\n        uint16 currencyId,\n        bool isFirstInit\n    ) private returns (int256 netPrimeCashAvailable) {\n        int256 primeCashWithholding;\n\n        if (isFirstInit) {\n            nToken.lastInitializedTime = uint40(DateTime.getTimeUTC0(blockTime));\n        } else {\n            _settleNTokenPortfolio(nToken, blockTime);\n            _getPreviousMarkets(currencyId, blockTime, nToken, previousMarkets);\n            // NOTE: getNTokenNegativefCashWithholding is compiled as an internal method\n            primeCashWithholding = nTokenMintAction.getNTokenNegativefCashWithholding(nToken, previousMarkets, blockTime);\n        }\n\n        // Deduct the amount of withholding required from the cash balance (at this point includes all settled cash)\n        netPrimeCashAvailable = nToken.cashBalance.subNoNeg(primeCashWithholding);\n\n        // This is the new balance to store\n        nToken.cashBalance = primeCashWithholding;\n\n        // We can't have less net asset cash than our percent basis or some markets will end up not\n        // initialized\n        require(netPrimeCashAvailable > MIN_CASH_REQUIRED); // dev: insufficient cash\n\n        return netPrimeCashAvailable;\n    }\n\n    /// @notice The six month implied rate is zero if there have never been any markets initialized\n    /// otherwise the market will be the interpolation between the old 6 month and 1 year markets\n    /// which are now sitting at 3 month and 9 month time to maturity\n    function _getSixMonthImpliedRate(\n        MarketParameters[] memory previousMarkets,\n        uint256 referenceTime\n    ) private pure returns (uint256) {\n        // Cannot interpolate six month rate without a 1 year market\n        require(previousMarkets.length >= 3);\n\n        return\n            CashGroup.interpolateOracleRate(\n                previousMarkets[1].maturity,\n                previousMarkets[2].maturity,\n                previousMarkets[1].oracleRate,\n                previousMarkets[2].oracleRate,\n                // Maturity date == 6 months from reference time\n                referenceTime + 2 * Constants.QUARTER\n            );\n    }\n\n    /// @notice Returns the linear interpolation between two market rates. The formula is\n    /// slope = (longMarket.oracleRate - shortMarket.oracleRate) / (longMarket.maturity - shortMarket.maturity)\n    /// interpolatedRate = slope * (assetMaturity - shortMarket.maturity) + shortMarket.oracleRate\n    function _interpolateFutureRate(\n        uint256 shortMaturity,\n        uint256 shortRate,\n        MarketParameters memory longMarket\n    ) private pure returns (uint256) {\n        uint256 longMaturity = longMarket.maturity;\n        uint256 longRate = longMarket.oracleRate;\n        // the next market maturity is always a quarter away\n        uint256 newMaturity = longMarket.maturity + Constants.QUARTER;\n        require(shortMaturity < longMaturity);\n\n        // It's possible that the rates are inverted where the short market rate > long market rate and\n        // we will get an underflow here so we check for that\n        if (longRate >= shortRate) {\n            return\n                (longRate - shortRate)\n                    .mul(newMaturity - shortMaturity)\n                // No underflow here, checked above\n                    .div(longMaturity - shortMaturity)\n                    .add(shortRate);\n        } else {\n            // In this case the slope is negative so:\n            // interpolatedRate = shortMarket.oracleRate - slope * (assetMaturity - shortMarket.maturity)\n            uint256 diff =\n                (shortRate - longRate)\n                    .mul(newMaturity - shortMaturity)\n                // No underflow here, checked above\n                    .div(longMaturity - shortMaturity);\n\n            // This interpolation may go below zero so we bottom out interpolated rates at (practically)\n            // zero. Storing a zero for oracleRates means that the markets are not initialized so using\n            // a minimum value here to handle that case\n            return shortRate > diff ? shortRate - diff : 1;\n        }\n    }\n\n    /// @dev This is here to clear the stack\n    function _setLiquidityAmount(\n        int256 netPrimeCashAvailable,\n        int256 depositShare,\n        uint256 assetType,\n        MarketParameters memory newMarket,\n        nTokenPortfolio memory nToken\n    ) private pure returns (int256) {\n        // The portion of the cash available that will be deposited into the market\n        int256 primeCashToMarket =\n            netPrimeCashAvailable.mul(depositShare).div(Constants.DEPOSIT_PERCENT_BASIS);\n        newMarket.totalPrimeCash = primeCashToMarket;\n        newMarket.totalLiquidity = primeCashToMarket;\n\n        // Add a new liquidity token, this will end up in the new asset array\n        nToken.portfolioState.addAsset(\n            nToken.cashGroup.currencyId,\n            newMarket.maturity,\n            assetType, // This is liquidity token asset type\n            primeCashToMarket\n        );\n\n        // fCashAmount is calculated using the underlying amount\n        return nToken.cashGroup.primeRate.convertToUnderlying(primeCashToMarket);\n    }\n\n    /// @notice Calculates the fCash amount given the cash and utilization:\n    // utilization = totalfCash / (totalfCash + totalCashUnderlying)\n    // utilization * (totalfCash + totalCashUnderlying) = totalfCash\n    // utilization * totalCashUnderlying + utilization * totalfCash = totalfCash\n    // utilization * totalCashUnderlying = totalfCash * (1 - utilization)\n    // totalfCash = utilization * totalCashUnderlying / (1 - utilization)\n    function _calculatefCashAmountFromUtilization(\n        int256 underlyingCashToMarket,\n        uint256 utilization \n    ) private pure returns (int256) {\n        require(utilization < uint256(Constants.RATE_PRECISION));\n        int256 _utilization = int256(utilization);\n        // NOTE: sub underflow checked above, no div by zero possible\n        return (underlyingCashToMarket.mul(_utilization) / (Constants.RATE_PRECISION - _utilization));\n    }\n\n    /// @notice Sweeps nToken cash balance into markets after accounting for cash withholding. Can be\n    /// done after fCash residuals are purchased to ensure that markets have maximum liquidity.\n    /// @param currencyId currency of markets to initialize\n    /// @dev emit:CashSweepIntoMarkets\n    /// @dev auth:none\n    function sweepCashIntoMarkets(uint16 currencyId) external {\n        nTokenMintAction.sweepCashIntoMarkets(currencyId);\n    }\n\n    /// @notice Initialize the market for a given currency id, done once a quarter\n    /// @param currencyId currency of markets to initialize\n    /// @param isFirstInit true if this is the first time the markets have been initialized\n    /// @dev emit:MarketsInitialized\n    /// @dev auth:none\n    function initializeMarkets(uint16 currencyId, bool isFirstInit) external {\n        uint256 blockTime = block.timestamp;\n        nTokenPortfolio memory nToken;\n        nToken.loadNTokenPortfolioStateful(currencyId);\n        MarketParameters[] memory previousMarkets =\n            new MarketParameters[](nToken.cashGroup.maxMarketIndex);\n\n        // This should be sufficient to validate that the currency id is valid\n        require(nToken.cashGroup.maxMarketIndex != 0);\n        // If the nToken has any assets then this is not the first initialization\n        if (isFirstInit) {\n            require(nToken.portfolioState.storedAssets.length == 0);\n        }\n\n        int256 netPrimeCashAvailable = _calculateNetPrimeCashAvailable(\n            nToken,\n            previousMarkets,\n            blockTime,\n            currencyId,\n            isFirstInit\n        );\n\n        GovernanceParameters memory parameters =\n            _getGovernanceParameters(currencyId, nToken.cashGroup.maxMarketIndex);\n\n        MarketParameters memory newMarket;\n        // Oracle rate is carried over between loops\n        uint256 oracleRate;\n        for (uint256 i = 0; i < nToken.cashGroup.maxMarketIndex; i++) {\n            // Traded markets are 1-indexed\n            newMarket.maturity = DateTime.getReferenceTime(blockTime).add(\n                DateTime.getTradedMarket(i + 1)\n            );\n\n            int256 underlyingCashToMarket =\n                _setLiquidityAmount(\n                    netPrimeCashAvailable,\n                    parameters.depositShares[i],\n                    Constants.MIN_LIQUIDITY_TOKEN_INDEX + i, // liquidity token asset type\n                    newMarket,\n                    nToken\n                );\n\n            // Governance will prevent previousMarkets.length from being equal to 1, meaning that we will\n            // either have 0 markets (on first init), exactly 2 markets, or 2+ markets. In the case that there\n            // are exactly two markets then the 6 month market must be initialized via this method (there is no\n            // 9 month market to interpolate a rate against). In the case of 2+ markets then we will only enter this\n            // first branch when the number of markets is increased\n            if (\n                isFirstInit ||\n                // This is the six month market when there are only 3 and 6 month markets\n                (i == 1 && previousMarkets.length == 2) ||\n                // At this point, these are new markets and they must be initialized\n                (i >= nToken.portfolioState.storedAssets.length) ||\n                // When extending from the 6 month to 1 year market we must initialize both 6 and 1 year as new\n                (i == 1 && previousMarkets[2].oracleRate == 0)\n            ) {\n                // Any newly added markets cannot have their implied rates interpolated via the previous\n                // markets. In this case we initialize the markets using the rate anchor and proportion.\n                int256 fCashAmount = _calculatefCashAmountFromUtilization(underlyingCashToMarket, parameters.proportions[i]);\n\n                newMarket.totalfCash = fCashAmount;\n                newMarket.oracleRate = parameters.interestRateParams[i].getInterestRate(parameters.proportions[i]);\n\n                // If this fails it is because the rate anchor and proportion are not set properly by\n                // governance.\n                require(newMarket.oracleRate > 0, \"IM: implied rate failed\");\n            } else {\n                // Two special cases for the 3 month and 6 month market when interpolating implied rates. The 3 month market\n                // inherits the implied rate from the previous 6 month market (they are now at the same maturity).\n                if (i == 0) {\n                    // We should never get an array out of bounds error here because of the inequality check in the first branch\n                    // of the outer if statement.\n                    oracleRate = previousMarkets[1].oracleRate;\n                } else if (i == 1) {\n                    // The six month market is the interpolation between the 3 month and the 1 year market (now at 9 months). This\n                    // interpolation is different since the rate is between 3 and 9 months, for all the other interpolations we interpolate\n                    // forward in time (i.e. use a 3 and 6 month rate to interpolate a 1 year rate). The first branch of this if statement\n                    // will capture the case when the 1 year rate has not been set.\n                    oracleRate = _getSixMonthImpliedRate(\n                        previousMarkets,\n                        DateTime.getReferenceTime(blockTime)\n                    );\n\n                    // Floor an interpolated interest rate at kink rate 1\n                    if (oracleRate < parameters.interestRateParams[i].kinkRate1) {\n                        oracleRate = parameters.interestRateParams[i].kinkRate1;\n                    }\n                } else {\n                    // Any other market has the interpolation between the new implied rate from the newly initialized market previous\n                    // to this market interpolated with the previous version of this market. For example, the newly initialized 1 year\n                    // market will have its implied rate set to the interpolation between the newly initialized 6 month market (done in\n                    // previous iteration of this loop) and the previous 1 year market (which has now rolled down to 9 months). Similarly,\n                    // a 2 year market will be interpolated from the newly initialized 1 year and the previous 2 year market.\n\n                    // This is the previous market maturity, traded markets are 1-indexed\n                    uint256 shortMarketMaturity =\n                        DateTime.getReferenceTime(blockTime).add(DateTime.getTradedMarket(i));\n                    oracleRate = _interpolateFutureRate(\n                        shortMarketMaturity,\n                        // This is the oracle rate from the previous iteration in the loop,\n                        // refers to the new oracle rate set on the newly initialized market\n                        // that is adjacent to the market currently being initialized.\n                        oracleRate,\n                        // This is the previous version of the current market\n                        previousMarkets[i]\n                    );\n\n                    // Floor an interpolated interest rate at kink rate 1\n                    if (oracleRate < parameters.interestRateParams[i].kinkRate1) {\n                        oracleRate = parameters.interestRateParams[i].kinkRate1;\n                    }\n                }\n\n                // When initializing new markets we need to ensure that the new implied oracle rates align\n                // with the current yield curve or valuations for ifCash will spike. This should reference the\n                // previously calculated implied rate and the current market.\n                uint256 utilization = parameters.interestRateParams[i].getUtilizationFromInterestRate(oracleRate);\n\n                // If the calculated utilization is greater than the leverage threshold then we cannot\n                // provide liquidity without risk of liquidation. In this case, set the leverage threshold\n                // as the new utilization and calculate the oracle rate from it. This will result in fCash valuations\n                // changing on chain, however, adding liquidity via nTokens would also end up with this\n                // result as well.\n                if (utilization > parameters.leverageThresholds[i].toUint()) {\n                    utilization = parameters.leverageThresholds[i].toUint();\n                    oracleRate = parameters.interestRateParams[i].getInterestRate(utilization);\n                    require(oracleRate != 0, \"Oracle rate overflow\");\n                }\n\n                newMarket.totalfCash = _calculatefCashAmountFromUtilization(underlyingCashToMarket, utilization);\n\n                // It's possible that totalfCash is zero from rounding errors above, we want to set this to a minimum value\n                // so that we don't have divide by zero errors.\n                if (newMarket.totalfCash < 1) newMarket.totalfCash = 1;\n\n                newMarket.oracleRate = oracleRate;\n                // The oracle rate has been changed so we set the previous trade time to current\n                newMarket.previousTradeTime = blockTime;\n            }\n\n            // Implied rate will always be set to oracle rate\n            newMarket.lastImpliedRate = newMarket.oracleRate;\n            finalizeMarket(newMarket, currencyId, nToken);\n        }\n\n        // prettier-ignore\n        (\n            /* hasDebt */,\n            /* activeCurrencies */,\n            uint8 assetArrayLength,\n            /* nextSettleTime */\n        ) = nToken.portfolioState.storeAssets(nToken.tokenAddress);\n        BalanceHandler.setBalanceStorageForNToken(\n            nToken.tokenAddress,\n            currencyId,\n            nToken.cashBalance\n        );\n        nTokenHandler.setArrayLengthAndInitializedTime(\n            nToken.tokenAddress,\n            assetArrayLength,\n            nToken.lastInitializedTime\n        );\n\n        emit MarketsInitialized(uint16(currencyId));\n    }\n\n    function finalizeMarket(\n        MarketParameters memory market,\n        uint16 currencyId,\n        nTokenPortfolio memory nToken\n    ) internal {\n        // Always reference the current settlement date\n        uint256 settlementDate = DateTime.getReferenceTime(block.timestamp) + Constants.QUARTER;\n        market.setMarketStorageForInitialize(currencyId, settlementDate);\n\n        BitmapAssetsHandler.addifCashAsset(\n            nToken.tokenAddress,\n            currencyId,\n            market.maturity,\n            nToken.lastInitializedTime,\n            market.totalfCash.neg()\n        );\n    }\n\n    /// @notice Get a list of deployed library addresses (sorted by library name)\n    function getLibInfo() external pure returns (address) {\n        return address(nTokenMintAction);\n    }\n}\n", "sourceMap": "2170:26091:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;", "sourcePath": "contracts/external/actions/InitializeMarketsAction.sol", "type": "library", "deployment": {"address": "0x4b11797d31547bB742d3d5962a0753429e7Ce3A0", "chainid": "42161", "blockHeight": 119787470}}